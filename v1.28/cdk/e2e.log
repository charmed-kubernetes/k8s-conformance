  I0930 12:19:56.132319      23 e2e.go:117] Starting e2e run "71440c4e-ed54-42d9-a001-e68705ce2b0e" on Ginkgo node 1
  Sep 30 12:19:56.168: INFO: Enabling in-tree volume drivers
Running Suite: Kubernetes e2e suite - /usr/local/bin
====================================================
Random Seed: 1696076396 - will randomize all specs

Will run 380 of 7387 specs
------------------------------
[ReportBeforeSuite] 
test/e2e/e2e_test.go:153
[ReportBeforeSuite] PASSED [0.000 seconds]
------------------------------
[SynchronizedBeforeSuite] 
test/e2e/e2e.go:77
  Sep 30 12:19:56.360: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:19:56.362: INFO: Waiting up to 30m0s for all (but 0) nodes to be schedulable
  Sep 30 12:19:56.412: INFO: Waiting up to 5m0s for all daemonsets in namespace 'kube-system' to start
  Sep 30 12:19:56.418: INFO: 5 / 5 pods ready in namespace 'kube-system' in daemonset 'calico-node' (0 seconds elapsed)
  Sep 30 12:19:56.418: INFO: e2e test version: v1.28.2
  Sep 30 12:19:56.421: INFO: kube-apiserver version: v1.28.2
  Sep 30 12:19:56.421: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:19:56.427: INFO: Cluster IP family: ipv4
[SynchronizedBeforeSuite] PASSED [0.066 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]
test/e2e/kubectl/kubectl.go:1641
  STEP: Creating a kubernetes client @ 09/30/23 12:19:56.68
  Sep 30 12:19:56.680: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 12:19:56.681
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:19:56.698
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:19:56.702
  STEP: creating Agnhost RC @ 09/30/23 12:19:56.707
  Sep 30 12:19:56.707: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-7558 create -f -'
  Sep 30 12:19:57.087: INFO: stderr: ""
  Sep 30 12:19:57.087: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 09/30/23 12:19:57.087
  Sep 30 12:19:58.092: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 12:19:58.092: INFO: Found 0 / 1
  Sep 30 12:19:59.091: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 12:19:59.091: INFO: Found 0 / 1
  Sep 30 12:20:00.091: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 12:20:00.091: INFO: Found 0 / 1
  Sep 30 12:20:01.092: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 12:20:01.092: INFO: Found 0 / 1
  Sep 30 12:20:02.092: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 12:20:02.092: INFO: Found 1 / 1
  Sep 30 12:20:02.092: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  STEP: patching all pods @ 09/30/23 12:20:02.092
  Sep 30 12:20:02.096: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 12:20:02.096: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Sep 30 12:20:02.096: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-7558 patch pod agnhost-primary-jj96h -p {"metadata":{"annotations":{"x":"y"}}}'
  Sep 30 12:20:02.180: INFO: stderr: ""
  Sep 30 12:20:02.180: INFO: stdout: "pod/agnhost-primary-jj96h patched\n"
  STEP: checking annotations @ 09/30/23 12:20:02.18
  Sep 30 12:20:02.184: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 12:20:02.184: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Sep 30 12:20:02.184: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7558" for this suite. @ 09/30/23 12:20:02.189
â€¢ [5.516 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]
test/e2e/network/service.go:2224
  STEP: Creating a kubernetes client @ 09/30/23 12:20:02.197
  Sep 30 12:20:02.197: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 12:20:02.198
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:20:02.213
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:20:02.217
  STEP: creating service in namespace services-7103 @ 09/30/23 12:20:02.222
  STEP: creating service affinity-nodeport-transition in namespace services-7103 @ 09/30/23 12:20:02.222
  STEP: creating replication controller affinity-nodeport-transition in namespace services-7103 @ 09/30/23 12:20:02.238
  I0930 12:20:02.246147      23 runners.go:197] Created replication controller with name: affinity-nodeport-transition, namespace: services-7103, replica count: 3
  I0930 12:20:05.296900      23 runners.go:197] affinity-nodeport-transition Pods: 3 out of 3 created, 1 running, 2 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0930 12:20:08.298275      23 runners.go:197] affinity-nodeport-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Sep 30 12:20:08.311: INFO: Creating new exec pod
  Sep 30 12:20:11.332: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7103 exec execpod-affinityqkmxn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport-transition 80'
  Sep 30 12:20:11.529: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport-transition 80\nConnection to affinity-nodeport-transition 80 port [tcp/http] succeeded!\n"
  Sep 30 12:20:11.529: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:20:11.529: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7103 exec execpod-affinityqkmxn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.244 80'
  Sep 30 12:20:11.726: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.244 80\nConnection to 10.152.183.244 80 port [tcp/http] succeeded!\n"
  Sep 30 12:20:11.726: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:20:11.726: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7103 exec execpod-affinityqkmxn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.81.206 32497'
  Sep 30 12:20:11.907: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.81.206 32497\nConnection to 172.31.81.206 32497 port [tcp/*] succeeded!\n"
  Sep 30 12:20:11.907: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:20:11.907: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7103 exec execpod-affinityqkmxn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.39.81 32497'
  Sep 30 12:20:12.091: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.39.81 32497\nConnection to 172.31.39.81 32497 port [tcp/*] succeeded!\n"
  Sep 30 12:20:12.091: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:20:12.101: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7103 exec execpod-affinityqkmxn -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://172.31.31.30:32497/ ; done'
  Sep 30 12:20:12.391: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n"
  Sep 30 12:20:12.391: INFO: stdout: "\naffinity-nodeport-transition-29nlj\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-29nlj\naffinity-nodeport-transition-29nlj\naffinity-nodeport-transition-29nlj\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-29nlj\naffinity-nodeport-transition-djp6j\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-29nlj\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-29nlj\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-djp6j\naffinity-nodeport-transition-djp6j"
  Sep 30 12:20:12.391: INFO: Received response from host: affinity-nodeport-transition-29nlj
  Sep 30 12:20:12.391: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-29nlj
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-29nlj
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-29nlj
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-29nlj
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-djp6j
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-29nlj
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-29nlj
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-djp6j
  Sep 30 12:20:12.392: INFO: Received response from host: affinity-nodeport-transition-djp6j
  Sep 30 12:20:12.401: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7103 exec execpod-affinityqkmxn -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://172.31.31.30:32497/ ; done'
  Sep 30 12:20:12.708: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:32497/\n"
  Sep 30 12:20:12.708: INFO: stdout: "\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8\naffinity-nodeport-transition-qzgt8"
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Received response from host: affinity-nodeport-transition-qzgt8
  Sep 30 12:20:12.708: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 12:20:12.713: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport-transition in namespace services-7103, will wait for the garbage collector to delete the pods @ 09/30/23 12:20:12.726
  Sep 30 12:20:12.789: INFO: Deleting ReplicationController affinity-nodeport-transition took: 7.117334ms
  Sep 30 12:20:12.890: INFO: Terminating ReplicationController affinity-nodeport-transition pods took: 101.136322ms
  STEP: Destroying namespace "services-7103" for this suite. @ 09/30/23 12:20:22.113
â€¢ [19.924 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]
test/e2e/apimachinery/watch.go:191
  STEP: Creating a kubernetes client @ 09/30/23 12:20:22.122
  Sep 30 12:20:22.122: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename watch @ 09/30/23 12:20:22.122
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:20:22.138
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:20:22.142
  STEP: creating a watch on configmaps @ 09/30/23 12:20:22.145
  STEP: creating a new configmap @ 09/30/23 12:20:22.147
  STEP: modifying the configmap once @ 09/30/23 12:20:22.154
  STEP: closing the watch once it receives two notifications @ 09/30/23 12:20:22.162
  Sep 30 12:20:22.162: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-2256  2817f3c3-9bdb-47cc-af3c-bd446bb66a9e 2927 0 2023-09-30 12:20:22 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-09-30 12:20:22 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 12:20:22.162: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-2256  2817f3c3-9bdb-47cc-af3c-bd446bb66a9e 2928 0 2023-09-30 12:20:22 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-09-30 12:20:22 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time, while the watch is closed @ 09/30/23 12:20:22.162
  STEP: creating a new watch on configmaps from the last resource version observed by the first watch @ 09/30/23 12:20:22.171
  STEP: deleting the configmap @ 09/30/23 12:20:22.173
  STEP: Expecting to observe notifications for all changes to the configmap since the first watch closed @ 09/30/23 12:20:22.179
  Sep 30 12:20:22.179: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-2256  2817f3c3-9bdb-47cc-af3c-bd446bb66a9e 2929 0 2023-09-30 12:20:22 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-09-30 12:20:22 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 12:20:22.179: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-2256  2817f3c3-9bdb-47cc-af3c-bd446bb66a9e 2930 0 2023-09-30 12:20:22 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-09-30 12:20:22 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 12:20:22.180: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-2256" for this suite. @ 09/30/23 12:20:22.184
â€¢ [0.070 seconds]
------------------------------
SSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:124
  STEP: Creating a kubernetes client @ 09/30/23 12:20:22.192
  Sep 30 12:20:22.192: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pod-network-test @ 09/30/23 12:20:22.193
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:20:22.208
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:20:22.212
  STEP: Performing setup for networking test in namespace pod-network-test-6981 @ 09/30/23 12:20:22.216
  STEP: creating a selector @ 09/30/23 12:20:22.217
  STEP: Creating the service pods in kubernetes @ 09/30/23 12:20:22.217
  Sep 30 12:20:22.217: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 09/30/23 12:20:44.323
  Sep 30 12:20:46.357: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Sep 30 12:20:46.357: INFO: Going to poll 192.168.10.68 on port 8081 at least 0 times, with a maximum of 39 tries before failing
  Sep 30 12:20:46.361: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 192.168.10.68 8081 | grep -v '^\s*$'] Namespace:pod-network-test-6981 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 12:20:46.361: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:20:46.361: INFO: ExecWithOptions: Clientset creation
  Sep 30 12:20:46.361: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-6981/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+192.168.10.68+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Sep 30 12:20:47.480: INFO: Found all 1 expected endpoints: [netserver-0]
  Sep 30 12:20:47.480: INFO: Going to poll 192.168.35.196 on port 8081 at least 0 times, with a maximum of 39 tries before failing
  Sep 30 12:20:47.483: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 192.168.35.196 8081 | grep -v '^\s*$'] Namespace:pod-network-test-6981 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 12:20:47.483: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:20:47.484: INFO: ExecWithOptions: Clientset creation
  Sep 30 12:20:47.484: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-6981/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+192.168.35.196+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Sep 30 12:20:48.591: INFO: Found all 1 expected endpoints: [netserver-1]
  Sep 30 12:20:48.591: INFO: Going to poll 192.168.224.200 on port 8081 at least 0 times, with a maximum of 39 tries before failing
  Sep 30 12:20:48.596: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 192.168.224.200 8081 | grep -v '^\s*$'] Namespace:pod-network-test-6981 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 12:20:48.596: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:20:48.597: INFO: ExecWithOptions: Clientset creation
  Sep 30 12:20:48.597: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-6981/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+192.168.224.200+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Sep 30 12:20:49.708: INFO: Found all 1 expected endpoints: [netserver-2]
  Sep 30 12:20:49.708: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-6981" for this suite. @ 09/30/23 12:20:49.713
â€¢ [27.527 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:375
  STEP: Creating a kubernetes client @ 09/30/23 12:20:49.72
  Sep 30 12:20:49.720: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:20:49.721
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:20:49.737
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:20:49.741
  STEP: Creating configMap with name projected-configmap-test-volume-046c0a5f-0470-418e-8b4e-ca2563cbe759 @ 09/30/23 12:20:49.745
  STEP: Creating a pod to test consume configMaps @ 09/30/23 12:20:49.75
  STEP: Saw pod success @ 09/30/23 12:20:53.774
  Sep 30 12:20:53.777: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-configmaps-59a2b17d-fec8-42ee-a077-b326c2d9d9fa container projected-configmap-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 12:20:53.804
  Sep 30 12:20:53.821: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-148" for this suite. @ 09/30/23 12:20:53.825
â€¢ [4.112 seconds]
------------------------------
S
------------------------------
[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:268
  STEP: Creating a kubernetes client @ 09/30/23 12:20:53.833
  Sep 30 12:20:53.833: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 12:20:53.833
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:20:53.851
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:20:53.855
  STEP: Creating a pod to test downward api env vars @ 09/30/23 12:20:53.859
  STEP: Saw pod success @ 09/30/23 12:20:57.879
  Sep 30 12:20:57.883: INFO: Trying to get logs from node ip-172-31-31-30 pod downward-api-fb6d052e-684f-478a-aa91-cc03d3f75f25 container dapi-container: <nil>
  STEP: delete the pod @ 09/30/23 12:20:57.891
  Sep 30 12:20:57.907: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1291" for this suite. @ 09/30/23 12:20:57.912
â€¢ [4.085 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] Services should be able to create a functioning NodePort service [Conformance]
test/e2e/network/service.go:1280
  STEP: Creating a kubernetes client @ 09/30/23 12:20:57.918
  Sep 30 12:20:57.918: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 12:20:57.919
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:20:57.935
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:20:57.939
  STEP: creating service nodeport-test with type=NodePort in namespace services-3102 @ 09/30/23 12:20:57.943
  STEP: creating replication controller nodeport-test in namespace services-3102 @ 09/30/23 12:20:57.959
  I0930 12:20:57.965706      23 runners.go:197] Created replication controller with name: nodeport-test, namespace: services-3102, replica count: 2
  I0930 12:21:01.017607      23 runners.go:197] nodeport-test Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Sep 30 12:21:01.017: INFO: Creating new exec pod
  Sep 30 12:21:04.038: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3102 exec execpodstf79 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Sep 30 12:21:04.231: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Sep 30 12:21:04.231: INFO: stdout: ""
  Sep 30 12:21:05.231: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3102 exec execpodstf79 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Sep 30 12:21:05.408: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Sep 30 12:21:05.408: INFO: stdout: ""
  Sep 30 12:21:06.232: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3102 exec execpodstf79 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Sep 30 12:21:06.417: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Sep 30 12:21:06.417: INFO: stdout: ""
  Sep 30 12:21:07.231: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3102 exec execpodstf79 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Sep 30 12:21:07.437: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Sep 30 12:21:07.437: INFO: stdout: "nodeport-test-hc94d"
  Sep 30 12:21:07.437: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3102 exec execpodstf79 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.107 80'
  Sep 30 12:21:07.629: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.107 80\nConnection to 10.152.183.107 80 port [tcp/http] succeeded!\n"
  Sep 30 12:21:07.629: INFO: stdout: "nodeport-test-hc94d"
  Sep 30 12:21:07.629: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3102 exec execpodstf79 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.39.81 31530'
  Sep 30 12:21:07.804: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.39.81 31530\nConnection to 172.31.39.81 31530 port [tcp/*] succeeded!\n"
  Sep 30 12:21:07.804: INFO: stdout: "nodeport-test-hc94d"
  Sep 30 12:21:07.804: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3102 exec execpodstf79 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.81.206 31530'
  Sep 30 12:21:07.987: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.81.206 31530\nConnection to 172.31.81.206 31530 port [tcp/*] succeeded!\n"
  Sep 30 12:21:07.987: INFO: stdout: "nodeport-test-hc94d"
  Sep 30 12:21:07.987: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-3102" for this suite. @ 09/30/23 12:21:07.992
â€¢ [10.080 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]
test/e2e/network/endpointslice.go:207
  STEP: Creating a kubernetes client @ 09/30/23 12:21:08
  Sep 30 12:21:08.000: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename endpointslice @ 09/30/23 12:21:08.001
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:21:08.017
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:21:08.021
  STEP: referencing a single matching pod @ 09/30/23 12:21:13.089
  STEP: referencing matching pods with named port @ 09/30/23 12:21:18.099
  STEP: creating empty Endpoints and EndpointSlices for no matching Pods @ 09/30/23 12:21:23.108
  STEP: recreating EndpointSlices after they've been deleted @ 09/30/23 12:21:28.12
  Sep 30 12:21:28.141: INFO: EndpointSlice for Service endpointslice-7755/example-named-port not found
  Sep 30 12:21:38.153: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-7755" for this suite. @ 09/30/23 12:21:38.158
â€¢ [30.165 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:57
  STEP: Creating a kubernetes client @ 09/30/23 12:21:38.166
  Sep 30 12:21:38.166: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 12:21:38.167
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:21:38.186
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:21:38.19
  STEP: Creating secret with name secret-test-aac8d6e9-fec1-4b94-a2a8-8f17e783c200 @ 09/30/23 12:21:38.194
  STEP: Creating a pod to test consume secrets @ 09/30/23 12:21:38.199
  STEP: Saw pod success @ 09/30/23 12:21:42.222
  Sep 30 12:21:42.226: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-secrets-e23c8d33-eac4-4062-a05e-cbd35da48a92 container secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 12:21:42.233
  Sep 30 12:21:42.249: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8043" for this suite. @ 09/30/23 12:21:42.253
â€¢ [4.093 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]
test/e2e/apps/statefulset.go:854
  STEP: Creating a kubernetes client @ 09/30/23 12:21:42.26
  Sep 30 12:21:42.260: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename statefulset @ 09/30/23 12:21:42.261
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:21:42.276
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:21:42.279
  STEP: Creating service test in namespace statefulset-9295 @ 09/30/23 12:21:42.283
  STEP: Creating statefulset ss in namespace statefulset-9295 @ 09/30/23 12:21:42.288
  Sep 30 12:21:42.299: INFO: Found 0 stateful pods, waiting for 1
  Sep 30 12:21:52.303: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: getting scale subresource @ 09/30/23 12:21:52.311
  STEP: updating a scale subresource @ 09/30/23 12:21:52.315
  STEP: verifying the statefulset Spec.Replicas was modified @ 09/30/23 12:21:52.32
  STEP: Patch a scale subresource @ 09/30/23 12:21:52.324
  STEP: verifying the statefulset Spec.Replicas was modified @ 09/30/23 12:21:52.331
  Sep 30 12:21:52.336: INFO: Deleting all statefulset in ns statefulset-9295
  Sep 30 12:21:52.340: INFO: Scaling statefulset ss to 0
  Sep 30 12:22:02.361: INFO: Waiting for statefulset status.replicas updated to 0
  Sep 30 12:22:02.365: INFO: Deleting statefulset ss
  Sep 30 12:22:02.377: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-9295" for this suite. @ 09/30/23 12:22:02.381
â€¢ [20.130 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]
test/e2e/apimachinery/webhook.go:199
  STEP: Creating a kubernetes client @ 09/30/23 12:22:02.39
  Sep 30 12:22:02.390: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 12:22:02.391
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:22:02.41
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:22:02.413
  STEP: Setting up server cert @ 09/30/23 12:22:02.442
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 12:22:02.8
  STEP: Deploying the webhook pod @ 09/30/23 12:22:02.809
  STEP: Wait for the deployment to be ready @ 09/30/23 12:22:02.822
  Sep 30 12:22:02.830: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 12:22:04.842
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 12:22:04.853
  Sep 30 12:22:05.853: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 09/30/23 12:22:05.861
  STEP: create a pod that should be denied by the webhook @ 09/30/23 12:22:05.883
  STEP: create a pod that causes the webhook to hang @ 09/30/23 12:22:05.899
  STEP: create a configmap that should be denied by the webhook @ 09/30/23 12:22:15.908
  STEP: create a configmap that should be admitted by the webhook @ 09/30/23 12:22:15.968
  STEP: update (PUT) the admitted configmap to a non-compliant one should be rejected by the webhook @ 09/30/23 12:22:15.979
  STEP: update (PATCH) the admitted configmap to a non-compliant one should be rejected by the webhook @ 09/30/23 12:22:15.988
  STEP: create a namespace that bypass the webhook @ 09/30/23 12:22:15.995
  STEP: create a configmap that violates the webhook policy but is in a whitelisted namespace @ 09/30/23 12:22:16.014
  Sep 30 12:22:16.025: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-390" for this suite. @ 09/30/23 12:22:16.075
  STEP: Destroying namespace "webhook-markers-4128" for this suite. @ 09/30/23 12:22:16.083
  STEP: Destroying namespace "exempted-namespace-7254" for this suite. @ 09/30/23 12:22:16.089
â€¢ [13.705 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]
test/e2e/storage/empty_dir_wrapper.go:188
  STEP: Creating a kubernetes client @ 09/30/23 12:22:16.096
  Sep 30 12:22:16.096: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir-wrapper @ 09/30/23 12:22:16.097
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:22:16.113
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:22:16.117
  STEP: Creating 50 configmaps @ 09/30/23 12:22:16.165
  STEP: Creating RC which spawns configmap-volume pods @ 09/30/23 12:22:16.409
  Sep 30 12:22:16.454: INFO: Pod name wrapped-volume-race-a58ca503-6e66-4eac-9f4d-c447ebc76b7e: Found 3 pods out of 5
  Sep 30 12:22:21.461: INFO: Pod name wrapped-volume-race-a58ca503-6e66-4eac-9f4d-c447ebc76b7e: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 09/30/23 12:22:21.461
  STEP: Creating RC which spawns configmap-volume pods @ 09/30/23 12:22:21.484
  Sep 30 12:22:21.501: INFO: Pod name wrapped-volume-race-53beaef4-b34c-457d-adce-a46798fe4317: Found 0 pods out of 5
  Sep 30 12:22:26.511: INFO: Pod name wrapped-volume-race-53beaef4-b34c-457d-adce-a46798fe4317: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 09/30/23 12:22:26.511
  STEP: Creating RC which spawns configmap-volume pods @ 09/30/23 12:22:26.538
  Sep 30 12:22:26.554: INFO: Pod name wrapped-volume-race-b5b5c29f-0158-4b06-b814-fbd9164f12d3: Found 0 pods out of 5
  Sep 30 12:22:31.563: INFO: Pod name wrapped-volume-race-b5b5c29f-0158-4b06-b814-fbd9164f12d3: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 09/30/23 12:22:31.563
  Sep 30 12:22:31.583: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController wrapped-volume-race-b5b5c29f-0158-4b06-b814-fbd9164f12d3 in namespace emptydir-wrapper-8780, will wait for the garbage collector to delete the pods @ 09/30/23 12:22:31.587
  Sep 30 12:22:31.648: INFO: Deleting ReplicationController wrapped-volume-race-b5b5c29f-0158-4b06-b814-fbd9164f12d3 took: 6.62032ms
  Sep 30 12:22:31.749: INFO: Terminating ReplicationController wrapped-volume-race-b5b5c29f-0158-4b06-b814-fbd9164f12d3 pods took: 100.536018ms
  STEP: deleting ReplicationController wrapped-volume-race-53beaef4-b34c-457d-adce-a46798fe4317 in namespace emptydir-wrapper-8780, will wait for the garbage collector to delete the pods @ 09/30/23 12:22:33.149
  Sep 30 12:22:33.211: INFO: Deleting ReplicationController wrapped-volume-race-53beaef4-b34c-457d-adce-a46798fe4317 took: 6.756062ms
  Sep 30 12:22:33.311: INFO: Terminating ReplicationController wrapped-volume-race-53beaef4-b34c-457d-adce-a46798fe4317 pods took: 100.444006ms
  STEP: deleting ReplicationController wrapped-volume-race-a58ca503-6e66-4eac-9f4d-c447ebc76b7e in namespace emptydir-wrapper-8780, will wait for the garbage collector to delete the pods @ 09/30/23 12:22:34.311
  Sep 30 12:22:34.374: INFO: Deleting ReplicationController wrapped-volume-race-a58ca503-6e66-4eac-9f4d-c447ebc76b7e took: 6.61175ms
  Sep 30 12:22:34.475: INFO: Terminating ReplicationController wrapped-volume-race-a58ca503-6e66-4eac-9f4d-c447ebc76b7e pods took: 101.004592ms
  STEP: Cleaning up the configMaps @ 09/30/23 12:22:35.875
  STEP: Destroying namespace "emptydir-wrapper-8780" for this suite. @ 09/30/23 12:22:36.198
â€¢ [20.109 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:109
  STEP: Creating a kubernetes client @ 09/30/23 12:22:36.205
  Sep 30 12:22:36.205: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:22:36.206
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:22:36.223
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:22:36.227
  STEP: Creating configMap with name projected-configmap-test-volume-map-d5605848-a3ec-4458-866c-69ca339acccb @ 09/30/23 12:22:36.231
  STEP: Creating a pod to test consume configMaps @ 09/30/23 12:22:36.235
  STEP: Saw pod success @ 09/30/23 12:22:40.256
  Sep 30 12:22:40.260: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-configmaps-68755859-1eaa-48a8-adf7-7f17aef36e0c container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 12:22:40.267
  Sep 30 12:22:40.284: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8103" for this suite. @ 09/30/23 12:22:40.288
â€¢ [4.089 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]
test/e2e/apimachinery/webhook.go:315
  STEP: Creating a kubernetes client @ 09/30/23 12:22:40.294
  Sep 30 12:22:40.294: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 12:22:40.295
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:22:40.313
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:22:40.317
  STEP: Setting up server cert @ 09/30/23 12:22:40.344
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 12:22:40.585
  STEP: Deploying the webhook pod @ 09/30/23 12:22:40.593
  STEP: Wait for the deployment to be ready @ 09/30/23 12:22:40.607
  Sep 30 12:22:40.615: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 12:22:42.627
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 12:22:42.635
  Sep 30 12:22:43.635: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Sep 30 12:22:43.643: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-5131-crds.webhook.example.com via the AdmissionRegistration API @ 09/30/23 12:22:44.158
  STEP: Creating a custom resource while v1 is storage version @ 09/30/23 12:22:44.177
  STEP: Patching Custom Resource Definition to set v2 as storage @ 09/30/23 12:22:46.224
  STEP: Patching the custom resource while v2 is storage version @ 09/30/23 12:22:46.24
  Sep 30 12:22:46.279: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6729" for this suite. @ 09/30/23 12:22:46.845
  STEP: Destroying namespace "webhook-markers-7250" for this suite. @ 09/30/23 12:22:46.852
â€¢ [6.565 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]
test/e2e/apps/deployment.go:150
  STEP: Creating a kubernetes client @ 09/30/23 12:22:46.86
  Sep 30 12:22:46.860: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename deployment @ 09/30/23 12:22:46.86
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:22:46.877
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:22:46.881
  Sep 30 12:22:46.884: INFO: Creating simple deployment test-new-deployment
  Sep 30 12:22:46.899: INFO: deployment "test-new-deployment" doesn't have the required revision set
  STEP: getting scale subresource @ 09/30/23 12:22:48.916
  STEP: updating a scale subresource @ 09/30/23 12:22:48.92
  STEP: verifying the deployment Spec.Replicas was modified @ 09/30/23 12:22:48.925
  STEP: Patch a scale subresource @ 09/30/23 12:22:48.929
  Sep 30 12:22:48.947: INFO: Deployment "test-new-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=19) "test-new-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7668",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7e5ca654-939a-458c-8885-f363d3104c1e",
      ResourceVersion: (string) (len=4) "4578",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831673366,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)(<nil>),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=28) {
              00000000  7b 22 66 3a 73 70 65 63  22 3a 7b 22 66 3a 72 65  |{"f:spec":{"f:re|
              00000010  70 6c 69 63 61 73 22 3a  7b 7d 7d 7d              |plicas":{}}}|
            }
          }),
          Subresource: (string) (len=5) "scale"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673366,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=619) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |onds":{},"f:revi|
              00000060  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000070  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              00000090  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000a0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000b0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000c0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000d0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000e0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              000000f0  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000100  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000110  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000120  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000130  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000140  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000150  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000160  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000170  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000180  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000190  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001a0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001b0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001c0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001d0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001e0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000001f0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000200  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000210  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000220  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000230  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000240  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000250  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000260  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673367,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(4),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673367,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673367,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673367,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673366,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=72) "ReplicaSet \"test-new-deployment-557759b7c7\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Sep 30 12:22:48.954: INFO: New ReplicaSet "test-new-deployment-557759b7c7" of Deployment "test-new-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-new-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7668",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fa05343c-1834-4aab-9e0f-419bdf75299b",
      ResourceVersion: (string) (len=4) "4582",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831673366,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "4",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "5",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=19) "test-new-deployment",
          UID: (types.UID) (len=36) "7e5ca654-939a-458c-8885-f363d3104c1e",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673367,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673368,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 37 65 35 63 61 36  35 34 2d 39 33 39 61 2d  |\"7e5ca654-939a-|
              00000120  34 35 38 63 2d 38 38 38  35 2d 66 33 36 33 64 33  |458c-8885-f363d3|
              00000130  31 30 34 63 31 65 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |104c1e\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(4),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 12:22:48.960: INFO: Pod "test-new-deployment-557759b7c7-rvffn" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-rvffn",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7668",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "68a03ed3-68d0-4627-bc23-ae168e1dc71c",
      ResourceVersion: (string) (len=4) "4583",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831673368,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fa05343c-1834-4aab-9e0f-419bdf75299b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673368,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 61  30 35 33 34 33 63 2d 31  |d\":\"fa05343c-1|
              00000090  38 33 34 2d 34 61 61 62  2d 39 65 30 66 2d 34 31  |834-4aab-9e0f-41|
              000000a0  39 62 64 66 37 35 32 39  39 62 5c 22 7d 22 3a 7b  |9bdf75299b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-d7b94",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-d7b94",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673368,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 12:22:48.961: INFO: Pod "test-new-deployment-557759b7c7-wwzrh" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-wwzrh",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7668",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0a3cff48-1697-4480-89d9-096de0730ddc",
      ResourceVersion: (string) (len=4) "4571",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831673366,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fa05343c-1834-4aab-9e0f-419bdf75299b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673366,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 61  30 35 33 34 33 63 2d 31  |d\":\"fa05343c-1|
              00000090  38 33 34 2d 34 61 61 62  2d 39 65 30 66 2d 34 31  |834-4aab-9e0f-41|
              000000a0  39 62 64 66 37 35 32 39  39 62 5c 22 7d 22 3a 7b  |9bdf75299b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673367,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=520) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  31 30 2e 39 30 5c 22 7d  |192.168.10.90\"}|
              000001e0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              000001f0  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000200  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-m5ptr",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-m5ptr",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673366,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673367,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673367,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831673366,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=13) "192.168.10.90",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "192.168.10.90"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831673366,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831673367,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://e2e5194f4d67a2f8f7147204e88472dd2c7722487ee3587345c3e56acec09c50",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 12:22:48.963: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-7668" for this suite. @ 09/30/23 12:22:48.967
â€¢ [2.116 seconds]
------------------------------
SS
------------------------------
[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:125
  STEP: Creating a kubernetes client @ 09/30/23 12:22:48.975
  Sep 30 12:22:48.975: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 12:22:48.976
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:22:48.998
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:22:49.002
  STEP: Creating secret with name secret-test-4194c663-375e-42c8-ad07-7d9562fbc02f @ 09/30/23 12:22:49.006
  STEP: Creating a pod to test consume secrets @ 09/30/23 12:22:49.011
  STEP: Saw pod success @ 09/30/23 12:22:53.037
  Sep 30 12:22:53.040: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-secrets-8037e8e8-7c30-4ab5-9f80-7d090b259bb4 container secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 12:22:53.047
  Sep 30 12:22:53.064: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8486" for this suite. @ 09/30/23 12:22:53.069
â€¢ [4.100 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]
test/e2e/apps/statefulset.go:745
  STEP: Creating a kubernetes client @ 09/30/23 12:22:53.077
  Sep 30 12:22:53.077: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename statefulset @ 09/30/23 12:22:53.078
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:22:53.094
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:22:53.099
  STEP: Creating service test in namespace statefulset-4114 @ 09/30/23 12:22:53.103
  STEP: Looking for a node to schedule stateful set and pod @ 09/30/23 12:22:53.109
  STEP: Creating pod with conflicting port in namespace statefulset-4114 @ 09/30/23 12:22:53.117
  STEP: Waiting until pod test-pod will start running in namespace statefulset-4114 @ 09/30/23 12:22:53.127
  STEP: Creating statefulset with conflicting port in namespace statefulset-4114 @ 09/30/23 12:22:55.137
  STEP: Waiting until stateful pod ss-0 will be recreated and deleted at least once in namespace statefulset-4114 @ 09/30/23 12:22:55.143
  Sep 30 12:22:55.161: INFO: Observed stateful pod in namespace: statefulset-4114, name: ss-0, uid: 1bce9a6d-8d5a-4052-8875-6a9bc4b0b0d4, status phase: Pending. Waiting for statefulset controller to delete.
  Sep 30 12:22:55.178: INFO: Observed stateful pod in namespace: statefulset-4114, name: ss-0, uid: 1bce9a6d-8d5a-4052-8875-6a9bc4b0b0d4, status phase: Failed. Waiting for statefulset controller to delete.
  Sep 30 12:22:55.187: INFO: Observed stateful pod in namespace: statefulset-4114, name: ss-0, uid: 1bce9a6d-8d5a-4052-8875-6a9bc4b0b0d4, status phase: Failed. Waiting for statefulset controller to delete.
  Sep 30 12:22:55.192: INFO: Observed delete event for stateful pod ss-0 in namespace statefulset-4114
  STEP: Removing pod with conflicting port in namespace statefulset-4114 @ 09/30/23 12:22:55.192
  STEP: Waiting when stateful pod ss-0 will be recreated in namespace statefulset-4114 and will be in running state @ 09/30/23 12:22:55.209
  Sep 30 12:22:57.219: INFO: Deleting all statefulset in ns statefulset-4114
  Sep 30 12:22:57.224: INFO: Scaling statefulset ss to 0
  Sep 30 12:23:07.242: INFO: Waiting for statefulset status.replicas updated to 0
  Sep 30 12:23:07.247: INFO: Deleting statefulset ss
  Sep 30 12:23:07.262: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-4114" for this suite. @ 09/30/23 12:23:07.266
â€¢ [14.196 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:236
  STEP: Creating a kubernetes client @ 09/30/23 12:23:07.273
  Sep 30 12:23:07.273: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 12:23:07.274
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:23:07.292
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:23:07.296
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 12:23:07.3
  STEP: Saw pod success @ 09/30/23 12:23:11.323
  Sep 30 12:23:11.327: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-c623995b-c4ae-46dc-931d-d89bdf4ddb94 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 12:23:11.334
  Sep 30 12:23:11.351: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-2724" for this suite. @ 09/30/23 12:23:11.356
â€¢ [4.089 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount projected service account token [Conformance]
test/e2e/auth/service_accounts.go:275
  STEP: Creating a kubernetes client @ 09/30/23 12:23:11.363
  Sep 30 12:23:11.363: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename svcaccounts @ 09/30/23 12:23:11.364
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:23:11.38
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:23:11.383
  STEP: Creating a pod to test service account token:  @ 09/30/23 12:23:11.387
  STEP: Saw pod success @ 09/30/23 12:23:15.409
  Sep 30 12:23:15.413: INFO: Trying to get logs from node ip-172-31-31-30 pod test-pod-c1f04cfb-bbf0-42f7-9956-251eaf75d841 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 12:23:15.42
  Sep 30 12:23:15.433: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-8014" for this suite. @ 09/30/23 12:23:15.437
â€¢ [4.083 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]
test/e2e/apimachinery/webhook.go:371
  STEP: Creating a kubernetes client @ 09/30/23 12:23:15.446
  Sep 30 12:23:15.446: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 12:23:15.447
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:23:15.461
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:23:15.465
  STEP: Setting up server cert @ 09/30/23 12:23:15.493
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 12:23:16.072
  STEP: Deploying the webhook pod @ 09/30/23 12:23:16.081
  STEP: Wait for the deployment to be ready @ 09/30/23 12:23:16.093
  Sep 30 12:23:16.101: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 12:23:18.113
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 12:23:18.122
  Sep 30 12:23:19.123: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Setting timeout (1s) shorter than webhook latency (5s) @ 09/30/23 12:23:19.131
  STEP: Registering slow webhook via the AdmissionRegistration API @ 09/30/23 12:23:19.131
  STEP: Request fails when timeout (1s) is shorter than slow webhook latency (5s) @ 09/30/23 12:23:19.149
  STEP: Having no error when timeout is shorter than webhook latency and failure policy is ignore @ 09/30/23 12:23:20.159
  STEP: Registering slow webhook via the AdmissionRegistration API @ 09/30/23 12:23:20.16
  STEP: Having no error when timeout is longer than webhook latency @ 09/30/23 12:23:21.188
  STEP: Registering slow webhook via the AdmissionRegistration API @ 09/30/23 12:23:21.188
  STEP: Having no error when timeout is empty (defaulted to 10s in v1) @ 09/30/23 12:23:26.225
  STEP: Registering slow webhook via the AdmissionRegistration API @ 09/30/23 12:23:26.225
  Sep 30 12:23:31.255: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5899" for this suite. @ 09/30/23 12:23:31.315
  STEP: Destroying namespace "webhook-markers-4564" for this suite. @ 09/30/23 12:23:31.322
â€¢ [15.883 seconds]
------------------------------
SS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:197
  STEP: Creating a kubernetes client @ 09/30/23 12:23:31.33
  Sep 30 12:23:31.330: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 12:23:31.331
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:23:31.346
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:23:31.351
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 09/30/23 12:23:31.354
  STEP: Saw pod success @ 09/30/23 12:23:35.376
  Sep 30 12:23:35.379: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-d9b2bbce-e5b8-4bb4-b39e-c16c50f11d58 container test-container: <nil>
  STEP: delete the pod @ 09/30/23 12:23:35.386
  Sep 30 12:23:35.402: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-248" for this suite. @ 09/30/23 12:23:35.406
â€¢ [4.083 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:168
  STEP: Creating a kubernetes client @ 09/30/23 12:23:35.414
  Sep 30 12:23:35.414: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 12:23:35.415
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:23:35.43
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:23:35.434
  STEP: Creating pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055 @ 09/30/23 12:23:35.438
  STEP: checking the pod's current state and verifying that restartCount is present @ 09/30/23 12:23:37.462
  Sep 30 12:23:37.466: INFO: Initial restart count of pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 is 0
  Sep 30 12:23:37.470: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:39.475: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:41.479: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:43.484: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:45.488: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:47.493: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:49.498: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:51.503: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:53.508: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:55.512: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:57.518: INFO: Get pod liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 in namespace container-probe-7055
  Sep 30 12:23:57.518: INFO: Restart count of pod container-probe-7055/liveness-cf588563-7e2b-430d-bee1-4ab5f095d501 is now 1 (20.051928524s elapsed)
  Sep 30 12:23:57.518: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 12:23:57.523
  STEP: Destroying namespace "container-probe-7055" for this suite. @ 09/30/23 12:23:57.536
â€¢ [22.129 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]
test/e2e/common/node/configmap.go:169
  STEP: Creating a kubernetes client @ 09/30/23 12:23:57.543
  Sep 30 12:23:57.543: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 12:23:57.544
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:23:57.563
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:23:57.566
  STEP: creating a ConfigMap @ 09/30/23 12:23:57.57
  STEP: fetching the ConfigMap @ 09/30/23 12:23:57.575
  STEP: patching the ConfigMap @ 09/30/23 12:23:57.578
  STEP: listing all ConfigMaps in all namespaces with a label selector @ 09/30/23 12:23:57.584
  STEP: deleting the ConfigMap by collection with a label selector @ 09/30/23 12:23:57.588
  STEP: listing all ConfigMaps in test namespace @ 09/30/23 12:23:57.596
  Sep 30 12:23:57.599: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-993" for this suite. @ 09/30/23 12:23:57.603
â€¢ [0.067 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:129
  STEP: Creating a kubernetes client @ 09/30/23 12:23:57.61
  Sep 30 12:23:57.610: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename runtimeclass @ 09/30/23 12:23:57.61
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:23:57.626
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:23:57.63
  Sep 30 12:23:57.657: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-5932" for this suite. @ 09/30/23 12:23:57.668
â€¢ [0.066 seconds]
------------------------------
[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:68
  STEP: Creating a kubernetes client @ 09/30/23 12:23:57.675
  Sep 30 12:23:57.675: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 12:23:57.676
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:23:57.693
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:23:57.696
  STEP: Creating secret with name secret-test-a071d09f-387c-4e74-b525-dbc65229e0f1 @ 09/30/23 12:23:57.701
  STEP: Creating a pod to test consume secrets @ 09/30/23 12:23:57.705
  STEP: Saw pod success @ 09/30/23 12:24:01.729
  Sep 30 12:24:01.733: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-secrets-9a7b7166-3d33-49a8-89ef-6dba0f59d722 container secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 12:24:01.755
  Sep 30 12:24:01.770: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-1322" for this suite. @ 09/30/23 12:24:01.774
â€¢ [4.106 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:194
  STEP: Creating a kubernetes client @ 09/30/23 12:24:01.781
  Sep 30 12:24:01.781: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-publish-openapi @ 09/30/23 12:24:01.782
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:01.799
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:24:01.803
  Sep 30 12:24:01.807: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 09/30/23 12:24:03.241
  Sep 30 12:24:03.241: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-8959 --namespace=crd-publish-openapi-8959 create -f -'
  Sep 30 12:24:03.721: INFO: stderr: ""
  Sep 30 12:24:03.721: INFO: stdout: "e2e-test-crd-publish-openapi-3336-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Sep 30 12:24:03.721: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-8959 --namespace=crd-publish-openapi-8959 delete e2e-test-crd-publish-openapi-3336-crds test-cr'
  Sep 30 12:24:03.818: INFO: stderr: ""
  Sep 30 12:24:03.818: INFO: stdout: "e2e-test-crd-publish-openapi-3336-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  Sep 30 12:24:03.818: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-8959 --namespace=crd-publish-openapi-8959 apply -f -'
  Sep 30 12:24:04.441: INFO: stderr: ""
  Sep 30 12:24:04.441: INFO: stdout: "e2e-test-crd-publish-openapi-3336-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Sep 30 12:24:04.441: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-8959 --namespace=crd-publish-openapi-8959 delete e2e-test-crd-publish-openapi-3336-crds test-cr'
  Sep 30 12:24:04.524: INFO: stderr: ""
  Sep 30 12:24:04.524: INFO: stdout: "e2e-test-crd-publish-openapi-3336-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 09/30/23 12:24:04.524
  Sep 30 12:24:04.524: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-8959 explain e2e-test-crd-publish-openapi-3336-crds'
  Sep 30 12:24:04.670: INFO: stderr: ""
  Sep 30 12:24:04.670: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-at-root.example.com\nKIND:       e2e-test-crd-publish-openapi-3336-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties at root for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  Sep 30 12:24:06.080: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-8959" for this suite. @ 09/30/23 12:24:06.092
â€¢ [4.317 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]
test/e2e/apimachinery/namespace.go:243
  STEP: Creating a kubernetes client @ 09/30/23 12:24:06.099
  Sep 30 12:24:06.099: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename namespaces @ 09/30/23 12:24:06.099
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:06.113
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:24:06.117
  STEP: Creating a test namespace @ 09/30/23 12:24:06.121
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:06.134
  STEP: Creating a pod in the namespace @ 09/30/23 12:24:06.138
  STEP: Waiting for the pod to have running status @ 09/30/23 12:24:06.146
  STEP: Deleting the namespace @ 09/30/23 12:24:08.154
  STEP: Waiting for the namespace to be removed. @ 09/30/23 12:24:08.162
  STEP: Recreating the namespace @ 09/30/23 12:24:19.166
  STEP: Verifying there are no pods in the namespace @ 09/30/23 12:24:19.18
  Sep 30 12:24:19.186: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-3519" for this suite. @ 09/30/23 12:24:19.19
  STEP: Destroying namespace "nsdeletetest-1317" for this suite. @ 09/30/23 12:24:19.197
  Sep 30 12:24:19.201: INFO: Namespace nsdeletetest-1317 was already deleted
  STEP: Destroying namespace "nsdeletetest-4168" for this suite. @ 09/30/23 12:24:19.201
â€¢ [13.108 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]
test/e2e/apps/rc.go:85
  STEP: Creating a kubernetes client @ 09/30/23 12:24:19.209
  Sep 30 12:24:19.209: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replication-controller @ 09/30/23 12:24:19.21
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:19.222
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:24:19.227
  Sep 30 12:24:19.231: INFO: Creating quota "condition-test" that allows only two pods to run in the current namespace
  STEP: Creating rc "condition-test" that asks for more than the allowed pod quota @ 09/30/23 12:24:20.245
  STEP: Checking rc "condition-test" has the desired failure condition set @ 09/30/23 12:24:20.252
  STEP: Scaling down rc "condition-test" to satisfy pod quota @ 09/30/23 12:24:21.261
  Sep 30 12:24:21.271: INFO: Updating replication controller "condition-test"
  STEP: Checking rc "condition-test" has no failure condition set @ 09/30/23 12:24:21.271
  Sep 30 12:24:22.279: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-6124" for this suite. @ 09/30/23 12:24:22.284
â€¢ [3.081 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]
test/e2e/instrumentation/events.go:98
  STEP: Creating a kubernetes client @ 09/30/23 12:24:22.294
  Sep 30 12:24:22.294: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename events @ 09/30/23 12:24:22.295
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:22.307
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:24:22.312
  STEP: creating a test event @ 09/30/23 12:24:22.316
  STEP: listing events in all namespaces @ 09/30/23 12:24:22.322
  STEP: listing events in test namespace @ 09/30/23 12:24:22.333
  STEP: listing events with field selection filtering on source @ 09/30/23 12:24:22.337
  STEP: listing events with field selection filtering on reportingController @ 09/30/23 12:24:22.34
  STEP: getting the test event @ 09/30/23 12:24:22.344
  STEP: patching the test event @ 09/30/23 12:24:22.348
  STEP: getting the test event @ 09/30/23 12:24:22.358
  STEP: updating the test event @ 09/30/23 12:24:22.362
  STEP: getting the test event @ 09/30/23 12:24:22.368
  STEP: deleting the test event @ 09/30/23 12:24:22.372
  STEP: listing events in all namespaces @ 09/30/23 12:24:22.38
  STEP: listing events in test namespace @ 09/30/23 12:24:22.389
  Sep 30 12:24:22.392: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-8339" for this suite. @ 09/30/23 12:24:22.397
â€¢ [0.110 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]
test/e2e/network/hostport.go:63
  STEP: Creating a kubernetes client @ 09/30/23 12:24:22.404
  Sep 30 12:24:22.404: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename hostport @ 09/30/23 12:24:22.405
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:22.418
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:24:22.422
  STEP: Trying to create a pod(pod1) with hostport 54323 and hostIP 127.0.0.1 and expect scheduled @ 09/30/23 12:24:22.431
  STEP: Trying to create another pod(pod2) with hostport 54323 but hostIP 172.31.81.206 on the node which pod1 resides and expect scheduled @ 09/30/23 12:24:24.449
  STEP: Trying to create a third pod(pod3) with hostport 54323, hostIP 172.31.81.206 but use UDP protocol on the node which pod2 resides @ 09/30/23 12:24:26.464
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 127.0.0.1, port: 54323 @ 09/30/23 12:24:40.517
  Sep 30 12:24:40.517: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 --interface 172.31.81.206 http://127.0.0.1:54323/hostname] Namespace:hostport-1709 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 12:24:40.517: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:24:40.518: INFO: ExecWithOptions: Clientset creation
  Sep 30 12:24:40.518: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-1709/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+--interface+172.31.81.206+http%3A%2F%2F127.0.0.1%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 172.31.81.206, port: 54323 @ 09/30/23 12:24:40.645
  Sep 30 12:24:40.645: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 http://172.31.81.206:54323/hostname] Namespace:hostport-1709 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 12:24:40.645: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:24:40.646: INFO: ExecWithOptions: Clientset creation
  Sep 30 12:24:40.646: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-1709/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+http%3A%2F%2F172.31.81.206%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 172.31.81.206, port: 54323 UDP @ 09/30/23 12:24:40.753
  Sep 30 12:24:40.753: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostname | nc -u -w 5 172.31.81.206 54323] Namespace:hostport-1709 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 12:24:40.753: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:24:40.753: INFO: ExecWithOptions: Clientset creation
  Sep 30 12:24:40.753: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-1709/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostname+%7C+nc+-u+-w+5+172.31.81.206+54323&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  Sep 30 12:24:45.850: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "hostport-1709" for this suite. @ 09/30/23 12:24:45.855
â€¢ [23.457 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Conformance]
test/e2e/common/node/sysctl.go:77
  STEP: Creating a kubernetes client @ 09/30/23 12:24:45.862
  Sep 30 12:24:45.862: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sysctl @ 09/30/23 12:24:45.863
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:45.877
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:24:45.881
  STEP: Creating a pod with the kernel.shm_rmid_forced sysctl @ 09/30/23 12:24:45.884
  STEP: Watching for error events or started pod @ 09/30/23 12:24:45.893
  STEP: Waiting for pod completion @ 09/30/23 12:24:47.898
  STEP: Checking that the pod succeeded @ 09/30/23 12:24:49.909
  STEP: Getting logs from the pod @ 09/30/23 12:24:49.909
  STEP: Checking that the sysctl is actually updated @ 09/30/23 12:24:49.928
  Sep 30 12:24:49.928: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-6123" for this suite. @ 09/30/23 12:24:49.932
â€¢ [4.077 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:145
  STEP: Creating a kubernetes client @ 09/30/23 12:24:49.939
  Sep 30 12:24:49.939: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename custom-resource-definition @ 09/30/23 12:24:49.94
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:49.952
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:24:49.956
  Sep 30 12:24:49.960: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:24:50.499: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-9893" for this suite. @ 09/30/23 12:24:50.504
â€¢ [0.572 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:227
  STEP: Creating a kubernetes client @ 09/30/23 12:24:50.512
  Sep 30 12:24:50.512: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 12:24:50.513
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:50.529
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:24:50.532
  STEP: creating the pod @ 09/30/23 12:24:50.536
  STEP: setting up watch @ 09/30/23 12:24:50.536
  STEP: submitting the pod to kubernetes @ 09/30/23 12:24:50.64
  STEP: verifying the pod is in kubernetes @ 09/30/23 12:24:50.649
  STEP: verifying pod creation was observed @ 09/30/23 12:24:50.653
  STEP: deleting the pod gracefully @ 09/30/23 12:24:52.667
  STEP: verifying pod deletion was observed @ 09/30/23 12:24:52.674
  Sep 30 12:24:54.308: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6728" for this suite. @ 09/30/23 12:24:54.313
â€¢ [3.806 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:442
  STEP: Creating a kubernetes client @ 09/30/23 12:24:54.319
  Sep 30 12:24:54.319: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-publish-openapi @ 09/30/23 12:24:54.32
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:24:54.333
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:24:54.337
  STEP: set up a multi version CRD @ 09/30/23 12:24:54.34
  Sep 30 12:24:54.341: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: mark a version not serverd @ 09/30/23 12:24:57.936
  STEP: check the unserved version gets removed @ 09/30/23 12:24:57.959
  STEP: check the other version is not changed @ 09/30/23 12:24:58.876
  Sep 30 12:25:01.745: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2974" for this suite. @ 09/30/23 12:25:01.757
â€¢ [7.444 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]
test/e2e/common/node/configmap.go:93
  STEP: Creating a kubernetes client @ 09/30/23 12:25:01.764
  Sep 30 12:25:01.764: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 12:25:01.765
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:25:01.78
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:25:01.784
  STEP: Creating configMap configmap-7195/configmap-test-8415c98c-3625-4070-ad69-1856f1bd7928 @ 09/30/23 12:25:01.788
  STEP: Creating a pod to test consume configMaps @ 09/30/23 12:25:01.792
  STEP: Saw pod success @ 09/30/23 12:25:05.812
  Sep 30 12:25:05.815: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-configmaps-966447d6-72a2-4810-a99f-7d39b603589d container env-test: <nil>
  STEP: delete the pod @ 09/30/23 12:25:05.835
  Sep 30 12:25:05.857: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7195" for this suite. @ 09/30/23 12:25:05.862
â€¢ [4.105 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:47
  STEP: Creating a kubernetes client @ 09/30/23 12:25:05.87
  Sep 30 12:25:05.870: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 12:25:05.871
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:25:05.887
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:25:05.89
  STEP: Creating secret with name secret-test-57797d99-83d2-4cd1-a2e8-018d718a4267 @ 09/30/23 12:25:05.894
  STEP: Creating a pod to test consume secrets @ 09/30/23 12:25:05.9
  STEP: Saw pod success @ 09/30/23 12:25:09.923
  Sep 30 12:25:09.926: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-secrets-3a276cf2-2be2-4f4b-9de5-4e7a05a14f6a container secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 12:25:09.933
  Sep 30 12:25:09.948: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-4618" for this suite. @ 09/30/23 12:25:09.952
â€¢ [4.088 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]
test/e2e/scheduling/predicates.go:705
  STEP: Creating a kubernetes client @ 09/30/23 12:25:09.959
  Sep 30 12:25:09.959: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-pred @ 09/30/23 12:25:09.96
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:25:09.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:25:09.978
  Sep 30 12:25:09.982: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Sep 30 12:25:09.991: INFO: Waiting for terminating namespaces to be deleted...
  Sep 30 12:25:09.995: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-31-30 before test
  Sep 30 12:25:10.001: INFO: nginx-ingress-controller-kubernetes-worker-cltpj from ingress-nginx-kubernetes-worker started at 2023-09-30 12:14:07 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.001: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 12:25:10.001: INFO: calico-node-cbqpx from kube-system started at 2023-09-30 12:13:54 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.001: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 12:25:10.001: INFO: sonobuoy from sonobuoy started at 2023-09-30 12:19:38 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.001: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Sep 30 12:25:10.001: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-8zjmf from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 12:25:10.001: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 12:25:10.001: INFO: 	Container systemd-logs ready: true, restart count 0
  Sep 30 12:25:10.001: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-39-81 before test
  Sep 30 12:25:10.007: INFO: nginx-ingress-controller-kubernetes-worker-7vl6k from ingress-nginx-kubernetes-worker started at 2023-09-30 12:10:20 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.007: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 12:25:10.007: INFO: calico-node-dk4rw from kube-system started at 2023-09-30 12:10:04 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.007: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 12:25:10.007: INFO: sonobuoy-e2e-job-65ff53df4dd046c8 from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 12:25:10.007: INFO: 	Container e2e ready: true, restart count 0
  Sep 30 12:25:10.007: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 12:25:10.007: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-mghww from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 12:25:10.007: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 12:25:10.007: INFO: 	Container systemd-logs ready: true, restart count 0
  Sep 30 12:25:10.007: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-81-206 before test
  Sep 30 12:25:10.013: INFO: default-http-backend-kubernetes-worker-5c79cc75ff-66tqr from ingress-nginx-kubernetes-worker started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.013: INFO: 	Container default-http-backend-kubernetes-worker ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: nginx-ingress-controller-kubernetes-worker-h7hhr from ingress-nginx-kubernetes-worker started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.013: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: calico-node-6bdbf from kube-system started at 2023-09-30 12:08:56 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.013: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: coredns-59cfb5bf46-6jbqw from kube-system started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.013: INFO: 	Container coredns ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: kube-state-metrics-775d9f4f79-6xd92 from kube-system started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.013: INFO: 	Container kube-state-metrics ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: metrics-server-v0.6.3-69d7fbfdf8-pwwn7 from kube-system started at 2023-09-30 12:09:12 +0000 UTC (2 container statuses recorded)
  Sep 30 12:25:10.013: INFO: 	Container metrics-server ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: 	Container metrics-server-nanny ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: dashboard-metrics-scraper-5dd7cb5fc-lw5nw from kubernetes-dashboard started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.013: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: kubernetes-dashboard-7b899cb9d9-pjt4m from kubernetes-dashboard started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 12:25:10.013: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-87x6p from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 12:25:10.013: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 12:25:10.013: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 09/30/23 12:25:10.013
  STEP: Explicitly delete pod here to free the resource it takes. @ 09/30/23 12:25:12.034
  STEP: Trying to apply a random label on the found node. @ 09/30/23 12:25:12.052
  STEP: verifying the node has the label kubernetes.io/e2e-2275707e-3750-4bc3-83dd-f32c471492f5 95 @ 09/30/23 12:25:12.062
  STEP: Trying to create a pod(pod4) with hostport 54322 and hostIP 0.0.0.0(empty string here) and expect scheduled @ 09/30/23 12:25:12.066
  STEP: Trying to create another pod(pod5) with hostport 54322 but hostIP 172.31.31.30 on the node which pod4 resides and expect not scheduled @ 09/30/23 12:25:14.083
  STEP: removing the label kubernetes.io/e2e-2275707e-3750-4bc3-83dd-f32c471492f5 off the node ip-172-31-31-30 @ 09/30/23 12:30:14.092
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-2275707e-3750-4bc3-83dd-f32c471492f5 @ 09/30/23 12:30:14.105
  Sep 30 12:30:14.109: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-3514" for this suite. @ 09/30/23 12:30:14.113
â€¢ [304.161 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]
test/e2e/apimachinery/discovery.go:125
  STEP: Creating a kubernetes client @ 09/30/23 12:30:14.12
  Sep 30 12:30:14.120: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename discovery @ 09/30/23 12:30:14.121
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:14.139
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:14.142
  STEP: Setting up server cert @ 09/30/23 12:30:14.148
  Sep 30 12:30:14.656: INFO: Checking APIGroup: apiregistration.k8s.io
  Sep 30 12:30:14.658: INFO: PreferredVersion.GroupVersion: apiregistration.k8s.io/v1
  Sep 30 12:30:14.658: INFO: Versions found [{apiregistration.k8s.io/v1 v1}]
  Sep 30 12:30:14.658: INFO: apiregistration.k8s.io/v1 matches apiregistration.k8s.io/v1
  Sep 30 12:30:14.658: INFO: Checking APIGroup: apps
  Sep 30 12:30:14.660: INFO: PreferredVersion.GroupVersion: apps/v1
  Sep 30 12:30:14.660: INFO: Versions found [{apps/v1 v1}]
  Sep 30 12:30:14.660: INFO: apps/v1 matches apps/v1
  Sep 30 12:30:14.660: INFO: Checking APIGroup: events.k8s.io
  Sep 30 12:30:14.661: INFO: PreferredVersion.GroupVersion: events.k8s.io/v1
  Sep 30 12:30:14.662: INFO: Versions found [{events.k8s.io/v1 v1}]
  Sep 30 12:30:14.662: INFO: events.k8s.io/v1 matches events.k8s.io/v1
  Sep 30 12:30:14.662: INFO: Checking APIGroup: authentication.k8s.io
  Sep 30 12:30:14.663: INFO: PreferredVersion.GroupVersion: authentication.k8s.io/v1
  Sep 30 12:30:14.664: INFO: Versions found [{authentication.k8s.io/v1 v1}]
  Sep 30 12:30:14.664: INFO: authentication.k8s.io/v1 matches authentication.k8s.io/v1
  Sep 30 12:30:14.664: INFO: Checking APIGroup: authorization.k8s.io
  Sep 30 12:30:14.665: INFO: PreferredVersion.GroupVersion: authorization.k8s.io/v1
  Sep 30 12:30:14.665: INFO: Versions found [{authorization.k8s.io/v1 v1}]
  Sep 30 12:30:14.665: INFO: authorization.k8s.io/v1 matches authorization.k8s.io/v1
  Sep 30 12:30:14.665: INFO: Checking APIGroup: autoscaling
  Sep 30 12:30:14.667: INFO: PreferredVersion.GroupVersion: autoscaling/v2
  Sep 30 12:30:14.667: INFO: Versions found [{autoscaling/v2 v2} {autoscaling/v1 v1}]
  Sep 30 12:30:14.667: INFO: autoscaling/v2 matches autoscaling/v2
  Sep 30 12:30:14.667: INFO: Checking APIGroup: batch
  Sep 30 12:30:14.668: INFO: PreferredVersion.GroupVersion: batch/v1
  Sep 30 12:30:14.668: INFO: Versions found [{batch/v1 v1}]
  Sep 30 12:30:14.668: INFO: batch/v1 matches batch/v1
  Sep 30 12:30:14.668: INFO: Checking APIGroup: certificates.k8s.io
  Sep 30 12:30:14.670: INFO: PreferredVersion.GroupVersion: certificates.k8s.io/v1
  Sep 30 12:30:14.670: INFO: Versions found [{certificates.k8s.io/v1 v1}]
  Sep 30 12:30:14.670: INFO: certificates.k8s.io/v1 matches certificates.k8s.io/v1
  Sep 30 12:30:14.670: INFO: Checking APIGroup: networking.k8s.io
  Sep 30 12:30:14.671: INFO: PreferredVersion.GroupVersion: networking.k8s.io/v1
  Sep 30 12:30:14.671: INFO: Versions found [{networking.k8s.io/v1 v1}]
  Sep 30 12:30:14.671: INFO: networking.k8s.io/v1 matches networking.k8s.io/v1
  Sep 30 12:30:14.671: INFO: Checking APIGroup: policy
  Sep 30 12:30:14.672: INFO: PreferredVersion.GroupVersion: policy/v1
  Sep 30 12:30:14.673: INFO: Versions found [{policy/v1 v1}]
  Sep 30 12:30:14.673: INFO: policy/v1 matches policy/v1
  Sep 30 12:30:14.673: INFO: Checking APIGroup: rbac.authorization.k8s.io
  Sep 30 12:30:14.674: INFO: PreferredVersion.GroupVersion: rbac.authorization.k8s.io/v1
  Sep 30 12:30:14.674: INFO: Versions found [{rbac.authorization.k8s.io/v1 v1}]
  Sep 30 12:30:14.674: INFO: rbac.authorization.k8s.io/v1 matches rbac.authorization.k8s.io/v1
  Sep 30 12:30:14.674: INFO: Checking APIGroup: storage.k8s.io
  Sep 30 12:30:14.676: INFO: PreferredVersion.GroupVersion: storage.k8s.io/v1
  Sep 30 12:30:14.676: INFO: Versions found [{storage.k8s.io/v1 v1}]
  Sep 30 12:30:14.676: INFO: storage.k8s.io/v1 matches storage.k8s.io/v1
  Sep 30 12:30:14.676: INFO: Checking APIGroup: admissionregistration.k8s.io
  Sep 30 12:30:14.677: INFO: PreferredVersion.GroupVersion: admissionregistration.k8s.io/v1
  Sep 30 12:30:14.677: INFO: Versions found [{admissionregistration.k8s.io/v1 v1}]
  Sep 30 12:30:14.677: INFO: admissionregistration.k8s.io/v1 matches admissionregistration.k8s.io/v1
  Sep 30 12:30:14.677: INFO: Checking APIGroup: apiextensions.k8s.io
  Sep 30 12:30:14.678: INFO: PreferredVersion.GroupVersion: apiextensions.k8s.io/v1
  Sep 30 12:30:14.678: INFO: Versions found [{apiextensions.k8s.io/v1 v1}]
  Sep 30 12:30:14.679: INFO: apiextensions.k8s.io/v1 matches apiextensions.k8s.io/v1
  Sep 30 12:30:14.679: INFO: Checking APIGroup: scheduling.k8s.io
  Sep 30 12:30:14.680: INFO: PreferredVersion.GroupVersion: scheduling.k8s.io/v1
  Sep 30 12:30:14.680: INFO: Versions found [{scheduling.k8s.io/v1 v1}]
  Sep 30 12:30:14.680: INFO: scheduling.k8s.io/v1 matches scheduling.k8s.io/v1
  Sep 30 12:30:14.680: INFO: Checking APIGroup: coordination.k8s.io
  Sep 30 12:30:14.681: INFO: PreferredVersion.GroupVersion: coordination.k8s.io/v1
  Sep 30 12:30:14.681: INFO: Versions found [{coordination.k8s.io/v1 v1}]
  Sep 30 12:30:14.681: INFO: coordination.k8s.io/v1 matches coordination.k8s.io/v1
  Sep 30 12:30:14.681: INFO: Checking APIGroup: node.k8s.io
  Sep 30 12:30:14.683: INFO: PreferredVersion.GroupVersion: node.k8s.io/v1
  Sep 30 12:30:14.683: INFO: Versions found [{node.k8s.io/v1 v1}]
  Sep 30 12:30:14.683: INFO: node.k8s.io/v1 matches node.k8s.io/v1
  Sep 30 12:30:14.683: INFO: Checking APIGroup: discovery.k8s.io
  Sep 30 12:30:14.685: INFO: PreferredVersion.GroupVersion: discovery.k8s.io/v1
  Sep 30 12:30:14.685: INFO: Versions found [{discovery.k8s.io/v1 v1}]
  Sep 30 12:30:14.685: INFO: discovery.k8s.io/v1 matches discovery.k8s.io/v1
  Sep 30 12:30:14.685: INFO: Checking APIGroup: flowcontrol.apiserver.k8s.io
  Sep 30 12:30:14.686: INFO: PreferredVersion.GroupVersion: flowcontrol.apiserver.k8s.io/v1beta3
  Sep 30 12:30:14.686: INFO: Versions found [{flowcontrol.apiserver.k8s.io/v1beta3 v1beta3} {flowcontrol.apiserver.k8s.io/v1beta2 v1beta2}]
  Sep 30 12:30:14.686: INFO: flowcontrol.apiserver.k8s.io/v1beta3 matches flowcontrol.apiserver.k8s.io/v1beta3
  Sep 30 12:30:14.686: INFO: Checking APIGroup: metrics.k8s.io
  Sep 30 12:30:14.688: INFO: PreferredVersion.GroupVersion: metrics.k8s.io/v1beta1
  Sep 30 12:30:14.688: INFO: Versions found [{metrics.k8s.io/v1beta1 v1beta1}]
  Sep 30 12:30:14.688: INFO: metrics.k8s.io/v1beta1 matches metrics.k8s.io/v1beta1
  Sep 30 12:30:14.688: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-6122" for this suite. @ 09/30/23 12:30:14.693
â€¢ [0.578 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]
test/e2e/apimachinery/resource_quota.go:946
  STEP: Creating a kubernetes client @ 09/30/23 12:30:14.699
  Sep 30 12:30:14.699: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 12:30:14.7
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:14.717
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:14.721
  STEP: Creating a ResourceQuota @ 09/30/23 12:30:14.724
  STEP: Getting a ResourceQuota @ 09/30/23 12:30:14.73
  STEP: Listing all ResourceQuotas with LabelSelector @ 09/30/23 12:30:14.734
  STEP: Patching the ResourceQuota @ 09/30/23 12:30:14.737
  STEP: Deleting a Collection of ResourceQuotas @ 09/30/23 12:30:14.744
  STEP: Verifying the deleted ResourceQuota @ 09/30/23 12:30:14.755
  Sep 30 12:30:14.759: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-599" for this suite. @ 09/30/23 12:30:14.763
â€¢ [0.070 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]
test/e2e/auth/service_accounts.go:808
  STEP: Creating a kubernetes client @ 09/30/23 12:30:14.771
  Sep 30 12:30:14.771: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename svcaccounts @ 09/30/23 12:30:14.772
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:14.786
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:14.791
  STEP: Creating ServiceAccount "e2e-sa-sjtfg"  @ 09/30/23 12:30:14.794
  Sep 30 12:30:14.800: INFO: AutomountServiceAccountToken: false
  STEP: Updating ServiceAccount "e2e-sa-sjtfg"  @ 09/30/23 12:30:14.8
  Sep 30 12:30:14.809: INFO: AutomountServiceAccountToken: true
  Sep 30 12:30:14.809: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-6674" for this suite. @ 09/30/23 12:30:14.813
â€¢ [0.048 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]
test/e2e/kubectl/kubectl.go:996
  STEP: Creating a kubernetes client @ 09/30/23 12:30:14.819
  Sep 30 12:30:14.819: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 12:30:14.82
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:14.838
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:14.841
  STEP: create deployment with httpd image @ 09/30/23 12:30:14.845
  Sep 30 12:30:14.845: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6187 create -f -'
  Sep 30 12:30:15.351: INFO: stderr: ""
  Sep 30 12:30:15.351: INFO: stdout: "deployment.apps/httpd-deployment created\n"
  STEP: verify diff finds difference between live and declared image @ 09/30/23 12:30:15.351
  Sep 30 12:30:15.352: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6187 diff -f -'
  Sep 30 12:30:15.534: INFO: rc: 1
  Sep 30 12:30:15.534: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6187 delete -f -'
  Sep 30 12:30:15.613: INFO: stderr: ""
  Sep 30 12:30:15.613: INFO: stdout: "deployment.apps \"httpd-deployment\" deleted\n"
  Sep 30 12:30:15.614: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6187" for this suite. @ 09/30/23 12:30:15.618
â€¢ [0.806 seconds]
------------------------------
SSSSS
------------------------------
[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]
test/e2e/auth/service_accounts.go:647
  STEP: Creating a kubernetes client @ 09/30/23 12:30:15.626
  Sep 30 12:30:15.626: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename svcaccounts @ 09/30/23 12:30:15.626
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:15.645
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:15.649
  STEP: creating a ServiceAccount @ 09/30/23 12:30:15.653
  STEP: watching for the ServiceAccount to be added @ 09/30/23 12:30:15.663
  STEP: patching the ServiceAccount @ 09/30/23 12:30:15.667
  STEP: finding ServiceAccount in list of all ServiceAccounts (by LabelSelector) @ 09/30/23 12:30:15.673
  STEP: deleting the ServiceAccount @ 09/30/23 12:30:15.677
  Sep 30 12:30:15.690: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-526" for this suite. @ 09/30/23 12:30:15.695
â€¢ [0.077 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:61
  STEP: Creating a kubernetes client @ 09/30/23 12:30:15.703
  Sep 30 12:30:15.703: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename containers @ 09/30/23 12:30:15.704
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:15.719
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:15.723
  STEP: Creating a pod to test override arguments @ 09/30/23 12:30:15.727
  STEP: Saw pod success @ 09/30/23 12:30:19.751
  Sep 30 12:30:19.755: INFO: Trying to get logs from node ip-172-31-31-30 pod client-containers-f76c84ec-8ef1-4a00-871d-afae23c66c0a container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 12:30:19.778
  Sep 30 12:30:19.797: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-9859" for this suite. @ 09/30/23 12:30:19.801
â€¢ [4.105 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]
test/e2e/network/ingressclass.go:266
  STEP: Creating a kubernetes client @ 09/30/23 12:30:19.808
  Sep 30 12:30:19.808: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename ingressclass @ 09/30/23 12:30:19.809
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:19.826
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:19.829
  STEP: getting /apis @ 09/30/23 12:30:19.833
  STEP: getting /apis/networking.k8s.io @ 09/30/23 12:30:19.838
  STEP: getting /apis/networking.k8s.iov1 @ 09/30/23 12:30:19.84
  STEP: creating @ 09/30/23 12:30:19.841
  STEP: getting @ 09/30/23 12:30:19.856
  STEP: listing @ 09/30/23 12:30:19.859
  STEP: watching @ 09/30/23 12:30:19.863
  Sep 30 12:30:19.863: INFO: starting watch
  STEP: patching @ 09/30/23 12:30:19.865
  STEP: updating @ 09/30/23 12:30:19.87
  Sep 30 12:30:19.876: INFO: waiting for watch events with expected annotations
  Sep 30 12:30:19.876: INFO: saw patched and updated annotations
  STEP: deleting @ 09/30/23 12:30:19.876
  STEP: deleting a collection @ 09/30/23 12:30:19.891
  Sep 30 12:30:19.908: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingressclass-4182" for this suite. @ 09/30/23 12:30:19.913
â€¢ [0.112 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]
test/e2e/kubectl/kubectl.go:1741
  STEP: Creating a kubernetes client @ 09/30/23 12:30:19.92
  Sep 30 12:30:19.920: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 12:30:19.921
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:19.938
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:19.942
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 09/30/23 12:30:19.945
  Sep 30 12:30:19.945: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-9089 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Sep 30 12:30:20.029: INFO: stderr: ""
  Sep 30 12:30:20.029: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod is running @ 09/30/23 12:30:20.029
  STEP: verifying the pod e2e-test-httpd-pod was created @ 09/30/23 12:30:25.082
  Sep 30 12:30:25.082: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-9089 get pod e2e-test-httpd-pod -o json'
  Sep 30 12:30:25.156: INFO: stderr: ""
  Sep 30 12:30:25.156: INFO: stdout: "{\n    \"apiVersion\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\n        \"creationTimestamp\": \"2023-09-30T12:30:20Z\",\n        \"labels\": {\n            \"run\": \"e2e-test-httpd-pod\"\n        },\n        \"name\": \"e2e-test-httpd-pod\",\n        \"namespace\": \"kubectl-9089\",\n        \"resourceVersion\": \"6652\",\n        \"uid\": \"78a80a4c-6e20-4177-908f-e8a2c3f46aa8\"\n    },\n    \"spec\": {\n        \"containers\": [\n            {\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"e2e-test-httpd-pod\",\n                \"resources\": {},\n                \"terminationMessagePath\": \"/dev/termination-log\",\n                \"terminationMessagePolicy\": \"File\",\n                \"volumeMounts\": [\n                    {\n                        \"mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\",\n                        \"name\": \"kube-api-access-gcjvx\",\n                        \"readOnly\": true\n                    }\n                ]\n            }\n        ],\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"enableServiceLinks\": true,\n        \"nodeName\": \"ip-172-31-31-30\",\n        \"preemptionPolicy\": \"PreemptLowerPriority\",\n        \"priority\": 0,\n        \"restartPolicy\": \"Always\",\n        \"schedulerName\": \"default-scheduler\",\n        \"securityContext\": {},\n        \"serviceAccount\": \"default\",\n        \"serviceAccountName\": \"default\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"tolerations\": [\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/not-ready\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            },\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/unreachable\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            }\n        ],\n        \"volumes\": [\n            {\n                \"name\": \"kube-api-access-gcjvx\",\n                \"projected\": {\n                    \"defaultMode\": 420,\n                    \"sources\": [\n                        {\n                            \"serviceAccountToken\": {\n                                \"expirationSeconds\": 3607,\n                                \"path\": \"token\"\n                            }\n                        },\n                        {\n                            \"configMap\": {\n                                \"items\": [\n                                    {\n                                        \"key\": \"ca.crt\",\n                                        \"path\": \"ca.crt\"\n                                    }\n                                ],\n                                \"name\": \"kube-root-ca.crt\"\n                            }\n                        },\n                        {\n                            \"downwardAPI\": {\n                                \"items\": [\n                                    {\n                                        \"fieldRef\": {\n                                            \"apiVersion\": \"v1\",\n                                            \"fieldPath\": \"metadata.namespace\"\n                                        },\n                                        \"path\": \"namespace\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"status\": {\n        \"conditions\": [\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-09-30T12:30:20Z\",\n                \"status\": \"True\",\n                \"type\": \"Initialized\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-09-30T12:30:21Z\",\n                \"status\": \"True\",\n                \"type\": \"Ready\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-09-30T12:30:21Z\",\n                \"status\": \"True\",\n                \"type\": \"ContainersReady\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-09-30T12:30:20Z\",\n                \"status\": \"True\",\n                \"type\": \"PodScheduled\"\n            }\n        ],\n        \"containerStatuses\": [\n            {\n                \"containerID\": \"containerd://7aa6100e5b28e6fb7591d93e68ee231eea718beab1f5e3934a489a2d020d539b\",\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imageID\": \"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22\",\n                \"lastState\": {},\n                \"name\": \"e2e-test-httpd-pod\",\n                \"ready\": true,\n                \"restartCount\": 0,\n                \"started\": true,\n                \"state\": {\n                    \"running\": {\n                        \"startedAt\": \"2023-09-30T12:30:20Z\"\n                    }\n                }\n            }\n        ],\n        \"hostIP\": \"172.31.31.30\",\n        \"phase\": \"Running\",\n        \"podIP\": \"192.168.10.108\",\n        \"podIPs\": [\n            {\n                \"ip\": \"192.168.10.108\"\n            }\n        ],\n        \"qosClass\": \"BestEffort\",\n        \"startTime\": \"2023-09-30T12:30:20Z\"\n    }\n}\n"
  STEP: replace the image in the pod @ 09/30/23 12:30:25.156
  Sep 30 12:30:25.156: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-9089 replace -f -'
  Sep 30 12:30:25.386: INFO: stderr: ""
  Sep 30 12:30:25.386: INFO: stdout: "pod/e2e-test-httpd-pod replaced\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/busybox:1.29-4 @ 09/30/23 12:30:25.386
  Sep 30 12:30:25.391: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-9089 delete pods e2e-test-httpd-pod'
  Sep 30 12:30:26.900: INFO: stderr: ""
  Sep 30 12:30:26.900: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Sep 30 12:30:26.900: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-9089" for this suite. @ 09/30/23 12:30:26.905
â€¢ [6.991 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:89
  STEP: Creating a kubernetes client @ 09/30/23 12:30:26.914
  Sep 30 12:30:26.915: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 12:30:26.915
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:26.929
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:26.933
  STEP: Creating secret with name secret-test-map-beea30b4-b7cc-488f-8f55-36067ddc11fd @ 09/30/23 12:30:26.936
  STEP: Creating a pod to test consume secrets @ 09/30/23 12:30:26.941
  STEP: Saw pod success @ 09/30/23 12:30:30.963
  Sep 30 12:30:30.967: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-secrets-82322e66-428d-487e-ad81-6d0d1596c75d container secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 12:30:30.974
  Sep 30 12:30:30.992: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-1949" for this suite. @ 09/30/23 12:30:30.999
â€¢ [4.096 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]
test/e2e/apimachinery/resource_quota.go:101
  STEP: Creating a kubernetes client @ 09/30/23 12:30:31.011
  Sep 30 12:30:31.011: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 12:30:31.012
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:31.03
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:31.034
  STEP: Counting existing ResourceQuota @ 09/30/23 12:30:31.038
  STEP: Creating a ResourceQuota @ 09/30/23 12:30:36.042
  STEP: Ensuring resource quota status is calculated @ 09/30/23 12:30:36.048
  STEP: Creating a Service @ 09/30/23 12:30:38.052
  STEP: Creating a NodePort Service @ 09/30/23 12:30:38.068
  STEP: Not allowing a LoadBalancer Service with NodePort to be created that exceeds remaining quota @ 09/30/23 12:30:38.092
  STEP: Ensuring resource quota status captures service creation @ 09/30/23 12:30:38.112
  STEP: Deleting Services @ 09/30/23 12:30:40.117
  STEP: Ensuring resource quota status released usage @ 09/30/23 12:30:40.149
  Sep 30 12:30:42.154: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-3275" for this suite. @ 09/30/23 12:30:42.157
â€¢ [11.152 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]
test/e2e/apps/replica_set.go:143
  STEP: Creating a kubernetes client @ 09/30/23 12:30:42.165
  Sep 30 12:30:42.165: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replicaset @ 09/30/23 12:30:42.165
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:42.182
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:42.186
  STEP: Creating replica set "test-rs" that asks for more than the allowed pod quota @ 09/30/23 12:30:42.19
  Sep 30 12:30:42.204: INFO: Pod name sample-pod: Found 0 pods out of 1
  Sep 30 12:30:47.209: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 09/30/23 12:30:47.209
  STEP: getting scale subresource @ 09/30/23 12:30:47.209
  STEP: updating a scale subresource @ 09/30/23 12:30:47.213
  STEP: verifying the replicaset Spec.Replicas was modified @ 09/30/23 12:30:47.218
  STEP: Patch a scale subresource @ 09/30/23 12:30:47.222
  Sep 30 12:30:47.233: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-5940" for this suite. @ 09/30/23 12:30:47.24
â€¢ [5.084 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replace and Patch tests [Conformance]
test/e2e/apps/replica_set.go:154
  STEP: Creating a kubernetes client @ 09/30/23 12:30:47.25
  Sep 30 12:30:47.250: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replicaset @ 09/30/23 12:30:47.251
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:47.269
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:47.273
  Sep 30 12:30:47.294: INFO: Pod name sample-pod: Found 0 pods out of 1
  Sep 30 12:30:52.298: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 09/30/23 12:30:52.298
  STEP: Scaling up "test-rs" replicaset  @ 09/30/23 12:30:52.299
  Sep 30 12:30:52.309: INFO: Updating replica set "test-rs"
  STEP: patching the ReplicaSet @ 09/30/23 12:30:52.309
  Sep 30 12:30:52.321: INFO: observed ReplicaSet test-rs in namespace replicaset-1977 with ReadyReplicas 1, AvailableReplicas 1
  Sep 30 12:30:52.345: INFO: observed ReplicaSet test-rs in namespace replicaset-1977 with ReadyReplicas 1, AvailableReplicas 1
  Sep 30 12:30:52.366: INFO: observed ReplicaSet test-rs in namespace replicaset-1977 with ReadyReplicas 1, AvailableReplicas 1
  Sep 30 12:30:52.374: INFO: observed ReplicaSet test-rs in namespace replicaset-1977 with ReadyReplicas 1, AvailableReplicas 1
  Sep 30 12:30:54.166: INFO: observed ReplicaSet test-rs in namespace replicaset-1977 with ReadyReplicas 2, AvailableReplicas 2
  Sep 30 12:30:56.621: INFO: observed Replicaset test-rs in namespace replicaset-1977 with ReadyReplicas 3 found true
  Sep 30 12:30:56.621: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-1977" for this suite. @ 09/30/23 12:30:56.626
â€¢ [9.384 seconds]
------------------------------
[sig-network] DNS should support configurable pod DNS nameservers [Conformance]
test/e2e/network/dns.go:407
  STEP: Creating a kubernetes client @ 09/30/23 12:30:56.633
  Sep 30 12:30:56.633: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename dns @ 09/30/23 12:30:56.634
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:56.651
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:56.655
  STEP: Creating a pod with dnsPolicy=None and customized dnsConfig... @ 09/30/23 12:30:56.659
  Sep 30 12:30:56.667: INFO: Created pod &Pod{ObjectMeta:{test-dns-nameservers  dns-2292  ef76c472-2dc5-4805-bb50-f4f3ca979153 6956 0 2023-09-30 12:30:56 +0000 UTC <nil> <nil> map[] map[] [] [] [{e2e.test Update v1 2023-09-30 12:30:56 +0000 UTC FieldsV1 {"f:spec":{"f:containers":{"k:{\"name\":\"agnhost-container\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsConfig":{".":{},"f:nameservers":{},"f:searches":{}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}} }]},Spec:PodSpec{Volumes:[]Volume{Volume{Name:kube-api-access-6pzbq,VolumeSource:VolumeSource{HostPath:nil,EmptyDir:nil,GCEPersistentDisk:nil,AWSElasticBlockStore:nil,GitRepo:nil,Secret:nil,NFS:nil,ISCSI:nil,Glusterfs:nil,PersistentVolumeClaim:nil,RBD:nil,FlexVolume:nil,Cinder:nil,CephFS:nil,Flocker:nil,DownwardAPI:nil,FC:nil,AzureFile:nil,ConfigMap:nil,VsphereVolume:nil,Quobyte:nil,AzureDisk:nil,PhotonPersistentDisk:nil,PortworxVolume:nil,ScaleIO:nil,Projected:&ProjectedVolumeSource{Sources:[]VolumeProjection{VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:nil,ServiceAccountToken:&ServiceAccountTokenProjection{Audience:,ExpirationSeconds:*3607,Path:token,},},VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:&ConfigMapProjection{LocalObjectReference:LocalObjectReference{Name:kube-root-ca.crt,},Items:[]KeyToPath{KeyToPath{Key:ca.crt,Path:ca.crt,Mode:nil,},},Optional:nil,},ServiceAccountToken:nil,},VolumeProjection{Secret:nil,DownwardAPI:&DownwardAPIProjection{Items:[]DownwardAPIVolumeFile{DownwardAPIVolumeFile{Path:namespace,FieldRef:&ObjectFieldSelector{APIVersion:v1,FieldPath:metadata.namespace,},ResourceFieldRef:nil,Mode:nil,},},},ConfigMap:nil,ServiceAccountToken:nil,},},DefaultMode:*420,},StorageOS:nil,CSI:nil,Ephemeral:nil,},},},Containers:[]Container{Container{Name:agnhost-container,Image:registry.k8s.io/e2e-test-images/agnhost:2.45,Command:[],Args:[pause],WorkingDir:,Ports:[]ContainerPort{},Env:[]EnvVar{},Resources:ResourceRequirements{Limits:ResourceList{},Requests:ResourceList{},Claims:[]ResourceClaim{},},VolumeMounts:[]VolumeMount{VolumeMount{Name:kube-api-access-6pzbq,ReadOnly:true,MountPath:/var/run/secrets/kubernetes.io/serviceaccount,SubPath:,MountPropagation:nil,SubPathExpr:,},},LivenessProbe:nil,ReadinessProbe:nil,Lifecycle:nil,TerminationMessagePath:/dev/termination-log,ImagePullPolicy:IfNotPresent,SecurityContext:&SecurityContext{Capabilities:nil,Privileged:nil,SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,ReadOnlyRootFilesystem:nil,AllowPrivilegeEscalation:nil,RunAsGroup:nil,ProcMount:nil,WindowsOptions:nil,SeccompProfile:nil,},Stdin:false,StdinOnce:false,TTY:false,EnvFrom:[]EnvFromSource{},TerminationMessagePolicy:File,VolumeDevices:[]VolumeDevice{},StartupProbe:nil,ResizePolicy:[]ContainerResizePolicy{},RestartPolicy:nil,},},RestartPolicy:Always,TerminationGracePeriodSeconds:*0,ActiveDeadlineSeconds:nil,DNSPolicy:None,NodeSelector:map[string]string{},ServiceAccountName:default,DeprecatedServiceAccount:default,NodeName:,HostNetwork:false,HostPID:false,HostIPC:false,SecurityContext:&PodSecurityContext{SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,SupplementalGroups:[],FSGroup:nil,RunAsGroup:nil,Sysctls:[]Sysctl{},WindowsOptions:nil,FSGroupChangePolicy:nil,SeccompProfile:nil,},ImagePullSecrets:[]LocalObjectReference{},Hostname:,Subdomain:,Affinity:nil,SchedulerName:default-scheduler,InitContainers:[]Container{},AutomountServiceAccountToken:nil,Tolerations:[]Toleration{Toleration{Key:node.kubernetes.io/not-ready,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},Toleration{Key:node.kubernetes.io/unreachable,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},},HostAliases:[]HostAlias{},PriorityClassName:,Priority:*0,DNSConfig:&PodDNSConfig{Nameservers:[1.1.1.1],Searches:[resolv.conf.local],Options:[]PodDNSConfigOption{},},ShareProcessNamespace:nil,ReadinessGates:[]PodReadinessGate{},RuntimeClassName:nil,EnableServiceLinks:*true,PreemptionPolicy:*PreemptLowerPriority,Overhead:ResourceList{},TopologySpreadConstraints:[]TopologySpreadConstraint{},EphemeralContainers:[]EphemeralContainer{},SetHostnameAsFQDN:nil,OS:nil,HostUsers:nil,SchedulingGates:[]PodSchedulingGate{},ResourceClaims:[]PodResourceClaim{},},Status:PodStatus{Phase:Pending,Conditions:[]PodCondition{},Message:,Reason:,HostIP:,PodIP:,StartTime:<nil>,ContainerStatuses:[]ContainerStatus{},QOSClass:BestEffort,InitContainerStatuses:[]ContainerStatus{},NominatedNodeName:,PodIPs:[]PodIP{},EphemeralContainerStatuses:[]ContainerStatus{},Resize:,ResourceClaimStatuses:[]PodResourceClaimStatus{},HostIPs:[]HostIP{},},}
  STEP: Verifying customized DNS suffix list is configured on pod... @ 09/30/23 12:30:58.674
  Sep 30 12:30:58.675: INFO: ExecWithOptions {Command:[/agnhost dns-suffix] Namespace:dns-2292 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 12:30:58.675: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:30:58.675: INFO: ExecWithOptions: Clientset creation
  Sep 30 12:30:58.675: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/dns-2292/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-suffix&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  STEP: Verifying customized DNS server is configured on pod... @ 09/30/23 12:30:58.812
  Sep 30 12:30:58.812: INFO: ExecWithOptions {Command:[/agnhost dns-server-list] Namespace:dns-2292 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 12:30:58.812: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:30:58.813: INFO: ExecWithOptions: Clientset creation
  Sep 30 12:30:58.813: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/dns-2292/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-server-list&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Sep 30 12:30:58.953: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 12:30:58.957: INFO: Deleting pod test-dns-nameservers...
  STEP: Destroying namespace "dns-2292" for this suite. @ 09/30/23 12:30:58.97
â€¢ [2.345 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:67
  STEP: Creating a kubernetes client @ 09/30/23 12:30:58.978
  Sep 30 12:30:58.978: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:30:58.979
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:30:58.996
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:30:59
  STEP: Creating projection with secret that has name projected-secret-test-61f26d24-c0ee-4c37-8dba-7c94f40cf06a @ 09/30/23 12:30:59.004
  STEP: Creating a pod to test consume secrets @ 09/30/23 12:30:59.009
  STEP: Saw pod success @ 09/30/23 12:31:03.032
  Sep 30 12:31:03.036: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-secrets-a3a0419f-a9dd-411e-bf96-191845e36b9d container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 12:31:03.043
  Sep 30 12:31:03.061: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7515" for this suite. @ 09/30/23 12:31:03.065
â€¢ [4.093 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]
test/e2e/storage/subpath.go:69
  STEP: Creating a kubernetes client @ 09/30/23 12:31:03.073
  Sep 30 12:31:03.073: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename subpath @ 09/30/23 12:31:03.074
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:31:03.093
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:31:03.097
  STEP: Setting up data @ 09/30/23 12:31:03.101
  STEP: Creating pod pod-subpath-test-configmap-mcnz @ 09/30/23 12:31:03.11
  STEP: Creating a pod to test atomic-volume-subpath @ 09/30/23 12:31:03.11
  STEP: Saw pod success @ 09/30/23 12:31:27.181
  Sep 30 12:31:27.185: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-subpath-test-configmap-mcnz container test-container-subpath-configmap-mcnz: <nil>
  STEP: delete the pod @ 09/30/23 12:31:27.194
  STEP: Deleting pod pod-subpath-test-configmap-mcnz @ 09/30/23 12:31:27.21
  Sep 30 12:31:27.210: INFO: Deleting pod "pod-subpath-test-configmap-mcnz" in namespace "subpath-4810"
  Sep 30 12:31:27.214: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-4810" for this suite. @ 09/30/23 12:31:27.217
â€¢ [24.152 seconds]
------------------------------
[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]
test/e2e/apps/replica_set.go:111
  STEP: Creating a kubernetes client @ 09/30/23 12:31:27.225
  Sep 30 12:31:27.225: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replicaset @ 09/30/23 12:31:27.226
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:31:27.244
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:31:27.247
  Sep 30 12:31:27.251: INFO: Creating ReplicaSet my-hostname-basic-cb0ae230-6bf0-44a1-b6fd-c800183326e4
  Sep 30 12:31:27.261: INFO: Pod name my-hostname-basic-cb0ae230-6bf0-44a1-b6fd-c800183326e4: Found 0 pods out of 1
  Sep 30 12:31:32.267: INFO: Pod name my-hostname-basic-cb0ae230-6bf0-44a1-b6fd-c800183326e4: Found 1 pods out of 1
  Sep 30 12:31:32.267: INFO: Ensuring a pod for ReplicaSet "my-hostname-basic-cb0ae230-6bf0-44a1-b6fd-c800183326e4" is running
  Sep 30 12:31:32.270: INFO: Pod "my-hostname-basic-cb0ae230-6bf0-44a1-b6fd-c800183326e4-wqx4f" is running (conditions: [{Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-09-30 12:31:27 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-09-30 12:31:29 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-09-30 12:31:29 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-09-30 12:31:27 +0000 UTC Reason: Message:}])
  Sep 30 12:31:32.270: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 09/30/23 12:31:32.27
  Sep 30 12:31:32.283: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-5314" for this suite. @ 09/30/23 12:31:32.288
â€¢ [5.070 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]
test/e2e/common/node/expansion.go:228
  STEP: Creating a kubernetes client @ 09/30/23 12:31:32.297
  Sep 30 12:31:32.297: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename var-expansion @ 09/30/23 12:31:32.298
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:31:32.314
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:31:32.317
  STEP: creating the pod with failed condition @ 09/30/23 12:31:32.321
  STEP: updating the pod @ 09/30/23 12:33:32.33
  Sep 30 12:33:32.844: INFO: Successfully updated pod "var-expansion-27adc1f9-09c3-40b6-8387-7b104d384c90"
  STEP: waiting for pod running @ 09/30/23 12:33:32.844
  STEP: deleting the pod gracefully @ 09/30/23 12:33:34.852
  Sep 30 12:33:34.852: INFO: Deleting pod "var-expansion-27adc1f9-09c3-40b6-8387-7b104d384c90" in namespace "var-expansion-5689"
  Sep 30 12:33:34.861: INFO: Wait up to 5m0s for pod "var-expansion-27adc1f9-09c3-40b6-8387-7b104d384c90" to be fully deleted
  Sep 30 12:34:06.941: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-5689" for this suite. @ 09/30/23 12:34:06.946
â€¢ [154.655 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]
test/e2e/node/taints.go:290
  STEP: Creating a kubernetes client @ 09/30/23 12:34:06.954
  Sep 30 12:34:06.954: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename taint-single-pod @ 09/30/23 12:34:06.955
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:34:06.979
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:34:06.983
  Sep 30 12:34:06.988: INFO: Waiting up to 1m0s for all nodes to be ready
  Sep 30 12:35:07.009: INFO: Waiting for terminating namespaces to be deleted...
  Sep 30 12:35:07.012: INFO: Starting informer...
  STEP: Starting pod... @ 09/30/23 12:35:07.012
  Sep 30 12:35:07.228: INFO: Pod is running on ip-172-31-31-30. Tainting Node
  STEP: Trying to apply a taint on the Node @ 09/30/23 12:35:07.228
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 09/30/23 12:35:07.24
  STEP: Waiting short time to make sure Pod is queued for deletion @ 09/30/23 12:35:07.245
  Sep 30 12:35:07.245: INFO: Pod wasn't evicted. Proceeding
  Sep 30 12:35:07.245: INFO: Removing taint from Node
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 09/30/23 12:35:07.259
  STEP: Waiting some time to make sure that toleration time passed. @ 09/30/23 12:35:07.263
  Sep 30 12:36:22.263: INFO: Pod wasn't evicted. Test successful
  Sep 30 12:36:22.263: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-single-pod-2148" for this suite. @ 09/30/23 12:36:22.268
â€¢ [135.321 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Slow] [Conformance]
test/e2e/common/node/expansion.go:189
  STEP: Creating a kubernetes client @ 09/30/23 12:36:22.277
  Sep 30 12:36:22.277: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename var-expansion @ 09/30/23 12:36:22.277
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:22.294
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:22.297
  Sep 30 12:36:24.320: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 12:36:24.324: INFO: Deleting pod "var-expansion-0e12a862-b577-42ce-8e19-12e9c2b24fd7" in namespace "var-expansion-9956"
  Sep 30 12:36:24.331: INFO: Wait up to 5m0s for pod "var-expansion-0e12a862-b577-42ce-8e19-12e9c2b24fd7" to be fully deleted
  STEP: Destroying namespace "var-expansion-9956" for this suite. @ 09/30/23 12:36:26.339
â€¢ [4.068 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]
test/e2e/apimachinery/field_validation.go:474
  STEP: Creating a kubernetes client @ 09/30/23 12:36:26.346
  Sep 30 12:36:26.346: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename field-validation @ 09/30/23 12:36:26.347
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:26.363
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:26.366
  Sep 30 12:36:26.370: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  W0930 12:36:28.922286      23 warnings.go:70] unknown field "alpha"
  W0930 12:36:28.922323      23 warnings.go:70] unknown field "beta"
  W0930 12:36:28.922329      23 warnings.go:70] unknown field "delta"
  W0930 12:36:28.922335      23 warnings.go:70] unknown field "epsilon"
  W0930 12:36:28.922340      23 warnings.go:70] unknown field "gamma"
  Sep 30 12:36:29.452: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-5415" for this suite. @ 09/30/23 12:36:29.471
â€¢ [3.131 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]
test/e2e/kubectl/kubectl.go:1316
  STEP: Creating a kubernetes client @ 09/30/23 12:36:29.477
  Sep 30 12:36:29.477: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 12:36:29.478
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:29.494
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:29.498
  STEP: validating cluster-info @ 09/30/23 12:36:29.501
  Sep 30 12:36:29.501: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-5272 cluster-info'
  Sep 30 12:36:29.578: INFO: stderr: ""
  Sep 30 12:36:29.578: INFO: stdout: "\x1b[0;32mKubernetes control plane\x1b[0m is running at \x1b[0;33mhttps://10.152.183.1:443\x1b[0m\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n"
  Sep 30 12:36:29.578: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5272" for this suite. @ 09/30/23 12:36:29.582
â€¢ [0.111 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]
test/e2e/common/storage/secrets_volume.go:386
  STEP: Creating a kubernetes client @ 09/30/23 12:36:29.59
  Sep 30 12:36:29.590: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 12:36:29.591
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:29.607
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:29.61
  Sep 30 12:36:29.657: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-1597" for this suite. @ 09/30/23 12:36:29.661
â€¢ [0.077 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:174
  STEP: Creating a kubernetes client @ 09/30/23 12:36:29.668
  Sep 30 12:36:29.668: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:36:29.669
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:29.69
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:29.696
  STEP: Creating configMap with name cm-test-opt-del-6c0e1cd3-0d3c-4f1f-b048-a6c0eb1f45ea @ 09/30/23 12:36:29.706
  STEP: Creating configMap with name cm-test-opt-upd-258e8b34-bc1f-46bb-ab25-147185fdc06c @ 09/30/23 12:36:29.712
  STEP: Creating the pod @ 09/30/23 12:36:29.716
  STEP: Deleting configmap cm-test-opt-del-6c0e1cd3-0d3c-4f1f-b048-a6c0eb1f45ea @ 09/30/23 12:36:31.776
  STEP: Updating configmap cm-test-opt-upd-258e8b34-bc1f-46bb-ab25-147185fdc06c @ 09/30/23 12:36:31.783
  STEP: Creating configMap with name cm-test-opt-create-b2f6bbad-dee9-4e45-827b-c5dba2526a7f @ 09/30/23 12:36:31.788
  STEP: waiting to observe update in volume @ 09/30/23 12:36:31.793
  Sep 30 12:36:35.832: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3492" for this suite. @ 09/30/23 12:36:35.837
â€¢ [6.175 seconds]
------------------------------
SS
------------------------------
[sig-node] Secrets should patch a secret [Conformance]
test/e2e/common/node/secrets.go:154
  STEP: Creating a kubernetes client @ 09/30/23 12:36:35.843
  Sep 30 12:36:35.843: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 12:36:35.844
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:35.86
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:35.863
  STEP: creating a secret @ 09/30/23 12:36:35.867
  STEP: listing secrets in all namespaces to ensure that there are more than zero @ 09/30/23 12:36:35.871
  STEP: patching the secret @ 09/30/23 12:36:35.876
  STEP: deleting the secret using a LabelSelector @ 09/30/23 12:36:35.885
  STEP: listing secrets in all namespaces, searching for label name and value in patch @ 09/30/23 12:36:35.893
  Sep 30 12:36:35.897: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9308" for this suite. @ 09/30/23 12:36:35.902
â€¢ [0.065 seconds]
------------------------------
SS
------------------------------
[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]
test/e2e/network/endpointslice.go:104
  STEP: Creating a kubernetes client @ 09/30/23 12:36:35.908
  Sep 30 12:36:35.908: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename endpointslice @ 09/30/23 12:36:35.909
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:35.925
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:35.928
  Sep 30 12:36:39.984: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-5538" for this suite. @ 09/30/23 12:36:39.988
â€¢ [4.086 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:236
  STEP: Creating a kubernetes client @ 09/30/23 12:36:39.994
  Sep 30 12:36:39.994: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:36:39.995
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:40.012
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:40.015
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 12:36:40.019
  STEP: Saw pod success @ 09/30/23 12:36:44.04
  Sep 30 12:36:44.044: INFO: Trying to get logs from node ip-172-31-39-81 pod downwardapi-volume-93256531-3be5-4145-ad44-8a7f5f0d4c62 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 12:36:44.068
  Sep 30 12:36:44.084: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5891" for this suite. @ 09/30/23 12:36:44.089
â€¢ [4.103 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]
test/e2e/kubectl/kubectl.go:1674
  STEP: Creating a kubernetes client @ 09/30/23 12:36:44.097
  Sep 30 12:36:44.097: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 12:36:44.098
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:44.115
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:44.119
  Sep 30 12:36:44.123: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1849 version'
  Sep 30 12:36:44.191: INFO: stderr: ""
  Sep 30 12:36:44.191: INFO: stdout: "Client Version: v1.28.2\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.28.2\n"
  Sep 30 12:36:44.191: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1849" for this suite. @ 09/30/23 12:36:44.195
â€¢ [0.104 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]
test/e2e/apimachinery/webhook.go:261
  STEP: Creating a kubernetes client @ 09/30/23 12:36:44.202
  Sep 30 12:36:44.202: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 12:36:44.203
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:44.223
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:44.226
  STEP: Setting up server cert @ 09/30/23 12:36:44.253
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 12:36:45.007
  STEP: Deploying the webhook pod @ 09/30/23 12:36:45.016
  STEP: Wait for the deployment to be ready @ 09/30/23 12:36:45.028
  Sep 30 12:36:45.035: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 12:36:47.048
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 12:36:47.058
  Sep 30 12:36:48.058: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating pod webhook via the AdmissionRegistration API @ 09/30/23 12:36:48.066
  STEP: create a pod that should be updated by the webhook @ 09/30/23 12:36:48.084
  Sep 30 12:36:48.105: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-455" for this suite. @ 09/30/23 12:36:48.154
  STEP: Destroying namespace "webhook-markers-5541" for this suite. @ 09/30/23 12:36:48.161
â€¢ [3.966 seconds]
------------------------------
SS
------------------------------
[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:45
  STEP: Creating a kubernetes client @ 09/30/23 12:36:48.168
  Sep 30 12:36:48.168: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 12:36:48.169
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:48.185
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:48.188
  STEP: Creating a pod to test downward api env vars @ 09/30/23 12:36:48.192
  STEP: Saw pod success @ 09/30/23 12:36:52.216
  Sep 30 12:36:52.220: INFO: Trying to get logs from node ip-172-31-31-30 pod downward-api-7459c8d6-47ed-4b2b-a14d-6ede32a31334 container dapi-container: <nil>
  STEP: delete the pod @ 09/30/23 12:36:52.228
  Sep 30 12:36:52.244: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3968" for this suite. @ 09/30/23 12:36:52.249
â€¢ [4.088 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:69
  STEP: Creating a kubernetes client @ 09/30/23 12:36:52.256
  Sep 30 12:36:52.256: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-publish-openapi @ 09/30/23 12:36:52.257
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:52.275
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:52.278
  Sep 30 12:36:52.283: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: kubectl validation (kubectl create and apply) allows request with known and required properties @ 09/30/23 12:36:53.703
  Sep 30 12:36:53.703: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 --namespace=crd-publish-openapi-5823 create -f -'
  Sep 30 12:36:54.212: INFO: stderr: ""
  Sep 30 12:36:54.212: INFO: stdout: "e2e-test-crd-publish-openapi-8114-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Sep 30 12:36:54.212: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 --namespace=crd-publish-openapi-5823 delete e2e-test-crd-publish-openapi-8114-crds test-foo'
  Sep 30 12:36:54.294: INFO: stderr: ""
  Sep 30 12:36:54.294: INFO: stdout: "e2e-test-crd-publish-openapi-8114-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  Sep 30 12:36:54.294: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 --namespace=crd-publish-openapi-5823 apply -f -'
  Sep 30 12:36:54.764: INFO: stderr: ""
  Sep 30 12:36:54.764: INFO: stdout: "e2e-test-crd-publish-openapi-8114-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Sep 30 12:36:54.764: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 --namespace=crd-publish-openapi-5823 delete e2e-test-crd-publish-openapi-8114-crds test-foo'
  Sep 30 12:36:54.843: INFO: stderr: ""
  Sep 30 12:36:54.843: INFO: stdout: "e2e-test-crd-publish-openapi-8114-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  STEP: kubectl validation (kubectl create and apply) rejects request with value outside defined enum values @ 09/30/23 12:36:54.843
  Sep 30 12:36:54.843: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 --namespace=crd-publish-openapi-5823 create -f -'
  Sep 30 12:36:55.096: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request with unknown properties when disallowed by the schema @ 09/30/23 12:36:55.096
  Sep 30 12:36:55.096: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 --namespace=crd-publish-openapi-5823 create -f -'
  Sep 30 12:36:55.365: INFO: rc: 1
  Sep 30 12:36:55.365: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 --namespace=crd-publish-openapi-5823 apply -f -'
  Sep 30 12:36:55.528: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request without required properties @ 09/30/23 12:36:55.528
  Sep 30 12:36:55.528: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 --namespace=crd-publish-openapi-5823 create -f -'
  Sep 30 12:36:55.770: INFO: rc: 1
  Sep 30 12:36:55.770: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 --namespace=crd-publish-openapi-5823 apply -f -'
  Sep 30 12:36:55.938: INFO: rc: 1
  STEP: kubectl explain works to explain CR properties @ 09/30/23 12:36:55.938
  Sep 30 12:36:55.938: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 explain e2e-test-crd-publish-openapi-8114-crds'
  Sep 30 12:36:56.193: INFO: stderr: ""
  Sep 30 12:36:56.193: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-8114-crd\nVERSION:    v1\n\nDESCRIPTION:\n    Foo CRD for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Foo\n\n  status\t<Object>\n    Status of Foo\n\n\n"
  STEP: kubectl explain works to explain CR properties recursively @ 09/30/23 12:36:56.193
  Sep 30 12:36:56.193: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 explain e2e-test-crd-publish-openapi-8114-crds.metadata'
  Sep 30 12:36:56.435: INFO: stderr: ""
  Sep 30 12:36:56.435: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-8114-crd\nVERSION:    v1\n\nFIELD: metadata <ObjectMeta>\n\nDESCRIPTION:\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n    ObjectMeta is metadata that all persisted resources must have, which\n    includes all objects users must create.\n    \nFIELDS:\n  annotations\t<map[string]string>\n    Annotations is an unstructured key value map stored with a resource that may\n    be set by external tools to store and retrieve arbitrary metadata. They are\n    not queryable and should be preserved when modifying objects. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n\n  creationTimestamp\t<string>\n    CreationTimestamp is a timestamp representing the server time when this\n    object was created. It is not guaranteed to be set in happens-before order\n    across separate operations. Clients may not set this value. It is\n    represented in RFC3339 form and is in UTC.\n    \n    Populated by the system. Read-only. Null for lists. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  deletionGracePeriodSeconds\t<integer>\n    Number of seconds allowed for this object to gracefully terminate before it\n    will be removed from the system. Only set when deletionTimestamp is also\n    set. May only be shortened. Read-only.\n\n  deletionTimestamp\t<string>\n    DeletionTimestamp is RFC 3339 date and time at which this resource will be\n    deleted. This field is set by the server when a graceful deletion is\n    requested by the user, and is not directly settable by a client. The\n    resource is expected to be deleted (no longer visible from resource lists,\n    and not reachable by name) after the time in this field, once the finalizers\n    list is empty. As long as the finalizers list contains items, deletion is\n    blocked. Once the deletionTimestamp is set, this value may not be unset or\n    be set further into the future, although it may be shortened or the resource\n    may be deleted prior to this time. For example, a user may request that a\n    pod is deleted in 30 seconds. The Kubelet will react by sending a graceful\n    termination signal to the containers in the pod. After that 30 seconds, the\n    Kubelet will send a hard termination signal (SIGKILL) to the container and\n    after cleanup, remove the pod from the API. In the presence of network\n    partitions, this object may still exist after this timestamp, until an\n    administrator or automated process can determine the resource is fully\n    terminated. If not set, graceful deletion of the object has not been\n    requested.\n    \n    Populated by the system when a graceful deletion is requested. Read-only.\n    More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  finalizers\t<[]string>\n    Must be empty before the object is deleted from the registry. Each entry is\n    an identifier for the responsible component that will remove the entry from\n    the list. If the deletionTimestamp of the object is non-nil, entries in this\n    list can only be removed. Finalizers may be processed and removed in any\n    order.  Order is NOT enforced because it introduces significant risk of\n    stuck finalizers. finalizers is a shared field, any actor with permission\n    can reorder it. If the finalizer list is processed in order, then this can\n    lead to a situation in which the component responsible for the first\n    finalizer in the list is waiting for a signal (field value, external system,\n    or other) produced by a component responsible for a finalizer later in the\n    list, resulting in a deadlock. Without enforced ordering finalizers are free\n    to order amongst themselves and are not vulnerable to ordering changes in\n    the list.\n\n  generateName\t<string>\n    GenerateName is an optional prefix, used by the server, to generate a unique\n    name ONLY IF the Name field has not been provided. If this field is used,\n    the name returned to the client will be different than the name passed. This\n    value will also be combined with a unique suffix. The provided value has the\n    same validation rules as the Name field, and may be truncated by the length\n    of the suffix required to make the value unique on the server.\n    \n    If this field is specified and the generated name exists, the server will\n    return a 409.\n    \n    Applied only if Name is not specified. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n\n  generation\t<integer>\n    A sequence number representing a specific generation of the desired state.\n    Populated by the system. Read-only.\n\n  labels\t<map[string]string>\n    Map of string keys and values that can be used to organize and categorize\n    (scope and select) objects. May match selectors of replication controllers\n    and services. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n\n  managedFields\t<[]ManagedFieldsEntry>\n    ManagedFields maps workflow-id and version to the set of fields that are\n    managed by that workflow. This is mostly for internal housekeeping, and\n    users typically shouldn't need to set or understand this field. A workflow\n    can be the user's name, a controller's name, or the name of a specific apply\n    path like \"ci-cd\". The set of fields is always in the version that the\n    workflow used when modifying the object.\n\n  name\t<string>\n    Name must be unique within a namespace. Is required when creating resources,\n    although some resources may allow a client to request the generation of an\n    appropriate name automatically. Name is primarily intended for creation\n    idempotence and configuration definition. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n\n  namespace\t<string>\n    Namespace defines the space within which each name must be unique. An empty\n    namespace is equivalent to the \"default\" namespace, but \"default\" is the\n    canonical representation. Not all objects are required to be scoped to a\n    namespace - the value of this field for those objects will be empty.\n    \n    Must be a DNS_LABEL. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n\n  ownerReferences\t<[]OwnerReference>\n    List of objects depended by this object. If ALL objects in the list have\n    been deleted, this object will be garbage collected. If this object is\n    managed by a controller, then an entry in this list will point to this\n    controller, with the controller field set to true. There cannot be more than\n    one managing controller.\n\n  resourceVersion\t<string>\n    An opaque value that represents the internal version of this object that can\n    be used by clients to determine when objects have changed. May be used for\n    optimistic concurrency, change detection, and the watch operation on a\n    resource or set of resources. Clients must treat these values as opaque and\n    passed unmodified back to the server. They may only be valid for a\n    particular resource or set of resources.\n    \n    Populated by the system. Read-only. Value must be treated as opaque by\n    clients and . More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\n  selfLink\t<string>\n    Deprecated: selfLink is a legacy read-only field that is no longer populated\n    by the system.\n\n  uid\t<string>\n    UID is the unique in time and space value for this object. It is typically\n    generated by the server on successful creation of a resource and is not\n    allowed to change on PUT operations.\n    \n    Populated by the system. Read-only. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n\n\n"
  Sep 30 12:36:56.435: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 explain e2e-test-crd-publish-openapi-8114-crds.spec'
  Sep 30 12:36:56.586: INFO: stderr: ""
  Sep 30 12:36:56.586: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-8114-crd\nVERSION:    v1\n\nFIELD: spec <Object>\n\nDESCRIPTION:\n    Specification of Foo\n    \nFIELDS:\n  bars\t<[]Object>\n    List of Bars and their specs.\n\n\n"
  Sep 30 12:36:56.586: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 explain e2e-test-crd-publish-openapi-8114-crds.spec.bars'
  Sep 30 12:36:56.860: INFO: stderr: ""
  Sep 30 12:36:56.860: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-8114-crd\nVERSION:    v1\n\nFIELD: bars <[]Object>\n\nDESCRIPTION:\n    List of Bars and their specs.\n    \nFIELDS:\n  age\t<string>\n    Age of Bar.\n\n  bazs\t<[]string>\n    List of Bazs.\n\n  feeling\t<string>\n    Whether Bar is feeling great.\n\n  name\t<string> -required-\n    Name of Bar.\n\n\n"
  STEP: kubectl explain works to return error when explain is called on property that doesn't exist @ 09/30/23 12:36:56.86
  Sep 30 12:36:56.860: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-5823 explain e2e-test-crd-publish-openapi-8114-crds.spec.bars2'
  Sep 30 12:36:57.019: INFO: rc: 1
  Sep 30 12:36:58.427: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-5823" for this suite. @ 09/30/23 12:36:58.439
â€¢ [6.189 seconds]
------------------------------
SS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:104
  STEP: Creating a kubernetes client @ 09/30/23 12:36:58.446
  Sep 30 12:36:58.446: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename runtimeclass @ 09/30/23 12:36:58.447
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:58.463
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:58.467
  Sep 30 12:36:58.493: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-5444" for this suite. @ 09/30/23 12:36:58.503
â€¢ [0.065 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]
test/e2e/apimachinery/watch.go:142
  STEP: Creating a kubernetes client @ 09/30/23 12:36:58.513
  Sep 30 12:36:58.513: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename watch @ 09/30/23 12:36:58.514
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:58.53
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:58.534
  STEP: creating a new configmap @ 09/30/23 12:36:58.537
  STEP: modifying the configmap once @ 09/30/23 12:36:58.542
  STEP: modifying the configmap a second time @ 09/30/23 12:36:58.552
  STEP: deleting the configmap @ 09/30/23 12:36:58.561
  STEP: creating a watch on configmaps from the resource version returned by the first update @ 09/30/23 12:36:58.568
  STEP: Expecting to observe notifications for all changes to the configmap after the first update @ 09/30/23 12:36:58.57
  Sep 30 12:36:58.571: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-1015  0d0f8948-b32c-4b3c-bfaa-be9ec7613165 8344 0 2023-09-30 12:36:58 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2023-09-30 12:36:58 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 12:36:58.571: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-1015  0d0f8948-b32c-4b3c-bfaa-be9ec7613165 8345 0 2023-09-30 12:36:58 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2023-09-30 12:36:58 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 12:36:58.571: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-1015" for this suite. @ 09/30/23 12:36:58.577
â€¢ [0.071 seconds]
------------------------------
[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]
test/e2e/common/node/configmap.go:45
  STEP: Creating a kubernetes client @ 09/30/23 12:36:58.584
  Sep 30 12:36:58.585: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 12:36:58.585
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:36:58.603
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:36:58.608
  STEP: Creating configMap configmap-1768/configmap-test-11517005-64a5-4a36-9ef2-b906c3c5e0fa @ 09/30/23 12:36:58.613
  STEP: Creating a pod to test consume configMaps @ 09/30/23 12:36:58.619
  STEP: Saw pod success @ 09/30/23 12:37:02.644
  Sep 30 12:37:02.648: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-configmaps-57a1c284-6259-4df9-9666-ccbea0144d5a container env-test: <nil>
  STEP: delete the pod @ 09/30/23 12:37:02.656
  Sep 30 12:37:02.672: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1768" for this suite. @ 09/30/23 12:37:02.676
â€¢ [4.099 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events API should delete a collection of events [Conformance]
test/e2e/instrumentation/events.go:207
  STEP: Creating a kubernetes client @ 09/30/23 12:37:02.685
  Sep 30 12:37:02.685: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename events @ 09/30/23 12:37:02.685
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:37:02.702
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:37:02.706
  STEP: Create set of events @ 09/30/23 12:37:02.71
  STEP: get a list of Events with a label in the current namespace @ 09/30/23 12:37:02.728
  STEP: delete a list of events @ 09/30/23 12:37:02.731
  Sep 30 12:37:02.731: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 09/30/23 12:37:02.752
  Sep 30 12:37:02.756: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-8445" for this suite. @ 09/30/23 12:37:02.76
â€¢ [0.082 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:137
  STEP: Creating a kubernetes client @ 09/30/23 12:37:02.768
  Sep 30 12:37:02.768: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 12:37:02.768
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:37:02.785
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:37:02.789
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 09/30/23 12:37:02.793
  STEP: Saw pod success @ 09/30/23 12:37:06.815
  Sep 30 12:37:06.819: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-936e86a9-df22-4fe8-9869-d08007a3e3fe container test-container: <nil>
  STEP: delete the pod @ 09/30/23 12:37:06.827
  Sep 30 12:37:06.843: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-3489" for this suite. @ 09/30/23 12:37:06.847
â€¢ [4.086 seconds]
------------------------------
SSS
------------------------------
[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]
test/e2e/kubectl/kubectl.go:1342
  STEP: Creating a kubernetes client @ 09/30/23 12:37:06.854
  Sep 30 12:37:06.854: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 12:37:06.855
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:37:06.87
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:37:06.874
  Sep 30 12:37:06.878: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4775 create -f -'
  Sep 30 12:37:07.424: INFO: stderr: ""
  Sep 30 12:37:07.424: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  Sep 30 12:37:07.424: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4775 create -f -'
  Sep 30 12:37:07.946: INFO: stderr: ""
  Sep 30 12:37:07.946: INFO: stdout: "service/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 09/30/23 12:37:07.946
  Sep 30 12:37:08.951: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 12:37:08.951: INFO: Found 1 / 1
  Sep 30 12:37:08.951: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Sep 30 12:37:08.954: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 12:37:08.954: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Sep 30 12:37:08.955: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4775 describe pod agnhost-primary-fwgps'
  Sep 30 12:37:09.042: INFO: stderr: ""
  Sep 30 12:37:09.042: INFO: stdout: "Name:             agnhost-primary-fwgps\nNamespace:        kubectl-4775\nPriority:         0\nService Account:  default\nNode:             ip-172-31-31-30/172.31.31.30\nStart Time:       Sat, 30 Sep 2023 12:37:07 +0000\nLabels:           app=agnhost\n                  role=primary\nAnnotations:      <none>\nStatus:           Running\nIP:               192.168.10.121\nIPs:\n  IP:           192.168.10.121\nControlled By:  ReplicationController/agnhost-primary\nContainers:\n  agnhost-primary:\n    Container ID:   containerd://91d0fbf6d04d05251b8a35e18eba7f9111ffa89cdadb7f4f1798b62a6f288127\n    Image:          registry.k8s.io/e2e-test-images/agnhost:2.45\n    Image ID:       registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4\n    Port:           6379/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Sat, 30 Sep 2023 12:37:08 +0000\n    Ready:          True\n    Restart Count:  0\n    Environment:    <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-lsfcl (ro)\nConditions:\n  Type              Status\n  Initialized       True \n  Ready             True \n  ContainersReady   True \n  PodScheduled      True \nVolumes:\n  kube-api-access-lsfcl:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       <nil>\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              <none>\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  2s    default-scheduler  Successfully assigned kubectl-4775/agnhost-primary-fwgps to ip-172-31-31-30\n  Normal  Pulled     1s    kubelet            Container image \"registry.k8s.io/e2e-test-images/agnhost:2.45\" already present on machine\n  Normal  Created    1s    kubelet            Created container agnhost-primary\n  Normal  Started    1s    kubelet            Started container agnhost-primary\n"
  Sep 30 12:37:09.042: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4775 describe rc agnhost-primary'
  Sep 30 12:37:09.130: INFO: stderr: ""
  Sep 30 12:37:09.130: INFO: stdout: "Name:         agnhost-primary\nNamespace:    kubectl-4775\nSelector:     app=agnhost,role=primary\nLabels:       app=agnhost\n              role=primary\nAnnotations:  <none>\nReplicas:     1 current / 1 desired\nPods Status:  1 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  app=agnhost\n           role=primary\n  Containers:\n   agnhost-primary:\n    Image:        registry.k8s.io/e2e-test-images/agnhost:2.45\n    Port:         6379/TCP\n    Host Port:    0/TCP\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nEvents:\n  Type    Reason            Age   From                    Message\n  ----    ------            ----  ----                    -------\n  Normal  SuccessfulCreate  2s    replication-controller  Created pod: agnhost-primary-fwgps\n"
  Sep 30 12:37:09.130: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4775 describe service agnhost-primary'
  Sep 30 12:37:09.218: INFO: stderr: ""
  Sep 30 12:37:09.218: INFO: stdout: "Name:              agnhost-primary\nNamespace:         kubectl-4775\nLabels:            app=agnhost\n                   role=primary\nAnnotations:       <none>\nSelector:          app=agnhost,role=primary\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.152.183.91\nIPs:               10.152.183.91\nPort:              <unset>  6379/TCP\nTargetPort:        agnhost-server/TCP\nEndpoints:         192.168.10.121:6379\nSession Affinity:  None\nEvents:            <none>\n"
  Sep 30 12:37:09.223: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4775 describe node ip-172-31-31-30'
  Sep 30 12:37:09.337: INFO: stderr: ""
  Sep 30 12:37:09.337: INFO: stdout: "Name:               ip-172-31-31-30\nRoles:              <none>\nLabels:             beta.kubernetes.io/arch=amd64\n                    beta.kubernetes.io/os=linux\n                    juju-application=kubernetes-worker\n                    juju-charm=kubernetes-worker\n                    kubernetes.io/arch=amd64\n                    kubernetes.io/hostname=ip-172-31-31-30\n                    kubernetes.io/os=linux\nAnnotations:        node.alpha.kubernetes.io/ttl: 0\n                    volumes.kubernetes.io/controller-managed-attach-detach: true\nCreationTimestamp:  Sat, 30 Sep 2023 12:13:53 +0000\nTaints:             <none>\nUnschedulable:      false\nLease:\n  HolderIdentity:  ip-172-31-31-30\n  AcquireTime:     <unset>\n  RenewTime:       Sat, 30 Sep 2023 12:37:05 +0000\nConditions:\n  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message\n  ----                 ------  -----------------                 ------------------                ------                       -------\n  NetworkUnavailable   False   Sat, 30 Sep 2023 12:14:31 +0000   Sat, 30 Sep 2023 12:14:31 +0000   CalicoIsUp                   Calico is running on this node\n  MemoryPressure       False   Sat, 30 Sep 2023 12:32:51 +0000   Sat, 30 Sep 2023 12:13:53 +0000   KubeletHasSufficientMemory   kubelet has sufficient memory available\n  DiskPressure         False   Sat, 30 Sep 2023 12:32:51 +0000   Sat, 30 Sep 2023 12:13:53 +0000   KubeletHasNoDiskPressure     kubelet has no disk pressure\n  PIDPressure          False   Sat, 30 Sep 2023 12:32:51 +0000   Sat, 30 Sep 2023 12:13:53 +0000   KubeletHasSufficientPID      kubelet has sufficient PID available\n  Ready                True    Sat, 30 Sep 2023 12:32:51 +0000   Sat, 30 Sep 2023 12:14:07 +0000   KubeletReady                 kubelet is posting ready status. AppArmor enabled\nAddresses:\n  InternalIP:  172.31.31.30\n  Hostname:    ip-172-31-31-30\nCapacity:\n  cpu:                8\n  ephemeral-storage:  16069568Ki\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             32213156Ki\n  pods:               110\nAllocatable:\n  cpu:                8\n  ephemeral-storage:  14809713845\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             32110756Ki\n  pods:               110\nSystem Info:\n  Machine ID:                      ec21cd748dd4af0b41aec6e9ee38645e\n  System UUID:                     ec21cd74-8dd4-af0b-41ae-c6e9ee38645e\n  Boot ID:                         bcd0ce05-f30b-484e-bfa7-25cbf3f8c3f3\n  Kernel Version:                  6.2.0-1012-aws\n  OS Image:                        Ubuntu 22.04.3 LTS\n  Operating System:                linux\n  Architecture:                    amd64\n  Container Runtime Version:       containerd://1.6.8\n  Kubelet Version:                 v1.28.2\n  Kube-Proxy Version:              v1.28.2\nNon-terminated Pods:               (5 in total)\n  Namespace                        Name                                                       CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age\n  ---------                        ----                                                       ------------  ----------  ---------------  -------------  ---\n  ingress-nginx-kubernetes-worker  nginx-ingress-controller-kubernetes-worker-zggnm           0 (0%)        0 (0%)      0 (0%)           0 (0%)         111s\n  kube-system                      calico-node-cbqpx                                          250m (3%)     0 (0%)      0 (0%)           0 (0%)         23m\n  kubectl-4775                     agnhost-primary-fwgps                                      0 (0%)        0 (0%)      0 (0%)           0 (0%)         2s\n  sonobuoy                         sonobuoy                                                   0 (0%)        0 (0%)      0 (0%)           0 (0%)         17m\n  sonobuoy                         sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-8zjmf    0 (0%)        0 (0%)      0 (0%)           0 (0%)         17m\nAllocated resources:\n  (Total limits may be over 100 percent, i.e., overcommitted.)\n  Resource           Requests   Limits\n  --------           --------   ------\n  cpu                250m (3%)  0 (0%)\n  memory             0 (0%)     0 (0%)\n  ephemeral-storage  0 (0%)     0 (0%)\n  hugepages-1Gi      0 (0%)     0 (0%)\n  hugepages-2Mi      0 (0%)     0 (0%)\nEvents:\n  Type     Reason                   Age                From             Message\n  ----     ------                   ----               ----             -------\n  Normal   Starting                 23m                kube-proxy       \n  Normal   Starting                 23m                kube-proxy       \n  Normal   Starting                 23m                kubelet          Starting kubelet.\n  Warning  InvalidDiskCapacity      23m                kubelet          invalid capacity 0 on image filesystem\n  Normal   NodeHasSufficientMemory  23m (x2 over 23m)  kubelet          Node ip-172-31-31-30 status is now: NodeHasSufficientMemory\n  Normal   NodeHasNoDiskPressure    23m (x2 over 23m)  kubelet          Node ip-172-31-31-30 status is now: NodeHasNoDiskPressure\n  Normal   NodeHasSufficientPID     23m (x2 over 23m)  kubelet          Node ip-172-31-31-30 status is now: NodeHasSufficientPID\n  Normal   NodeAllocatableEnforced  23m                kubelet          Updated Node Allocatable limit across pods\n  Normal   RegisteredNode           23m                node-controller  Node ip-172-31-31-30 event: Registered Node ip-172-31-31-30 in Controller\n  Normal   NodeReady                23m                kubelet          Node ip-172-31-31-30 status is now: NodeReady\n  Normal   Starting                 23m                kubelet          Starting kubelet.\n  Warning  InvalidDiskCapacity      23m                kubelet          invalid capacity 0 on image filesystem\n  Normal   NodeAllocatableEnforced  23m                kubelet          Updated Node Allocatable limit across pods\n  Normal   NodeHasSufficientMemory  23m                kubelet          Node ip-172-31-31-30 status is now: NodeHasSufficientMemory\n  Normal   NodeHasNoDiskPressure    23m                kubelet          Node ip-172-31-31-30 status is now: NodeHasNoDiskPressure\n  Normal   NodeHasSufficientPID     23m                kubelet          Node ip-172-31-31-30 status is now: NodeHasSufficientPID\n"
  Sep 30 12:37:09.337: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4775 describe namespace kubectl-4775'
  Sep 30 12:37:09.425: INFO: stderr: ""
  Sep 30 12:37:09.425: INFO: stdout: "Name:         kubectl-4775\nLabels:       e2e-framework=kubectl\n              e2e-run=71440c4e-ed54-42d9-a001-e68705ce2b0e\n              kubernetes.io/metadata.name=kubectl-4775\n              pod-security.kubernetes.io/audit=baseline\n              pod-security.kubernetes.io/enforce=baseline\n              pod-security.kubernetes.io/warn=baseline\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nNo LimitRange resource.\n"
  Sep 30 12:37:09.425: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4775" for this suite. @ 09/30/23 12:37:09.429
â€¢ [2.583 seconds]
------------------------------
SSS
------------------------------
[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]
test/e2e/apps/cronjob.go:125
  STEP: Creating a kubernetes client @ 09/30/23 12:37:09.437
  Sep 30 12:37:09.437: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename cronjob @ 09/30/23 12:37:09.438
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:37:09.454
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:37:09.459
  STEP: Creating a ForbidConcurrent cronjob @ 09/30/23 12:37:09.462
  STEP: Ensuring a job is scheduled @ 09/30/23 12:37:09.47
  STEP: Ensuring exactly one is scheduled @ 09/30/23 12:38:01.475
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 09/30/23 12:38:01.479
  STEP: Ensuring no more jobs are scheduled @ 09/30/23 12:38:01.482
  STEP: Removing cronjob @ 09/30/23 12:43:01.495
  Sep 30 12:43:01.501: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-4511" for this suite. @ 09/30/23 12:43:01.505
â€¢ [352.075 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]
test/e2e/storage/csi_inline.go:50
  STEP: Creating a kubernetes client @ 09/30/23 12:43:01.515
  Sep 30 12:43:01.515: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename csiinlinevolumes @ 09/30/23 12:43:01.516
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:01.538
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:01.541
  STEP: creating @ 09/30/23 12:43:01.546
  STEP: getting @ 09/30/23 12:43:01.566
  STEP: listing in namespace @ 09/30/23 12:43:01.57
  STEP: patching @ 09/30/23 12:43:01.574
  STEP: deleting @ 09/30/23 12:43:01.587
  Sep 30 12:43:01.598: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-3465" for this suite. @ 09/30/23 12:43:01.602
â€¢ [0.094 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Pods should get a host IP [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:205
  STEP: Creating a kubernetes client @ 09/30/23 12:43:01.609
  Sep 30 12:43:01.609: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 12:43:01.61
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:01.626
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:01.63
  STEP: creating pod @ 09/30/23 12:43:01.634
  Sep 30 12:43:03.662: INFO: Pod pod-hostip-e4238fa4-73d0-4d31-9302-25a0a65ede1f has hostIP: 172.31.39.81
  Sep 30 12:43:03.663: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-2223" for this suite. @ 09/30/23 12:43:03.667
â€¢ [2.065 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]
test/e2e/apimachinery/field_validation.go:117
  STEP: Creating a kubernetes client @ 09/30/23 12:43:03.676
  Sep 30 12:43:03.676: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename field-validation @ 09/30/23 12:43:03.676
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:03.691
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:03.695
  STEP: apply creating a deployment @ 09/30/23 12:43:03.699
  Sep 30 12:43:03.701: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-3033" for this suite. @ 09/30/23 12:43:03.719
â€¢ [0.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:187
  STEP: Creating a kubernetes client @ 09/30/23 12:43:03.727
  Sep 30 12:43:03.727: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 12:43:03.728
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:03.743
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:03.746
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 09/30/23 12:43:03.751
  STEP: Saw pod success @ 09/30/23 12:43:07.774
  Sep 30 12:43:07.778: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-93a9995d-a244-492f-99f9-f8501910290c container test-container: <nil>
  STEP: delete the pod @ 09/30/23 12:43:07.801
  Sep 30 12:43:07.818: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9325" for this suite. @ 09/30/23 12:43:07.824
â€¢ [4.104 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should delete a collection of services [Conformance]
test/e2e/network/service.go:3552
  STEP: Creating a kubernetes client @ 09/30/23 12:43:07.832
  Sep 30 12:43:07.832: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 12:43:07.833
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:07.85
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:07.855
  STEP: creating a collection of services @ 09/30/23 12:43:07.86
  Sep 30 12:43:07.860: INFO: Creating e2e-svc-a-qgccg
  Sep 30 12:43:07.872: INFO: Creating e2e-svc-b-xrv78
  Sep 30 12:43:07.882: INFO: Creating e2e-svc-c-wlrgr
  STEP: deleting service collection @ 09/30/23 12:43:07.896
  Sep 30 12:43:07.925: INFO: Collection of services has been deleted
  Sep 30 12:43:07.925: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-7000" for this suite. @ 09/30/23 12:43:07.929
â€¢ [0.104 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]
test/e2e/apps/daemon_set.go:177
  STEP: Creating a kubernetes client @ 09/30/23 12:43:07.937
  Sep 30 12:43:07.937: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename daemonsets @ 09/30/23 12:43:07.938
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:07.955
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:07.959
  STEP: Creating simple DaemonSet "daemon-set" @ 09/30/23 12:43:07.984
  STEP: Check that daemon pods launch on every node of the cluster. @ 09/30/23 12:43:07.99
  Sep 30 12:43:07.995: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:07.995: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:07.998: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 12:43:07.998: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 12:43:09.003: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:09.003: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:09.007: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Sep 30 12:43:09.007: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 12:43:10.003: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:10.003: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:10.007: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Sep 30 12:43:10.007: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Stop a daemon pod, check that the daemon pod is revived. @ 09/30/23 12:43:10.011
  Sep 30 12:43:10.029: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:10.029: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:10.034: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Sep 30 12:43:10.034: INFO: Node ip-172-31-81-206 is running 0 daemon pod, expected 1
  Sep 30 12:43:11.038: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:11.038: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:11.044: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Sep 30 12:43:11.044: INFO: Node ip-172-31-81-206 is running 0 daemon pod, expected 1
  Sep 30 12:43:12.039: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:12.039: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:43:12.043: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Sep 30 12:43:12.043: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 09/30/23 12:43:12.046
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-5820, will wait for the garbage collector to delete the pods @ 09/30/23 12:43:12.046
  Sep 30 12:43:12.107: INFO: Deleting DaemonSet.extensions daemon-set took: 6.03449ms
  Sep 30 12:43:12.207: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.323088ms
  Sep 30 12:43:14.111: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 12:43:14.111: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Sep 30 12:43:14.115: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"9514"},"items":null}

  Sep 30 12:43:14.119: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"9515"},"items":null}

  Sep 30 12:43:14.136: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-5820" for this suite. @ 09/30/23 12:43:14.14
â€¢ [6.209 seconds]
------------------------------
SSS
------------------------------
[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]
test/e2e/apps/deployment.go:113
  STEP: Creating a kubernetes client @ 09/30/23 12:43:14.146
  Sep 30 12:43:14.146: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename deployment @ 09/30/23 12:43:14.147
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:14.165
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:14.168
  Sep 30 12:43:14.173: INFO: Creating deployment "test-recreate-deployment"
  Sep 30 12:43:14.178: INFO: Waiting deployment "test-recreate-deployment" to be updated to revision 1
  Sep 30 12:43:14.186: INFO: deployment "test-recreate-deployment" doesn't have the required revision set
  Sep 30 12:43:16.195: INFO: Waiting deployment "test-recreate-deployment" to complete
  Sep 30 12:43:16.198: INFO: Triggering a new rollout for deployment "test-recreate-deployment"
  Sep 30 12:43:16.208: INFO: Updating deployment test-recreate-deployment
  Sep 30 12:43:16.208: INFO: Watching deployment "test-recreate-deployment" to verify that new pods will not run with olds pods
  Sep 30 12:43:16.292: INFO: Deployment "test-recreate-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-recreate-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5722",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7273d5c5-3883-42d4-9655-eeab86eb7eb1",
      ResourceVersion: (string) (len=4) "9569",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831674594,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=570) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |":{"f:type":{}},|
              000000b0  22 66 3a 74 65 6d 70 6c  61 74 65 22 3a 7b 22 66  |"f:template":{"f|
              000000c0  3a 6d 65 74 61 64 61 74  61 22 3a 7b 22 66 3a 6c  |:metadata":{"f:l|
              000000d0  61 62 65 6c 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |abels":{".":{},"|
              000000e0  66 3a 6e 61 6d 65 22 3a  7b 7d 7d 7d 2c 22 66 3a  |f:name":{}}},"f:|
              000000f0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              00000100  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              00000110  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              00000120  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000130  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000140  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000150  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000160  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000170  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000180  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000190  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              000001a0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000001b0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000001c0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000001d0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000001e0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000001f0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              00000200  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000210  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000220  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000230  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=495) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 63 6f 6e 64 69 74 69  6f 6e 73 22 3a 7b 22 2e  |:conditions":{".|
              00000070  22 3a 7b 7d 2c 22 6b 3a  7b 5c 22 74 79 70 65 5c  |":{},"k:{\"type\|
              00000080  22 3a 5c 22 41 76 61 69  6c 61 62 6c 65 5c 22 7d  |":\"Available\"}|
              00000090  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |":{".":{},"f:las|
              000000a0  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              000000b0  3a 7b 7d 2c 22 66 3a 6c  61 73 74 55 70 64 61 74  |:{},"f:lastUpdat|
              000000c0  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6d 65 73  |eTime":{},"f:mes|
              000000d0  73 61 67 65 22 3a 7b 7d  2c 22 66 3a 72 65 61 73  |sage":{},"f:reas|
              000000e0  6f 6e 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |on":{},"f:status|
              000000f0  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000100  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000110  22 50 72 6f 67 72 65 73  73 69 6e 67 5c 22 7d 22  |"Progressing\"}"|
              00000120  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              00000130  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000140  7b 7d 2c 22 66 3a 6c 61  73 74 55 70 64 61 74 65  |{},"f:lastUpdate|
              00000150  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6d 65 73 73  |Time":{},"f:mess|
              00000160  61 67 65 22 3a 7b 7d 2c  22 66 3a 72 65 61 73 6f  |age":{},"f:reaso|
              00000170  6e 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |n":{},"f:status"|
              00000180  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000190  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              000001a0  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              000001b0  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 75  |eplicas":{},"f:u|
              000001c0  6e 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |navailableReplic|
              000001d0  61 73 22 3a 7b 7d 2c 22  66 3a 75 70 64 61 74 65  |as":{},"f:update|
              000001e0  64 52 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 7d     |dReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=8) "Recreate",
        RollingUpdate: (*v1.RollingUpdateDeployment)(<nil>)
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 1,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674594,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=63) "ReplicaSet \"test-recreate-deployment-76fb77d45\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Sep 30 12:43:16.297: INFO: New ReplicaSet "test-recreate-deployment-76fb77d45" of Deployment "test-recreate-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5722",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "acf3c4c6-c085-47e8-b0f8-44b3cf3997b5",
      ResourceVersion: (string) (len=4) "9567",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831674596,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "7273d5c5-3883-42d4-9655-eeab86eb7eb1",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 37 32 37 33 64 35  63 35 2d 33 38 38 33 2d  |\"7273d5c5-3883-|
              00000120  34 32 64 34 2d 39 36 35  35 2d 65 65 61 62 38 36  |42d4-9655-eeab86|
              00000130  65 62 37 65 62 31 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |eb7eb1\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 12:43:16.298: INFO: All old ReplicaSets of Deployment "test-recreate-deployment":
  Sep 30 12:43:16.298: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-dd4bc9d6d",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5722",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4ca49fda-a476-4c8b-8813-44a59ae2b374",
      ResourceVersion: (string) (len=4) "9557",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831674594,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d",
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "7273d5c5-3883-42d4-9655-eeab86eb7eb1",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 37 32 37 33 64 35  63 35 2d 33 38 38 33 2d  |\"7273d5c5-3883-|
              00000120  34 32 64 34 2d 39 36 35  35 2d 65 65 61 62 38 36  |42d4-9655-eeab86|
              00000130  65 62 37 65 62 31 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |eb7eb1\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 12:43:16.305: INFO: Pod "test-recreate-deployment-76fb77d45-n2k7c" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-recreate-deployment-76fb77d45-n2k7c",
      GenerateName: (string) (len=35) "test-recreate-deployment-76fb77d45-",
      Namespace: (string) (len=15) "deployment-5722",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "169ce7ba-2116-46bb-a748-e614ecbdb74e",
      ResourceVersion: (string) (len=4) "9570",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831674596,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45",
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
          UID: (types.UID) (len=36) "acf3c4c6-c085-47e8-b0f8-44b3cf3997b5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  66 33 63 34 63 36 2d 63  |d\":\"acf3c4c6-c|
              00000090  30 38 35 2d 34 37 65 38  2d 62 30 66 38 2d 34 34  |085-47e8-b0f8-44|
              000000a0  62 33 63 66 33 39 39 37  62 35 5c 22 7d 22 3a 7b  |b3cf3997b5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-sv5cn",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-sv5cn",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831674596,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831674596,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 12:43:16.306: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5722" for this suite. @ 09/30/23 12:43:16.311
â€¢ [2.172 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:222
  STEP: Creating a kubernetes client @ 09/30/23 12:43:16.319
  Sep 30 12:43:16.319: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:43:16.32
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:16.342
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:16.346
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 12:43:16.35
  STEP: Saw pod success @ 09/30/23 12:43:20.37
  Sep 30 12:43:20.374: INFO: Trying to get logs from node ip-172-31-39-81 pod downwardapi-volume-43fa1ad9-4cbe-4cc5-a03d-74b876a8d263 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 12:43:20.398
  Sep 30 12:43:20.412: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6952" for this suite. @ 09/30/23 12:43:20.416
â€¢ [4.103 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]
test/e2e/network/dns.go:117
  STEP: Creating a kubernetes client @ 09/30/23 12:43:20.424
  Sep 30 12:43:20.424: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename dns @ 09/30/23 12:43:20.424
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:20.442
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:20.445
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-9031.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-1.dns-test-service.dns-9031.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/wheezy_hosts@dns-querier-1;sleep 1; done
   @ 09/30/23 12:43:20.45
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-9031.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-1.dns-test-service.dns-9031.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/jessie_hosts@dns-querier-1;sleep 1; done
   @ 09/30/23 12:43:20.45
  STEP: creating a pod to probe /etc/hosts @ 09/30/23 12:43:20.45
  STEP: submitting the pod to kubernetes @ 09/30/23 12:43:20.45
  STEP: retrieving the pod @ 09/30/23 12:43:28.484
  STEP: looking for the results for each expected name from probers @ 09/30/23 12:43:28.488
  Sep 30 12:43:28.507: INFO: DNS probes using dns-9031/dns-test-b80cf1c5-a67c-46d0-8f28-9cffc0fa25b2 succeeded

  Sep 30 12:43:28.507: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 12:43:28.512
  STEP: Destroying namespace "dns-9031" for this suite. @ 09/30/23 12:43:28.523
â€¢ [8.106 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve multiport endpoints from pods  [Conformance]
test/e2e/network/service.go:846
  STEP: Creating a kubernetes client @ 09/30/23 12:43:28.53
  Sep 30 12:43:28.530: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 12:43:28.531
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:28.547
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:28.551
  STEP: creating service multi-endpoint-test in namespace services-1233 @ 09/30/23 12:43:28.555
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1233 to expose endpoints map[] @ 09/30/23 12:43:28.564
  Sep 30 12:43:28.568: INFO: Failed go get Endpoints object: endpoints "multi-endpoint-test" not found
  Sep 30 12:43:29.578: INFO: successfully validated that service multi-endpoint-test in namespace services-1233 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-1233 @ 09/30/23 12:43:29.579
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1233 to expose endpoints map[pod1:[100]] @ 09/30/23 12:43:31.6
  Sep 30 12:43:31.611: INFO: successfully validated that service multi-endpoint-test in namespace services-1233 exposes endpoints map[pod1:[100]]
  STEP: Creating pod pod2 in namespace services-1233 @ 09/30/23 12:43:31.611
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1233 to expose endpoints map[pod1:[100] pod2:[101]] @ 09/30/23 12:43:33.63
  Sep 30 12:43:33.648: INFO: successfully validated that service multi-endpoint-test in namespace services-1233 exposes endpoints map[pod1:[100] pod2:[101]]
  STEP: Checking if the Service forwards traffic to pods @ 09/30/23 12:43:33.648
  Sep 30 12:43:33.648: INFO: Creating new exec pod
  Sep 30 12:43:36.664: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-1233 exec execpodk6pdr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 80'
  Sep 30 12:43:36.830: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 80\nConnection to multi-endpoint-test 80 port [tcp/http] succeeded!\n"
  Sep 30 12:43:36.830: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:43:36.830: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-1233 exec execpodk6pdr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.169 80'
  Sep 30 12:43:37.013: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.169 80\nConnection to 10.152.183.169 80 port [tcp/http] succeeded!\n"
  Sep 30 12:43:37.013: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:43:37.013: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-1233 exec execpodk6pdr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 81'
  Sep 30 12:43:37.208: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 81\nConnection to multi-endpoint-test 81 port [tcp/*] succeeded!\n"
  Sep 30 12:43:37.208: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:43:37.208: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-1233 exec execpodk6pdr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.169 81'
  Sep 30 12:43:37.395: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.169 81\nConnection to 10.152.183.169 81 port [tcp/*] succeeded!\n"
  Sep 30 12:43:37.395: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-1233 @ 09/30/23 12:43:37.395
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1233 to expose endpoints map[pod2:[101]] @ 09/30/23 12:43:37.408
  Sep 30 12:43:37.422: INFO: successfully validated that service multi-endpoint-test in namespace services-1233 exposes endpoints map[pod2:[101]]
  STEP: Deleting pod pod2 in namespace services-1233 @ 09/30/23 12:43:37.422
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1233 to expose endpoints map[] @ 09/30/23 12:43:37.437
  Sep 30 12:43:37.446: INFO: successfully validated that service multi-endpoint-test in namespace services-1233 exposes endpoints map[]
  Sep 30 12:43:37.446: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1233" for this suite. @ 09/30/23 12:43:37.468
â€¢ [8.945 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]
test/e2e/common/node/init_container.go:459
  STEP: Creating a kubernetes client @ 09/30/23 12:43:37.475
  Sep 30 12:43:37.475: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename init-container @ 09/30/23 12:43:37.476
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:37.494
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:37.498
  STEP: creating the pod @ 09/30/23 12:43:37.501
  Sep 30 12:43:37.502: INFO: PodSpec: initContainers in spec.initContainers
  Sep 30 12:43:40.684: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-4141" for this suite. @ 09/30/23 12:43:40.689
â€¢ [3.219 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:236
  STEP: Creating a kubernetes client @ 09/30/23 12:43:40.697
  Sep 30 12:43:40.697: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-publish-openapi @ 09/30/23 12:43:40.698
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:40.713
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:40.717
  Sep 30 12:43:40.721: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 09/30/23 12:43:42.168
  Sep 30 12:43:42.168: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2876 --namespace=crd-publish-openapi-2876 create -f -'
  Sep 30 12:43:42.650: INFO: stderr: ""
  Sep 30 12:43:42.650: INFO: stdout: "e2e-test-crd-publish-openapi-7742-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Sep 30 12:43:42.651: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2876 --namespace=crd-publish-openapi-2876 delete e2e-test-crd-publish-openapi-7742-crds test-cr'
  Sep 30 12:43:42.733: INFO: stderr: ""
  Sep 30 12:43:42.733: INFO: stdout: "e2e-test-crd-publish-openapi-7742-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  Sep 30 12:43:42.734: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2876 --namespace=crd-publish-openapi-2876 apply -f -'
  Sep 30 12:43:42.898: INFO: stderr: ""
  Sep 30 12:43:42.898: INFO: stdout: "e2e-test-crd-publish-openapi-7742-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Sep 30 12:43:42.898: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2876 --namespace=crd-publish-openapi-2876 delete e2e-test-crd-publish-openapi-7742-crds test-cr'
  Sep 30 12:43:42.993: INFO: stderr: ""
  Sep 30 12:43:42.993: INFO: stdout: "e2e-test-crd-publish-openapi-7742-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 09/30/23 12:43:42.993
  Sep 30 12:43:42.993: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2876 explain e2e-test-crd-publish-openapi-7742-crds'
  Sep 30 12:43:43.148: INFO: stderr: ""
  Sep 30 12:43:43.148: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-in-nested.example.com\nKIND:       e2e-test-crd-publish-openapi-7742-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties in nested field for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  Sep 30 12:43:44.585: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2876" for this suite. @ 09/30/23 12:43:44.6
â€¢ [3.911 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]
test/e2e/apimachinery/webhook.go:301
  STEP: Creating a kubernetes client @ 09/30/23 12:43:44.609
  Sep 30 12:43:44.609: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 12:43:44.609
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:44.627
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:44.631
  STEP: Setting up server cert @ 09/30/23 12:43:44.659
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 12:43:45.923
  STEP: Deploying the webhook pod @ 09/30/23 12:43:45.93
  STEP: Wait for the deployment to be ready @ 09/30/23 12:43:45.943
  Sep 30 12:43:45.952: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 12:43:47.965
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 12:43:47.976
  Sep 30 12:43:48.976: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the crd webhook via the AdmissionRegistration API @ 09/30/23 12:43:48.983
  STEP: Creating a custom resource definition that should be denied by the webhook @ 09/30/23 12:43:49.001
  Sep 30 12:43:49.001: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:43:49.014: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4069" for this suite. @ 09/30/23 12:43:49.063
  STEP: Destroying namespace "webhook-markers-7351" for this suite. @ 09/30/23 12:43:49.07
â€¢ [4.469 seconds]
------------------------------
SSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:47
  STEP: Creating a kubernetes client @ 09/30/23 12:43:49.078
  Sep 30 12:43:49.078: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 12:43:49.079
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:49.094
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:49.099
  STEP: Creating configMap with name configmap-test-volume-34200644-756b-4d4c-a473-caf7ed82cfaf @ 09/30/23 12:43:49.103
  STEP: Creating a pod to test consume configMaps @ 09/30/23 12:43:49.109
  STEP: Saw pod success @ 09/30/23 12:43:53.13
  Sep 30 12:43:53.134: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-configmaps-bae5d45d-83f7-4745-a687-549350ddb2d5 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 12:43:53.142
  Sep 30 12:43:53.160: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-9751" for this suite. @ 09/30/23 12:43:53.164
â€¢ [4.093 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:79
  STEP: Creating a kubernetes client @ 09/30/23 12:43:53.172
  Sep 30 12:43:53.172: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 12:43:53.173
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:53.188
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:53.192
  STEP: Creating secret with name secret-test-map-0714197c-b6ab-425e-897e-bce2d4eecd4f @ 09/30/23 12:43:53.196
  STEP: Creating a pod to test consume secrets @ 09/30/23 12:43:53.202
  STEP: Saw pod success @ 09/30/23 12:43:57.224
  Sep 30 12:43:57.227: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-secrets-ac2fc8c1-a7c1-4089-9bd8-65e164fade3a container secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 12:43:57.234
  Sep 30 12:43:57.251: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2530" for this suite. @ 09/30/23 12:43:57.256
â€¢ [4.090 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]
test/e2e/apimachinery/resource_quota.go:161
  STEP: Creating a kubernetes client @ 09/30/23 12:43:57.263
  Sep 30 12:43:57.263: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 12:43:57.264
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:43:57.28
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:43:57.284
  STEP: Discovering how many secrets are in namespace by default @ 09/30/23 12:43:57.288
  STEP: Counting existing ResourceQuota @ 09/30/23 12:44:02.292
  STEP: Creating a ResourceQuota @ 09/30/23 12:44:07.296
  STEP: Ensuring resource quota status is calculated @ 09/30/23 12:44:07.302
  STEP: Creating a Secret @ 09/30/23 12:44:09.307
  STEP: Ensuring resource quota status captures secret creation @ 09/30/23 12:44:09.319
  STEP: Deleting a secret @ 09/30/23 12:44:11.323
  STEP: Ensuring resource quota status released usage @ 09/30/23 12:44:11.329
  Sep 30 12:44:13.335: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-1850" for this suite. @ 09/30/23 12:44:13.34
â€¢ [16.083 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]
test/e2e/node/taints.go:450
  STEP: Creating a kubernetes client @ 09/30/23 12:44:13.347
  Sep 30 12:44:13.347: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename taint-multiple-pods @ 09/30/23 12:44:13.347
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:44:13.365
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:44:13.369
  Sep 30 12:44:13.373: INFO: Waiting up to 1m0s for all nodes to be ready
  Sep 30 12:45:13.396: INFO: Waiting for terminating namespaces to be deleted...
  Sep 30 12:45:13.400: INFO: Starting informer...
  STEP: Starting pods... @ 09/30/23 12:45:13.4
  Sep 30 12:45:13.620: INFO: Pod1 is running on ip-172-31-31-30. Tainting Node
  Sep 30 12:45:15.843: INFO: Pod2 is running on ip-172-31-31-30. Tainting Node
  STEP: Trying to apply a taint on the Node @ 09/30/23 12:45:15.843
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 09/30/23 12:45:15.855
  STEP: Waiting for Pod1 and Pod2 to be deleted @ 09/30/23 12:45:15.859
  Sep 30 12:45:21.565: INFO: Noticed Pod "taint-eviction-b1" gets evicted.
  Sep 30 12:45:41.610: INFO: Noticed Pod "taint-eviction-b2" gets evicted.
  Sep 30 12:45:41.610: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 09/30/23 12:45:41.627
  STEP: Destroying namespace "taint-multiple-pods-1938" for this suite. @ 09/30/23 12:45:41.63
â€¢ [88.290 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:528
  STEP: Creating a kubernetes client @ 09/30/23 12:45:41.637
  Sep 30 12:45:41.637: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename security-context-test @ 09/30/23 12:45:41.637
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:45:41.659
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:45:41.663
  Sep 30 12:45:45.710: INFO: Got logs for pod "busybox-privileged-false-3393671d-f239-4c92-a8f2-a19606510ad6": "ip: RTNETLINK answers: Operation not permitted\n"
  Sep 30 12:45:45.710: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-7968" for this suite. @ 09/30/23 12:45:45.715
â€¢ [4.085 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:156
  STEP: Creating a kubernetes client @ 09/30/23 12:45:45.722
  Sep 30 12:45:45.722: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename runtimeclass @ 09/30/23 12:45:45.723
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:45:45.738
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:45:45.741
  STEP: Deleting RuntimeClass runtimeclass-1496-delete-me @ 09/30/23 12:45:45.75
  STEP: Waiting for the RuntimeClass to disappear @ 09/30/23 12:45:45.757
  Sep 30 12:45:45.768: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-1496" for this suite. @ 09/30/23 12:45:45.771
â€¢ [0.056 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]
test/e2e/apimachinery/resource_quota.go:395
  STEP: Creating a kubernetes client @ 09/30/23 12:45:45.778
  Sep 30 12:45:45.778: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 12:45:45.779
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:45:45.795
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:45:45.799
  STEP: Counting existing ResourceQuota @ 09/30/23 12:45:45.802
  STEP: Creating a ResourceQuota @ 09/30/23 12:45:50.806
  STEP: Ensuring resource quota status is calculated @ 09/30/23 12:45:50.812
  STEP: Creating a ReplicationController @ 09/30/23 12:45:52.817
  STEP: Ensuring resource quota status captures replication controller creation @ 09/30/23 12:45:52.828
  STEP: Deleting a ReplicationController @ 09/30/23 12:45:54.834
  STEP: Ensuring resource quota status released usage @ 09/30/23 12:45:54.841
  Sep 30 12:45:56.846: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8019" for this suite. @ 09/30/23 12:45:56.85
â€¢ [11.078 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:527
  STEP: Creating a kubernetes client @ 09/30/23 12:45:56.857
  Sep 30 12:45:56.857: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 12:45:56.858
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:45:56.876
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:45:56.88
  STEP: Creating pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172 @ 09/30/23 12:45:56.884
  STEP: checking the pod's current state and verifying that restartCount is present @ 09/30/23 12:45:58.901
  Sep 30 12:45:58.907: INFO: Initial restart count of pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 is 0
  Sep 30 12:45:58.911: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:00.915: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:02.920: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:04.925: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:06.929: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:08.934: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:10.939: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:12.944: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:14.949: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:16.953: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:18.958: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:20.963: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:22.968: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:24.974: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:26.978: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:28.983: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:30.987: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:32.991: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:34.997: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:37.002: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:39.006: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:41.011: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:43.015: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:45.021: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:47.025: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:49.030: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:51.035: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:53.040: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:55.046: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:57.050: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:46:59.055: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:01.060: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:03.064: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:05.070: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:07.075: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:09.079: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:11.085: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:13.090: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:15.095: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:17.100: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:19.106: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:21.111: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:23.116: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:25.121: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:27.126: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:29.131: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:31.136: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:33.141: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:35.147: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:37.153: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:39.158: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:41.163: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:43.168: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:45.174: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:47.178: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:49.182: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:51.187: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:53.193: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:55.198: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:57.202: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:47:59.207: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:01.212: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:03.216: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:05.222: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:07.227: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:09.232: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:11.236: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:13.242: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:15.248: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:17.252: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:19.255: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:21.260: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:23.264: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:25.270: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:27.276: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:29.281: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:31.286: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:33.291: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:35.297: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:37.302: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:39.306: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:41.311: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:43.315: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:45.321: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:47.326: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:49.331: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:51.336: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:53.341: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:55.347: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:57.352: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:48:59.358: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:01.364: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:03.369: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:05.374: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:07.380: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:09.385: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:11.390: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:13.394: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:15.400: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:17.406: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:19.410: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:21.416: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:23.421: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:25.427: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:27.432: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:29.437: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:31.441: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:33.446: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:35.450: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:37.456: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:39.461: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:41.465: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:43.470: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:45.476: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:47.481: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:49.486: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:51.491: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:53.497: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:55.502: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:57.506: INFO: Get pod test-grpc-6590ffc3-04ce-4a5a-b956-b122cd62cf94 in namespace container-probe-172
  Sep 30 12:49:59.507: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 12:49:59.512
  STEP: Destroying namespace "container-probe-172" for this suite. @ 09/30/23 12:49:59.526
â€¢ [242.675 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:215
  STEP: Creating a kubernetes client @ 09/30/23 12:49:59.533
  Sep 30 12:49:59.533: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:49:59.534
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:49:59.551
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:49:59.556
  STEP: Creating secret with name s-test-opt-del-8e71e477-4265-47ca-b1bf-25842f11bec1 @ 09/30/23 12:49:59.566
  STEP: Creating secret with name s-test-opt-upd-0c077614-b088-4600-85d3-0e498a15305f @ 09/30/23 12:49:59.572
  STEP: Creating the pod @ 09/30/23 12:49:59.578
  STEP: Deleting secret s-test-opt-del-8e71e477-4265-47ca-b1bf-25842f11bec1 @ 09/30/23 12:50:01.641
  STEP: Updating secret s-test-opt-upd-0c077614-b088-4600-85d3-0e498a15305f @ 09/30/23 12:50:01.647
  STEP: Creating secret with name s-test-opt-create-d88ae526-d44e-4ace-a5fc-279a420a6000 @ 09/30/23 12:50:01.653
  STEP: waiting to observe update in volume @ 09/30/23 12:50:01.657
  Sep 30 12:51:16.016: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4472" for this suite. @ 09/30/23 12:51:16.021
â€¢ [76.494 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]
test/e2e/apps/daemon_set.go:305
  STEP: Creating a kubernetes client @ 09/30/23 12:51:16.027
  Sep 30 12:51:16.027: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename daemonsets @ 09/30/23 12:51:16.028
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:51:16.045
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:51:16.049
  STEP: Creating a simple DaemonSet "daemon-set" @ 09/30/23 12:51:16.073
  STEP: Check that daemon pods launch on every node of the cluster. @ 09/30/23 12:51:16.078
  Sep 30 12:51:16.082: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:51:16.082: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:51:16.085: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 12:51:16.085: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 12:51:17.091: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:51:17.091: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:51:17.095: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Sep 30 12:51:17.095: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 12:51:18.090: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:51:18.090: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:51:18.094: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Sep 30 12:51:18.094: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Set a daemon pod's phase to 'Failed', check that the daemon pod is revived. @ 09/30/23 12:51:18.098
  Sep 30 12:51:18.114: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:51:18.114: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:51:18.119: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Sep 30 12:51:18.119: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Wait for the failed daemon pod to be completely deleted. @ 09/30/23 12:51:18.119
  STEP: Deleting DaemonSet "daemon-set" @ 09/30/23 12:51:19.132
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-721, will wait for the garbage collector to delete the pods @ 09/30/23 12:51:19.132
  Sep 30 12:51:19.194: INFO: Deleting DaemonSet.extensions daemon-set took: 7.933943ms
  Sep 30 12:51:19.294: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.258533ms
  Sep 30 12:51:21.299: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 12:51:21.299: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Sep 30 12:51:21.302: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"11303"},"items":null}

  Sep 30 12:51:21.307: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"11304"},"items":null}

  Sep 30 12:51:21.322: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-721" for this suite. @ 09/30/23 12:51:21.326
â€¢ [5.307 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:69
  STEP: Creating a kubernetes client @ 09/30/23 12:51:21.335
  Sep 30 12:51:21.335: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 12:51:21.336
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:51:21.357
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:51:21.36
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 12:51:21.365
  STEP: Saw pod success @ 09/30/23 12:51:25.387
  Sep 30 12:51:25.392: INFO: Trying to get logs from node ip-172-31-39-81 pod downwardapi-volume-31b8ca9f-8026-4c6f-867d-2eb8e3e730e1 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 12:51:25.416
  Sep 30 12:51:25.435: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9215" for this suite. @ 09/30/23 12:51:25.44
â€¢ [4.110 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass  should support RuntimeClasses API operations [Conformance]
test/e2e/common/node/runtimeclass.go:189
  STEP: Creating a kubernetes client @ 09/30/23 12:51:25.447
  Sep 30 12:51:25.447: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename runtimeclass @ 09/30/23 12:51:25.447
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:51:25.464
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:51:25.467
  STEP: getting /apis @ 09/30/23 12:51:25.471
  STEP: getting /apis/node.k8s.io @ 09/30/23 12:51:25.476
  STEP: getting /apis/node.k8s.io/v1 @ 09/30/23 12:51:25.478
  STEP: creating @ 09/30/23 12:51:25.479
  STEP: watching @ 09/30/23 12:51:25.496
  Sep 30 12:51:25.496: INFO: starting watch
  STEP: getting @ 09/30/23 12:51:25.504
  STEP: listing @ 09/30/23 12:51:25.508
  STEP: patching @ 09/30/23 12:51:25.513
  STEP: updating @ 09/30/23 12:51:25.519
  Sep 30 12:51:25.524: INFO: waiting for watch events with expected annotations
  STEP: deleting @ 09/30/23 12:51:25.524
  STEP: deleting a collection @ 09/30/23 12:51:25.536
  Sep 30 12:51:25.552: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-4810" for this suite. @ 09/30/23 12:51:25.556
â€¢ [0.116 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve a basic endpoint from pods  [Conformance]
test/e2e/network/service.go:785
  STEP: Creating a kubernetes client @ 09/30/23 12:51:25.565
  Sep 30 12:51:25.565: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 12:51:25.566
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:51:25.581
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:51:25.585
  STEP: creating service endpoint-test2 in namespace services-7156 @ 09/30/23 12:51:25.589
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-7156 to expose endpoints map[] @ 09/30/23 12:51:25.597
  Sep 30 12:51:25.602: INFO: Failed go get Endpoints object: endpoints "endpoint-test2" not found
  Sep 30 12:51:26.612: INFO: successfully validated that service endpoint-test2 in namespace services-7156 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-7156 @ 09/30/23 12:51:26.612
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-7156 to expose endpoints map[pod1:[80]] @ 09/30/23 12:51:28.633
  Sep 30 12:51:28.646: INFO: successfully validated that service endpoint-test2 in namespace services-7156 exposes endpoints map[pod1:[80]]
  STEP: Checking if the Service forwards traffic to pod1 @ 09/30/23 12:51:28.646
  Sep 30 12:51:28.646: INFO: Creating new exec pod
  Sep 30 12:51:31.662: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7156 exec execpodwg9q5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Sep 30 12:51:31.851: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Sep 30 12:51:31.851: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:51:31.851: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7156 exec execpodwg9q5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.228 80'
  Sep 30 12:51:32.033: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.228 80\nConnection to 10.152.183.228 80 port [tcp/http] succeeded!\n"
  Sep 30 12:51:32.033: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Creating pod pod2 in namespace services-7156 @ 09/30/23 12:51:32.033
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-7156 to expose endpoints map[pod1:[80] pod2:[80]] @ 09/30/23 12:51:34.053
  Sep 30 12:51:34.068: INFO: successfully validated that service endpoint-test2 in namespace services-7156 exposes endpoints map[pod1:[80] pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod1 and pod2 @ 09/30/23 12:51:34.068
  Sep 30 12:51:35.068: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7156 exec execpodwg9q5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Sep 30 12:51:35.273: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Sep 30 12:51:35.273: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:51:35.273: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7156 exec execpodwg9q5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.228 80'
  Sep 30 12:51:35.473: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.228 80\nConnection to 10.152.183.228 80 port [tcp/http] succeeded!\n"
  Sep 30 12:51:35.473: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-7156 @ 09/30/23 12:51:35.473
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-7156 to expose endpoints map[pod2:[80]] @ 09/30/23 12:51:35.488
  Sep 30 12:51:35.502: INFO: successfully validated that service endpoint-test2 in namespace services-7156 exposes endpoints map[pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod2 @ 09/30/23 12:51:35.502
  Sep 30 12:51:36.502: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7156 exec execpodwg9q5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Sep 30 12:51:36.672: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Sep 30 12:51:36.672: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 12:51:36.672: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-7156 exec execpodwg9q5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.228 80'
  Sep 30 12:51:36.851: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.228 80\nConnection to 10.152.183.228 80 port [tcp/http] succeeded!\n"
  Sep 30 12:51:36.851: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod2 in namespace services-7156 @ 09/30/23 12:51:36.851
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-7156 to expose endpoints map[] @ 09/30/23 12:51:36.861
  Sep 30 12:51:37.884: INFO: successfully validated that service endpoint-test2 in namespace services-7156 exposes endpoints map[]
  Sep 30 12:51:37.884: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-7156" for this suite. @ 09/30/23 12:51:37.907
â€¢ [12.350 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:423
  STEP: Creating a kubernetes client @ 09/30/23 12:51:37.917
  Sep 30 12:51:37.917: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 12:51:37.918
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:51:37.935
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:51:37.94
  STEP: Creating configMap with name configmap-test-volume-3559634c-02a7-43b8-9abe-ae60f2c5c12b @ 09/30/23 12:51:37.943
  STEP: Creating a pod to test consume configMaps @ 09/30/23 12:51:37.948
  STEP: Saw pod success @ 09/30/23 12:51:41.97
  Sep 30 12:51:41.974: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-configmaps-885ea2d4-7d95-4f90-99f7-307b72927d22 container configmap-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 12:51:41.981
  Sep 30 12:51:41.996: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-4221" for this suite. @ 09/30/23 12:51:42
â€¢ [4.090 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:183
  STEP: Creating a kubernetes client @ 09/30/23 12:51:42.008
  Sep 30 12:51:42.008: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 12:51:42.009
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:51:42.025
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:51:42.029
  STEP: Creating pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936 @ 09/30/23 12:51:42.033
  STEP: checking the pod's current state and verifying that restartCount is present @ 09/30/23 12:51:44.052
  Sep 30 12:51:44.056: INFO: Initial restart count of pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 is 0
  Sep 30 12:51:44.060: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:51:46.064: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:51:48.069: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:51:50.074: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:51:52.078: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:51:54.083: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:51:56.087: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:51:58.093: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:00.100: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:02.104: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:04.109: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:06.114: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:08.120: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:10.125: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:12.130: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:14.134: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:16.139: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:18.144: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:20.150: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:22.155: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:24.159: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:26.165: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:28.170: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:30.174: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:32.178: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:34.183: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:36.187: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:38.192: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:40.197: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:42.203: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:44.207: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:46.213: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:48.219: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:50.224: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:52.228: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:54.233: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:56.237: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:52:58.242: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:00.247: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:02.251: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:04.256: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:06.262: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:08.267: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:10.273: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:12.277: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:14.282: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:16.287: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:18.293: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:20.298: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:22.303: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:24.307: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:26.313: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:28.320: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:30.325: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:32.330: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:34.336: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:36.341: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:38.346: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:40.351: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:42.356: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:44.361: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:46.365: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:48.370: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:50.375: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:52.380: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:54.386: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:56.391: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:53:58.396: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:00.402: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:02.406: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:04.412: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:06.415: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:08.421: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:10.426: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:12.431: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:14.436: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:16.441: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:18.447: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:20.451: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:22.456: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:24.462: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:26.466: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:28.472: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:30.477: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:32.482: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:34.487: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:36.492: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:38.499: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:40.504: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:42.508: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:44.513: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:46.517: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:48.523: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:50.528: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:52.533: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:54.538: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:56.542: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:54:58.548: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:00.553: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:02.557: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:04.562: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:06.565: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:08.572: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:10.578: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:12.583: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:14.589: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:16.593: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:18.600: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:20.604: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:22.608: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:24.613: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:26.617: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:28.623: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:30.628: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:32.633: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:34.637: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:36.643: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:38.648: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:40.654: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:42.658: INFO: Get pod liveness-70020545-868a-49f4-bef3-bd971d185ff7 in namespace container-probe-4936
  Sep 30 12:55:44.659: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 12:55:44.663
  STEP: Destroying namespace "container-probe-4936" for this suite. @ 09/30/23 12:55:44.676
â€¢ [242.676 seconds]
------------------------------
[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:91
  STEP: Creating a kubernetes client @ 09/30/23 12:55:44.684
  Sep 30 12:55:44.684: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 12:55:44.685
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:55:44.714
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:55:44.718
  STEP: Creating a pod to test downward api env vars @ 09/30/23 12:55:44.722
  STEP: Saw pod success @ 09/30/23 12:55:48.747
  Sep 30 12:55:48.751: INFO: Trying to get logs from node ip-172-31-31-30 pod downward-api-90b57d8b-f0b0-4558-97fc-64bbcb3c1733 container dapi-container: <nil>
  STEP: delete the pod @ 09/30/23 12:55:48.775
  Sep 30 12:55:48.789: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1171" for this suite. @ 09/30/23 12:55:48.794
â€¢ [4.117 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:99
  STEP: Creating a kubernetes client @ 09/30/23 12:55:48.801
  Sep 30 12:55:48.802: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 12:55:48.802
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:55:48.821
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:55:48.824
  STEP: Creating configMap with name configmap-test-volume-map-42074b0e-1ea5-4cf3-acda-f52993d9b2d4 @ 09/30/23 12:55:48.828
  STEP: Creating a pod to test consume configMaps @ 09/30/23 12:55:48.834
  STEP: Saw pod success @ 09/30/23 12:55:52.857
  Sep 30 12:55:52.861: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-configmaps-8cd3adbc-ea6b-47bb-9761-ac885f1c14f0 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 12:55:52.867
  Sep 30 12:55:52.887: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6889" for this suite. @ 09/30/23 12:55:52.891
â€¢ [4.096 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:163
  STEP: Creating a kubernetes client @ 09/30/23 12:55:52.9
  Sep 30 12:55:52.900: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 12:55:52.901
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:55:52.916
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:55:52.92
  STEP: Creating the pod @ 09/30/23 12:55:52.924
  Sep 30 12:55:55.466: INFO: Successfully updated pod "annotationupdate41e05763-6c5a-4c9c-8aaf-b6c5a206c43a"
  Sep 30 12:55:57.482: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9108" for this suite. @ 09/30/23 12:55:57.487
â€¢ [4.593 seconds]
------------------------------
SSS
------------------------------
[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]
test/e2e/apps/daemon_set.go:443
  STEP: Creating a kubernetes client @ 09/30/23 12:55:57.494
  Sep 30 12:55:57.494: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename daemonsets @ 09/30/23 12:55:57.495
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:55:57.514
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:55:57.517
  Sep 30 12:55:57.547: INFO: Create a RollingUpdate DaemonSet
  Sep 30 12:55:57.555: INFO: Check that daemon pods launch on every node of the cluster
  Sep 30 12:55:57.559: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:55:57.559: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:55:57.563: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 12:55:57.563: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 12:55:58.567: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:55:58.567: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:55:58.573: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Sep 30 12:55:58.573: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 12:55:59.569: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:55:59.569: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:55:59.573: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Sep 30 12:55:59.573: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  Sep 30 12:55:59.573: INFO: Update the DaemonSet to trigger a rollout
  Sep 30 12:55:59.583: INFO: Updating DaemonSet daemon-set
  Sep 30 12:56:00.601: INFO: Roll back the DaemonSet before rollout is complete
  Sep 30 12:56:00.611: INFO: Updating DaemonSet daemon-set
  Sep 30 12:56:00.611: INFO: Make sure DaemonSet rollback is complete
  Sep 30 12:56:00.616: INFO: Wrong image for pod: daemon-set-7btkl. Expected: registry.k8s.io/e2e-test-images/httpd:2.4.38-4, got: foo:non-existent.
  Sep 30 12:56:00.616: INFO: Pod daemon-set-7btkl is not available
  Sep 30 12:56:00.619: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:56:00.619: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:56:01.628: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:56:01.628: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:56:02.629: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:56:02.629: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:56:03.624: INFO: Pod daemon-set-jb49j is not available
  Sep 30 12:56:03.629: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 12:56:03.629: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  STEP: Deleting DaemonSet "daemon-set" @ 09/30/23 12:56:03.637
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-2523, will wait for the garbage collector to delete the pods @ 09/30/23 12:56:03.637
  Sep 30 12:56:03.698: INFO: Deleting DaemonSet.extensions daemon-set took: 6.162711ms
  Sep 30 12:56:03.799: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.937155ms
  Sep 30 12:56:05.802: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 12:56:05.803: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Sep 30 12:56:05.806: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"12345"},"items":null}

  Sep 30 12:56:05.810: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"12345"},"items":null}

  Sep 30 12:56:05.825: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-2523" for this suite. @ 09/30/23 12:56:05.831
â€¢ [8.345 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:167
  STEP: Creating a kubernetes client @ 09/30/23 12:56:05.839
  Sep 30 12:56:05.839: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 12:56:05.84
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:56:05.857
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:56:05.861
  STEP: Creating a pod to test downward api env vars @ 09/30/23 12:56:05.865
  STEP: Saw pod success @ 09/30/23 12:56:09.893
  Sep 30 12:56:09.897: INFO: Trying to get logs from node ip-172-31-31-30 pod downward-api-d4a40a59-0990-47d9-b8ff-78dd82ff15d9 container dapi-container: <nil>
  STEP: delete the pod @ 09/30/23 12:56:09.905
  Sep 30 12:56:09.922: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5150" for this suite. @ 09/30/23 12:56:09.926
â€¢ [4.093 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:250
  STEP: Creating a kubernetes client @ 09/30/23 12:56:09.934
  Sep 30 12:56:09.934: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 12:56:09.935
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:56:09.953
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:56:09.956
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 12:56:09.96
  STEP: Saw pod success @ 09/30/23 12:56:13.981
  Sep 30 12:56:13.984: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-f8f2bb85-e8bf-4b32-baf9-5696c8c8b06b container client-container: <nil>
  STEP: delete the pod @ 09/30/23 12:56:13.992
  Sep 30 12:56:14.008: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9290" for this suite. @ 09/30/23 12:56:14.013
â€¢ [4.086 seconds]
------------------------------
SSSSSS
------------------------------
[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]
test/e2e/scheduling/limit_range.go:239
  STEP: Creating a kubernetes client @ 09/30/23 12:56:14.02
  Sep 30 12:56:14.020: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename limitrange @ 09/30/23 12:56:14.021
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:56:14.037
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:56:14.04
  STEP: Creating LimitRange "e2e-limitrange-d5snm" in namespace "limitrange-636" @ 09/30/23 12:56:14.044
  STEP: Creating another limitRange in another namespace @ 09/30/23 12:56:14.05
  Sep 30 12:56:14.066: INFO: Namespace "e2e-limitrange-d5snm-8156" created
  Sep 30 12:56:14.066: INFO: Creating LimitRange "e2e-limitrange-d5snm" in namespace "e2e-limitrange-d5snm-8156"
  STEP: Listing all LimitRanges with label "e2e-test=e2e-limitrange-d5snm" @ 09/30/23 12:56:14.073
  Sep 30 12:56:14.076: INFO: Found 2 limitRanges
  STEP: Patching LimitRange "e2e-limitrange-d5snm" in "limitrange-636" namespace @ 09/30/23 12:56:14.076
  Sep 30 12:56:14.084: INFO: LimitRange "e2e-limitrange-d5snm" has been patched
  STEP: Delete LimitRange "e2e-limitrange-d5snm" by Collection with labelSelector: "e2e-limitrange-d5snm=patched" @ 09/30/23 12:56:14.085
  STEP: Confirm that the limitRange "e2e-limitrange-d5snm" has been deleted @ 09/30/23 12:56:14.093
  Sep 30 12:56:14.093: INFO: Requesting list of LimitRange to confirm quantity
  Sep 30 12:56:14.096: INFO: Found 0 LimitRange with label "e2e-limitrange-d5snm=patched"
  Sep 30 12:56:14.097: INFO: LimitRange "e2e-limitrange-d5snm" has been deleted.
  STEP: Confirm that a single LimitRange still exists with label "e2e-test=e2e-limitrange-d5snm" @ 09/30/23 12:56:14.097
  Sep 30 12:56:14.100: INFO: Found 1 limitRange
  Sep 30 12:56:14.100: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-636" for this suite. @ 09/30/23 12:56:14.104
  STEP: Destroying namespace "e2e-limitrange-d5snm-8156" for this suite. @ 09/30/23 12:56:14.11
â€¢ [0.097 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]
test/e2e/apps/replica_set.go:176
  STEP: Creating a kubernetes client @ 09/30/23 12:56:14.117
  Sep 30 12:56:14.118: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replicaset @ 09/30/23 12:56:14.118
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:56:14.138
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:56:14.142
  STEP: Create a Replicaset @ 09/30/23 12:56:14.151
  STEP: Verify that the required pods have come up. @ 09/30/23 12:56:14.157
  Sep 30 12:56:14.161: INFO: Pod name sample-pod: Found 0 pods out of 1
  Sep 30 12:56:19.165: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 09/30/23 12:56:19.165
  STEP: Getting /status @ 09/30/23 12:56:19.165
  Sep 30 12:56:19.170: INFO: Replicaset test-rs has Conditions: []
  STEP: updating the Replicaset Status @ 09/30/23 12:56:19.17
  Sep 30 12:56:19.180: INFO: updatedStatus.Conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the ReplicaSet status to be updated @ 09/30/23 12:56:19.18
  Sep 30 12:56:19.182: INFO: Observed &ReplicaSet event: ADDED
  Sep 30 12:56:19.183: INFO: Observed &ReplicaSet event: MODIFIED
  Sep 30 12:56:19.183: INFO: Observed &ReplicaSet event: MODIFIED
  Sep 30 12:56:19.183: INFO: Observed &ReplicaSet event: MODIFIED
  Sep 30 12:56:19.183: INFO: Found replicaset test-rs in namespace replicaset-4932 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Sep 30 12:56:19.183: INFO: Replicaset test-rs has an updated status
  STEP: patching the Replicaset Status @ 09/30/23 12:56:19.183
  Sep 30 12:56:19.183: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Sep 30 12:56:19.189: INFO: Patched status conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Replicaset status to be patched @ 09/30/23 12:56:19.189
  Sep 30 12:56:19.192: INFO: Observed &ReplicaSet event: ADDED
  Sep 30 12:56:19.192: INFO: Observed &ReplicaSet event: MODIFIED
  Sep 30 12:56:19.192: INFO: Observed &ReplicaSet event: MODIFIED
  Sep 30 12:56:19.192: INFO: Observed &ReplicaSet event: MODIFIED
  Sep 30 12:56:19.192: INFO: Observed replicaset test-rs in namespace replicaset-4932 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Sep 30 12:56:19.192: INFO: Observed &ReplicaSet event: MODIFIED
  Sep 30 12:56:19.192: INFO: Found replicaset test-rs in namespace replicaset-4932 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }
  Sep 30 12:56:19.192: INFO: Replicaset test-rs has a patched status
  Sep 30 12:56:19.192: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-4932" for this suite. @ 09/30/23 12:56:19.197
â€¢ [5.086 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]
test/e2e/storage/subpath.go:59
  STEP: Creating a kubernetes client @ 09/30/23 12:56:19.204
  Sep 30 12:56:19.204: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename subpath @ 09/30/23 12:56:19.205
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:56:19.224
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:56:19.24
  STEP: Setting up data @ 09/30/23 12:56:19.245
  STEP: Creating pod pod-subpath-test-secret-42tj @ 09/30/23 12:56:19.258
  STEP: Creating a pod to test atomic-volume-subpath @ 09/30/23 12:56:19.258
  STEP: Saw pod success @ 09/30/23 12:56:43.329
  Sep 30 12:56:43.332: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-subpath-test-secret-42tj container test-container-subpath-secret-42tj: <nil>
  STEP: delete the pod @ 09/30/23 12:56:43.357
  STEP: Deleting pod pod-subpath-test-secret-42tj @ 09/30/23 12:56:43.372
  Sep 30 12:56:43.372: INFO: Deleting pod "pod-subpath-test-secret-42tj" in namespace "subpath-5368"
  Sep 30 12:56:43.376: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-5368" for this suite. @ 09/30/23 12:56:43.381
â€¢ [24.184 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for services  [Conformance]
test/e2e/network/dns.go:137
  STEP: Creating a kubernetes client @ 09/30/23 12:56:43.39
  Sep 30 12:56:43.390: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename dns @ 09/30/23 12:56:43.391
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:56:43.406
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:56:43.41
  STEP: Creating a test headless service @ 09/30/23 12:56:43.413
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-5992.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-5992.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-5992.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-5992.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-5992.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-5992.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-5992.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-5992.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-5992.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-5992.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 139.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.139_udp@PTR;check="$$(dig +tcp +noall +answer +search 139.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.139_tcp@PTR;sleep 1; done
   @ 09/30/23 12:56:43.43
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-5992.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-5992.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-5992.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-5992.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-5992.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-5992.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-5992.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-5992.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-5992.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-5992.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 139.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.139_udp@PTR;check="$$(dig +tcp +noall +answer +search 139.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.139_tcp@PTR;sleep 1; done
   @ 09/30/23 12:56:43.43
  STEP: creating a pod to probe DNS @ 09/30/23 12:56:43.43
  STEP: submitting the pod to kubernetes @ 09/30/23 12:56:43.43
  STEP: retrieving the pod @ 09/30/23 12:56:45.455
  STEP: looking for the results for each expected name from probers @ 09/30/23 12:56:45.459
  Sep 30 12:56:45.464: INFO: Unable to read wheezy_udp@dns-test-service.dns-5992.svc.cluster.local from pod dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5: the server could not find the requested resource (get pods dns-test-940273af-2262-435a-9bef-16153c848ab5)
  Sep 30 12:56:45.469: INFO: Unable to read wheezy_tcp@dns-test-service.dns-5992.svc.cluster.local from pod dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5: the server could not find the requested resource (get pods dns-test-940273af-2262-435a-9bef-16153c848ab5)
  Sep 30 12:56:45.473: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local from pod dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5: the server could not find the requested resource (get pods dns-test-940273af-2262-435a-9bef-16153c848ab5)
  Sep 30 12:56:45.477: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local from pod dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5: the server could not find the requested resource (get pods dns-test-940273af-2262-435a-9bef-16153c848ab5)
  Sep 30 12:56:45.498: INFO: Unable to read jessie_udp@dns-test-service.dns-5992.svc.cluster.local from pod dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5: the server could not find the requested resource (get pods dns-test-940273af-2262-435a-9bef-16153c848ab5)
  Sep 30 12:56:45.502: INFO: Unable to read jessie_tcp@dns-test-service.dns-5992.svc.cluster.local from pod dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5: the server could not find the requested resource (get pods dns-test-940273af-2262-435a-9bef-16153c848ab5)
  Sep 30 12:56:45.506: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local from pod dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5: the server could not find the requested resource (get pods dns-test-940273af-2262-435a-9bef-16153c848ab5)
  Sep 30 12:56:45.510: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local from pod dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5: the server could not find the requested resource (get pods dns-test-940273af-2262-435a-9bef-16153c848ab5)
  Sep 30 12:56:45.526: INFO: Lookups using dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5 failed for: [wheezy_udp@dns-test-service.dns-5992.svc.cluster.local wheezy_tcp@dns-test-service.dns-5992.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local jessie_udp@dns-test-service.dns-5992.svc.cluster.local jessie_tcp@dns-test-service.dns-5992.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-5992.svc.cluster.local]

  Sep 30 12:56:45.534: INFO: Pod client logs for webserver: 
  Sep 30 12:56:45.541: INFO: Pod client logs for querier: 
  Sep 30 12:56:45.548: INFO: Pod client logs for jessie-querier: 
  Sep 30 12:56:50.617: INFO: DNS probes using dns-5992/dns-test-940273af-2262-435a-9bef-16153c848ab5 succeeded

  Sep 30 12:56:50.617: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 12:56:50.621
  STEP: deleting the test service @ 09/30/23 12:56:50.634
  STEP: deleting the test headless service @ 09/30/23 12:56:50.657
  STEP: Destroying namespace "dns-5992" for this suite. @ 09/30/23 12:56:50.67
â€¢ [7.288 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:124
  STEP: Creating a kubernetes client @ 09/30/23 12:56:50.68
  Sep 30 12:56:50.680: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:56:50.681
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:56:50.697
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:56:50.701
  STEP: Creating projection with configMap that has name projected-configmap-test-upd-c9c4c8f4-ae3b-4579-9056-9aa8e90c6233 @ 09/30/23 12:56:50.709
  STEP: Creating the pod @ 09/30/23 12:56:50.714
  STEP: Updating configmap projected-configmap-test-upd-c9c4c8f4-ae3b-4579-9056-9aa8e90c6233 @ 09/30/23 12:56:52.746
  STEP: waiting to observe update in volume @ 09/30/23 12:56:52.751
  Sep 30 12:58:23.177: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5536" for this suite. @ 09/30/23 12:58:23.182
â€¢ [92.508 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]
test/e2e/apps/deployment.go:185
  STEP: Creating a kubernetes client @ 09/30/23 12:58:23.191
  Sep 30 12:58:23.191: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename deployment @ 09/30/23 12:58:23.192
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:23.208
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:23.212
  STEP: creating a Deployment @ 09/30/23 12:58:23.221
  STEP: waiting for Deployment to be created @ 09/30/23 12:58:23.227
  STEP: waiting for all Replicas to be Ready @ 09/30/23 12:58:23.229
  Sep 30 12:58:23.231: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Sep 30 12:58:23.231: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Sep 30 12:58:23.249: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Sep 30 12:58:23.249: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Sep 30 12:58:23.262: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Sep 30 12:58:23.262: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Sep 30 12:58:23.292: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Sep 30 12:58:23.293: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Sep 30 12:58:24.966: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Sep 30 12:58:24.967: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Sep 30 12:58:24.992: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2 and labels map[test-deployment-static:true]
  STEP: patching the Deployment @ 09/30/23 12:58:24.992
  Sep 30 12:58:25.002: INFO: observed event type ADDED
  STEP: waiting for Replicas to scale @ 09/30/23 12:58:25.002
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 0
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:25.004: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:25.012: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:25.012: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:25.028: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:25.029: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:25.037: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:25.037: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:25.051: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:25.051: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:25.998: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:25.998: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:26.019: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  STEP: listing Deployments @ 09/30/23 12:58:26.02
  Sep 30 12:58:26.024: INFO: Found test-deployment with labels: map[test-deployment:patched test-deployment-static:true]
  STEP: updating the Deployment @ 09/30/23 12:58:26.025
  Sep 30 12:58:26.039: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  STEP: fetching the DeploymentStatus @ 09/30/23 12:58:26.039
  Sep 30 12:58:26.047: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:26.049: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:26.066: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:26.081: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:26.088: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:26.983: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:27.010: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:27.024: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:27.036: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:27.043: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Sep 30 12:58:28.008: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 3 and labels map[test-deployment:updated test-deployment-static:true]
  STEP: patching the DeploymentStatus @ 09/30/23 12:58:28.032
  STEP: fetching the DeploymentStatus @ 09/30/23 12:58:28.042
  Sep 30 12:58:28.049: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:28.049: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:28.049: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:28.049: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:28.050: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 1
  Sep 30 12:58:28.050: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:28.050: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:28.050: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:28.050: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:28.050: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 2
  Sep 30 12:58:28.050: INFO: observed Deployment test-deployment in namespace deployment-6591 with ReadyReplicas 3
  STEP: deleting the Deployment @ 09/30/23 12:58:28.05
  Sep 30 12:58:28.060: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.061: INFO: observed event type MODIFIED
  Sep 30 12:58:28.065: INFO: Log out all the ReplicaSets if there is no deployment created
  Sep 30 12:58:28.069: INFO: ReplicaSet "test-deployment-64fd565c98":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-64fd565c98",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6591",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3b9805e6-e85e-4881-8d34-c6dd02a01f29",
      ResourceVersion: (string) (len=5) "13099",
      Generation: (int64) 4,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675505,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "67e0a53f-110e-4a21-bef5-d1c5c11190d9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675507,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 36 37 65 30  61 35 33 66 2d 31 31 30  |":\"67e0a53f-110|
              00000130  65 2d 34 61 32 31 2d 62  65 66 35 2d 64 31 63 35  |e-4a21-bef5-d1c5|
              00000140  63 31 31 31 39 30 64 39  5c 22 7d 22 3a 7b 7d 7d  |c11190d9\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675508,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=25) "registry.k8s.io/pause:3.9",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(2),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 4,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Sep 30 12:58:28.077: INFO: pod: "test-deployment-64fd565c98-6z29f":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-6z29f",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=15) "deployment-6591",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0b0182cc-8684-4e3b-a5f3-a1a61c2914f7",
      ResourceVersion: (string) (len=5) "13093",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675505,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675510,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "3b9805e6-e85e-4881-8d34-c6dd02a01f29",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675505,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  33 62 39 38 30 35 65 36  |uid\":\"3b9805e6|
              000000a0  2d 65 38 35 65 2d 34 38  38 31 2d 38 64 33 34 2d  |-e85e-4881-8d34-|
              000000b0  63 36 64 64 30 32 61 30  31 66 32 39 5c 22 7d 22  |c6dd02a01f29\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675505,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=520) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  31 30 2e 39 32 5c 22 7d  |192.168.10.92\"}|
              000001e0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              000001f0  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000200  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-g55hg",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-g55hg",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675505,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675505,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675505,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675505,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=13) "192.168.10.92",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "192.168.10.92"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675505,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675505,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://ca27ac5bbb1fef4430c7b3a23e0e3d1c3752b1a5e447728508144372e6e3b0ac",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Sep 30 12:58:28.079: INFO: pod: "test-deployment-64fd565c98-vbv5g":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-vbv5g",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=15) "deployment-6591",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ba5848e5-e05a-405f-87c8-b87af4552597",
      ResourceVersion: (string) (len=5) "13065",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675506,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675508,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "3b9805e6-e85e-4881-8d34-c6dd02a01f29",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  33 62 39 38 30 35 65 36  |uid\":\"3b9805e6|
              000000a0  2d 65 38 35 65 2d 34 38  38 31 2d 38 64 33 34 2d  |-e85e-4881-8d34-|
              000000b0  63 36 64 64 30 32 61 30  31 66 32 39 5c 22 7d 22  |c6dd02a01f29\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675507,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=521) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  33 35 2e 32 31 39 5c 22  |192.168.35.219\"|
              000001e0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 70  |}":{".":{},"f:ip|
              000001f0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 74 61 72 74 54  |":{}}},"f:startT|
              00000200  69 6d 65 22 3a 7b 7d 7d  7d                       |ime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-ltlng",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-ltlng",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.39.81",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=14) "192.168.35.219",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.35.219"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675506,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675506,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://90c30a4c0f60e2ba22a96c729f46572fbf3cc448e1fe7332792ba8784dfac669",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Sep 30 12:58:28.081: INFO: ReplicaSet "test-deployment-69d58987ff":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-69d58987ff",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6591",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1af89893-8cbc-4838-8c6b-5655d23fe15f",
      ResourceVersion: (string) (len=5) "13005",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675503,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "67e0a53f-110e-4a21-bef5-d1c5c11190d9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675505,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 36 37 65 30  61 35 33 66 2d 31 31 30  |":\"67e0a53f-110|
              00000130  65 2d 34 61 32 31 2d 62  65 66 35 2d 64 31 63 35  |e-4a21-bef5-d1c5|
              00000140  63 31 31 31 39 30 64 39  5c 22 7d 22 3a 7b 7d 7d  |c11190d9\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Sep 30 12:58:28.087: INFO: ReplicaSet "test-deployment-79ff746c4":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=25) "test-deployment-79ff746c4",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6591",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "311ff6cc-54e3-4f5e-91bd-de1fce839661",
      ResourceVersion: (string) (len=5) "13088",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675506,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "3"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "67e0a53f-110e-4a21-bef5-d1c5c11190d9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 36 37 65 30  61 35 33 66 2d 31 31 30  |":\"67e0a53f-110|
              00000130  65 2d 34 61 32 31 2d 62  65 66 35 2d 64 31 63 35  |e-4a21-bef5-d1c5|
              00000140  63 31 31 31 39 30 64 39  5c 22 7d 22 3a 7b 7d 7d  |c11190d9\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675507,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 2,
      FullyLabeledReplicas: (int32) 2,
      ReadyReplicas: (int32) 2,
      AvailableReplicas: (int32) 2,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Sep 30 12:58:28.093: INFO: pod: "test-deployment-79ff746c4-2brfk":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-2brfk",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-6591",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ff0d7abe-adf8-46c7-b362-2dbb92a6faea",
      ResourceVersion: (string) (len=5) "13109",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675506,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675509,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(1),
      Labels: (map[string]string) (len=2) {
        (string) (len=22) "test-deployment-static": (string) (len=4) "true",
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "311ff6cc-54e3-4f5e-91bd-de1fce839661",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  33 31 31 66 66 36 63 63  |uid\":\"311ff6cc|
              000000a0  2d 35 34 65 33 2d 34 66  35 65 2d 39 31 62 64 2d  |-54e3-4f5e-91bd-|
              000000b0  64 65 31 66 63 65 38 33  39 36 36 31 5c 22 7d 22  |de1fce839661\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=521) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  33 35 2e 32 32 30 5c 22  |192.168.35.220\"|
              000001e0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 70  |}":{".":{},"f:ip|
              000001f0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 74 61 72 74 54  |":{}}},"f:startT|
              00000200  69 6d 65 22 3a 7b 7d 7d  7d                       |ime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-9qfwt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-9qfwt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.39.81",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=14) "192.168.35.220",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.35.220"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675506,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675506,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://c3ef35bac86c902352b681913df823f7c0de54d71d2f47c810450aac7c757680",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Sep 30 12:58:28.095: INFO: pod: "test-deployment-79ff746c4-88msk":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-88msk",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-6591",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0f9b6e72-c71b-40cc-9260-5d9e7e163e47",
      ResourceVersion: (string) (len=5) "13108",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675506,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675509,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(1),
      Labels: (map[string]string) (len=2) {
        (string) (len=22) "test-deployment-static": (string) (len=4) "true",
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "311ff6cc-54e3-4f5e-91bd-de1fce839661",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675506,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  33 31 31 66 66 36 63 63  |uid\":\"311ff6cc|
              000000a0  2d 35 34 65 33 2d 34 66  35 65 2d 39 31 62 64 2d  |-54e3-4f5e-91bd-|
              000000b0  64 65 31 66 63 65 38 33  39 36 36 31 5c 22 7d 22  |de1fce839661\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675507,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=520) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  31 30 2e 39 33 5c 22 7d  |192.168.10.93\"}|
              000001e0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              000001f0  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000200  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mx4fm",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mx4fm",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675507,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675507,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675507,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675507,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=13) "192.168.10.93",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "192.168.10.93"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675507,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675507,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://36017584f95ee19cd07e22ecf213e0dda8911992ecf33c5d37a557496cb20828",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Sep 30 12:58:28.097: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-6591" for this suite. @ 09/30/23 12:58:28.101
â€¢ [4.916 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:262
  STEP: Creating a kubernetes client @ 09/30/23 12:58:28.108
  Sep 30 12:58:28.108: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:58:28.11
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:28.127
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:28.131
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 12:58:28.135
  STEP: Saw pod success @ 09/30/23 12:58:32.157
  Sep 30 12:58:32.161: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-f1df63d1-7fa4-4c5a-9c53-f156a8371a91 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 12:58:32.169
  Sep 30 12:58:32.185: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4976" for this suite. @ 09/30/23 12:58:32.19
â€¢ [4.087 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:184
  STEP: Creating a kubernetes client @ 09/30/23 12:58:32.197
  Sep 30 12:58:32.197: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubelet-test @ 09/30/23 12:58:32.198
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:32.213
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:32.217
  Sep 30 12:58:34.250: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-7278" for this suite. @ 09/30/23 12:58:34.255
â€¢ [2.065 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]
test/e2e/apimachinery/webhook.go:210
  STEP: Creating a kubernetes client @ 09/30/23 12:58:34.263
  Sep 30 12:58:34.263: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 12:58:34.264
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:34.282
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:34.286
  STEP: Setting up server cert @ 09/30/23 12:58:34.314
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 12:58:34.969
  STEP: Deploying the webhook pod @ 09/30/23 12:58:34.976
  STEP: Wait for the deployment to be ready @ 09/30/23 12:58:34.989
  Sep 30 12:58:34.997: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 12:58:37.009
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 12:58:37.018
  Sep 30 12:58:38.019: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 09/30/23 12:58:38.027
  STEP: create a pod @ 09/30/23 12:58:38.045
  STEP: 'kubectl attach' the pod, should be denied by the webhook @ 09/30/23 12:58:40.065
  Sep 30 12:58:40.065: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=webhook-4632 attach --namespace=webhook-4632 to-be-attached-pod -i -c=container1'
  Sep 30 12:58:40.163: INFO: rc: 1
  Sep 30 12:58:40.163: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4632" for this suite. @ 09/30/23 12:58:40.212
  STEP: Destroying namespace "webhook-markers-1294" for this suite. @ 09/30/23 12:58:40.22
â€¢ [5.963 seconds]
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:357
  STEP: Creating a kubernetes client @ 09/30/23 12:58:40.226
  Sep 30 12:58:40.226: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-publish-openapi @ 09/30/23 12:58:40.227
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:40.247
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:40.251
  STEP: CRs in the same group and version but different kinds (two CRDs) show up in OpenAPI documentation @ 09/30/23 12:58:40.255
  Sep 30 12:58:40.255: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:58:41.687: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 12:58:47.415: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-5214" for this suite. @ 09/30/23 12:58:47.426
â€¢ [7.206 seconds]
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:74
  STEP: Creating a kubernetes client @ 09/30/23 12:58:47.433
  Sep 30 12:58:47.433: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 12:58:47.434
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:47.449
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:47.453
  STEP: Creating configMap with name projected-configmap-test-volume-bc8158a7-9aac-44c8-9e26-4e147d3f41eb @ 09/30/23 12:58:47.457
  STEP: Creating a pod to test consume configMaps @ 09/30/23 12:58:47.463
  STEP: Saw pod success @ 09/30/23 12:58:51.486
  Sep 30 12:58:51.490: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-projected-configmaps-d5d80e34-bf71-4326-bcdb-eb09c18fa964 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 12:58:51.51
  Sep 30 12:58:51.526: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9708" for this suite. @ 09/30/23 12:58:51.53
â€¢ [4.104 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:117
  STEP: Creating a kubernetes client @ 09/30/23 12:58:51.538
  Sep 30 12:58:51.538: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 12:58:51.539
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:51.553
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:51.557
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 09/30/23 12:58:51.561
  STEP: Saw pod success @ 09/30/23 12:58:55.585
  Sep 30 12:58:55.588: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-def6312c-16e1-41d7-8f37-20e2d35ec77a container test-container: <nil>
  STEP: delete the pod @ 09/30/23 12:58:55.596
  Sep 30 12:58:55.612: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6957" for this suite. @ 09/30/23 12:58:55.617
â€¢ [4.085 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] Services should find a service from listing all namespaces [Conformance]
test/e2e/network/service.go:3117
  STEP: Creating a kubernetes client @ 09/30/23 12:58:55.623
  Sep 30 12:58:55.623: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 12:58:55.624
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:55.64
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:55.644
  STEP: fetching services @ 09/30/23 12:58:55.649
  Sep 30 12:58:55.653: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-8817" for this suite. @ 09/30/23 12:58:55.657
â€¢ [0.040 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:147
  STEP: Creating a kubernetes client @ 09/30/23 12:58:55.665
  Sep 30 12:58:55.665: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 12:58:55.665
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:55.68
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:55.684
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 09/30/23 12:58:55.688
  STEP: Saw pod success @ 09/30/23 12:58:59.711
  Sep 30 12:58:59.715: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-200b477c-3f4e-447c-8959-c3d3e0704e0e container test-container: <nil>
  STEP: delete the pod @ 09/30/23 12:58:59.724
  Sep 30 12:58:59.737: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-8515" for this suite. @ 09/30/23 12:58:59.742
â€¢ [4.084 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]
test/e2e/apimachinery/webhook.go:221
  STEP: Creating a kubernetes client @ 09/30/23 12:58:59.749
  Sep 30 12:58:59.750: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 12:58:59.75
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:58:59.767
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:58:59.771
  STEP: Setting up server cert @ 09/30/23 12:58:59.799
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 12:59:00.185
  STEP: Deploying the webhook pod @ 09/30/23 12:59:00.191
  STEP: Wait for the deployment to be ready @ 09/30/23 12:59:00.204
  Sep 30 12:59:00.212: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 12:59:02.224
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 12:59:02.234
  Sep 30 12:59:03.235: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Sep 30 12:59:03.243: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Registering the custom resource webhook via the AdmissionRegistration API @ 09/30/23 12:59:03.754
  STEP: Creating a custom resource that should be denied by the webhook @ 09/30/23 12:59:03.771
  STEP: Creating a custom resource whose deletion would be denied by the webhook @ 09/30/23 12:59:05.799
  STEP: Updating the custom resource with disallowed data should be denied @ 09/30/23 12:59:05.808
  STEP: Deleting the custom resource should be denied @ 09/30/23 12:59:05.817
  STEP: Remove the offending key and value from the custom resource data @ 09/30/23 12:59:05.825
  STEP: Deleting the updated custom resource should be successful @ 09/30/23 12:59:05.835
  Sep 30 12:59:05.842: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1806" for this suite. @ 09/30/23 12:59:06.406
  STEP: Destroying namespace "webhook-markers-6222" for this suite. @ 09/30/23 12:59:06.412
â€¢ [6.670 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]
test/e2e/apps/job.go:370
  STEP: Creating a kubernetes client @ 09/30/23 12:59:06.421
  Sep 30 12:59:06.421: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename job @ 09/30/23 12:59:06.422
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:59:06.438
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:59:06.442
  STEP: Creating Indexed job @ 09/30/23 12:59:06.446
  STEP: Ensuring job reaches completions @ 09/30/23 12:59:06.454
  STEP: Ensuring pods with index for job exist @ 09/30/23 12:59:14.458
  Sep 30 12:59:14.463: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-6906" for this suite. @ 09/30/23 12:59:14.466
â€¢ [8.051 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]
test/e2e/apimachinery/garbage_collector.go:379
  STEP: Creating a kubernetes client @ 09/30/23 12:59:14.473
  Sep 30 12:59:14.473: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename gc @ 09/30/23 12:59:14.473
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:59:14.49
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:59:14.494
  STEP: create the rc @ 09/30/23 12:59:14.502
  W0930 12:59:14.508462      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 09/30/23 12:59:20.512
  STEP: wait for the rc to be deleted @ 09/30/23 12:59:20.52
  STEP: wait for 30 seconds to see if the garbage collector mistakenly deletes the pods @ 09/30/23 12:59:25.526
  STEP: Gathering metrics @ 09/30/23 12:59:55.542
  W0930 12:59:55.548671      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Sep 30 12:59:55.548: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Sep 30 12:59:55.548: INFO: Deleting pod "simpletest.rc-2crpd" in namespace "gc-1652"
  Sep 30 12:59:55.561: INFO: Deleting pod "simpletest.rc-2kdlz" in namespace "gc-1652"
  Sep 30 12:59:55.574: INFO: Deleting pod "simpletest.rc-2lsb9" in namespace "gc-1652"
  Sep 30 12:59:55.589: INFO: Deleting pod "simpletest.rc-49r8v" in namespace "gc-1652"
  Sep 30 12:59:55.599: INFO: Deleting pod "simpletest.rc-4cgz9" in namespace "gc-1652"
  Sep 30 12:59:55.614: INFO: Deleting pod "simpletest.rc-4h28z" in namespace "gc-1652"
  Sep 30 12:59:55.627: INFO: Deleting pod "simpletest.rc-4q84k" in namespace "gc-1652"
  Sep 30 12:59:55.639: INFO: Deleting pod "simpletest.rc-4r7h5" in namespace "gc-1652"
  Sep 30 12:59:55.653: INFO: Deleting pod "simpletest.rc-4vbsz" in namespace "gc-1652"
  Sep 30 12:59:55.666: INFO: Deleting pod "simpletest.rc-4wdrf" in namespace "gc-1652"
  Sep 30 12:59:55.679: INFO: Deleting pod "simpletest.rc-5g27v" in namespace "gc-1652"
  Sep 30 12:59:55.694: INFO: Deleting pod "simpletest.rc-5hgkx" in namespace "gc-1652"
  Sep 30 12:59:55.710: INFO: Deleting pod "simpletest.rc-5j59n" in namespace "gc-1652"
  Sep 30 12:59:55.723: INFO: Deleting pod "simpletest.rc-5w8wq" in namespace "gc-1652"
  Sep 30 12:59:55.735: INFO: Deleting pod "simpletest.rc-6n8n6" in namespace "gc-1652"
  Sep 30 12:59:55.748: INFO: Deleting pod "simpletest.rc-724nf" in namespace "gc-1652"
  Sep 30 12:59:55.761: INFO: Deleting pod "simpletest.rc-75lwg" in namespace "gc-1652"
  Sep 30 12:59:55.775: INFO: Deleting pod "simpletest.rc-795xc" in namespace "gc-1652"
  Sep 30 12:59:55.787: INFO: Deleting pod "simpletest.rc-79m5n" in namespace "gc-1652"
  Sep 30 12:59:55.805: INFO: Deleting pod "simpletest.rc-7dqjw" in namespace "gc-1652"
  Sep 30 12:59:55.819: INFO: Deleting pod "simpletest.rc-7jdf5" in namespace "gc-1652"
  Sep 30 12:59:55.834: INFO: Deleting pod "simpletest.rc-7rksm" in namespace "gc-1652"
  Sep 30 12:59:55.845: INFO: Deleting pod "simpletest.rc-85cj7" in namespace "gc-1652"
  Sep 30 12:59:55.861: INFO: Deleting pod "simpletest.rc-8tj42" in namespace "gc-1652"
  Sep 30 12:59:55.874: INFO: Deleting pod "simpletest.rc-9nxc4" in namespace "gc-1652"
  Sep 30 12:59:55.887: INFO: Deleting pod "simpletest.rc-9vkch" in namespace "gc-1652"
  Sep 30 12:59:55.900: INFO: Deleting pod "simpletest.rc-b2hlp" in namespace "gc-1652"
  Sep 30 12:59:55.914: INFO: Deleting pod "simpletest.rc-b6827" in namespace "gc-1652"
  Sep 30 12:59:55.932: INFO: Deleting pod "simpletest.rc-bdwnl" in namespace "gc-1652"
  Sep 30 12:59:55.950: INFO: Deleting pod "simpletest.rc-bq82h" in namespace "gc-1652"
  Sep 30 12:59:55.969: INFO: Deleting pod "simpletest.rc-bqrb4" in namespace "gc-1652"
  Sep 30 12:59:55.982: INFO: Deleting pod "simpletest.rc-bvks6" in namespace "gc-1652"
  Sep 30 12:59:55.996: INFO: Deleting pod "simpletest.rc-c5ljc" in namespace "gc-1652"
  Sep 30 12:59:56.008: INFO: Deleting pod "simpletest.rc-c7j9b" in namespace "gc-1652"
  Sep 30 12:59:56.024: INFO: Deleting pod "simpletest.rc-c89j5" in namespace "gc-1652"
  Sep 30 12:59:56.033: INFO: Deleting pod "simpletest.rc-cwcbx" in namespace "gc-1652"
  Sep 30 12:59:56.048: INFO: Deleting pod "simpletest.rc-cwkhf" in namespace "gc-1652"
  Sep 30 12:59:56.061: INFO: Deleting pod "simpletest.rc-d7z8t" in namespace "gc-1652"
  Sep 30 12:59:56.074: INFO: Deleting pod "simpletest.rc-dddjl" in namespace "gc-1652"
  Sep 30 12:59:56.088: INFO: Deleting pod "simpletest.rc-dgrtj" in namespace "gc-1652"
  Sep 30 12:59:56.108: INFO: Deleting pod "simpletest.rc-fgmwz" in namespace "gc-1652"
  Sep 30 12:59:56.124: INFO: Deleting pod "simpletest.rc-gdlmh" in namespace "gc-1652"
  Sep 30 12:59:56.138: INFO: Deleting pod "simpletest.rc-gmdjg" in namespace "gc-1652"
  Sep 30 12:59:56.152: INFO: Deleting pod "simpletest.rc-gmfvc" in namespace "gc-1652"
  Sep 30 12:59:56.162: INFO: Deleting pod "simpletest.rc-gvnk9" in namespace "gc-1652"
  Sep 30 12:59:56.175: INFO: Deleting pod "simpletest.rc-gwgkc" in namespace "gc-1652"
  Sep 30 12:59:56.193: INFO: Deleting pod "simpletest.rc-gwgw8" in namespace "gc-1652"
  Sep 30 12:59:56.206: INFO: Deleting pod "simpletest.rc-h24kt" in namespace "gc-1652"
  Sep 30 12:59:56.225: INFO: Deleting pod "simpletest.rc-h6s74" in namespace "gc-1652"
  Sep 30 12:59:56.241: INFO: Deleting pod "simpletest.rc-hkpbc" in namespace "gc-1652"
  Sep 30 12:59:56.254: INFO: Deleting pod "simpletest.rc-hsd4d" in namespace "gc-1652"
  Sep 30 12:59:56.270: INFO: Deleting pod "simpletest.rc-hsx7t" in namespace "gc-1652"
  Sep 30 12:59:56.286: INFO: Deleting pod "simpletest.rc-jcrnx" in namespace "gc-1652"
  Sep 30 12:59:56.301: INFO: Deleting pod "simpletest.rc-jhwmv" in namespace "gc-1652"
  Sep 30 12:59:56.319: INFO: Deleting pod "simpletest.rc-jpl54" in namespace "gc-1652"
  Sep 30 12:59:56.332: INFO: Deleting pod "simpletest.rc-jt2l6" in namespace "gc-1652"
  Sep 30 12:59:56.348: INFO: Deleting pod "simpletest.rc-k6sxm" in namespace "gc-1652"
  Sep 30 12:59:56.363: INFO: Deleting pod "simpletest.rc-kq44z" in namespace "gc-1652"
  Sep 30 12:59:56.377: INFO: Deleting pod "simpletest.rc-ktfn5" in namespace "gc-1652"
  Sep 30 12:59:56.391: INFO: Deleting pod "simpletest.rc-l97sq" in namespace "gc-1652"
  Sep 30 12:59:56.409: INFO: Deleting pod "simpletest.rc-lds7w" in namespace "gc-1652"
  Sep 30 12:59:56.424: INFO: Deleting pod "simpletest.rc-lrvr4" in namespace "gc-1652"
  Sep 30 12:59:56.441: INFO: Deleting pod "simpletest.rc-lwb88" in namespace "gc-1652"
  Sep 30 12:59:56.452: INFO: Deleting pod "simpletest.rc-lwvq5" in namespace "gc-1652"
  Sep 30 12:59:56.469: INFO: Deleting pod "simpletest.rc-mg2z9" in namespace "gc-1652"
  Sep 30 12:59:56.487: INFO: Deleting pod "simpletest.rc-mpbbd" in namespace "gc-1652"
  Sep 30 12:59:56.503: INFO: Deleting pod "simpletest.rc-mqxcc" in namespace "gc-1652"
  Sep 30 12:59:56.515: INFO: Deleting pod "simpletest.rc-n6s7w" in namespace "gc-1652"
  Sep 30 12:59:56.546: INFO: Deleting pod "simpletest.rc-n8dmw" in namespace "gc-1652"
  Sep 30 12:59:56.598: INFO: Deleting pod "simpletest.rc-nljqc" in namespace "gc-1652"
  Sep 30 12:59:56.648: INFO: Deleting pod "simpletest.rc-nq8rq" in namespace "gc-1652"
  Sep 30 12:59:56.693: INFO: Deleting pod "simpletest.rc-p2hh2" in namespace "gc-1652"
  Sep 30 12:59:56.744: INFO: Deleting pod "simpletest.rc-pbw4k" in namespace "gc-1652"
  Sep 30 12:59:56.798: INFO: Deleting pod "simpletest.rc-pzrvk" in namespace "gc-1652"
  Sep 30 12:59:56.849: INFO: Deleting pod "simpletest.rc-q2f27" in namespace "gc-1652"
  Sep 30 12:59:56.896: INFO: Deleting pod "simpletest.rc-qfd7m" in namespace "gc-1652"
  Sep 30 12:59:56.944: INFO: Deleting pod "simpletest.rc-qjgr9" in namespace "gc-1652"
  Sep 30 12:59:56.999: INFO: Deleting pod "simpletest.rc-qlh24" in namespace "gc-1652"
  Sep 30 12:59:57.050: INFO: Deleting pod "simpletest.rc-qslqg" in namespace "gc-1652"
  Sep 30 12:59:57.095: INFO: Deleting pod "simpletest.rc-r2x74" in namespace "gc-1652"
  Sep 30 12:59:57.149: INFO: Deleting pod "simpletest.rc-rd65c" in namespace "gc-1652"
  Sep 30 12:59:57.206: INFO: Deleting pod "simpletest.rc-rn55c" in namespace "gc-1652"
  Sep 30 12:59:57.246: INFO: Deleting pod "simpletest.rc-rpjdf" in namespace "gc-1652"
  Sep 30 12:59:57.298: INFO: Deleting pod "simpletest.rc-sgb9p" in namespace "gc-1652"
  Sep 30 12:59:57.344: INFO: Deleting pod "simpletest.rc-tldl7" in namespace "gc-1652"
  Sep 30 12:59:57.414: INFO: Deleting pod "simpletest.rc-tpgg2" in namespace "gc-1652"
  Sep 30 12:59:57.444: INFO: Deleting pod "simpletest.rc-tw4px" in namespace "gc-1652"
  Sep 30 12:59:57.497: INFO: Deleting pod "simpletest.rc-vfg88" in namespace "gc-1652"
  Sep 30 12:59:57.548: INFO: Deleting pod "simpletest.rc-vfjqj" in namespace "gc-1652"
  Sep 30 12:59:57.603: INFO: Deleting pod "simpletest.rc-vp76q" in namespace "gc-1652"
  Sep 30 12:59:57.647: INFO: Deleting pod "simpletest.rc-vqvdk" in namespace "gc-1652"
  Sep 30 12:59:57.691: INFO: Deleting pod "simpletest.rc-vzb2f" in namespace "gc-1652"
  Sep 30 12:59:57.745: INFO: Deleting pod "simpletest.rc-w78gr" in namespace "gc-1652"
  Sep 30 12:59:57.792: INFO: Deleting pod "simpletest.rc-wb7lm" in namespace "gc-1652"
  Sep 30 12:59:57.849: INFO: Deleting pod "simpletest.rc-wbc8c" in namespace "gc-1652"
  Sep 30 12:59:57.898: INFO: Deleting pod "simpletest.rc-wbrzd" in namespace "gc-1652"
  Sep 30 12:59:57.948: INFO: Deleting pod "simpletest.rc-wqlgr" in namespace "gc-1652"
  Sep 30 12:59:57.993: INFO: Deleting pod "simpletest.rc-zmh4c" in namespace "gc-1652"
  Sep 30 12:59:58.048: INFO: Deleting pod "simpletest.rc-znp2z" in namespace "gc-1652"
  Sep 30 12:59:58.092: INFO: Deleting pod "simpletest.rc-zwzrr" in namespace "gc-1652"
  Sep 30 12:59:58.148: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-1652" for this suite. @ 09/30/23 12:59:58.184
â€¢ [43.766 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support proportional scaling [Conformance]
test/e2e/apps/deployment.go:160
  STEP: Creating a kubernetes client @ 09/30/23 12:59:58.243
  Sep 30 12:59:58.243: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename deployment @ 09/30/23 12:59:58.244
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 12:59:58.261
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 12:59:58.265
  Sep 30 12:59:58.269: INFO: Creating deployment "webserver-deployment"
  Sep 30 12:59:58.274: INFO: Waiting for observed generation 1
  Sep 30 13:00:00.284: INFO: Waiting for all required pods to come up
  Sep 30 13:00:00.288: INFO: Pod name httpd: Found 10 pods out of 10
  STEP: ensuring each pod is running @ 09/30/23 13:00:00.288
  Sep 30 13:00:00.288: INFO: Waiting for deployment "webserver-deployment" to complete
  Sep 30 13:00:00.295: INFO: Updating deployment "webserver-deployment" with a non-existent image
  Sep 30 13:00:00.307: INFO: Updating deployment webserver-deployment
  Sep 30 13:00:00.307: INFO: Waiting for observed generation 2
  Sep 30 13:00:02.315: INFO: Waiting for the first rollout's replicaset to have .status.availableReplicas = 8
  Sep 30 13:00:02.318: INFO: Waiting for the first rollout's replicaset to have .spec.replicas = 8
  Sep 30 13:00:02.321: INFO: Waiting for the first rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Sep 30 13:00:02.332: INFO: Verifying that the second rollout's replicaset has .status.availableReplicas = 0
  Sep 30 13:00:02.332: INFO: Waiting for the second rollout's replicaset to have .spec.replicas = 5
  Sep 30 13:00:02.335: INFO: Waiting for the second rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Sep 30 13:00:02.342: INFO: Verifying that deployment "webserver-deployment" has minimum required number of available replicas
  Sep 30 13:00:02.342: INFO: Scaling up the deployment "webserver-deployment" from 10 to 30
  Sep 30 13:00:02.351: INFO: Updating deployment webserver-deployment
  Sep 30 13:00:02.351: INFO: Waiting for the replicasets of deployment "webserver-deployment" to have desired number of replicas
  Sep 30 13:00:02.359: INFO: Verifying that first rollout's replicaset has .spec.replicas = 20
  Sep 30 13:00:02.362: INFO: Verifying that second rollout's replicaset has .spec.replicas = 13
  Sep 30 13:00:02.379: INFO: Deployment "webserver-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=20) "webserver-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "27b93294-39e6-4ce9-bc53-b60c91355428",
      ResourceVersion: (string) (len=5) "16073",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=635) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000160  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000170  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000180  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000190  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              000001a0  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001b0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001c0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001d0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001e0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001f0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              00000200  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000210  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000220  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000230  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000270  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=541) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 6e 61  |licas":{},"f:una|
              000001f0  76 61 69 6c 61 62 6c 65  52 65 70 6c 69 63 61 73  |vailableReplicas|
              00000200  22 3a 7b 7d 2c 22 66 3a  75 70 64 61 74 65 64 52  |":{},"f:updatedR|
              00000210  65 70 6c 69 63 61 73 22  3a 7b 7d 7d 7d           |eplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(30),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 2,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 3,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 3,
      Replicas: (int32) 13,
      UpdatedReplicas: (int32) 5,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      UnavailableReplicas: (int32) 5,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=59) "ReplicaSet \"webserver-deployment-9b4f5bf69\" is progressing."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Sep 30 13:00:02.392: INFO: New ReplicaSet "webserver-deployment-9b4f5bf69" of Deployment "webserver-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
      ResourceVersion: (string) (len=5) "16067",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "27b93294-39e6-4ce9-bc53-b60c91355428",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 32 37 62 39 33 32  39 34 2d 33 39 65 36 2d  |\"27b93294-39e6-|
              00000120  34 63 65 39 2d 62 63 35  33 2d 62 36 30 63 39 31  |4ce9-bc53-b60c91|
              00000130  33 35 35 34 32 38 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |355428\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(13),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69",
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 5,
      FullyLabeledReplicas: (int32) 5,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:00:02.393: INFO: All old ReplicaSets of Deployment "webserver-deployment":
  Sep 30 13:00:02.393: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "webserver-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
      ResourceVersion: (string) (len=5) "16064",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "27b93294-39e6-4ce9-bc53-b60c91355428",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 32 37 62 39 33 32  39 34 2d 33 39 65 36 2d  |\"27b93294-39e6-|
              00000120  34 63 65 39 2d 62 63 35  33 2d 62 36 30 63 39 31  |4ce9-bc53-b60c91|
              00000130  33 35 35 34 32 38 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |355428\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(20),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 8,
      FullyLabeledReplicas: (int32) 8,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:00:02.408: INFO: Pod "webserver-deployment-557759b7c7-4g7zd" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-4g7zd",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "04fafb2d-75f2-4eaa-84ad-8ba7f5f82bd3",
      ResourceVersion: (string) (len=5) "16098",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-lw4qc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-lw4qc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.409: INFO: Pod "webserver-deployment-557759b7c7-4wtl9" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-4wtl9",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a7a39598-dd9b-493d-87f6-ab6128d17ab1",
      ResourceVersion: (string) (len=5) "15940",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=522) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  32 32 34 2e 32 34 39 5c  |192.168.224.249\|
              000001e0  22 7d 22 3a 7b 22 2e 22  3a 7b 7d 2c 22 66 3a 69  |"}":{".":{},"f:i|
              000001f0  70 22 3a 7b 7d 7d 7d 2c  22 66 3a 73 74 61 72 74  |p":{}}},"f:start|
              00000200  54 69 6d 65 22 3a 7b 7d  7d 7d                    |Time":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-7nwcd",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-7nwcd",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-81-206",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.81.206",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=15) "192.168.224.249",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.224.249"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675599,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://c965df418a1d203df40aef580eb6f0daabbc9048c0147eefa1736be412bf90fb",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.411: INFO: Pod "webserver-deployment-557759b7c7-6rkwr" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-6rkwr",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "49c554e9-ef1a-43ee-b414-d8461dd78e35",
      ResourceVersion: (string) (len=5) "15965",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=520) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  31 30 2e 37 36 5c 22 7d  |192.168.10.76\"}|
              000001e0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              000001f0  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000200  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-txjtf",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-txjtf",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=13) "192.168.10.76",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "192.168.10.76"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675599,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://72a302bef46290d0cd3050678d5a00a4c3d6618a940f2cfe067c08fcc0d11616",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.413: INFO: Pod "webserver-deployment-557759b7c7-6v9gp" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-6v9gp",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ee569975-bdac-4aab-9c16-6ab785de7e36",
      ResourceVersion: (string) (len=5) "15934",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=522) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  32 32 34 2e 32 34 38 5c  |192.168.224.248\|
              000001e0  22 7d 22 3a 7b 22 2e 22  3a 7b 7d 2c 22 66 3a 69  |"}":{".":{},"f:i|
              000001f0  70 22 3a 7b 7d 7d 7d 2c  22 66 3a 73 74 61 72 74  |p":{}}},"f:start|
              00000200  54 69 6d 65 22 3a 7b 7d  7d 7d                    |Time":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-q6jnx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-q6jnx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-81-206",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.81.206",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=15) "192.168.224.248",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.224.248"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675599,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://2c912ae7372a977c40d98cf333c85898d60e865175ae58e8843b84be6216a69c",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.415: INFO: Pod "webserver-deployment-557759b7c7-7ldr9" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-7ldr9",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7d5e1166-f54c-48e4-9219-023808e0edc9",
      ResourceVersion: (string) (len=5) "16093",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8lqbp",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8lqbp",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.417: INFO: Pod "webserver-deployment-557759b7c7-7wss5" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-7wss5",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "284fe5da-af42-4683-832d-522b3fd06d04",
      ResourceVersion: (string) (len=5) "16087",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-hjngr",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-hjngr",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.418: INFO: Pod "webserver-deployment-557759b7c7-929mc" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-929mc",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d3d60255-01de-4f04-8652-c0805c802fb6",
      ResourceVersion: (string) (len=5) "16099",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-2fqjv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-2fqjv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.420: INFO: Pod "webserver-deployment-557759b7c7-fjzqr" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-fjzqr",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "38352fb4-ef30-4cef-9cee-f68d6cb95db8",
      ResourceVersion: (string) (len=5) "15956",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=520) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  31 30 2e 37 35 5c 22 7d  |192.168.10.75\"}|
              000001e0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              000001f0  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000200  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-jnxtn",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-jnxtn",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=13) "192.168.10.75",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "192.168.10.75"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675599,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://c72c6d2a2f76d76648290e33984262d30b6a6bdd6660464cd2c7f21a2d74b494",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.422: INFO: Pod "webserver-deployment-557759b7c7-g2cdk" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-g2cdk",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2dd4a34f-0d99-45a0-ab19-09c7c3ee73ac",
      ResourceVersion: (string) (len=5) "16089",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5vxxq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5vxxq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-81-206",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.423: INFO: Pod "webserver-deployment-557759b7c7-glmcd" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-glmcd",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2cb32885-98e5-4399-bf1e-040a8c6bfc1f",
      ResourceVersion: (string) (len=5) "16091",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-w8xjb",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-w8xjb",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-81-206",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.424: INFO: Pod "webserver-deployment-557759b7c7-hfsvn" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-hfsvn",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "35dfe53c-75bf-4e5a-ae88-2979633bd138",
      ResourceVersion: (string) (len=5) "16088",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-jdw5w",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-jdw5w",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.426: INFO: Pod "webserver-deployment-557759b7c7-k6nrc" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-k6nrc",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "578799d2-802e-45e5-922c-254e4677cb3d",
      ResourceVersion: (string) (len=5) "16079",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-wtg74",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-wtg74",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.428: INFO: Pod "webserver-deployment-557759b7c7-kbdzp" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-kbdzp",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "95e6a500-7c4b-47f6-ae3c-77b84c4f7179",
      ResourceVersion: (string) (len=5) "15953",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=521) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  33 35 2e 31 39 38 5c 22  |192.168.35.198\"|
              000001e0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 70  |}":{".":{},"f:ip|
              000001f0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 74 61 72 74 54  |":{}}},"f:startT|
              00000200  69 6d 65 22 3a 7b 7d 7d  7d                       |ime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mb85m",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mb85m",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.39.81",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=14) "192.168.35.198",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.35.198"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675599,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://d86a4de89d497cc01a695afff0a51e5a668227aa74fe853cad43ba10462038f1",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.430: INFO: Pod "webserver-deployment-557759b7c7-mph2z" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-mph2z",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e1a6420f-b4b9-40e0-aab0-7dc0b4627dac",
      ResourceVersion: (string) (len=5) "15937",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=522) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  32 32 34 2e 32 34 37 5c  |192.168.224.247\|
              000001e0  22 7d 22 3a 7b 22 2e 22  3a 7b 7d 2c 22 66 3a 69  |"}":{".":{},"f:i|
              000001f0  70 22 3a 7b 7d 7d 7d 2c  22 66 3a 73 74 61 72 74  |p":{}}},"f:start|
              00000200  54 69 6d 65 22 3a 7b 7d  7d 7d                    |Time":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-49km5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-49km5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-81-206",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.81.206",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=15) "192.168.224.247",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.224.247"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675599,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://139c721c19785e827fb6de3b27cd157fd97490e1b4e8caa75a783d7a57ce9af0",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.431: INFO: Pod "webserver-deployment-557759b7c7-nd7cr" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-nd7cr",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2c535f5e-ebc8-4013-9c85-50bbeae8254e",
      ResourceVersion: (string) (len=5) "15950",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=521) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  33 35 2e 31 39 37 5c 22  |192.168.35.197\"|
              000001e0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 70  |}":{".":{},"f:ip|
              000001f0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 74 61 72 74 54  |":{}}},"f:startT|
              00000200  69 6d 65 22 3a 7b 7d 7d  7d                       |ime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-v7gkq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-v7gkq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.39.81",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=14) "192.168.35.197",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.35.197"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675599,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://4c6627d558f50767c384ef647eef393eb7c36ac88829051695a8ba6602d34af0",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.433: INFO: Pod "webserver-deployment-557759b7c7-strp5" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-strp5",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8e988388-2151-48ab-bcfe-03b8fa9551b8",
      ResourceVersion: (string) (len=5) "16097",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6f6bn",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6f6bn",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.434: INFO: Pod "webserver-deployment-557759b7c7-vgh9w" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-vgh9w",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fa439bdc-083d-4d56-b1a8-e66eb3715cbd",
      ResourceVersion: (string) (len=5) "16075",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-kzrjj",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-kzrjj",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.436: INFO: Pod "webserver-deployment-557759b7c7-vw67v" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-vw67v",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ebd1b046-b30e-4b2e-a422-12e5a320fb94",
      ResourceVersion: (string) (len=5) "16094",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-w8bpx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-w8bpx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.437: INFO: Pod "webserver-deployment-557759b7c7-x6fxt" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-x6fxt",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "da7b0a14-05ca-4d9d-8c49-523e49b8ad67",
      ResourceVersion: (string) (len=5) "16100",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-sf7vq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-sf7vq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.438: INFO: Pod "webserver-deployment-557759b7c7-x6lpr" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-x6lpr",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "810ba809-3a66-4cd2-aa16-2bfe458f082a",
      ResourceVersion: (string) (len=5) "15947",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "36427304-5d2e-4708-8522-dfa60c08d225",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 36  34 32 37 33 30 34 2d 35  |d\":\"36427304-5|
              00000090  64 32 65 2d 34 37 30 38  2d 38 35 32 32 2d 64 66  |d2e-4708-8522-df|
              000000a0  61 36 30 63 30 38 64 32  32 35 5c 22 7d 22 3a 7b  |a60c08d225\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=521) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  33 35 2e 31 39 36 5c 22  |192.168.35.196\"|
              000001e0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 70  |}":{".":{},"f:ip|
              000001f0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 74 61 72 74 54  |":{}}},"f:startT|
              00000200  69 6d 65 22 3a 7b 7d 7d  7d                       |ime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-zl8hx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-zl8hx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675599,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675598,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.39.81",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=14) "192.168.35.196",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.35.196"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675598,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675599,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://ca0f2a3b7ae52f23a9ee862beaa22c6533985a8d9c9b0f88b2eaa338239a08cf",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.440: INFO: Pod "webserver-deployment-9b4f5bf69-2tx4x" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-2tx4x",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "68d4d13a-e455-4a03-8ed0-241b9f137ab3",
      ResourceVersion: (string) (len=5) "16083",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-khbnv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-khbnv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-81-206",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.441: INFO: Pod "webserver-deployment-9b4f5bf69-4j442" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-4j442",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "14521a9e-d417-4321-8e8c-bd6053cfb646",
      ResourceVersion: (string) (len=5) "16101",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6lvzd",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6lvzd",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.442: INFO: Pod "webserver-deployment-9b4f5bf69-hxqk4" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-hxqk4",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d655c78e-47a9-49a7-8c27-75e34d749475",
      ResourceVersion: (string) (len=5) "16095",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-sqxvp",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-sqxvp",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.444: INFO: Pod "webserver-deployment-9b4f5bf69-kx8zs" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-kx8zs",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3a89e25f-97c3-48a1-8135-c8dacd3a5b52",
      ResourceVersion: (string) (len=5) "15995",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mq7v2",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mq7v2",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.39.81",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.446: INFO: Pod "webserver-deployment-9b4f5bf69-m6lp4" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-m6lp4",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "bf0f88e1-4b94-45de-8bdd-2dd3cfa07eff",
      ResourceVersion: (string) (len=5) "16016",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-4h7zg",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-4h7zg",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.39.81",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.447: INFO: Pod "webserver-deployment-9b4f5bf69-n7gv4" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-n7gv4",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fea95827-995c-478a-81bd-49ba612eab1f",
      ResourceVersion: (string) (len=5) "16053",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675601,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 39 32  |"k:{\"ip\":\"192|
              00000200  2e 31 36 38 2e 31 30 2e  37 37 5c 22 7d 22 3a 7b  |.168.10.77\"}":{|
              00000210  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              00000220  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-rqjh5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-rqjh5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=13) "192.168.10.77",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "192.168.10.77"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.449: INFO: Pod "webserver-deployment-9b4f5bf69-p5kdn" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-p5kdn",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d432f54c-069b-421a-ba57-925a5c130113",
      ResourceVersion: (string) (len=5) "16090",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-94jct",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-94jct",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.450: INFO: Pod "webserver-deployment-9b4f5bf69-pqq5s" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-pqq5s",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7cba0ad7-8d99-40b9-838d-6b0ce9525063",
      ResourceVersion: (string) (len=5) "16062",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=567) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 39 32  |"k:{\"ip\":\"192|
              00000200  2e 31 36 38 2e 32 32 34  2e 32 35 30 5c 22 7d 22  |.168.224.250\"}"|
              00000210  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000220  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000230  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-qkz8c",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-qkz8c",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-81-206",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.81.206",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=15) "192.168.224.250",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.224.250"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.452: INFO: Pod "webserver-deployment-9b4f5bf69-rrhrc" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-rrhrc",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "435521a9-be3a-4157-b5d8-4895ae08ff36",
      ResourceVersion: (string) (len=5) "16014",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-sln8m",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-sln8m",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675600,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675600,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.454: INFO: Pod "webserver-deployment-9b4f5bf69-v686t" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-v686t",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "67fb212d-4099-45cb-842b-992002e8e935",
      ResourceVersion: (string) (len=5) "16096",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-w26bj",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-w26bj",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.455: INFO: Pod "webserver-deployment-9b4f5bf69-vbdjv" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-vbdjv",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4787",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "aaca7dab-0e0b-44e8-84fb-2ad3387fbf72",
      ResourceVersion: (string) (len=5) "16092",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675602,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ec396540-ff3c-4e6c-aab6-b6bc6cdbea84",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675602,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 63  33 39 36 35 34 30 2d 66  |d\":\"ec396540-f|
              00000090  66 33 63 2d 34 65 36 63  2d 61 61 62 36 2d 62 36  |f3c-4e6c-aab6-b6|
              000000a0  62 63 36 63 64 62 65 61  38 34 5c 22 7d 22 3a 7b  |bc6cdbea84\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-65d4k",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-65d4k",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:00:02.456: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-4787" for this suite. @ 09/30/23 13:00:02.462
â€¢ [4.230 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]
test/e2e/apimachinery/watch.go:334
  STEP: Creating a kubernetes client @ 09/30/23 13:00:02.473
  Sep 30 13:00:02.473: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename watch @ 09/30/23 13:00:02.474
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:02.492
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:02.497
  STEP: getting a starting resourceVersion @ 09/30/23 13:00:02.501
  STEP: starting a background goroutine to produce watch events @ 09/30/23 13:00:02.504
  STEP: creating watches starting from each resource version of the events produced and verifying they all receive resource versions in the same order @ 09/30/23 13:00:02.504
  Sep 30 13:00:05.280: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-7572" for this suite. @ 09/30/23 13:00:05.329
â€¢ [2.909 seconds]
------------------------------
SSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support --unix-socket=/path  [Conformance]
test/e2e/kubectl/kubectl.go:1806
  STEP: Creating a kubernetes client @ 09/30/23 13:00:05.382
  Sep 30 13:00:05.382: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:00:05.383
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:05.402
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:05.405
  STEP: Starting the proxy @ 09/30/23 13:00:05.41
  Sep 30 13:00:05.410: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-8397 proxy --unix-socket=/tmp/kubectl-proxy-unix2256452739/test'
  STEP: retrieving proxy /api/ output @ 09/30/23 13:00:05.464
  Sep 30 13:00:05.464: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-8397" for this suite. @ 09/30/23 13:00:05.469
â€¢ [0.095 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]
test/e2e/network/proxy.go:286
  STEP: Creating a kubernetes client @ 09/30/23 13:00:05.478
  Sep 30 13:00:05.478: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename proxy @ 09/30/23 13:00:05.479
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:05.496
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:05.5
  Sep 30 13:00:05.504: INFO: Creating pod...
  Sep 30 13:00:07.525: INFO: Creating service...
  Sep 30 13:00:07.538: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/pods/agnhost/proxy/some/path/with/DELETE
  Sep 30 13:00:07.545: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Sep 30 13:00:07.545: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/pods/agnhost/proxy/some/path/with/GET
  Sep 30 13:00:07.550: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Sep 30 13:00:07.550: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/pods/agnhost/proxy/some/path/with/HEAD
  Sep 30 13:00:07.555: INFO: http.Client request:HEAD | StatusCode:200
  Sep 30 13:00:07.555: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/pods/agnhost/proxy/some/path/with/OPTIONS
  Sep 30 13:00:07.560: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Sep 30 13:00:07.560: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/pods/agnhost/proxy/some/path/with/PATCH
  Sep 30 13:00:07.565: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Sep 30 13:00:07.565: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/pods/agnhost/proxy/some/path/with/POST
  Sep 30 13:00:07.570: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Sep 30 13:00:07.570: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/pods/agnhost/proxy/some/path/with/PUT
  Sep 30 13:00:07.574: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Sep 30 13:00:07.574: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/services/test-service/proxy/some/path/with/DELETE
  Sep 30 13:00:07.581: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Sep 30 13:00:07.581: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/services/test-service/proxy/some/path/with/GET
  Sep 30 13:00:07.588: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Sep 30 13:00:07.588: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/services/test-service/proxy/some/path/with/HEAD
  Sep 30 13:00:07.594: INFO: http.Client request:HEAD | StatusCode:200
  Sep 30 13:00:07.594: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/services/test-service/proxy/some/path/with/OPTIONS
  Sep 30 13:00:07.600: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Sep 30 13:00:07.600: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/services/test-service/proxy/some/path/with/PATCH
  Sep 30 13:00:07.607: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Sep 30 13:00:07.607: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/services/test-service/proxy/some/path/with/POST
  Sep 30 13:00:07.613: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Sep 30 13:00:07.613: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1638/services/test-service/proxy/some/path/with/PUT
  Sep 30 13:00:07.619: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Sep 30 13:00:07.619: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-1638" for this suite. @ 09/30/23 13:00:07.624
â€¢ [2.155 seconds]
------------------------------
[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:52
  STEP: Creating a kubernetes client @ 09/30/23 13:00:07.633
  Sep 30 13:00:07.633: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubelet-test @ 09/30/23 13:00:07.634
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:07.651
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:07.654
  Sep 30 13:00:09.691: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-2881" for this suite. @ 09/30/23 13:00:09.695
â€¢ [2.068 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:250
  STEP: Creating a kubernetes client @ 09/30/23 13:00:09.704
  Sep 30 13:00:09.704: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:00:09.705
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:09.721
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:09.725
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:00:09.729
  STEP: Saw pod success @ 09/30/23 13:00:13.753
  Sep 30 13:00:13.756: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-92f3efac-aa4a-461c-862c-5b13cd91656e container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:00:13.764
  Sep 30 13:00:13.781: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4482" for this suite. @ 09/30/23 13:00:13.785
â€¢ [4.089 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]
test/e2e/apimachinery/field_validation.go:350
  STEP: Creating a kubernetes client @ 09/30/23 13:00:13.793
  Sep 30 13:00:13.793: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename field-validation @ 09/30/23 13:00:13.794
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:13.81
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:13.814
  Sep 30 13:00:13.818: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  W0930 13:00:13.819652      23 field_validation.go:423] props: &JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{spec: {  <nil>  object   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[cronSpec:{  <nil>  string   nil <nil> false <nil> false <nil> <nil> ^(\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}$ <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} foo:{  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} ports:{  <nil>  array   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] &JSONSchemaPropsOrArray{Schema:&JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[containerPort protocol],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{containerPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostIP: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},name: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},protocol: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},},JSONSchemas:[]JSONSchemaProps{},} [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [containerPort protocol] 0xc00090dfd0 <nil> []}] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},}
  W0930 13:00:16.367931      23 warnings.go:70] unknown field "alpha"
  W0930 13:00:16.367963      23 warnings.go:70] unknown field "beta"
  W0930 13:00:16.367968      23 warnings.go:70] unknown field "delta"
  W0930 13:00:16.367974      23 warnings.go:70] unknown field "epsilon"
  W0930 13:00:16.367979      23 warnings.go:70] unknown field "gamma"
  Sep 30 13:00:16.899: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-417" for this suite. @ 09/30/23 13:00:16.917
â€¢ [3.131 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:619
  STEP: Creating a kubernetes client @ 09/30/23 13:00:16.924
  Sep 30 13:00:16.924: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 13:00:16.925
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:16.94
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:16.944
  Sep 30 13:00:16.948: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: creating the pod @ 09/30/23 13:00:16.949
  STEP: submitting the pod to kubernetes @ 09/30/23 13:00:16.949
  Sep 30 13:00:18.996: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-8858" for this suite. @ 09/30/23 13:00:19.001
â€¢ [2.084 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]
test/e2e/scheduling/predicates.go:467
  STEP: Creating a kubernetes client @ 09/30/23 13:00:19.008
  Sep 30 13:00:19.008: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-pred @ 09/30/23 13:00:19.009
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:19.025
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:19.029
  Sep 30 13:00:19.033: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Sep 30 13:00:19.042: INFO: Waiting for terminating namespaces to be deleted...
  Sep 30 13:00:19.046: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-31-30 before test
  Sep 30 13:00:19.053: INFO: nginx-ingress-controller-kubernetes-worker-w7gdg from ingress-nginx-kubernetes-worker started at 2023-09-30 12:45:41 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.053: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 13:00:19.053: INFO: calico-node-cbqpx from kube-system started at 2023-09-30 12:13:54 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.053: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 13:00:19.053: INFO: busybox-scheduling-5603f8af-6f50-44b6-b430-bb662a66d33b from kubelet-test-2881 started at 2023-09-30 13:00:07 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.053: INFO: 	Container busybox-scheduling-5603f8af-6f50-44b6-b430-bb662a66d33b ready: true, restart count 0
  Sep 30 13:00:19.053: INFO: pod-logs-websocket-e2cd80dd-ec8b-42e1-ae4e-9c6ee9d54774 from pods-8858 started at 2023-09-30 13:00:16 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.053: INFO: 	Container main ready: true, restart count 0
  Sep 30 13:00:19.053: INFO: sonobuoy from sonobuoy started at 2023-09-30 12:19:38 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.053: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Sep 30 13:00:19.053: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-8zjmf from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:00:19.053: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:00:19.053: INFO: 	Container systemd-logs ready: true, restart count 0
  Sep 30 13:00:19.053: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-39-81 before test
  Sep 30 13:00:19.060: INFO: nginx-ingress-controller-kubernetes-worker-7vl6k from ingress-nginx-kubernetes-worker started at 2023-09-30 12:10:20 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.060: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 13:00:19.060: INFO: calico-node-dk4rw from kube-system started at 2023-09-30 12:10:04 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.060: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 13:00:19.060: INFO: sonobuoy-e2e-job-65ff53df4dd046c8 from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:00:19.060: INFO: 	Container e2e ready: true, restart count 0
  Sep 30 13:00:19.060: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:00:19.060: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-mghww from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:00:19.060: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:00:19.060: INFO: 	Container systemd-logs ready: true, restart count 0
  Sep 30 13:00:19.060: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-81-206 before test
  Sep 30 13:00:19.068: INFO: default-http-backend-kubernetes-worker-5c79cc75ff-66tqr from ingress-nginx-kubernetes-worker started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.068: INFO: 	Container default-http-backend-kubernetes-worker ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: nginx-ingress-controller-kubernetes-worker-h7hhr from ingress-nginx-kubernetes-worker started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.068: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: calico-node-6bdbf from kube-system started at 2023-09-30 12:08:56 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.068: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: coredns-59cfb5bf46-6jbqw from kube-system started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.068: INFO: 	Container coredns ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: kube-state-metrics-775d9f4f79-6xd92 from kube-system started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.068: INFO: 	Container kube-state-metrics ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: metrics-server-v0.6.3-69d7fbfdf8-pwwn7 from kube-system started at 2023-09-30 12:09:12 +0000 UTC (2 container statuses recorded)
  Sep 30 13:00:19.068: INFO: 	Container metrics-server ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: 	Container metrics-server-nanny ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: dashboard-metrics-scraper-5dd7cb5fc-lw5nw from kubernetes-dashboard started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.068: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: kubernetes-dashboard-7b899cb9d9-pjt4m from kubernetes-dashboard started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:00:19.068: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-87x6p from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:00:19.068: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:00:19.068: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 09/30/23 13:00:19.068
  STEP: Explicitly delete pod here to free the resource it takes. @ 09/30/23 13:00:21.092
  STEP: Trying to apply a random label on the found node. @ 09/30/23 13:00:21.105
  STEP: verifying the node has the label kubernetes.io/e2e-6175e37d-4b61-42c6-a3b5-4d7000d219af 42 @ 09/30/23 13:00:21.115
  STEP: Trying to relaunch the pod, now with labels. @ 09/30/23 13:00:21.123
  STEP: removing the label kubernetes.io/e2e-6175e37d-4b61-42c6-a3b5-4d7000d219af off the node ip-172-31-39-81 @ 09/30/23 13:00:23.142
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-6175e37d-4b61-42c6-a3b5-4d7000d219af @ 09/30/23 13:00:23.154
  Sep 30 13:00:23.158: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-942" for this suite. @ 09/30/23 13:00:23.163
â€¢ [4.161 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]
test/e2e/apimachinery/webhook.go:498
  STEP: Creating a kubernetes client @ 09/30/23 13:00:23.17
  Sep 30 13:00:23.170: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:00:23.171
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:23.188
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:23.192
  STEP: Setting up server cert @ 09/30/23 13:00:23.217
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:00:23.931
  STEP: Deploying the webhook pod @ 09/30/23 13:00:23.94
  STEP: Wait for the deployment to be ready @ 09/30/23 13:00:23.957
  Sep 30 13:00:23.965: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 13:00:25.978
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:00:25.988
  Sep 30 13:00:26.988: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a mutating webhook configuration @ 09/30/23 13:00:26.996
  STEP: Updating a mutating webhook configuration's rules to not include the create operation @ 09/30/23 13:00:27.018
  STEP: Creating a configMap that should not be mutated @ 09/30/23 13:00:27.026
  STEP: Patching a mutating webhook configuration's rules to include the create operation @ 09/30/23 13:00:27.038
  STEP: Creating a configMap that should be mutated @ 09/30/23 13:00:27.046
  Sep 30 13:00:27.074: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1799" for this suite. @ 09/30/23 13:00:27.12
  STEP: Destroying namespace "webhook-markers-594" for this suite. @ 09/30/23 13:00:27.129
â€¢ [3.965 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]
test/e2e/network/service.go:1533
  STEP: Creating a kubernetes client @ 09/30/23 13:00:27.139
  Sep 30 13:00:27.140: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:00:27.14
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:27.157
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:27.161
  STEP: creating a service nodeport-service with the type=NodePort in namespace services-985 @ 09/30/23 13:00:27.165
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 09/30/23 13:00:27.182
  STEP: creating service externalsvc in namespace services-985 @ 09/30/23 13:00:27.182
  STEP: creating replication controller externalsvc in namespace services-985 @ 09/30/23 13:00:27.191
  I0930 13:00:27.200825      23 runners.go:197] Created replication controller with name: externalsvc, namespace: services-985, replica count: 2
  I0930 13:00:30.251509      23 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the NodePort service to type=ExternalName @ 09/30/23 13:00:30.257
  Sep 30 13:00:30.275: INFO: Creating new exec pod
  Sep 30 13:00:32.295: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-985 exec execpodhrzx9 -- /bin/sh -x -c nslookup nodeport-service.services-985.svc.cluster.local'
  Sep 30 13:00:32.536: INFO: stderr: "+ nslookup nodeport-service.services-985.svc.cluster.local\n"
  Sep 30 13:00:32.536: INFO: stdout: "Server:\t\t10.152.183.166\nAddress:\t10.152.183.166#53\n\nnodeport-service.services-985.svc.cluster.local\tcanonical name = externalsvc.services-985.svc.cluster.local.\nName:\texternalsvc.services-985.svc.cluster.local\nAddress: 10.152.183.244\n\n"
  Sep 30 13:00:32.536: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController externalsvc in namespace services-985, will wait for the garbage collector to delete the pods @ 09/30/23 13:00:32.55
  Sep 30 13:00:32.611: INFO: Deleting ReplicationController externalsvc took: 6.712487ms
  Sep 30 13:00:32.712: INFO: Terminating ReplicationController externalsvc pods took: 101.100515ms
  Sep 30 13:00:35.936: INFO: Cleaning up the NodePort to ExternalName test service
  STEP: Destroying namespace "services-985" for this suite. @ 09/30/23 13:00:35.947
â€¢ [8.815 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]
test/e2e/apps/daemon_set.go:385
  STEP: Creating a kubernetes client @ 09/30/23 13:00:35.956
  Sep 30 13:00:35.957: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename daemonsets @ 09/30/23 13:00:35.957
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:35.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:35.979
  Sep 30 13:00:36.003: INFO: Creating simple daemon set daemon-set
  STEP: Check that daemon pods launch on every node of the cluster. @ 09/30/23 13:00:36.01
  Sep 30 13:00:36.014: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:36.014: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:36.018: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:00:36.018: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 13:00:37.024: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:37.024: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:37.028: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:00:37.029: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 13:00:38.022: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:38.022: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:38.029: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Sep 30 13:00:38.029: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Update daemon pods image. @ 09/30/23 13:00:38.044
  STEP: Check that daemon pods images are updated. @ 09/30/23 13:00:38.056
  Sep 30 13:00:38.060: INFO: Wrong image for pod: daemon-set-bvstj. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Sep 30 13:00:38.060: INFO: Wrong image for pod: daemon-set-k9v9j. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Sep 30 13:00:38.060: INFO: Wrong image for pod: daemon-set-rq5g8. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Sep 30 13:00:38.067: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:38.067: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:39.071: INFO: Wrong image for pod: daemon-set-bvstj. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Sep 30 13:00:39.071: INFO: Pod daemon-set-jhgnc is not available
  Sep 30 13:00:39.071: INFO: Wrong image for pod: daemon-set-k9v9j. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Sep 30 13:00:39.077: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:39.077: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:40.072: INFO: Wrong image for pod: daemon-set-bvstj. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Sep 30 13:00:40.072: INFO: Pod daemon-set-jhgnc is not available
  Sep 30 13:00:40.072: INFO: Wrong image for pod: daemon-set-k9v9j. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Sep 30 13:00:40.077: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:40.077: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:41.072: INFO: Pod daemon-set-4k5zr is not available
  Sep 30 13:00:41.072: INFO: Wrong image for pod: daemon-set-k9v9j. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Sep 30 13:00:41.080: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:41.080: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:42.071: INFO: Pod daemon-set-4k5zr is not available
  Sep 30 13:00:42.071: INFO: Wrong image for pod: daemon-set-k9v9j. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Sep 30 13:00:42.075: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:42.075: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:43.072: INFO: Pod daemon-set-8rqcj is not available
  Sep 30 13:00:43.076: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:43.076: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  STEP: Check that daemon pods are still running on every node of the cluster. @ 09/30/23 13:00:43.076
  Sep 30 13:00:43.081: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:43.081: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:43.085: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Sep 30 13:00:43.085: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 13:00:44.090: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:44.090: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:00:44.093: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Sep 30 13:00:44.093: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 09/30/23 13:00:44.113
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-1380, will wait for the garbage collector to delete the pods @ 09/30/23 13:00:44.113
  Sep 30 13:00:44.173: INFO: Deleting DaemonSet.extensions daemon-set took: 6.616989ms
  Sep 30 13:00:44.274: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.465766ms
  Sep 30 13:00:45.979: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:00:45.979: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Sep 30 13:00:45.982: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"17703"},"items":null}

  Sep 30 13:00:45.985: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"17703"},"items":null}

  Sep 30 13:00:46.000: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-1380" for this suite. @ 09/30/23 13:00:46.004
â€¢ [10.055 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] DNS should provide DNS for pods for Hostname [Conformance]
test/e2e/network/dns.go:244
  STEP: Creating a kubernetes client @ 09/30/23 13:00:46.012
  Sep 30 13:00:46.012: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename dns @ 09/30/23 13:00:46.013
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:46.03
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:46.033
  STEP: Creating a test headless service @ 09/30/23 13:00:46.037
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-3371.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-2.dns-test-service-2.dns-3371.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/wheezy_hosts@dns-querier-2;sleep 1; done
   @ 09/30/23 13:00:46.043
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-3371.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-2.dns-test-service-2.dns-3371.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/jessie_hosts@dns-querier-2;sleep 1; done
   @ 09/30/23 13:00:46.043
  STEP: creating a pod to probe DNS @ 09/30/23 13:00:46.043
  STEP: submitting the pod to kubernetes @ 09/30/23 13:00:46.043
  STEP: retrieving the pod @ 09/30/23 13:00:54.078
  STEP: looking for the results for each expected name from probers @ 09/30/23 13:00:54.082
  Sep 30 13:00:54.101: INFO: DNS probes using dns-3371/dns-test-606c168b-1ccb-442b-b348-32f50e587619 succeeded

  Sep 30 13:00:54.101: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:00:54.104
  STEP: deleting the test headless service @ 09/30/23 13:00:54.115
  STEP: Destroying namespace "dns-3371" for this suite. @ 09/30/23 13:00:54.13
â€¢ [8.125 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]
test/e2e/apimachinery/webhook.go:250
  STEP: Creating a kubernetes client @ 09/30/23 13:00:54.139
  Sep 30 13:00:54.139: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:00:54.14
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:54.155
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:54.159
  STEP: Setting up server cert @ 09/30/23 13:00:54.188
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:00:54.685
  STEP: Deploying the webhook pod @ 09/30/23 13:00:54.693
  STEP: Wait for the deployment to be ready @ 09/30/23 13:00:54.708
  Sep 30 13:00:54.714: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 13:00:56.727
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:00:56.737
  Sep 30 13:00:57.738: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating configmap webhook via the AdmissionRegistration API @ 09/30/23 13:00:57.744
  STEP: create a configmap that should be updated by the webhook @ 09/30/23 13:00:57.763
  Sep 30 13:00:57.778: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6068" for this suite. @ 09/30/23 13:00:57.83
  STEP: Destroying namespace "webhook-markers-3271" for this suite. @ 09/30/23 13:00:57.838
â€¢ [3.706 seconds]
------------------------------
SS
------------------------------
[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:54
  STEP: Creating a kubernetes client @ 09/30/23 13:00:57.845
  Sep 30 13:00:57.845: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:00:57.846
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:00:57.862
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:00:57.866
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:00:57.87
  STEP: Saw pod success @ 09/30/23 13:01:01.891
  Sep 30 13:01:01.895: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-a0dc165b-9113-422b-a412-765259c9f382 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:01:01.907
  Sep 30 13:01:01.924: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6433" for this suite. @ 09/30/23 13:01:01.927
â€¢ [4.089 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should support CronJob API operations [Conformance]
test/e2e/apps/cronjob.go:324
  STEP: Creating a kubernetes client @ 09/30/23 13:01:01.935
  Sep 30 13:01:01.935: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename cronjob @ 09/30/23 13:01:01.936
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:01.954
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:01.958
  STEP: Creating a cronjob @ 09/30/23 13:01:01.963
  STEP: creating @ 09/30/23 13:01:01.963
  STEP: getting @ 09/30/23 13:01:01.969
  STEP: listing @ 09/30/23 13:01:01.972
  STEP: watching @ 09/30/23 13:01:01.976
  Sep 30 13:01:01.976: INFO: starting watch
  STEP: cluster-wide listing @ 09/30/23 13:01:01.978
  STEP: cluster-wide watching @ 09/30/23 13:01:01.982
  Sep 30 13:01:01.982: INFO: starting watch
  STEP: patching @ 09/30/23 13:01:01.983
  STEP: updating @ 09/30/23 13:01:01.99
  Sep 30 13:01:02.000: INFO: waiting for watch events with expected annotations
  Sep 30 13:01:02.000: INFO: saw patched and updated annotations
  STEP: patching /status @ 09/30/23 13:01:02
  STEP: updating /status @ 09/30/23 13:01:02.006
  STEP: get /status @ 09/30/23 13:01:02.015
  STEP: deleting @ 09/30/23 13:01:02.019
  STEP: deleting a collection @ 09/30/23 13:01:02.035
  Sep 30 13:01:02.047: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-5570" for this suite. @ 09/30/23 13:01:02.052
â€¢ [0.123 seconds]
------------------------------
SSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]
test/e2e/network/service.go:1416
  STEP: Creating a kubernetes client @ 09/30/23 13:01:02.059
  Sep 30 13:01:02.059: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:01:02.059
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:02.078
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:02.082
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-5116 @ 09/30/23 13:01:02.086
  STEP: changing the ExternalName service to type=ClusterIP @ 09/30/23 13:01:02.091
  STEP: creating replication controller externalname-service in namespace services-5116 @ 09/30/23 13:01:02.106
  I0930 13:01:02.113017      23 runners.go:197] Created replication controller with name: externalname-service, namespace: services-5116, replica count: 2
  I0930 13:01:05.164806      23 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Sep 30 13:01:05.164: INFO: Creating new exec pod
  Sep 30 13:01:08.184: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-5116 exec execpodcsq7m -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Sep 30 13:01:08.381: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Sep 30 13:01:08.381: INFO: stdout: "externalname-service-wm2wn"
  Sep 30 13:01:08.381: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-5116 exec execpodcsq7m -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.216 80'
  Sep 30 13:01:08.566: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.216 80\nConnection to 10.152.183.216 80 port [tcp/http] succeeded!\n"
  Sep 30 13:01:08.566: INFO: stdout: ""
  Sep 30 13:01:09.567: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-5116 exec execpodcsq7m -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.216 80'
  Sep 30 13:01:09.769: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.216 80\nConnection to 10.152.183.216 80 port [tcp/http] succeeded!\n"
  Sep 30 13:01:09.769: INFO: stdout: "externalname-service-97vjw"
  Sep 30 13:01:09.769: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 13:01:09.773: INFO: Cleaning up the ExternalName to ClusterIP test service
  STEP: Destroying namespace "services-5116" for this suite. @ 09/30/23 13:01:09.788
â€¢ [7.737 seconds]
------------------------------
SSSS
------------------------------
[sig-network] Services should complete a service status lifecycle [Conformance]
test/e2e/network/service.go:3326
  STEP: Creating a kubernetes client @ 09/30/23 13:01:09.795
  Sep 30 13:01:09.795: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:01:09.796
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:09.814
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:09.818
  STEP: creating a Service @ 09/30/23 13:01:09.827
  STEP: watching for the Service to be added @ 09/30/23 13:01:09.837
  Sep 30 13:01:09.839: INFO: Found Service test-service-wlvpz in namespace services-595 with labels: map[test-service-static:true] & ports [{http TCP <nil> 80 {0 80 } 0}]
  Sep 30 13:01:09.839: INFO: Service test-service-wlvpz created
  STEP: Getting /status @ 09/30/23 13:01:09.839
  Sep 30 13:01:09.843: INFO: Service test-service-wlvpz has LoadBalancer: {[]}
  STEP: patching the ServiceStatus @ 09/30/23 13:01:09.843
  STEP: watching for the Service to be patched @ 09/30/23 13:01:09.849
  Sep 30 13:01:09.851: INFO: observed Service test-service-wlvpz in namespace services-595 with annotations: map[] & LoadBalancer: {[]}
  Sep 30 13:01:09.851: INFO: Found Service test-service-wlvpz in namespace services-595 with annotations: map[patchedstatus:true] & LoadBalancer: {[{203.0.113.1  []}]}
  Sep 30 13:01:09.852: INFO: Service test-service-wlvpz has service status patched
  STEP: updating the ServiceStatus @ 09/30/23 13:01:09.852
  Sep 30 13:01:09.862: INFO: updatedStatus.Conditions: []v1.Condition{v1.Condition{Type:"StatusUpdate", Status:"True", ObservedGeneration:0, LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Service to be updated @ 09/30/23 13:01:09.862
  Sep 30 13:01:09.864: INFO: Observed Service test-service-wlvpz in namespace services-595 with annotations: map[] & Conditions: {[]}
  Sep 30 13:01:09.864: INFO: Observed event: &Service{ObjectMeta:{test-service-wlvpz  services-595  a2127e04-f74e-49a9-baa9-2e4d7b50db63 18065 0 2023-09-30 13:01:09 +0000 UTC <nil> <nil> map[test-service-static:true] map[patchedstatus:true] [] [] [{e2e.test Update v1 2023-09-30 13:01:09 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:test-service-static":{}}},"f:spec":{"f:internalTrafficPolicy":{},"f:ports":{".":{},"k:{\"port\":80,\"protocol\":\"TCP\"}":{".":{},"f:name":{},"f:port":{},"f:protocol":{},"f:targetPort":{}}},"f:sessionAffinity":{},"f:type":{}}} } {e2e.test Update v1 2023-09-30 13:01:09 +0000 UTC FieldsV1 {"f:metadata":{"f:annotations":{".":{},"f:patchedstatus":{}}},"f:status":{"f:loadBalancer":{"f:ingress":{}}}} status}]},Spec:ServiceSpec{Ports:[]ServicePort{ServicePort{Name:http,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:0,AppProtocol:nil,},},Selector:map[string]string{},ClusterIP:10.152.183.190,Type:ClusterIP,ExternalIPs:[],SessionAffinity:None,LoadBalancerIP:,LoadBalancerSourceRanges:[],ExternalName:,ExternalTrafficPolicy:,HealthCheckNodePort:0,PublishNotReadyAddresses:false,SessionAffinityConfig:nil,IPFamilyPolicy:*SingleStack,ClusterIPs:[10.152.183.190],IPFamilies:[IPv4],AllocateLoadBalancerNodePorts:nil,LoadBalancerClass:nil,InternalTrafficPolicy:*Cluster,},Status:ServiceStatus{LoadBalancer:LoadBalancerStatus{Ingress:[]LoadBalancerIngress{LoadBalancerIngress{IP:203.0.113.1,Hostname:,Ports:[]PortStatus{},},},},Conditions:[]Condition{},},}
  Sep 30 13:01:09.864: INFO: Found Service test-service-wlvpz in namespace services-595 with annotations: map[patchedstatus:true] & Conditions: [{StatusUpdate True 0 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Sep 30 13:01:09.864: INFO: Service test-service-wlvpz has service status updated
  STEP: patching the service @ 09/30/23 13:01:09.864
  STEP: watching for the Service to be patched @ 09/30/23 13:01:09.877
  Sep 30 13:01:09.879: INFO: observed Service test-service-wlvpz in namespace services-595 with labels: map[test-service-static:true]
  Sep 30 13:01:09.879: INFO: observed Service test-service-wlvpz in namespace services-595 with labels: map[test-service-static:true]
  Sep 30 13:01:09.879: INFO: observed Service test-service-wlvpz in namespace services-595 with labels: map[test-service-static:true]
  Sep 30 13:01:09.879: INFO: Found Service test-service-wlvpz in namespace services-595 with labels: map[test-service:patched test-service-static:true]
  Sep 30 13:01:09.879: INFO: Service test-service-wlvpz patched
  STEP: deleting the service @ 09/30/23 13:01:09.879
  STEP: watching for the Service to be deleted @ 09/30/23 13:01:09.891
  Sep 30 13:01:09.894: INFO: Observed event: ADDED
  Sep 30 13:01:09.894: INFO: Observed event: MODIFIED
  Sep 30 13:01:09.894: INFO: Observed event: MODIFIED
  Sep 30 13:01:09.894: INFO: Observed event: MODIFIED
  Sep 30 13:01:09.894: INFO: Found Service test-service-wlvpz in namespace services-595 with labels: map[test-service:patched test-service-static:true] & annotations: map[patchedstatus:true]
  Sep 30 13:01:09.894: INFO: Service test-service-wlvpz deleted
  Sep 30 13:01:09.894: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-595" for this suite. @ 09/30/23 13:01:09.898
â€¢ [0.108 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]
test/e2e/common/node/expansion.go:47
  STEP: Creating a kubernetes client @ 09/30/23 13:01:09.904
  Sep 30 13:01:09.904: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename var-expansion @ 09/30/23 13:01:09.905
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:09.921
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:09.925
  STEP: Creating a pod to test env composition @ 09/30/23 13:01:09.929
  STEP: Saw pod success @ 09/30/23 13:01:13.954
  Sep 30 13:01:13.959: INFO: Trying to get logs from node ip-172-31-31-30 pod var-expansion-091e60b2-a448-41fc-9b97-cd5b536d06c5 container dapi-container: <nil>
  STEP: delete the pod @ 09/30/23 13:01:13.967
  Sep 30 13:01:13.983: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-2231" for this suite. @ 09/30/23 13:01:13.988
â€¢ [4.090 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:56
  STEP: Creating a kubernetes client @ 09/30/23 13:01:13.994
  Sep 30 13:01:13.994: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:01:13.995
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:14.016
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:14.02
  STEP: Creating projection with secret that has name projected-secret-test-45e8502d-1e6a-4c0c-96b0-63e896567c5a @ 09/30/23 13:01:14.025
  STEP: Creating a pod to test consume secrets @ 09/30/23 13:01:14.031
  STEP: Saw pod success @ 09/30/23 13:01:18.056
  Sep 30 13:01:18.060: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-projected-secrets-484db236-ed8f-4807-bb2c-667f7e13b80e container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 13:01:18.079
  Sep 30 13:01:18.096: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8085" for this suite. @ 09/30/23 13:01:18.101
â€¢ [4.114 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:54
  STEP: Creating a kubernetes client @ 09/30/23 13:01:18.109
  Sep 30 13:01:18.109: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 13:01:18.11
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:18.127
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:18.132
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:01:18.136
  STEP: Saw pod success @ 09/30/23 13:01:22.16
  Sep 30 13:01:22.163: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-1b9d64d6-bdeb-4e9a-9d25-977f84c6712b container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:01:22.171
  Sep 30 13:01:22.187: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-6162" for this suite. @ 09/30/23 13:01:22.191
â€¢ [4.088 seconds]
------------------------------
SSS
------------------------------
[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]
test/e2e/network/endpointslicemirroring.go:55
  STEP: Creating a kubernetes client @ 09/30/23 13:01:22.198
  Sep 30 13:01:22.198: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename endpointslicemirroring @ 09/30/23 13:01:22.199
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:22.217
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:22.222
  STEP: mirroring a new custom Endpoint @ 09/30/23 13:01:22.235
  Sep 30 13:01:22.243: INFO: Waiting for at least 1 EndpointSlice to exist, got 0
  STEP: mirroring an update to a custom Endpoint @ 09/30/23 13:01:24.249
  Sep 30 13:01:24.257: INFO: Expected EndpointSlice to have 10.2.3.4 as address, got 10.1.2.3
  STEP: mirroring deletion of a custom Endpoint @ 09/30/23 13:01:26.262
  Sep 30 13:01:26.273: INFO: Waiting for 0 EndpointSlices to exist, got 1
  Sep 30 13:01:28.277: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslicemirroring-2537" for this suite. @ 09/30/23 13:01:28.281
â€¢ [6.090 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]
test/e2e/common/node/expansion.go:76
  STEP: Creating a kubernetes client @ 09/30/23 13:01:28.29
  Sep 30 13:01:28.290: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename var-expansion @ 09/30/23 13:01:28.291
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:28.308
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:28.312
  STEP: Creating a pod to test substitution in container's command @ 09/30/23 13:01:28.316
  STEP: Saw pod success @ 09/30/23 13:01:32.341
  Sep 30 13:01:32.345: INFO: Trying to get logs from node ip-172-31-31-30 pod var-expansion-b8e13688-30d4-40cc-810a-6507a77bcac6 container dapi-container: <nil>
  STEP: delete the pod @ 09/30/23 13:01:32.352
  Sep 30 13:01:32.367: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-1224" for this suite. @ 09/30/23 13:01:32.372
â€¢ [4.088 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]
test/e2e/storage/subpath.go:105
  STEP: Creating a kubernetes client @ 09/30/23 13:01:32.379
  Sep 30 13:01:32.379: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename subpath @ 09/30/23 13:01:32.38
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:32.397
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:32.4
  STEP: Setting up data @ 09/30/23 13:01:32.404
  STEP: Creating pod pod-subpath-test-projected-gwhc @ 09/30/23 13:01:32.414
  STEP: Creating a pod to test atomic-volume-subpath @ 09/30/23 13:01:32.414
  STEP: Saw pod success @ 09/30/23 13:01:56.489
  Sep 30 13:01:56.492: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-subpath-test-projected-gwhc container test-container-subpath-projected-gwhc: <nil>
  STEP: delete the pod @ 09/30/23 13:01:56.501
  STEP: Deleting pod pod-subpath-test-projected-gwhc @ 09/30/23 13:01:56.517
  Sep 30 13:01:56.517: INFO: Deleting pod "pod-subpath-test-projected-gwhc" in namespace "subpath-2492"
  Sep 30 13:01:56.521: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-2492" for this suite. @ 09/30/23 13:01:56.526
â€¢ [24.153 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:124
  STEP: Creating a kubernetes client @ 09/30/23 13:01:56.533
  Sep 30 13:01:56.533: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 13:01:56.533
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:01:56.55
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:01:56.554
  STEP: Creating configMap with name configmap-test-upd-0f20c060-7868-49c8-b9d7-27ac7f280f2b @ 09/30/23 13:01:56.564
  STEP: Creating the pod @ 09/30/23 13:01:56.569
  STEP: Updating configmap configmap-test-upd-0f20c060-7868-49c8-b9d7-27ac7f280f2b @ 09/30/23 13:01:58.599
  STEP: waiting to observe update in volume @ 09/30/23 13:01:58.604
  Sep 30 13:03:27.030: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-4995" for this suite. @ 09/30/23 13:03:27.035
â€¢ [90.509 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]
test/e2e/apps/disruption.go:87
  STEP: Creating a kubernetes client @ 09/30/23 13:03:27.042
  Sep 30 13:03:27.042: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename disruption @ 09/30/23 13:03:27.043
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:27.06
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:27.064
  STEP: Creating a kubernetes client @ 09/30/23 13:03:27.068
  Sep 30 13:03:27.068: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename disruption-2 @ 09/30/23 13:03:27.069
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:27.085
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:27.089
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:03:27.101
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:03:29.114
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:03:29.124
  STEP: listing a collection of PDBs across all namespaces @ 09/30/23 13:03:29.13
  STEP: listing a collection of PDBs in namespace disruption-4313 @ 09/30/23 13:03:29.133
  STEP: deleting a collection of PDBs @ 09/30/23 13:03:29.137
  STEP: Waiting for the PDB collection to be deleted @ 09/30/23 13:03:29.15
  Sep 30 13:03:29.154: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 13:03:29.158: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2-4309" for this suite. @ 09/30/23 13:03:29.163
  STEP: Destroying namespace "disruption-4313" for this suite. @ 09/30/23 13:03:29.17
â€¢ [2.133 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]
test/e2e/apps/deployment.go:488
  STEP: Creating a kubernetes client @ 09/30/23 13:03:29.176
  Sep 30 13:03:29.176: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename deployment @ 09/30/23 13:03:29.177
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:29.194
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:29.197
  STEP: creating a Deployment @ 09/30/23 13:03:29.205
  Sep 30 13:03:29.205: INFO: Creating simple deployment test-deployment-cm9dn
  Sep 30 13:03:29.219: INFO: deployment "test-deployment-cm9dn" doesn't have the required revision set
  STEP: Getting /status @ 09/30/23 13:03:31.236
  Sep 30 13:03:31.240: INFO: Deployment test-deployment-cm9dn has Conditions: [{Available True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:31 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.} {Progressing True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:29 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-cm9dn-5d576bd769" has successfully progressed.}]
  STEP: updating Deployment Status @ 09/30/23 13:03:31.24
  Sep 30 13:03:31.250: INFO: updatedStatus.Conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 3, 31, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 3, 31, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 3, 31, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 3, 29, 0, time.Local), Reason:"NewReplicaSetAvailable", Message:"ReplicaSet \"test-deployment-cm9dn-5d576bd769\" has successfully progressed."}, v1.DeploymentCondition{Type:"StatusUpdate", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Deployment status to be updated @ 09/30/23 13:03:31.25
  Sep 30 13:03:31.252: INFO: Observed &Deployment event: ADDED
  Sep 30 13:03:31.252: INFO: Observed Deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-cm9dn-5d576bd769"}
  Sep 30 13:03:31.252: INFO: Observed &Deployment event: MODIFIED
  Sep 30 13:03:31.252: INFO: Observed Deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-cm9dn-5d576bd769"}
  Sep 30 13:03:31.252: INFO: Observed Deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Sep 30 13:03:31.252: INFO: Observed &Deployment event: MODIFIED
  Sep 30 13:03:31.252: INFO: Observed Deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Sep 30 13:03:31.252: INFO: Observed Deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-cm9dn-5d576bd769" is progressing.}
  Sep 30 13:03:31.252: INFO: Observed &Deployment event: MODIFIED
  Sep 30 13:03:31.252: INFO: Observed Deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:31 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Sep 30 13:03:31.252: INFO: Observed Deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:29 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-cm9dn-5d576bd769" has successfully progressed.}
  Sep 30 13:03:31.252: INFO: Observed &Deployment event: MODIFIED
  Sep 30 13:03:31.252: INFO: Observed Deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:31 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Sep 30 13:03:31.252: INFO: Observed Deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:29 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-cm9dn-5d576bd769" has successfully progressed.}
  Sep 30 13:03:31.252: INFO: Found Deployment test-deployment-cm9dn in namespace deployment-8962 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Sep 30 13:03:31.252: INFO: Deployment test-deployment-cm9dn has an updated status
  STEP: patching the Statefulset Status @ 09/30/23 13:03:31.252
  Sep 30 13:03:31.253: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Sep 30 13:03:31.261: INFO: Patched status conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"StatusPatched", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Deployment status to be patched @ 09/30/23 13:03:31.261
  Sep 30 13:03:31.263: INFO: Observed &Deployment event: ADDED
  Sep 30 13:03:31.263: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-cm9dn-5d576bd769"}
  Sep 30 13:03:31.263: INFO: Observed &Deployment event: MODIFIED
  Sep 30 13:03:31.263: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-cm9dn-5d576bd769"}
  Sep 30 13:03:31.263: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Sep 30 13:03:31.263: INFO: Observed &Deployment event: MODIFIED
  Sep 30 13:03:31.263: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Sep 30 13:03:31.263: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:29 +0000 UTC 2023-09-30 13:03:29 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-cm9dn-5d576bd769" is progressing.}
  Sep 30 13:03:31.264: INFO: Observed &Deployment event: MODIFIED
  Sep 30 13:03:31.264: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:31 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Sep 30 13:03:31.264: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:29 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-cm9dn-5d576bd769" has successfully progressed.}
  Sep 30 13:03:31.264: INFO: Observed &Deployment event: MODIFIED
  Sep 30 13:03:31.264: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:31 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Sep 30 13:03:31.264: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-09-30 13:03:31 +0000 UTC 2023-09-30 13:03:29 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-cm9dn-5d576bd769" has successfully progressed.}
  Sep 30 13:03:31.264: INFO: Observed deployment test-deployment-cm9dn in namespace deployment-8962 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Sep 30 13:03:31.264: INFO: Observed &Deployment event: MODIFIED
  Sep 30 13:03:31.264: INFO: Found deployment test-deployment-cm9dn in namespace deployment-8962 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC  }
  Sep 30 13:03:31.264: INFO: Deployment test-deployment-cm9dn has a patched status
  Sep 30 13:03:31.268: INFO: Deployment "test-deployment-cm9dn":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=21) "test-deployment-cm9dn",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-8962",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "69846bd8-b236-4880-b609-c8b4ed8dda65",
      ResourceVersion: (string) (len=5) "18665",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675809,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675809,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=657) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              00000030  6e 61 6d 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |name":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  70 72 6f 67 72 65 73 73  |ec":{"f:progress|
              00000050  44 65 61 64 6c 69 6e 65  53 65 63 6f 6e 64 73 22  |DeadlineSeconds"|
              00000060  3a 7b 7d 2c 22 66 3a 72  65 70 6c 69 63 61 73 22  |:{},"f:replicas"|
              00000070  3a 7b 7d 2c 22 66 3a 72  65 76 69 73 69 6f 6e 48  |:{},"f:revisionH|
              00000080  69 73 74 6f 72 79 4c 69  6d 69 74 22 3a 7b 7d 2c  |istoryLimit":{},|
              00000090  22 66 3a 73 65 6c 65 63  74 6f 72 22 3a 7b 7d 2c  |"f:selector":{},|
              000000a0  22 66 3a 73 74 72 61 74  65 67 79 22 3a 7b 22 66  |"f:strategy":{"f|
              000000b0  3a 72 6f 6c 6c 69 6e 67  55 70 64 61 74 65 22 3a  |:rollingUpdate":|
              000000c0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6d 61 78 53 75  |{".":{},"f:maxSu|
              000000d0  72 67 65 22 3a 7b 7d 2c  22 66 3a 6d 61 78 55 6e  |rge":{},"f:maxUn|
              000000e0  61 76 61 69 6c 61 62 6c  65 22 3a 7b 7d 7d 2c 22  |available":{}},"|
              000000f0  66 3a 74 79 70 65 22 3a  7b 7d 7d 2c 22 66 3a 74  |f:type":{}},"f:t|
              00000100  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000110  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              00000120  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 65 32  |s":{".":{},"f:e2|
              00000130  65 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |e":{},"f:name":{|
              00000140  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              00000150  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000160  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              00000170  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              00000180  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000190  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              000001a0  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              000001b0  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              000001c0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000001d0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000001e0  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000210  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000220  69 63 79 22 3a 7b 7d 2c  22 66 3a 72 65 73 74 61  |icy":{},"f:resta|
              00000230  72 74 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |rtPolicy":{},"f:|
              00000240  73 63 68 65 64 75 6c 65  72 4e 61 6d 65 22 3a 7b  |schedulerName":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 47  72 61 63 65 50 65 72 69  |inationGracePeri|
              00000280  6f 64 53 65 63 6f 6e 64  73 22 3a 7b 7d 7d 7d 7d  |odSeconds":{}}}}|
              00000290  7d                                                |}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675811,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=147) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 53 74 61 74  |{\"type\":\"Stat|
              00000030  75 73 50 61 74 63 68 65  64 5c 22 7d 22 3a 7b 22  |usPatched\"}":{"|
              00000040  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |.":{},"f:lastTra|
              00000050  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000060  22 66 3a 6c 61 73 74 55  70 64 61 74 65 54 69 6d  |"f:lastUpdateTim|
              00000070  65 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |e":{},"f:status"|
              00000080  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000090  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675811,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=373) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 50 72 6f  |:{\"type\":\"Pro|
              000000a0  67 72 65 73 73 69 6e 67  5c 22 7d 22 3a 7b 22 2e  |gressing\"}":{".|
              000000b0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000000c0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000000d0  66 3a 6c 61 73 74 55 70  64 61 74 65 54 69 6d 65  |f:lastUpdateTime|
              000000e0  22 3a 7b 7d 2c 22 66 3a  6d 65 73 73 61 67 65 22  |":{},"f:message"|
              000000f0  3a 7b 7d 2c 22 66 3a 72  65 61 73 6f 6e 22 3a 7b  |:{},"f:reason":{|
              00000100  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              00000110  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              00000120  3a 6f 62 73 65 72 76 65  64 47 65 6e 65 72 61 74  |:observedGenerat|
              00000130  69 6f 6e 22 3a 7b 7d 2c  22 66 3a 72 65 61 64 79  |ion":{},"f:ready|
              00000140  52 65 70 6c 69 63 61 73  22 3a 7b 7d 2c 22 66 3a  |Replicas":{},"f:|
              00000150  72 65 70 6c 69 63 61 73  22 3a 7b 7d 2c 22 66 3a  |replicas":{},"f:|
              00000160  75 70 64 61 74 65 64 52  65 70 6c 69 63 61 73 22  |updatedReplicas"|
              00000170  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=3) "e2e": (string) (len=7) "testing"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=13) "StatusPatched",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675811,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675811,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "FoundNewReplicaSet",
          Message: (string) (len=56) "Found new replica set \"test-deployment-cm9dn-5d576bd769\""
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Sep 30 13:03:31.273: INFO: New ReplicaSet "test-deployment-cm9dn-5d576bd769" of Deployment "test-deployment-cm9dn":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-cm9dn-5d576bd769",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-8962",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8d24c592-e6da-40a3-b94a-2609728b42fe",
      ResourceVersion: (string) (len=5) "18659",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675809,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=21) "test-deployment-cm9dn",
          UID: (types.UID) (len=36) "69846bd8-b236-4880-b609-c8b4ed8dda65",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675809,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=803) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              000000d0  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 70 6f 64 2d  |name":{},"f:pod-|
              000000e0  74 65 6d 70 6c 61 74 65  2d 68 61 73 68 22 3a 7b  |template-hash":{|
              000000f0  7d 7d 2c 22 66 3a 6f 77  6e 65 72 52 65 66 65 72  |}},"f:ownerRefer|
              00000100  65 6e 63 65 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |ences":{".":{},"|
              00000110  6b 3a 7b 5c 22 75 69 64  5c 22 3a 5c 22 36 39 38  |k:{\"uid\":\"698|
              00000120  34 36 62 64 38 2d 62 32  33 36 2d 34 38 38 30 2d  |46bd8-b236-4880-|
              00000130  62 36 30 39 2d 63 38 62  34 65 64 38 64 64 61 36  |b609-c8b4ed8dda6|
              00000140  35 5c 22 7d 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |5\"}":{}}},"f:sp|
              00000150  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000160  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000180  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000190  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              000001a0  3a 7b 7d 2c 22 66 3a 65  32 65 22 3a 7b 7d 2c 22  |:{},"f:e2e":{},"|
              000001b0  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 70 6f  |f:name":{},"f:po|
              000001c0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001d0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000001e0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000001f0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              00000200  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              00000210  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000220  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000230  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000240  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000280  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000290  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              000002a0  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              000002b0  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              000002c0  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              000002d0  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000002e0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000002f0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              00000300  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              00000310  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              00000320  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675811,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=3) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=3) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769",
            (string) (len=3) "e2e": (string) (len=7) "testing"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:03:31.280: INFO: Pod "test-deployment-cm9dn-5d576bd769-z48x6" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=38) "test-deployment-cm9dn-5d576bd769-z48x6",
      GenerateName: (string) (len=33) "test-deployment-cm9dn-5d576bd769-",
      Namespace: (string) (len=15) "deployment-8962",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "92bbaac1-ba21-4724-8d2c-7a6a37223e95",
      ResourceVersion: (string) (len=5) "18658",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675809,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=32) "test-deployment-cm9dn-5d576bd769",
          UID: (types.UID) (len=36) "8d24c592-e6da-40a3-b94a-2609728b42fe",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675809,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=548) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 65 32 65 22 3a 7b 7d  |.":{},"f:e2e":{}|
              00000040  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000050  70 6f 64 2d 74 65 6d 70  6c 61 74 65 2d 68 61 73  |pod-template-has|
              00000060  68 22 3a 7b 7d 7d 2c 22  66 3a 6f 77 6e 65 72 52  |h":{}},"f:ownerR|
              00000070  65 66 65 72 65 6e 63 65  73 22 3a 7b 22 2e 22 3a  |eferences":{".":|
              00000080  7b 7d 2c 22 6b 3a 7b 5c  22 75 69 64 5c 22 3a 5c  |{},"k:{\"uid\":\|
              00000090  22 38 64 32 34 63 35 39  32 2d 65 36 64 61 2d 34  |"8d24c592-e6da-4|
              000000a0  30 61 33 2d 62 39 34 61  2d 32 36 30 39 37 32 38  |0a3-b94a-2609728|
              000000b0  62 34 32 66 65 5c 22 7d  22 3a 7b 7d 7d 7d 2c 22  |b42fe\"}":{}}},"|
              000000c0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000d0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              000000e0  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              000000f0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000100  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000110  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000120  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000130  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 73 65  |ources":{},"f:se|
              00000140  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000150  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000160  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000170  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000180  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000190  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              000001a0  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              000001b0  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              000001c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000200  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000210  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000220  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675811,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=521) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  33 35 2e 32 31 31 5c 22  |192.168.35.211\"|
              000001e0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 70  |}":{".":{},"f:ip|
              000001f0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 74 61 72 74 54  |":{}}},"f:startT|
              00000200  69 6d 65 22 3a 7b 7d 7d  7d                       |ime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-26sjs",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-26sjs",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675809,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675811,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675811,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831675809,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.39.81",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=14) "192.168.35.211",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.35.211"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831675809,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831675810,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://d239af8866b19876905d25b07f515e97b41d19c5aea8a89e4a835cd9357e6cf6",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:03:31.282: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-8962" for this suite. @ 09/30/23 13:03:31.286
â€¢ [2.116 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Lease lease API should be available [Conformance]
test/e2e/common/node/lease.go:72
  STEP: Creating a kubernetes client @ 09/30/23 13:03:31.293
  Sep 30 13:03:31.293: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename lease-test @ 09/30/23 13:03:31.293
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:31.311
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:31.315
  Sep 30 13:03:31.378: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "lease-test-8373" for this suite. @ 09/30/23 13:03:31.382
â€¢ [0.096 seconds]
------------------------------
S
------------------------------
[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:240
  STEP: Creating a kubernetes client @ 09/30/23 13:03:31.389
  Sep 30 13:03:31.389: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 13:03:31.39
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:31.406
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:31.41
  STEP: Creating configMap with name cm-test-opt-del-8a874b9c-d1c1-4d41-a1d0-dcab49a25a10 @ 09/30/23 13:03:31.418
  STEP: Creating configMap with name cm-test-opt-upd-4d4fcd55-f36c-412e-b419-d893a76fa8ca @ 09/30/23 13:03:31.422
  STEP: Creating the pod @ 09/30/23 13:03:31.428
  STEP: Deleting configmap cm-test-opt-del-8a874b9c-d1c1-4d41-a1d0-dcab49a25a10 @ 09/30/23 13:03:33.47
  STEP: Updating configmap cm-test-opt-upd-4d4fcd55-f36c-412e-b419-d893a76fa8ca @ 09/30/23 13:03:33.476
  STEP: Creating configMap with name cm-test-opt-create-6ee83e8b-bdae-4770-890a-c5e60e7f4667 @ 09/30/23 13:03:33.481
  STEP: waiting to observe update in volume @ 09/30/23 13:03:33.486
  Sep 30 13:03:37.525: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5279" for this suite. @ 09/30/23 13:03:37.53
â€¢ [6.148 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]
test/e2e/apimachinery/table_conversion.go:154
  STEP: Creating a kubernetes client @ 09/30/23 13:03:37.539
  Sep 30 13:03:37.539: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename tables @ 09/30/23 13:03:37.54
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:37.557
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:37.561
  Sep 30 13:03:37.568: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "tables-1805" for this suite. @ 09/30/23 13:03:37.572
â€¢ [0.039 seconds]
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]
test/e2e/apimachinery/resource_quota.go:76
  STEP: Creating a kubernetes client @ 09/30/23 13:03:37.579
  Sep 30 13:03:37.579: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 13:03:37.579
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:37.595
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:37.599
  STEP: Counting existing ResourceQuota @ 09/30/23 13:03:37.602
  STEP: Creating a ResourceQuota @ 09/30/23 13:03:42.606
  STEP: Ensuring resource quota status is calculated @ 09/30/23 13:03:42.613
  Sep 30 13:03:44.618: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2626" for this suite. @ 09/30/23 13:03:44.623
â€¢ [7.054 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]
test/e2e/kubectl/kubectl.go:1027
  STEP: Creating a kubernetes client @ 09/30/23 13:03:44.635
  Sep 30 13:03:44.635: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:03:44.635
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:44.652
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:44.656
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 09/30/23 13:03:44.66
  Sep 30 13:03:44.660: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4828 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Sep 30 13:03:44.741: INFO: stderr: ""
  Sep 30 13:03:44.741: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: replace the image in the pod with server-side dry-run @ 09/30/23 13:03:44.741
  Sep 30 13:03:44.741: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4828 patch pod e2e-test-httpd-pod -p {"spec":{"containers":[{"name": "e2e-test-httpd-pod","image": "registry.k8s.io/e2e-test-images/busybox:1.29-4"}]}} --dry-run=server'
  Sep 30 13:03:44.821: INFO: stderr: ""
  Sep 30 13:03:44.821: INFO: stdout: "pod/e2e-test-httpd-pod patched\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 09/30/23 13:03:44.821
  Sep 30 13:03:44.826: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-4828 delete pods e2e-test-httpd-pod'
  Sep 30 13:03:46.252: INFO: stderr: ""
  Sep 30 13:03:46.252: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Sep 30 13:03:46.252: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4828" for this suite. @ 09/30/23 13:03:46.259
â€¢ [1.631 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]
test/e2e/common/node/configmap.go:138
  STEP: Creating a kubernetes client @ 09/30/23 13:03:46.266
  Sep 30 13:03:46.266: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 13:03:46.267
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:46.285
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:46.289
  STEP: Creating configMap that has name configmap-test-emptyKey-98f06124-3c5a-44a6-8e93-bd881dc2417f @ 09/30/23 13:03:46.293
  Sep 30 13:03:46.295: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-763" for this suite. @ 09/30/23 13:03:46.299
â€¢ [0.039 seconds]
------------------------------
S
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]
test/e2e/scheduling/predicates.go:332
  STEP: Creating a kubernetes client @ 09/30/23 13:03:46.305
  Sep 30 13:03:46.305: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-pred @ 09/30/23 13:03:46.306
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:46.322
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:46.325
  Sep 30 13:03:46.329: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Sep 30 13:03:46.339: INFO: Waiting for terminating namespaces to be deleted...
  Sep 30 13:03:46.342: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-31-30 before test
  Sep 30 13:03:46.349: INFO: nginx-ingress-controller-kubernetes-worker-w7gdg from ingress-nginx-kubernetes-worker started at 2023-09-30 12:45:41 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.349: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 13:03:46.349: INFO: calico-node-cbqpx from kube-system started at 2023-09-30 12:13:54 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.349: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 13:03:46.349: INFO: sonobuoy from sonobuoy started at 2023-09-30 12:19:38 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.349: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Sep 30 13:03:46.349: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-8zjmf from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:03:46.349: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:03:46.349: INFO: 	Container systemd-logs ready: true, restart count 0
  Sep 30 13:03:46.349: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-39-81 before test
  Sep 30 13:03:46.354: INFO: nginx-ingress-controller-kubernetes-worker-7vl6k from ingress-nginx-kubernetes-worker started at 2023-09-30 12:10:20 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.355: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 13:03:46.355: INFO: calico-node-dk4rw from kube-system started at 2023-09-30 12:10:04 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.355: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 13:03:46.355: INFO: sonobuoy-e2e-job-65ff53df4dd046c8 from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:03:46.355: INFO: 	Container e2e ready: true, restart count 0
  Sep 30 13:03:46.355: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:03:46.355: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-mghww from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:03:46.355: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:03:46.355: INFO: 	Container systemd-logs ready: true, restart count 0
  Sep 30 13:03:46.355: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-81-206 before test
  Sep 30 13:03:46.361: INFO: default-http-backend-kubernetes-worker-5c79cc75ff-66tqr from ingress-nginx-kubernetes-worker started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.362: INFO: 	Container default-http-backend-kubernetes-worker ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: nginx-ingress-controller-kubernetes-worker-h7hhr from ingress-nginx-kubernetes-worker started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.362: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: calico-node-6bdbf from kube-system started at 2023-09-30 12:08:56 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.362: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: coredns-59cfb5bf46-6jbqw from kube-system started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.362: INFO: 	Container coredns ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: kube-state-metrics-775d9f4f79-6xd92 from kube-system started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.362: INFO: 	Container kube-state-metrics ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: metrics-server-v0.6.3-69d7fbfdf8-pwwn7 from kube-system started at 2023-09-30 12:09:12 +0000 UTC (2 container statuses recorded)
  Sep 30 13:03:46.362: INFO: 	Container metrics-server ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: 	Container metrics-server-nanny ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: dashboard-metrics-scraper-5dd7cb5fc-lw5nw from kubernetes-dashboard started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.362: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: kubernetes-dashboard-7b899cb9d9-pjt4m from kubernetes-dashboard started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:03:46.362: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-87x6p from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:03:46.362: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:03:46.362: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: verifying the node has the label node ip-172-31-31-30 @ 09/30/23 13:03:46.379
  STEP: verifying the node has the label node ip-172-31-39-81 @ 09/30/23 13:03:46.393
  STEP: verifying the node has the label node ip-172-31-81-206 @ 09/30/23 13:03:46.407
  Sep 30 13:03:46.421: INFO: Pod default-http-backend-kubernetes-worker-5c79cc75ff-66tqr requesting resource cpu=10m on Node ip-172-31-81-206
  Sep 30 13:03:46.421: INFO: Pod nginx-ingress-controller-kubernetes-worker-7vl6k requesting resource cpu=0m on Node ip-172-31-39-81
  Sep 30 13:03:46.421: INFO: Pod nginx-ingress-controller-kubernetes-worker-h7hhr requesting resource cpu=0m on Node ip-172-31-81-206
  Sep 30 13:03:46.421: INFO: Pod nginx-ingress-controller-kubernetes-worker-w7gdg requesting resource cpu=0m on Node ip-172-31-31-30
  Sep 30 13:03:46.421: INFO: Pod calico-node-6bdbf requesting resource cpu=250m on Node ip-172-31-81-206
  Sep 30 13:03:46.421: INFO: Pod calico-node-cbqpx requesting resource cpu=250m on Node ip-172-31-31-30
  Sep 30 13:03:46.421: INFO: Pod calico-node-dk4rw requesting resource cpu=250m on Node ip-172-31-39-81
  Sep 30 13:03:46.421: INFO: Pod coredns-59cfb5bf46-6jbqw requesting resource cpu=100m on Node ip-172-31-81-206
  Sep 30 13:03:46.421: INFO: Pod kube-state-metrics-775d9f4f79-6xd92 requesting resource cpu=0m on Node ip-172-31-81-206
  Sep 30 13:03:46.421: INFO: Pod metrics-server-v0.6.3-69d7fbfdf8-pwwn7 requesting resource cpu=5m on Node ip-172-31-81-206
  Sep 30 13:03:46.421: INFO: Pod dashboard-metrics-scraper-5dd7cb5fc-lw5nw requesting resource cpu=0m on Node ip-172-31-81-206
  Sep 30 13:03:46.421: INFO: Pod kubernetes-dashboard-7b899cb9d9-pjt4m requesting resource cpu=0m on Node ip-172-31-81-206
  Sep 30 13:03:46.421: INFO: Pod sonobuoy requesting resource cpu=0m on Node ip-172-31-31-30
  Sep 30 13:03:46.421: INFO: Pod sonobuoy-e2e-job-65ff53df4dd046c8 requesting resource cpu=0m on Node ip-172-31-39-81
  Sep 30 13:03:46.421: INFO: Pod sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-87x6p requesting resource cpu=0m on Node ip-172-31-81-206
  Sep 30 13:03:46.421: INFO: Pod sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-8zjmf requesting resource cpu=0m on Node ip-172-31-31-30
  Sep 30 13:03:46.421: INFO: Pod sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-mghww requesting resource cpu=0m on Node ip-172-31-39-81
  STEP: Starting Pods to consume most of the cluster CPU. @ 09/30/23 13:03:46.421
  Sep 30 13:03:46.421: INFO: Creating a pod which consumes cpu=5425m on Node ip-172-31-31-30
  Sep 30 13:03:46.431: INFO: Creating a pod which consumes cpu=5425m on Node ip-172-31-39-81
  Sep 30 13:03:46.438: INFO: Creating a pod which consumes cpu=5344m on Node ip-172-31-81-206
  STEP: Creating another pod that requires unavailable amount of CPU. @ 09/30/23 13:03:48.465
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-2fee5ae4-c001-47a4-9c72-6c39e4876c52.1789aee36aa14922], Reason = [Scheduled], Message = [Successfully assigned sched-pred-1398/filler-pod-2fee5ae4-c001-47a4-9c72-6c39e4876c52 to ip-172-31-81-206] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-2fee5ae4-c001-47a4-9c72-6c39e4876c52.1789aee392262bcb], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-2fee5ae4-c001-47a4-9c72-6c39e4876c52.1789aee39344efa9], Reason = [Created], Message = [Created container filler-pod-2fee5ae4-c001-47a4-9c72-6c39e4876c52] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-2fee5ae4-c001-47a4-9c72-6c39e4876c52.1789aee39e145bea], Reason = [Started], Message = [Started container filler-pod-2fee5ae4-c001-47a4-9c72-6c39e4876c52] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b6ae14cb-e495-4e2b-a236-45eebb5f4eb4.1789aee36a262951], Reason = [Scheduled], Message = [Successfully assigned sched-pred-1398/filler-pod-b6ae14cb-e495-4e2b-a236-45eebb5f4eb4 to ip-172-31-39-81] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b6ae14cb-e495-4e2b-a236-45eebb5f4eb4.1789aee3976ebbb2], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b6ae14cb-e495-4e2b-a236-45eebb5f4eb4.1789aee398abcb18], Reason = [Created], Message = [Created container filler-pod-b6ae14cb-e495-4e2b-a236-45eebb5f4eb4] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b6ae14cb-e495-4e2b-a236-45eebb5f4eb4.1789aee39efd21bc], Reason = [Started], Message = [Started container filler-pod-b6ae14cb-e495-4e2b-a236-45eebb5f4eb4] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-ec2b9046-5299-482f-b69a-8d2783176b03.1789aee369adaca8], Reason = [Scheduled], Message = [Successfully assigned sched-pred-1398/filler-pod-ec2b9046-5299-482f-b69a-8d2783176b03 to ip-172-31-31-30] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-ec2b9046-5299-482f-b69a-8d2783176b03.1789aee391c176ca], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-ec2b9046-5299-482f-b69a-8d2783176b03.1789aee39321e859], Reason = [Created], Message = [Created container filler-pod-ec2b9046-5299-482f-b69a-8d2783176b03] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-ec2b9046-5299-482f-b69a-8d2783176b03.1789aee39b16be12], Reason = [Started], Message = [Started container filler-pod-ec2b9046-5299-482f-b69a-8d2783176b03] @ 09/30/23 13:03:48.471
  STEP: Considering event: 
  Type = [Warning], Name = [additional-pod.1789aee3e37cd46b], Reason = [FailedScheduling], Message = [0/5 nodes are available: 2 node(s) had untolerated taint {node-role.kubernetes.io/control-plane: }, 3 Insufficient cpu. preemption: 0/5 nodes are available: 2 Preemption is not helpful for scheduling, 3 No preemption victims found for incoming pod..] @ 09/30/23 13:03:48.484
  STEP: removing the label node off the node ip-172-31-81-206 @ 09/30/23 13:03:49.484
  STEP: verifying the node doesn't have the label node @ 09/30/23 13:03:49.496
  STEP: removing the label node off the node ip-172-31-31-30 @ 09/30/23 13:03:49.5
  STEP: verifying the node doesn't have the label node @ 09/30/23 13:03:49.512
  STEP: removing the label node off the node ip-172-31-39-81 @ 09/30/23 13:03:49.516
  STEP: verifying the node doesn't have the label node @ 09/30/23 13:03:49.529
  Sep 30 13:03:49.532: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-1398" for this suite. @ 09/30/23 13:03:49.537
â€¢ [3.239 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]
test/e2e/apimachinery/namespace.go:398
  STEP: Creating a kubernetes client @ 09/30/23 13:03:49.547
  Sep 30 13:03:49.547: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename namespaces @ 09/30/23 13:03:49.548
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:49.564
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:49.569
  STEP: Creating namespace "e2e-ns-dkx6z" @ 09/30/23 13:03:49.573
  Sep 30 13:03:49.590: INFO: Namespace "e2e-ns-dkx6z-8958" has []v1.FinalizerName{"kubernetes"}
  STEP: Adding e2e finalizer to namespace "e2e-ns-dkx6z-8958" @ 09/30/23 13:03:49.59
  Sep 30 13:03:49.598: INFO: Namespace "e2e-ns-dkx6z-8958" has []v1.FinalizerName{"kubernetes", "e2e.example.com/fakeFinalizer"}
  STEP: Removing e2e finalizer from namespace "e2e-ns-dkx6z-8958" @ 09/30/23 13:03:49.598
  Sep 30 13:03:49.607: INFO: Namespace "e2e-ns-dkx6z-8958" has []v1.FinalizerName{"kubernetes"}
  Sep 30 13:03:49.607: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-1010" for this suite. @ 09/30/23 13:03:49.612
  STEP: Destroying namespace "e2e-ns-dkx6z-8958" for this suite. @ 09/30/23 13:03:49.619
â€¢ [0.078 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]
test/e2e/apimachinery/namespace.go:370
  STEP: Creating a kubernetes client @ 09/30/23 13:03:49.626
  Sep 30 13:03:49.626: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename namespaces @ 09/30/23 13:03:49.627
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:49.645
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:49.649
  STEP: Updating Namespace "namespaces-2204" @ 09/30/23 13:03:49.653
  Sep 30 13:03:49.661: INFO: Namespace "namespaces-2204" now has labels, map[string]string{"e2e-framework":"namespaces", "e2e-run":"71440c4e-ed54-42d9-a001-e68705ce2b0e", "kubernetes.io/metadata.name":"namespaces-2204", "namespaces-2204":"updated", "pod-security.kubernetes.io/audit":"baseline", "pod-security.kubernetes.io/enforce":"baseline", "pod-security.kubernetes.io/warn":"baseline"}
  Sep 30 13:03:49.661: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-2204" for this suite. @ 09/30/23 13:03:49.666
â€¢ [0.048 seconds]
------------------------------
SS
------------------------------
[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]
test/e2e/kubectl/kubectl.go:354
  STEP: Creating a kubernetes client @ 09/30/23 13:03:49.674
  Sep 30 13:03:49.674: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:03:49.675
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:03:49.69
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:03:49.694
  STEP: creating a replication controller @ 09/30/23 13:03:49.698
  Sep 30 13:03:49.698: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 create -f -'
  Sep 30 13:03:50.367: INFO: stderr: ""
  Sep 30 13:03:50.367: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 09/30/23 13:03:50.367
  Sep 30 13:03:50.367: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Sep 30 13:03:50.448: INFO: stderr: ""
  Sep 30 13:03:50.448: INFO: stdout: "update-demo-nautilus-2gtb2 update-demo-nautilus-rfbl5 "
  Sep 30 13:03:50.448: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-2gtb2 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:03:50.521: INFO: stderr: ""
  Sep 30 13:03:50.521: INFO: stdout: ""
  Sep 30 13:03:50.521: INFO: update-demo-nautilus-2gtb2 is created but not running
  Sep 30 13:03:55.524: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Sep 30 13:03:55.608: INFO: stderr: ""
  Sep 30 13:03:55.608: INFO: stdout: "update-demo-nautilus-2gtb2 update-demo-nautilus-rfbl5 "
  Sep 30 13:03:55.608: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-2gtb2 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:03:55.682: INFO: stderr: ""
  Sep 30 13:03:55.682: INFO: stdout: "true"
  Sep 30 13:03:55.682: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-2gtb2 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Sep 30 13:03:55.755: INFO: stderr: ""
  Sep 30 13:03:55.755: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Sep 30 13:03:55.755: INFO: validating pod update-demo-nautilus-2gtb2
  Sep 30 13:03:55.761: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Sep 30 13:03:55.761: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Sep 30 13:03:55.761: INFO: update-demo-nautilus-2gtb2 is verified up and running
  Sep 30 13:03:55.761: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-rfbl5 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:03:55.838: INFO: stderr: ""
  Sep 30 13:03:55.838: INFO: stdout: "true"
  Sep 30 13:03:55.838: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-rfbl5 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Sep 30 13:03:55.916: INFO: stderr: ""
  Sep 30 13:03:55.916: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Sep 30 13:03:55.916: INFO: validating pod update-demo-nautilus-rfbl5
  Sep 30 13:03:55.921: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Sep 30 13:03:55.921: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Sep 30 13:03:55.921: INFO: update-demo-nautilus-rfbl5 is verified up and running
  STEP: scaling down the replication controller @ 09/30/23 13:03:55.921
  Sep 30 13:03:55.923: INFO: scanned /root for discovery docs: <nil>
  Sep 30 13:03:55.923: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 scale rc update-demo-nautilus --replicas=1 --timeout=5m'
  Sep 30 13:03:57.020: INFO: stderr: ""
  Sep 30 13:03:57.020: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 09/30/23 13:03:57.02
  Sep 30 13:03:57.020: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Sep 30 13:03:57.100: INFO: stderr: ""
  Sep 30 13:03:57.100: INFO: stdout: "update-demo-nautilus-2gtb2 update-demo-nautilus-rfbl5 "
  STEP: Replicas for name=update-demo: expected=1 actual=2 @ 09/30/23 13:03:57.1
  Sep 30 13:04:02.100: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Sep 30 13:04:02.176: INFO: stderr: ""
  Sep 30 13:04:02.176: INFO: stdout: "update-demo-nautilus-rfbl5 "
  Sep 30 13:04:02.176: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-rfbl5 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:04:02.250: INFO: stderr: ""
  Sep 30 13:04:02.250: INFO: stdout: "true"
  Sep 30 13:04:02.250: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-rfbl5 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Sep 30 13:04:02.323: INFO: stderr: ""
  Sep 30 13:04:02.323: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Sep 30 13:04:02.323: INFO: validating pod update-demo-nautilus-rfbl5
  Sep 30 13:04:02.327: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Sep 30 13:04:02.327: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Sep 30 13:04:02.327: INFO: update-demo-nautilus-rfbl5 is verified up and running
  STEP: scaling up the replication controller @ 09/30/23 13:04:02.327
  Sep 30 13:04:02.328: INFO: scanned /root for discovery docs: <nil>
  Sep 30 13:04:02.328: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 scale rc update-demo-nautilus --replicas=2 --timeout=5m'
  Sep 30 13:04:03.422: INFO: stderr: ""
  Sep 30 13:04:03.422: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 09/30/23 13:04:03.422
  Sep 30 13:04:03.422: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Sep 30 13:04:03.501: INFO: stderr: ""
  Sep 30 13:04:03.501: INFO: stdout: "update-demo-nautilus-rfbl5 update-demo-nautilus-sx77n "
  Sep 30 13:04:03.501: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-rfbl5 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:04:03.574: INFO: stderr: ""
  Sep 30 13:04:03.574: INFO: stdout: "true"
  Sep 30 13:04:03.574: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-rfbl5 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Sep 30 13:04:03.657: INFO: stderr: ""
  Sep 30 13:04:03.657: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Sep 30 13:04:03.657: INFO: validating pod update-demo-nautilus-rfbl5
  Sep 30 13:04:03.662: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Sep 30 13:04:03.662: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Sep 30 13:04:03.662: INFO: update-demo-nautilus-rfbl5 is verified up and running
  Sep 30 13:04:03.662: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-sx77n -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:04:03.740: INFO: stderr: ""
  Sep 30 13:04:03.740: INFO: stdout: ""
  Sep 30 13:04:03.740: INFO: update-demo-nautilus-sx77n is created but not running
  Sep 30 13:04:08.742: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Sep 30 13:04:08.821: INFO: stderr: ""
  Sep 30 13:04:08.821: INFO: stdout: "update-demo-nautilus-rfbl5 update-demo-nautilus-sx77n "
  Sep 30 13:04:08.821: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-rfbl5 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:04:08.896: INFO: stderr: ""
  Sep 30 13:04:08.896: INFO: stdout: "true"
  Sep 30 13:04:08.896: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-rfbl5 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Sep 30 13:04:08.971: INFO: stderr: ""
  Sep 30 13:04:08.971: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Sep 30 13:04:08.971: INFO: validating pod update-demo-nautilus-rfbl5
  Sep 30 13:04:08.976: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Sep 30 13:04:08.976: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Sep 30 13:04:08.976: INFO: update-demo-nautilus-rfbl5 is verified up and running
  Sep 30 13:04:08.976: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-sx77n -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:04:09.053: INFO: stderr: ""
  Sep 30 13:04:09.053: INFO: stdout: "true"
  Sep 30 13:04:09.053: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods update-demo-nautilus-sx77n -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Sep 30 13:04:09.128: INFO: stderr: ""
  Sep 30 13:04:09.128: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Sep 30 13:04:09.128: INFO: validating pod update-demo-nautilus-sx77n
  Sep 30 13:04:09.134: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Sep 30 13:04:09.134: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Sep 30 13:04:09.134: INFO: update-demo-nautilus-sx77n is verified up and running
  STEP: using delete to clean up resources @ 09/30/23 13:04:09.134
  Sep 30 13:04:09.134: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 delete --grace-period=0 --force -f -'
  Sep 30 13:04:09.212: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Sep 30 13:04:09.212: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Sep 30 13:04:09.212: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get rc,svc -l name=update-demo --no-headers'
  Sep 30 13:04:09.298: INFO: stderr: "No resources found in kubectl-1527 namespace.\n"
  Sep 30 13:04:09.298: INFO: stdout: ""
  Sep 30 13:04:09.298: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1527 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Sep 30 13:04:09.382: INFO: stderr: ""
  Sep 30 13:04:09.382: INFO: stdout: ""
  Sep 30 13:04:09.382: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1527" for this suite. @ 09/30/23 13:04:09.386
â€¢ [19.721 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]
test/e2e/apimachinery/aggregator.go:96
  STEP: Creating a kubernetes client @ 09/30/23 13:04:09.397
  Sep 30 13:04:09.397: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename aggregator @ 09/30/23 13:04:09.398
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:04:09.418
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:04:09.421
  Sep 30 13:04:09.425: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Registering the sample API server. @ 09/30/23 13:04:09.426
  Sep 30 13:04:09.774: INFO: Found ClusterRoles; assuming RBAC is enabled.
  Sep 30 13:04:09.802: INFO: deployment "sample-apiserver-deployment" doesn't have the required revision set
  Sep 30 13:04:11.847: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:13.852: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:15.852: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:17.851: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:19.853: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:21.852: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:23.851: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:25.853: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:27.854: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:29.851: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:31.852: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 9, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:04:33.972: INFO: Waited 113.352726ms for the sample-apiserver to be ready to handle requests.
  STEP: Read Status for v1alpha1.wardle.example.com @ 09/30/23 13:04:34.017
  STEP: kubectl patch apiservice v1alpha1.wardle.example.com -p '{"spec":{"versionPriority": 400}}' @ 09/30/23 13:04:34.02
  STEP: List APIServices @ 09/30/23 13:04:34.028
  Sep 30 13:04:34.035: INFO: Found v1alpha1.wardle.example.com in APIServiceList
  STEP: Adding a label to the APIService @ 09/30/23 13:04:34.035
  Sep 30 13:04:34.048: INFO: APIService labels: map[e2e-apiservice:patched]
  STEP: Updating APIService Status @ 09/30/23 13:04:34.048
  Sep 30 13:04:34.058: INFO: updatedStatus.Conditions: []v1.APIServiceCondition{v1.APIServiceCondition{Type:"Available", Status:"True", LastTransitionTime:time.Date(2023, time.September, 30, 13, 4, 33, 0, time.Local), Reason:"Passed", Message:"all checks passed"}, v1.APIServiceCondition{Type:"StatusUpdated", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: Confirm that v1alpha1.wardle.example.com /status was updated @ 09/30/23 13:04:34.058
  Sep 30 13:04:34.062: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {Available True 2023-09-30 13:04:33 +0000 UTC Passed all checks passed}
  Sep 30 13:04:34.062: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Sep 30 13:04:34.062: INFO: Found updated status condition for v1alpha1.wardle.example.com
  STEP: Replace APIService v1alpha1.wardle.example.com @ 09/30/23 13:04:34.062
  Sep 30 13:04:34.073: INFO: Found updated apiService label for "v1alpha1.wardle.example.com"
  STEP: Delete APIService "dynamic-flunder-768870388" @ 09/30/23 13:04:34.073
  STEP: Recreating test-flunder before removing endpoint via deleteCollection @ 09/30/23 13:04:34.084
  STEP: Read v1alpha1.wardle.example.com /status before patching it @ 09/30/23 13:04:34.092
  STEP: Patch APIService Status @ 09/30/23 13:04:34.096
  STEP: Confirm that v1alpha1.wardle.example.com /status was patched @ 09/30/23 13:04:34.104
  Sep 30 13:04:34.107: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {Available True 2023-09-30 13:04:33 +0000 UTC Passed all checks passed}
  Sep 30 13:04:34.107: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Sep 30 13:04:34.107: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC E2E Set by e2e test}
  Sep 30 13:04:34.107: INFO: Found patched status condition for v1alpha1.wardle.example.com
  STEP: APIService deleteCollection with labelSelector: "e2e-apiservice=patched" @ 09/30/23 13:04:34.107
  STEP: Confirm that the generated APIService has been deleted @ 09/30/23 13:04:34.113
  Sep 30 13:04:34.113: INFO: Requesting list of APIServices to confirm quantity
  Sep 30 13:04:34.118: INFO: Found 0 APIService with label "e2e-apiservice=patched"
  Sep 30 13:04:34.118: INFO: APIService v1alpha1.wardle.example.com has been deleted.
  Sep 30 13:04:34.190: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "aggregator-6011" for this suite. @ 09/30/23 13:04:34.229
â€¢ [24.838 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:207
  STEP: Creating a kubernetes client @ 09/30/23 13:04:34.237
  Sep 30 13:04:34.237: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:04:34.238
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:04:34.257
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:04:34.261
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 09/30/23 13:04:34.265
  STEP: Saw pod success @ 09/30/23 13:04:38.287
  Sep 30 13:04:38.291: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-a22212cc-0a30-4624-8b6f-f4615f348617 container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:04:38.298
  Sep 30 13:04:38.315: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9131" for this suite. @ 09/30/23 13:04:38.319
â€¢ [4.088 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]
test/e2e/apimachinery/garbage_collector.go:713
  STEP: Creating a kubernetes client @ 09/30/23 13:04:38.328
  Sep 30 13:04:38.328: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename gc @ 09/30/23 13:04:38.329
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:04:38.345
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:04:38.349
  STEP: create the rc1 @ 09/30/23 13:04:38.357
  STEP: create the rc2 @ 09/30/23 13:04:38.362
  STEP: set half of pods created by rc simpletest-rc-to-be-deleted to have rc simpletest-rc-to-stay as owner as well @ 09/30/23 13:04:44.371
  STEP: delete the rc simpletest-rc-to-be-deleted @ 09/30/23 13:04:44.78
  STEP: wait for the rc to be deleted @ 09/30/23 13:04:44.787
  Sep 30 13:04:49.802: INFO: 71 pods remaining
  Sep 30 13:04:49.802: INFO: 71 pods has nil DeletionTimestamp
  Sep 30 13:04:49.802: INFO: 
  STEP: Gathering metrics @ 09/30/23 13:04:54.802
  W0930 13:04:54.808278      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Sep 30 13:04:54.808: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Sep 30 13:04:54.808: INFO: Deleting pod "simpletest-rc-to-be-deleted-287wm" in namespace "gc-4835"
  Sep 30 13:04:54.820: INFO: Deleting pod "simpletest-rc-to-be-deleted-2lw4x" in namespace "gc-4835"
  Sep 30 13:04:54.833: INFO: Deleting pod "simpletest-rc-to-be-deleted-2n92b" in namespace "gc-4835"
  Sep 30 13:04:54.847: INFO: Deleting pod "simpletest-rc-to-be-deleted-44tjs" in namespace "gc-4835"
  Sep 30 13:04:54.859: INFO: Deleting pod "simpletest-rc-to-be-deleted-4lxcb" in namespace "gc-4835"
  Sep 30 13:04:54.875: INFO: Deleting pod "simpletest-rc-to-be-deleted-4nx7d" in namespace "gc-4835"
  Sep 30 13:04:54.884: INFO: Deleting pod "simpletest-rc-to-be-deleted-6bmzb" in namespace "gc-4835"
  Sep 30 13:04:54.897: INFO: Deleting pod "simpletest-rc-to-be-deleted-6k6mk" in namespace "gc-4835"
  Sep 30 13:04:54.909: INFO: Deleting pod "simpletest-rc-to-be-deleted-6lvfg" in namespace "gc-4835"
  Sep 30 13:04:54.924: INFO: Deleting pod "simpletest-rc-to-be-deleted-6qshf" in namespace "gc-4835"
  Sep 30 13:04:54.938: INFO: Deleting pod "simpletest-rc-to-be-deleted-6vn8q" in namespace "gc-4835"
  Sep 30 13:04:54.952: INFO: Deleting pod "simpletest-rc-to-be-deleted-6vq2g" in namespace "gc-4835"
  Sep 30 13:04:54.965: INFO: Deleting pod "simpletest-rc-to-be-deleted-7brq6" in namespace "gc-4835"
  Sep 30 13:04:54.977: INFO: Deleting pod "simpletest-rc-to-be-deleted-7fnr6" in namespace "gc-4835"
  Sep 30 13:04:54.990: INFO: Deleting pod "simpletest-rc-to-be-deleted-7n85l" in namespace "gc-4835"
  Sep 30 13:04:55.004: INFO: Deleting pod "simpletest-rc-to-be-deleted-857hm" in namespace "gc-4835"
  Sep 30 13:04:55.017: INFO: Deleting pod "simpletest-rc-to-be-deleted-86zkd" in namespace "gc-4835"
  Sep 30 13:04:55.031: INFO: Deleting pod "simpletest-rc-to-be-deleted-8w5h6" in namespace "gc-4835"
  Sep 30 13:04:55.044: INFO: Deleting pod "simpletest-rc-to-be-deleted-9x2hp" in namespace "gc-4835"
  Sep 30 13:04:55.057: INFO: Deleting pod "simpletest-rc-to-be-deleted-bdz76" in namespace "gc-4835"
  Sep 30 13:04:55.068: INFO: Deleting pod "simpletest-rc-to-be-deleted-bqbm5" in namespace "gc-4835"
  Sep 30 13:04:55.083: INFO: Deleting pod "simpletest-rc-to-be-deleted-c55dd" in namespace "gc-4835"
  Sep 30 13:04:55.096: INFO: Deleting pod "simpletest-rc-to-be-deleted-c5zwr" in namespace "gc-4835"
  Sep 30 13:04:55.109: INFO: Deleting pod "simpletest-rc-to-be-deleted-c8xvb" in namespace "gc-4835"
  Sep 30 13:04:55.122: INFO: Deleting pod "simpletest-rc-to-be-deleted-chtb5" in namespace "gc-4835"
  Sep 30 13:04:55.138: INFO: Deleting pod "simpletest-rc-to-be-deleted-dpgm5" in namespace "gc-4835"
  Sep 30 13:04:55.156: INFO: Deleting pod "simpletest-rc-to-be-deleted-drpxd" in namespace "gc-4835"
  Sep 30 13:04:55.169: INFO: Deleting pod "simpletest-rc-to-be-deleted-fgk76" in namespace "gc-4835"
  Sep 30 13:04:55.184: INFO: Deleting pod "simpletest-rc-to-be-deleted-fhpgn" in namespace "gc-4835"
  Sep 30 13:04:55.198: INFO: Deleting pod "simpletest-rc-to-be-deleted-fmj9r" in namespace "gc-4835"
  Sep 30 13:04:55.211: INFO: Deleting pod "simpletest-rc-to-be-deleted-fssnh" in namespace "gc-4835"
  Sep 30 13:04:55.224: INFO: Deleting pod "simpletest-rc-to-be-deleted-gg6qx" in namespace "gc-4835"
  Sep 30 13:04:55.236: INFO: Deleting pod "simpletest-rc-to-be-deleted-gq22k" in namespace "gc-4835"
  Sep 30 13:04:55.247: INFO: Deleting pod "simpletest-rc-to-be-deleted-gqx9z" in namespace "gc-4835"
  Sep 30 13:04:55.261: INFO: Deleting pod "simpletest-rc-to-be-deleted-h9pvg" in namespace "gc-4835"
  Sep 30 13:04:55.276: INFO: Deleting pod "simpletest-rc-to-be-deleted-hdlkc" in namespace "gc-4835"
  Sep 30 13:04:55.294: INFO: Deleting pod "simpletest-rc-to-be-deleted-j56ll" in namespace "gc-4835"
  Sep 30 13:04:55.310: INFO: Deleting pod "simpletest-rc-to-be-deleted-j92xp" in namespace "gc-4835"
  Sep 30 13:04:55.330: INFO: Deleting pod "simpletest-rc-to-be-deleted-jlqxj" in namespace "gc-4835"
  Sep 30 13:04:55.349: INFO: Deleting pod "simpletest-rc-to-be-deleted-jmnbb" in namespace "gc-4835"
  Sep 30 13:04:55.369: INFO: Deleting pod "simpletest-rc-to-be-deleted-jqwzj" in namespace "gc-4835"
  Sep 30 13:04:55.380: INFO: Deleting pod "simpletest-rc-to-be-deleted-jrn2q" in namespace "gc-4835"
  Sep 30 13:04:55.396: INFO: Deleting pod "simpletest-rc-to-be-deleted-k8jkl" in namespace "gc-4835"
  Sep 30 13:04:55.409: INFO: Deleting pod "simpletest-rc-to-be-deleted-k9wcz" in namespace "gc-4835"
  Sep 30 13:04:55.423: INFO: Deleting pod "simpletest-rc-to-be-deleted-kqjgm" in namespace "gc-4835"
  Sep 30 13:04:55.442: INFO: Deleting pod "simpletest-rc-to-be-deleted-kskxg" in namespace "gc-4835"
  Sep 30 13:04:55.454: INFO: Deleting pod "simpletest-rc-to-be-deleted-l58ph" in namespace "gc-4835"
  Sep 30 13:04:55.467: INFO: Deleting pod "simpletest-rc-to-be-deleted-l62lb" in namespace "gc-4835"
  Sep 30 13:04:55.482: INFO: Deleting pod "simpletest-rc-to-be-deleted-lm74c" in namespace "gc-4835"
  Sep 30 13:04:55.496: INFO: Deleting pod "simpletest-rc-to-be-deleted-lrv6x" in namespace "gc-4835"
  Sep 30 13:04:55.513: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-4835" for this suite. @ 09/30/23 13:04:55.518
â€¢ [17.197 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]
test/e2e/auth/subjectreviews.go:50
  STEP: Creating a kubernetes client @ 09/30/23 13:04:55.527
  Sep 30 13:04:55.527: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename subjectreview @ 09/30/23 13:04:55.529
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:04:55.553
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:04:55.558
  STEP: Creating a Serviceaccount "e2e" in namespace "subjectreview-6355" @ 09/30/23 13:04:55.563
  Sep 30 13:04:55.569: INFO: saUsername: "system:serviceaccount:subjectreview-6355:e2e"
  Sep 30 13:04:55.569: INFO: saGroups: []string{"system:authenticated", "system:serviceaccounts", "system:serviceaccounts:subjectreview-6355"}
  Sep 30 13:04:55.569: INFO: saUID: "f0f48479-ac53-46f1-a5cb-14f3794b67bb"
  STEP: Creating clientset to impersonate "system:serviceaccount:subjectreview-6355:e2e" @ 09/30/23 13:04:55.569
  STEP: Creating SubjectAccessReview for "system:serviceaccount:subjectreview-6355:e2e" @ 09/30/23 13:04:55.57
  Sep 30 13:04:55.573: INFO: sarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  STEP: Verifying as "system:serviceaccount:subjectreview-6355:e2e" api 'list' configmaps in "subjectreview-6355" namespace @ 09/30/23 13:04:55.573
  Sep 30 13:04:55.576: INFO: SubjectAccessReview has been verified
  STEP: Creating a LocalSubjectAccessReview for "system:serviceaccount:subjectreview-6355:e2e" @ 09/30/23 13:04:55.576
  Sep 30 13:04:55.579: INFO: lsarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  Sep 30 13:04:55.579: INFO: LocalSubjectAccessReview has been verified
  Sep 30 13:04:55.580: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subjectreview-6355" for this suite. @ 09/30/23 13:04:55.587
â€¢ [0.068 seconds]
------------------------------
SSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]
test/e2e/scheduling/preemption.go:624
  STEP: Creating a kubernetes client @ 09/30/23 13:04:55.598
  Sep 30 13:04:55.598: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-preemption @ 09/30/23 13:04:55.599
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:04:55.615
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:04:55.621
  Sep 30 13:04:55.653: INFO: Waiting up to 1m0s for all nodes to be ready
  Sep 30 13:05:55.681: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 09/30/23 13:05:55.685
  Sep 30 13:05:55.685: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-preemption-path @ 09/30/23 13:05:55.686
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:05:55.702
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:05:55.706
  STEP: Finding an available node @ 09/30/23 13:05:55.71
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 09/30/23 13:05:55.71
  STEP: Explicitly delete pod here to free the resource it takes. @ 09/30/23 13:05:57.732
  Sep 30 13:05:57.742: INFO: found a healthy node: ip-172-31-31-30
  Sep 30 13:06:03.823: INFO: pods created so far: [1 1 1]
  Sep 30 13:06:03.823: INFO: length of pods created so far: 3
  Sep 30 13:06:05.835: INFO: pods created so far: [2 2 1]
  Sep 30 13:06:12.837: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 13:06:12.877: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-4191" for this suite. @ 09/30/23 13:06:12.925
  STEP: Destroying namespace "sched-preemption-767" for this suite. @ 09/30/23 13:06:12.932
â€¢ [77.342 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]
test/e2e/apps/statefulset.go:703
  STEP: Creating a kubernetes client @ 09/30/23 13:06:12.94
  Sep 30 13:06:12.940: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename statefulset @ 09/30/23 13:06:12.941
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:06:12.958
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:06:12.962
  STEP: Creating service test in namespace statefulset-479 @ 09/30/23 13:06:12.966
  STEP: Creating stateful set ss in namespace statefulset-479 @ 09/30/23 13:06:12.972
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-479 @ 09/30/23 13:06:12.981
  Sep 30 13:06:12.987: INFO: Found 0 stateful pods, waiting for 1
  Sep 30 13:06:22.991: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will not halt with unhealthy stateful pod @ 09/30/23 13:06:22.991
  Sep 30 13:06:22.995: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-479 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:06:23.200: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:06:23.200: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:06:23.200: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Sep 30 13:06:23.204: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Sep 30 13:06:33.209: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Sep 30 13:06:33.209: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Sep 30 13:06:33.227: INFO: POD   NODE             PHASE    GRACE  CONDITIONS
  Sep 30 13:06:33.227: INFO: ss-0  ip-172-31-39-81  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:13 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:23 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:23 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:12 +0000 UTC  }]
  Sep 30 13:06:33.227: INFO: 
  Sep 30 13:06:33.227: INFO: StatefulSet ss has not reached scale 3, at 1
  Sep 30 13:06:34.232: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.995583501s
  Sep 30 13:06:35.237: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.990836168s
  Sep 30 13:06:36.242: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.98576984s
  Sep 30 13:06:37.246: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.981027037s
  Sep 30 13:06:38.250: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.977073817s
  Sep 30 13:06:39.255: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.972508326s
  Sep 30 13:06:40.260: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.967763623s
  Sep 30 13:06:41.264: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.96294109s
  Sep 30 13:06:42.269: INFO: Verifying statefulset ss doesn't scale past 3 for another 958.796194ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-479 @ 09/30/23 13:06:43.269
  Sep 30 13:06:43.273: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-479 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Sep 30 13:06:43.453: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Sep 30 13:06:43.453: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Sep 30 13:06:43.453: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Sep 30 13:06:43.453: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-479 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Sep 30 13:06:43.633: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Sep 30 13:06:43.633: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Sep 30 13:06:43.633: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Sep 30 13:06:43.633: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-479 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Sep 30 13:06:43.821: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Sep 30 13:06:43.822: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Sep 30 13:06:43.822: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Sep 30 13:06:43.826: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=false
  Sep 30 13:06:53.831: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:06:53.831: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:06:53.831: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Scale down will not halt with unhealthy stateful pod @ 09/30/23 13:06:53.831
  Sep 30 13:06:53.835: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-479 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:06:54.017: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:06:54.017: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:06:54.017: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Sep 30 13:06:54.017: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-479 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:06:54.201: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:06:54.201: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:06:54.201: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Sep 30 13:06:54.201: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-479 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:06:54.376: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:06:54.376: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:06:54.376: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Sep 30 13:06:54.376: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Sep 30 13:06:54.380: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 2
  Sep 30 13:07:04.389: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Sep 30 13:07:04.389: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Sep 30 13:07:04.389: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Sep 30 13:07:04.402: INFO: POD   NODE              PHASE    GRACE  CONDITIONS
  Sep 30 13:07:04.402: INFO: ss-0  ip-172-31-39-81   Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:13 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:12 +0000 UTC  }]
  Sep 30 13:07:04.402: INFO: ss-1  ip-172-31-81-206  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:33 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:33 +0000 UTC  }]
  Sep 30 13:07:04.402: INFO: ss-2  ip-172-31-31-30   Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:33 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:33 +0000 UTC  }]
  Sep 30 13:07:04.402: INFO: 
  Sep 30 13:07:04.402: INFO: StatefulSet ss has not reached scale 0, at 3
  Sep 30 13:07:05.407: INFO: POD   NODE              PHASE      GRACE  CONDITIONS
  Sep 30 13:07:05.407: INFO: ss-0  ip-172-31-39-81   Succeeded  30s    [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:13 +0000 UTC PodCompleted } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC PodCompleted } {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC PodCompleted } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:12 +0000 UTC  }]
  Sep 30 13:07:05.407: INFO: ss-1  ip-172-31-81-206  Succeeded  30s    [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:33 +0000 UTC PodCompleted } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC PodCompleted } {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:54 +0000 UTC PodCompleted } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:06:33 +0000 UTC  }]
  Sep 30 13:07:05.407: INFO: 
  Sep 30 13:07:05.407: INFO: StatefulSet ss has not reached scale 0, at 2
  Sep 30 13:07:06.412: INFO: Verifying statefulset ss doesn't scale past 0 for another 7.991215688s
  Sep 30 13:07:07.416: INFO: Verifying statefulset ss doesn't scale past 0 for another 6.986895572s
  Sep 30 13:07:08.420: INFO: Verifying statefulset ss doesn't scale past 0 for another 5.982357664s
  Sep 30 13:07:09.425: INFO: Verifying statefulset ss doesn't scale past 0 for another 4.978097839s
  Sep 30 13:07:10.429: INFO: Verifying statefulset ss doesn't scale past 0 for another 3.973373508s
  Sep 30 13:07:11.433: INFO: Verifying statefulset ss doesn't scale past 0 for another 2.969729672s
  Sep 30 13:07:12.437: INFO: Verifying statefulset ss doesn't scale past 0 for another 1.965978405s
  Sep 30 13:07:13.442: INFO: Verifying statefulset ss doesn't scale past 0 for another 961.729761ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-479 @ 09/30/23 13:07:14.443
  Sep 30 13:07:14.448: INFO: Scaling statefulset ss to 0
  Sep 30 13:07:14.459: INFO: Waiting for statefulset status.replicas updated to 0
  Sep 30 13:07:14.463: INFO: Deleting all statefulset in ns statefulset-479
  Sep 30 13:07:14.466: INFO: Scaling statefulset ss to 0
  Sep 30 13:07:14.479: INFO: Waiting for statefulset status.replicas updated to 0
  Sep 30 13:07:14.482: INFO: Deleting statefulset ss
  Sep 30 13:07:14.496: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-479" for this suite. @ 09/30/23 13:07:14.5
â€¢ [61.568 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]
test/e2e/apps/disruption.go:349
  STEP: Creating a kubernetes client @ 09/30/23 13:07:14.508
  Sep 30 13:07:14.508: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename disruption @ 09/30/23 13:07:14.509
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:07:14.526
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:07:14.53
  STEP: Creating a pdb that targets all three pods in a test replica set @ 09/30/23 13:07:14.534
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:07:14.539
  STEP: First trying to evict a pod which shouldn't be evictable @ 09/30/23 13:07:16.551
  STEP: Waiting for all pods to be running @ 09/30/23 13:07:16.551
  Sep 30 13:07:16.555: INFO: pods: 0 < 3
  STEP: locating a running pod @ 09/30/23 13:07:18.56
  STEP: Updating the pdb to allow a pod to be evicted @ 09/30/23 13:07:18.572
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:07:18.581
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 09/30/23 13:07:18.586
  STEP: Waiting for all pods to be running @ 09/30/23 13:07:18.586
  STEP: Waiting for the pdb to observed all healthy pods @ 09/30/23 13:07:18.59
  STEP: Patching the pdb to disallow a pod to be evicted @ 09/30/23 13:07:18.617
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:07:18.637
  STEP: Waiting for all pods to be running @ 09/30/23 13:07:20.648
  STEP: locating a running pod @ 09/30/23 13:07:20.652
  STEP: Deleting the pdb to allow a pod to be evicted @ 09/30/23 13:07:20.667
  STEP: Waiting for the pdb to be deleted @ 09/30/23 13:07:20.674
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 09/30/23 13:07:20.679
  STEP: Waiting for all pods to be running @ 09/30/23 13:07:20.679
  Sep 30 13:07:20.698: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-8244" for this suite. @ 09/30/23 13:07:20.704
â€¢ [6.204 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:157
  STEP: Creating a kubernetes client @ 09/30/23 13:07:20.713
  Sep 30 13:07:20.713: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:07:20.714
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:07:20.731
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:07:20.735
  STEP: Creating a pod to test emptydir volume type on node default medium @ 09/30/23 13:07:20.739
  STEP: Saw pod success @ 09/30/23 13:07:24.762
  Sep 30 13:07:24.766: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-6bc6fd25-824b-4530-8a73-22ccd76e3f09 container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:07:24.789
  Sep 30 13:07:24.804: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1958" for this suite. @ 09/30/23 13:07:24.809
â€¢ [4.103 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]
test/e2e/apps/statefulset.go:914
  STEP: Creating a kubernetes client @ 09/30/23 13:07:24.817
  Sep 30 13:07:24.817: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename statefulset @ 09/30/23 13:07:24.818
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:07:24.834
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:07:24.838
  STEP: Creating service test in namespace statefulset-5391 @ 09/30/23 13:07:24.842
  Sep 30 13:07:24.859: INFO: Found 0 stateful pods, waiting for 1
  Sep 30 13:07:34.865: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: patching the StatefulSet @ 09/30/23 13:07:34.872
  W0930 13:07:34.884712      23 warnings.go:70] unknown field "spec.template.spec.TerminationGracePeriodSeconds"
  Sep 30 13:07:34.892: INFO: Found 1 stateful pods, waiting for 2
  Sep 30 13:07:44.898: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:07:44.898: INFO: Waiting for pod test-ss-1 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Listing all StatefulSets @ 09/30/23 13:07:44.906
  STEP: Delete all of the StatefulSets @ 09/30/23 13:07:44.909
  STEP: Verify that StatefulSets have been deleted @ 09/30/23 13:07:44.918
  Sep 30 13:07:44.921: INFO: Deleting all statefulset in ns statefulset-5391
  Sep 30 13:07:44.935: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-5391" for this suite. @ 09/30/23 13:07:44.94
â€¢ [20.132 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]
test/e2e/network/service.go:2165
  STEP: Creating a kubernetes client @ 09/30/23 13:07:44.95
  Sep 30 13:07:44.950: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:07:44.951
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:07:44.973
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:07:44.977
  STEP: creating service in namespace services-3515 @ 09/30/23 13:07:44.982
  STEP: creating service affinity-clusterip in namespace services-3515 @ 09/30/23 13:07:44.982
  STEP: creating replication controller affinity-clusterip in namespace services-3515 @ 09/30/23 13:07:44.991
  I0930 13:07:45.000289      23 runners.go:197] Created replication controller with name: affinity-clusterip, namespace: services-3515, replica count: 3
  I0930 13:07:48.051059      23 runners.go:197] affinity-clusterip Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Sep 30 13:07:48.058: INFO: Creating new exec pod
  Sep 30 13:07:51.076: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3515 exec execpod-affinityn9tb5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip 80'
  Sep 30 13:07:51.256: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip 80\nConnection to affinity-clusterip 80 port [tcp/http] succeeded!\n"
  Sep 30 13:07:51.256: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 13:07:51.256: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3515 exec execpod-affinityn9tb5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.140 80'
  Sep 30 13:07:51.447: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.140 80\nConnection to 10.152.183.140 80 port [tcp/http] succeeded!\n"
  Sep 30 13:07:51.447: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 13:07:51.447: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3515 exec execpod-affinityn9tb5 -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.140:80/ ; done'
  Sep 30 13:07:51.719: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.140:80/\n"
  Sep 30 13:07:51.719: INFO: stdout: "\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc\naffinity-clusterip-qdkhc"
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Received response from host: affinity-clusterip-qdkhc
  Sep 30 13:07:51.719: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 13:07:51.724: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip in namespace services-3515, will wait for the garbage collector to delete the pods @ 09/30/23 13:07:51.737
  Sep 30 13:07:51.799: INFO: Deleting ReplicationController affinity-clusterip took: 6.323425ms
  Sep 30 13:07:51.900: INFO: Terminating ReplicationController affinity-clusterip pods took: 100.587002ms
  STEP: Destroying namespace "services-3515" for this suite. @ 09/30/23 13:07:55.217
â€¢ [10.274 seconds]
------------------------------
SS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:107
  STEP: Creating a kubernetes client @ 09/30/23 13:07:55.224
  Sep 30 13:07:55.224: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:07:55.225
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:07:55.243
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:07:55.247
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 09/30/23 13:07:55.251
  STEP: Saw pod success @ 09/30/23 13:07:59.274
  Sep 30 13:07:59.278: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-66bd0090-a415-4002-b7c0-ea3d710a5ff6 container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:07:59.288
  Sep 30 13:07:59.304: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1304" for this suite. @ 09/30/23 13:07:59.309
â€¢ [4.091 seconds]
------------------------------
[sig-node] Probing container should be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:134
  STEP: Creating a kubernetes client @ 09/30/23 13:07:59.315
  Sep 30 13:07:59.315: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 13:07:59.316
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:07:59.333
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:07:59.336
  STEP: Creating pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581 @ 09/30/23 13:07:59.34
  STEP: checking the pod's current state and verifying that restartCount is present @ 09/30/23 13:08:01.358
  Sep 30 13:08:01.361: INFO: Initial restart count of pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 is 0
  Sep 30 13:08:01.365: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:03.369: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:05.374: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:07.379: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:09.385: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:11.390: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:13.393: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:15.398: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:17.403: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:19.408: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:21.412: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:23.417: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:25.422: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:27.427: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:29.431: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:31.435: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:33.440: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:35.446: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:37.450: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:39.456: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:41.461: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:43.466: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:45.470: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:47.475: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:49.479: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:51.484: INFO: Get pod busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 in namespace container-probe-5581
  Sep 30 13:08:51.484: INFO: Restart count of pod container-probe-5581/busybox-756799c8-34c6-4a0d-87b4-807ae54c13f9 is now 1 (50.122770568s elapsed)
  Sep 30 13:08:51.484: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:08:51.487
  STEP: Destroying namespace "container-probe-5581" for this suite. @ 09/30/23 13:08:51.5
â€¢ [52.192 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:107
  STEP: Creating a kubernetes client @ 09/30/23 13:08:51.508
  Sep 30 13:08:51.508: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pod-network-test @ 09/30/23 13:08:51.509
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:08:51.526
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:08:51.53
  STEP: Performing setup for networking test in namespace pod-network-test-1608 @ 09/30/23 13:08:51.534
  STEP: creating a selector @ 09/30/23 13:08:51.534
  STEP: Creating the service pods in kubernetes @ 09/30/23 13:08:51.534
  Sep 30 13:08:51.534: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 09/30/23 13:09:13.638
  Sep 30 13:09:15.672: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Sep 30 13:09:15.672: INFO: Going to poll 192.168.10.88 on port 8083 at least 0 times, with a maximum of 39 tries before failing
  Sep 30 13:09:15.676: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://192.168.10.88:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-1608 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:09:15.676: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:09:15.676: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:09:15.676: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-1608/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F192.168.10.88%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Sep 30 13:09:15.799: INFO: Found all 1 expected endpoints: [netserver-0]
  Sep 30 13:09:15.799: INFO: Going to poll 192.168.35.225 on port 8083 at least 0 times, with a maximum of 39 tries before failing
  Sep 30 13:09:15.803: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://192.168.35.225:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-1608 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:09:15.804: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:09:15.804: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:09:15.804: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-1608/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F192.168.35.225%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Sep 30 13:09:15.925: INFO: Found all 1 expected endpoints: [netserver-1]
  Sep 30 13:09:15.925: INFO: Going to poll 192.168.224.238 on port 8083 at least 0 times, with a maximum of 39 tries before failing
  Sep 30 13:09:15.929: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://192.168.224.238:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-1608 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:09:15.929: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:09:15.930: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:09:15.930: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-1608/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F192.168.224.238%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Sep 30 13:09:16.050: INFO: Found all 1 expected endpoints: [netserver-2]
  Sep 30 13:09:16.050: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-1608" for this suite. @ 09/30/23 13:09:16.055
â€¢ [24.554 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]
test/e2e/kubectl/kubectl.go:1707
  STEP: Creating a kubernetes client @ 09/30/23 13:09:16.063
  Sep 30 13:09:16.063: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:09:16.064
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:16.081
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:16.085
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 09/30/23 13:09:16.089
  Sep 30 13:09:16.089: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1745 run e2e-test-httpd-pod --restart=Never --pod-running-timeout=2m0s --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4'
  Sep 30 13:09:16.169: INFO: stderr: ""
  Sep 30 13:09:16.169: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod was created @ 09/30/23 13:09:16.169
  Sep 30 13:09:16.172: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1745 delete pods e2e-test-httpd-pod'
  Sep 30 13:09:18.258: INFO: stderr: ""
  Sep 30 13:09:18.258: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Sep 30 13:09:18.258: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1745" for this suite. @ 09/30/23 13:09:18.263
â€¢ [2.206 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]
test/e2e/node/security_context.go:164
  STEP: Creating a kubernetes client @ 09/30/23 13:09:18.271
  Sep 30 13:09:18.271: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename security-context @ 09/30/23 13:09:18.272
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:18.289
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:18.293
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 09/30/23 13:09:18.296
  STEP: Saw pod success @ 09/30/23 13:09:22.321
  Sep 30 13:09:22.325: INFO: Trying to get logs from node ip-172-31-31-30 pod security-context-cc935152-7ad6-49d4-8212-c83763f76328 container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:09:22.331
  Sep 30 13:09:22.347: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-1137" for this suite. @ 09/30/23 13:09:22.352
â€¢ [4.087 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]
test/e2e/common/node/secrets.go:95
  STEP: Creating a kubernetes client @ 09/30/23 13:09:22.359
  Sep 30 13:09:22.359: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 13:09:22.36
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:22.377
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:22.381
  STEP: creating secret secrets-9357/secret-test-243b6ccd-92aa-440b-b186-6f5d322b69ba @ 09/30/23 13:09:22.385
  STEP: Creating a pod to test consume secrets @ 09/30/23 13:09:22.389
  STEP: Saw pod success @ 09/30/23 13:09:26.414
  Sep 30 13:09:26.417: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-configmaps-7fb359d5-a57f-445d-a935-92dd83639d52 container env-test: <nil>
  STEP: delete the pod @ 09/30/23 13:09:26.425
  Sep 30 13:09:26.441: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9357" for this suite. @ 09/30/23 13:09:26.445
â€¢ [4.093 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should delete old replica sets [Conformance]
test/e2e/apps/deployment.go:122
  STEP: Creating a kubernetes client @ 09/30/23 13:09:26.452
  Sep 30 13:09:26.452: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename deployment @ 09/30/23 13:09:26.453
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:26.472
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:26.476
  Sep 30 13:09:26.489: INFO: Pod name cleanup-pod: Found 0 pods out of 1
  Sep 30 13:09:31.494: INFO: Pod name cleanup-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 09/30/23 13:09:31.494
  Sep 30 13:09:31.494: INFO: Creating deployment test-cleanup-deployment
  STEP: Waiting for deployment test-cleanup-deployment history to be cleaned up @ 09/30/23 13:09:31.505
  Sep 30 13:09:31.516: INFO: Deployment "test-cleanup-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1012",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "36f388bf-afb8-4e84-a1f0-e7dae8b1e9bb",
      ResourceVersion: (string) (len=5) "23615",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676171,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676171,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(0),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 0,
      Replicas: (int32) 0,
      UpdatedReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) <nil>,
      CollisionCount: (*int32)(<nil>)
    }
  }


  Sep 30 13:09:31.522: INFO: New ReplicaSet "test-cleanup-deployment-58dcc84f74" of Deployment "test-cleanup-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-cleanup-deployment-58dcc84f74",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1012",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7ed37ba6-4eda-4d61-937f-81b53a53a63d",
      ResourceVersion: (string) (len=5) "23617",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676171,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "58dcc84f74"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=23) "test-cleanup-deployment",
          UID: (types.UID) (len=36) "36f388bf-afb8-4e84-a1f0-e7dae8b1e9bb",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676171,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 36 66 33 38 38  62 66 2d 61 66 62 38 2d  |\"36f388bf-afb8-|
              00000120  34 65 38 34 2d 61 31 66  30 2d 65 37 64 61 65 38  |4e84-a1f0-e7dae8|
              00000130  62 31 65 39 62 62 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |b1e9bb\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "58dcc84f74"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "58dcc84f74"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 0,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:09:31.523: INFO: All old ReplicaSets of Deployment "test-cleanup-deployment":
  Sep 30 13:09:31.523: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1012",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "32623b6c-821a-4870-b552-e92c163a292c",
      ResourceVersion: (string) (len=5) "23616",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676166,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=23) "test-cleanup-deployment",
          UID: (types.UID) (len=36) "36f388bf-afb8-4e84-a1f0-e7dae8b1e9bb",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676166,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=483) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000050  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000060  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000070  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000080  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000090  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              000000a0  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000b0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000c0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000d0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000f0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000100  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000110  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000120  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000130  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000140  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000160  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000170  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000180  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000190  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000001a0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001b0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001c0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001d0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001e0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676168,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676171,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=103) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000020  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              00000030  22 75 69 64 5c 22 3a 5c  22 33 36 66 33 38 38 62  |"uid\":\"36f388b|
              00000040  66 2d 61 66 62 38 2d 34  65 38 34 2d 61 31 66 30  |f-afb8-4e84-a1f0|
              00000050  2d 65 37 64 61 65 38 62  31 65 39 62 62 5c 22 7d  |-e7dae8b1e9bb\"}|
              00000060  22 3a 7b 7d 7d 7d 7d                              |":{}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:09:31.528: INFO: Pod "test-cleanup-controller-rhbtl" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=29) "test-cleanup-controller-rhbtl",
      GenerateName: (string) (len=24) "test-cleanup-controller-",
      Namespace: (string) (len=15) "deployment-1012",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "57eb6ce2-69c9-4d97-b387-2ca3219a9fe4",
      ResourceVersion: (string) (len=5) "23609",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676166,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=23) "test-cleanup-controller",
          UID: (types.UID) (len=36) "32623b6c-821a-4870-b552-e92c163a292c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676166,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=500) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 2c 22 66  |},"f:pod":{}},"f|
              00000050  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000060  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000070  75 69 64 5c 22 3a 5c 22  33 32 36 32 33 62 36 63  |uid\":\"32623b6c|
              00000080  2d 38 32 31 61 2d 34 38  37 30 2d 62 35 35 32 2d  |-821a-4870-b552-|
              00000090  65 39 32 63 31 36 33 61  32 39 32 63 5c 22 7d 22  |e92c163a292c\"}"|
              000000a0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000b0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000c0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              000000d0  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              000000e0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              000000f0  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000100  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000110  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000120  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000130  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000140  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000150  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000160  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              00000170  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              00000180  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              00000190  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001a0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001b0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001c0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              000001d0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              000001e0  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              000001f0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676168,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=520) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  31 30 2e 39 31 5c 22 7d  |192.168.10.91\"}|
              000001e0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              000001f0  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000200  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8hhwn",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8hhwn",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)(<nil>),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676166,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676168,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676168,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676166,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=13) "192.168.10.91",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "192.168.10.91"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676166,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831676167,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://3f33ba87883823ff749130c1c9cf0b3877e80011279a236f2c8911fa7996e7ea",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:09:31.530: INFO: Pod "test-cleanup-deployment-58dcc84f74-ntrr7" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-cleanup-deployment-58dcc84f74-ntrr7",
      GenerateName: (string) (len=35) "test-cleanup-deployment-58dcc84f74-",
      Namespace: (string) (len=15) "deployment-1012",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "408ef3da-97e7-4948-a4f9-6a67d3dffda5",
      ResourceVersion: (string) (len=5) "23619",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676171,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "58dcc84f74"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-cleanup-deployment-58dcc84f74",
          UID: (types.UID) (len=36) "7ed37ba6-4eda-4d61-937f-81b53a53a63d",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676171,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 37 65  64 33 37 62 61 36 2d 34  |d\":\"7ed37ba6-4|
              00000090  65 64 61 2d 34 64 36 31  2d 39 33 37 66 2d 38 31  |eda-4d61-937f-81|
              000000a0  62 35 33 61 35 33 61 36  33 64 5c 22 7d 22 3a 7b  |b53a53a63d\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5l88g",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5l88g",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:09:31.531: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-1012" for this suite. @ 09/30/23 13:09:31.537
â€¢ [5.097 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:205
  STEP: Creating a kubernetes client @ 09/30/23 13:09:31.549
  Sep 30 13:09:31.549: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 13:09:31.55
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:31.567
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:31.571
  STEP: Creating secret with name s-test-opt-del-618d34e1-e9fc-4771-8761-e7661861fda9 @ 09/30/23 13:09:31.579
  STEP: Creating secret with name s-test-opt-upd-7a0c0137-fd3e-4404-a229-61a3a1dbc035 @ 09/30/23 13:09:31.586
  STEP: Creating the pod @ 09/30/23 13:09:31.591
  STEP: Deleting secret s-test-opt-del-618d34e1-e9fc-4771-8761-e7661861fda9 @ 09/30/23 13:09:33.633
  STEP: Updating secret s-test-opt-upd-7a0c0137-fd3e-4404-a229-61a3a1dbc035 @ 09/30/23 13:09:33.639
  STEP: Creating secret with name s-test-opt-create-fd05b15e-c415-4b3f-a5e9-eb5b484ee94f @ 09/30/23 13:09:33.644
  STEP: waiting to observe update in volume @ 09/30/23 13:09:33.649
  Sep 30 13:09:37.689: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5791" for this suite. @ 09/30/23 13:09:37.693
â€¢ [6.151 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:99
  STEP: Creating a kubernetes client @ 09/30/23 13:09:37.702
  Sep 30 13:09:37.702: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 13:09:37.702
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:37.719
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:37.723
  STEP: Creating secret with name secret-test-134edf10-c09f-44a0-8534-c875781b76fb @ 09/30/23 13:09:37.749
  STEP: Creating a pod to test consume secrets @ 09/30/23 13:09:37.754
  STEP: Saw pod success @ 09/30/23 13:09:41.779
  Sep 30 13:09:41.782: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-secrets-f19fafe8-c4b1-42ef-ad33-c8f73152f702 container secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 13:09:41.807
  Sep 30 13:09:41.823: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-367" for this suite. @ 09/30/23 13:09:41.827
  STEP: Destroying namespace "secret-namespace-9332" for this suite. @ 09/30/23 13:09:41.833
â€¢ [4.140 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:85
  STEP: Creating a kubernetes client @ 09/30/23 13:09:41.842
  Sep 30 13:09:41.842: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 13:09:41.843
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:41.859
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:41.862
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:09:41.867
  STEP: Saw pod success @ 09/30/23 13:09:45.893
  Sep 30 13:09:45.897: INFO: Trying to get logs from node ip-172-31-39-81 pod downwardapi-volume-7373e920-d8df-49e8-9a0b-7bda4cd51389 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:09:45.905
  Sep 30 13:09:45.922: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9919" for this suite. @ 09/30/23 13:09:45.927
â€¢ [4.092 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should test the lifecycle of an Endpoint [Conformance]
test/e2e/network/service.go:3142
  STEP: Creating a kubernetes client @ 09/30/23 13:09:45.934
  Sep 30 13:09:45.934: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:09:45.935
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:45.95
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:45.954
  STEP: creating an Endpoint @ 09/30/23 13:09:45.962
  STEP: waiting for available Endpoint @ 09/30/23 13:09:45.966
  STEP: listing all Endpoints @ 09/30/23 13:09:45.968
  STEP: updating the Endpoint @ 09/30/23 13:09:45.972
  STEP: fetching the Endpoint @ 09/30/23 13:09:45.979
  STEP: patching the Endpoint @ 09/30/23 13:09:45.982
  STEP: fetching the Endpoint @ 09/30/23 13:09:45.992
  STEP: deleting the Endpoint by Collection @ 09/30/23 13:09:45.995
  STEP: waiting for Endpoint deletion @ 09/30/23 13:09:46.003
  STEP: fetching the Endpoint @ 09/30/23 13:09:46.005
  Sep 30 13:09:46.008: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4503" for this suite. @ 09/30/23 13:09:46.013
â€¢ [0.086 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]
test/e2e/apimachinery/webhook.go:238
  STEP: Creating a kubernetes client @ 09/30/23 13:09:46.02
  Sep 30 13:09:46.020: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:09:46.021
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:46.038
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:46.041
  STEP: Setting up server cert @ 09/30/23 13:09:46.067
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:09:46.643
  STEP: Deploying the webhook pod @ 09/30/23 13:09:46.65
  STEP: Wait for the deployment to be ready @ 09/30/23 13:09:46.661
  Sep 30 13:09:46.669: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 13:09:48.681
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:09:48.691
  Sep 30 13:09:49.691: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a webhook that server cannot talk to, with fail closed policy, via the AdmissionRegistration API @ 09/30/23 13:09:49.7
  STEP: create a namespace for the webhook @ 09/30/23 13:09:49.717
  STEP: create a configmap should be unconditionally rejected by the webhook @ 09/30/23 13:09:49.733
  Sep 30 13:09:49.742: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2260" for this suite. @ 09/30/23 13:09:49.791
  STEP: Destroying namespace "webhook-markers-4991" for this suite. @ 09/30/23 13:09:49.797
  STEP: Destroying namespace "fail-closed-namespace-5222" for this suite. @ 09/30/23 13:09:49.804
â€¢ [3.790 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]
test/e2e/network/endpointslice.go:355
  STEP: Creating a kubernetes client @ 09/30/23 13:09:49.811
  Sep 30 13:09:49.811: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename endpointslice @ 09/30/23 13:09:49.812
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:49.829
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:49.833
  STEP: getting /apis @ 09/30/23 13:09:49.838
  STEP: getting /apis/discovery.k8s.io @ 09/30/23 13:09:49.843
  STEP: getting /apis/discovery.k8s.iov1 @ 09/30/23 13:09:49.845
  STEP: creating @ 09/30/23 13:09:49.846
  STEP: getting @ 09/30/23 13:09:49.861
  STEP: listing @ 09/30/23 13:09:49.864
  STEP: watching @ 09/30/23 13:09:49.868
  Sep 30 13:09:49.868: INFO: starting watch
  STEP: cluster-wide listing @ 09/30/23 13:09:49.87
  STEP: cluster-wide watching @ 09/30/23 13:09:49.874
  Sep 30 13:09:49.874: INFO: starting watch
  STEP: patching @ 09/30/23 13:09:49.876
  STEP: updating @ 09/30/23 13:09:49.88
  Sep 30 13:09:49.890: INFO: waiting for watch events with expected annotations
  Sep 30 13:09:49.890: INFO: saw patched and updated annotations
  STEP: deleting @ 09/30/23 13:09:49.89
  STEP: deleting a collection @ 09/30/23 13:09:49.905
  Sep 30 13:09:49.920: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-5973" for this suite. @ 09/30/23 13:09:49.925
â€¢ [0.120 seconds]
------------------------------
[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]
test/e2e/kubectl/kubectl.go:830
  STEP: Creating a kubernetes client @ 09/30/23 13:09:49.932
  Sep 30 13:09:49.932: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:09:49.932
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:49.948
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:49.952
  STEP: validating api versions @ 09/30/23 13:09:49.956
  Sep 30 13:09:49.956: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1623 api-versions'
  Sep 30 13:09:50.029: INFO: stderr: ""
  Sep 30 13:09:50.029: INFO: stdout: "admissionregistration.k8s.io/v1\napiextensions.k8s.io/v1\napiregistration.k8s.io/v1\napps/v1\nauthentication.k8s.io/v1\nauthorization.k8s.io/v1\nautoscaling/v1\nautoscaling/v2\nbatch/v1\ncertificates.k8s.io/v1\ncoordination.k8s.io/v1\ndiscovery.k8s.io/v1\nevents.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1beta2\nflowcontrol.apiserver.k8s.io/v1beta3\nmetrics.k8s.io/v1beta1\nnetworking.k8s.io/v1\nnode.k8s.io/v1\npolicy/v1\nrbac.authorization.k8s.io/v1\nscheduling.k8s.io/v1\nstorage.k8s.io/v1\nv1\n"
  Sep 30 13:09:50.029: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1623" for this suite. @ 09/30/23 13:09:50.033
â€¢ [0.108 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]
test/e2e/apimachinery/webhook.go:119
  STEP: Creating a kubernetes client @ 09/30/23 13:09:50.041
  Sep 30 13:09:50.041: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:09:50.042
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:50.057
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:50.061
  STEP: Setting up server cert @ 09/30/23 13:09:50.087
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:09:50.318
  STEP: Deploying the webhook pod @ 09/30/23 13:09:50.323
  STEP: Wait for the deployment to be ready @ 09/30/23 13:09:50.335
  Sep 30 13:09:50.342: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 13:09:52.354
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:09:52.365
  Sep 30 13:09:53.365: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: fetching the /apis discovery document @ 09/30/23 13:09:53.372
  STEP: finding the admissionregistration.k8s.io API group in the /apis discovery document @ 09/30/23 13:09:53.374
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis discovery document @ 09/30/23 13:09:53.374
  STEP: fetching the /apis/admissionregistration.k8s.io discovery document @ 09/30/23 13:09:53.374
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis/admissionregistration.k8s.io discovery document @ 09/30/23 13:09:53.376
  STEP: fetching the /apis/admissionregistration.k8s.io/v1 discovery document @ 09/30/23 13:09:53.376
  STEP: finding mutatingwebhookconfigurations and validatingwebhookconfigurations resources in the /apis/admissionregistration.k8s.io/v1 discovery document @ 09/30/23 13:09:53.377
  Sep 30 13:09:53.377: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5150" for this suite. @ 09/30/23 13:09:53.418
  STEP: Destroying namespace "webhook-markers-8855" for this suite. @ 09/30/23 13:09:53.426
â€¢ [3.392 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]
test/e2e/common/node/pods.go:897
  STEP: Creating a kubernetes client @ 09/30/23 13:09:53.434
  Sep 30 13:09:53.434: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 13:09:53.435
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:53.45
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:53.454
  STEP: creating a Pod with a static label @ 09/30/23 13:09:53.464
  STEP: watching for Pod to be ready @ 09/30/23 13:09:53.472
  Sep 30 13:09:53.474: INFO: observed Pod pod-test in namespace pods-7091 in phase Pending with labels: map[test-pod-static:true] & conditions []
  Sep 30 13:09:53.477: INFO: observed Pod pod-test in namespace pods-7091 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:09:53 +0000 UTC  }]
  Sep 30 13:09:53.493: INFO: observed Pod pod-test in namespace pods-7091 in phase Pending with labels: map[test-pod-static:true] & conditions [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:09:53 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:09:53 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:09:53 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:09:53 +0000 UTC  }]
  Sep 30 13:09:54.356: INFO: Found Pod pod-test in namespace pods-7091 in phase Running with labels: map[test-pod-static:true] & conditions [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:09:53 +0000 UTC  } {Ready True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:09:54 +0000 UTC  } {ContainersReady True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:09:54 +0000 UTC  } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-09-30 13:09:53 +0000 UTC  }]
  STEP: patching the Pod with a new Label and updated data @ 09/30/23 13:09:54.36
  STEP: getting the Pod and ensuring that it's patched @ 09/30/23 13:09:54.37
  STEP: replacing the Pod's status Ready condition to False @ 09/30/23 13:09:54.375
  STEP: check the Pod again to ensure its Ready conditions are False @ 09/30/23 13:09:54.387
  STEP: deleting the Pod via a Collection with a LabelSelector @ 09/30/23 13:09:54.387
  STEP: watching for the Pod to be deleted @ 09/30/23 13:09:54.397
  Sep 30 13:09:54.399: INFO: observed event type MODIFIED
  Sep 30 13:09:56.370: INFO: observed event type MODIFIED
  Sep 30 13:09:56.587: INFO: observed event type MODIFIED
  Sep 30 13:09:57.371: INFO: observed event type MODIFIED
  Sep 30 13:09:57.388: INFO: observed event type MODIFIED
  Sep 30 13:09:57.398: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7091" for this suite. @ 09/30/23 13:09:57.402
â€¢ [3.974 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]
test/e2e/kubectl/kubectl.go:1575
  STEP: Creating a kubernetes client @ 09/30/23 13:09:57.409
  Sep 30 13:09:57.409: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:09:57.41
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:09:57.428
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:09:57.431
  STEP: creating the pod @ 09/30/23 13:09:57.435
  Sep 30 13:09:57.435: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-534 create -f -'
  Sep 30 13:09:57.772: INFO: stderr: ""
  Sep 30 13:09:57.772: INFO: stdout: "pod/pause created\n"
  STEP: adding the label testing-label with value testing-label-value to a pod @ 09/30/23 13:09:59.784
  Sep 30 13:09:59.784: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-534 label pods pause testing-label=testing-label-value'
  Sep 30 13:09:59.867: INFO: stderr: ""
  Sep 30 13:09:59.867: INFO: stdout: "pod/pause labeled\n"
  STEP: verifying the pod has the label testing-label with the value testing-label-value @ 09/30/23 13:09:59.867
  Sep 30 13:09:59.867: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-534 get pod pause -L testing-label'
  Sep 30 13:09:59.952: INFO: stderr: ""
  Sep 30 13:09:59.952: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    testing-label-value\n"
  STEP: removing the label testing-label of a pod @ 09/30/23 13:09:59.952
  Sep 30 13:09:59.953: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-534 label pods pause testing-label-'
  Sep 30 13:10:00.036: INFO: stderr: ""
  Sep 30 13:10:00.036: INFO: stdout: "pod/pause unlabeled\n"
  STEP: verifying the pod doesn't have the label testing-label @ 09/30/23 13:10:00.036
  Sep 30 13:10:00.036: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-534 get pod pause -L testing-label'
  Sep 30 13:10:00.110: INFO: stderr: ""
  Sep 30 13:10:00.110: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          3s    \n"
  STEP: using delete to clean up resources @ 09/30/23 13:10:00.11
  Sep 30 13:10:00.110: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-534 delete --grace-period=0 --force -f -'
  Sep 30 13:10:00.193: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Sep 30 13:10:00.193: INFO: stdout: "pod \"pause\" force deleted\n"
  Sep 30 13:10:00.193: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-534 get rc,svc -l name=pause --no-headers'
  Sep 30 13:10:00.274: INFO: stderr: "No resources found in kubectl-534 namespace.\n"
  Sep 30 13:10:00.274: INFO: stdout: ""
  Sep 30 13:10:00.274: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-534 get pods -l name=pause -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Sep 30 13:10:00.350: INFO: stderr: ""
  Sep 30 13:10:00.350: INFO: stdout: ""
  Sep 30 13:10:00.350: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-534" for this suite. @ 09/30/23 13:10:00.355
â€¢ [2.951 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:71
  STEP: Creating a kubernetes client @ 09/30/23 13:10:00.362
  Sep 30 13:10:00.362: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 13:10:00.362
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:10:00.379
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:10:00.383
  Sep 30 13:10:22.456: INFO: Container started at 2023-09-30 13:10:01 +0000 UTC, pod became ready at 2023-09-30 13:10:20 +0000 UTC
  Sep 30 13:10:22.456: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-4047" for this suite. @ 09/30/23 13:10:22.461
â€¢ [22.106 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:131
  STEP: Creating a kubernetes client @ 09/30/23 13:10:22.468
  Sep 30 13:10:22.468: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 13:10:22.469
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:10:22.484
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:10:22.488
  STEP: Creating the pod @ 09/30/23 13:10:22.492
  Sep 30 13:10:25.035: INFO: Successfully updated pod "labelsupdate685505b4-0383-4209-8112-a43fe13351dc"
  Sep 30 13:10:27.052: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-257" for this suite. @ 09/30/23 13:10:27.058
â€¢ [4.597 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:399
  STEP: Creating a kubernetes client @ 09/30/23 13:10:27.065
  Sep 30 13:10:27.065: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 13:10:27.066
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:10:27.083
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:10:27.087
  STEP: creating the pod @ 09/30/23 13:10:27.091
  STEP: submitting the pod to kubernetes @ 09/30/23 13:10:27.091
  W0930 13:10:27.100063      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: verifying the pod is in kubernetes @ 09/30/23 13:10:29.113
  STEP: updating the pod @ 09/30/23 13:10:29.117
  Sep 30 13:10:29.629: INFO: Successfully updated pod "pod-update-activedeadlineseconds-29e9dc25-7677-40a9-8068-b84fefcf3e75"
  Sep 30 13:10:33.642: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-3296" for this suite. @ 09/30/23 13:10:33.647
â€¢ [6.589 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]
test/e2e/apimachinery/garbage_collector.go:817
  STEP: Creating a kubernetes client @ 09/30/23 13:10:33.655
  Sep 30 13:10:33.655: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename gc @ 09/30/23 13:10:33.656
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:10:33.675
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:10:33.679
  Sep 30 13:10:33.711: INFO: pod1.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod3", UID:"816f029b-c5e5-44c2-8ecd-bbd26552343b", Controller:(*bool)(0xc00351f35e), BlockOwnerDeletion:(*bool)(0xc00351f35f)}}
  Sep 30 13:10:33.720: INFO: pod2.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod1", UID:"acf8bd73-844b-4dc1-a26a-892c418a05d1", Controller:(*bool)(0xc00351f596), BlockOwnerDeletion:(*bool)(0xc00351f597)}}
  Sep 30 13:10:33.725: INFO: pod3.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod2", UID:"275bd20c-f296-47c6-9dac-c73349c541d4", Controller:(*bool)(0xc00351f7c6), BlockOwnerDeletion:(*bool)(0xc00351f7c7)}}
  Sep 30 13:10:38.738: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-1245" for this suite. @ 09/30/23 13:10:38.742
â€¢ [5.094 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:99
  STEP: Creating a kubernetes client @ 09/30/23 13:10:38.75
  Sep 30 13:10:38.750: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:10:38.751
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:10:38.768
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:10:38.772
  STEP: Creating configMap with name projected-configmap-test-volume-map-a6b76433-9358-4cb9-ae3a-79b5d8480f0d @ 09/30/23 13:10:38.776
  STEP: Creating a pod to test consume configMaps @ 09/30/23 13:10:38.78
  STEP: Saw pod success @ 09/30/23 13:10:42.805
  Sep 30 13:10:42.809: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-configmaps-71cf4a58-aa09-44f0-8bb8-25cbf1982229 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:10:42.816
  Sep 30 13:10:42.830: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9346" for this suite. @ 09/30/23 13:10:42.834
â€¢ [4.092 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]
test/e2e/network/dns.go:286
  STEP: Creating a kubernetes client @ 09/30/23 13:10:42.843
  Sep 30 13:10:42.843: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename dns @ 09/30/23 13:10:42.844
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:10:42.861
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:10:42.865
  STEP: Creating a test headless service @ 09/30/23 13:10:42.869
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-7729.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service-2.dns-7729.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-7729.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service-2.dns-7729.svc.cluster.local;sleep 1; done
   @ 09/30/23 13:10:42.874
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-7729.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service-2.dns-7729.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-7729.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service-2.dns-7729.svc.cluster.local;sleep 1; done
   @ 09/30/23 13:10:42.874
  STEP: creating a pod to probe DNS @ 09/30/23 13:10:42.875
  STEP: submitting the pod to kubernetes @ 09/30/23 13:10:42.875
  STEP: retrieving the pod @ 09/30/23 13:10:44.893
  STEP: looking for the results for each expected name from probers @ 09/30/23 13:10:44.897
  Sep 30 13:10:44.903: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local from pod dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65: the server could not find the requested resource (get pods dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65)
  Sep 30 13:10:44.907: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local from pod dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65: the server could not find the requested resource (get pods dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65)
  Sep 30 13:10:44.911: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-7729.svc.cluster.local from pod dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65: the server could not find the requested resource (get pods dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65)
  Sep 30 13:10:44.916: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-7729.svc.cluster.local from pod dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65: the server could not find the requested resource (get pods dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65)
  Sep 30 13:10:44.921: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local from pod dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65: the server could not find the requested resource (get pods dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65)
  Sep 30 13:10:44.925: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local from pod dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65: the server could not find the requested resource (get pods dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65)
  Sep 30 13:10:44.929: INFO: Unable to read jessie_udp@dns-test-service-2.dns-7729.svc.cluster.local from pod dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65: the server could not find the requested resource (get pods dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65)
  Sep 30 13:10:44.934: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-7729.svc.cluster.local from pod dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65: the server could not find the requested resource (get pods dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65)
  Sep 30 13:10:44.934: INFO: Lookups using dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65 failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local wheezy_udp@dns-test-service-2.dns-7729.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-7729.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-7729.svc.cluster.local jessie_udp@dns-test-service-2.dns-7729.svc.cluster.local jessie_tcp@dns-test-service-2.dns-7729.svc.cluster.local]

  Sep 30 13:10:44.942: INFO: Pod client logs for webserver: 
  Sep 30 13:10:44.949: INFO: Pod client logs for querier: 
  Sep 30 13:10:44.960: INFO: Pod client logs for jessie-querier: 
  Sep 30 13:10:49.997: INFO: DNS probes using dns-7729/dns-test-659ce412-8139-4913-a6d1-5ec1cf00de65 succeeded

  Sep 30 13:10:49.997: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:10:50.002
  STEP: deleting the test headless service @ 09/30/23 13:10:50.012
  STEP: Destroying namespace "dns-7729" for this suite. @ 09/30/23 13:10:50.028
â€¢ [7.193 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]
test/e2e/auth/service_accounts.go:161
  STEP: Creating a kubernetes client @ 09/30/23 13:10:50.037
  Sep 30 13:10:50.037: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename svcaccounts @ 09/30/23 13:10:50.038
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:10:50.055
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:10:50.058
  Sep 30 13:10:50.081: INFO: created pod pod-service-account-defaultsa
  Sep 30 13:10:50.081: INFO: pod pod-service-account-defaultsa service account token volume mount: true
  Sep 30 13:10:50.091: INFO: created pod pod-service-account-mountsa
  Sep 30 13:10:50.091: INFO: pod pod-service-account-mountsa service account token volume mount: true
  Sep 30 13:10:50.096: INFO: created pod pod-service-account-nomountsa
  Sep 30 13:10:50.096: INFO: pod pod-service-account-nomountsa service account token volume mount: false
  Sep 30 13:10:50.102: INFO: created pod pod-service-account-defaultsa-mountspec
  Sep 30 13:10:50.102: INFO: pod pod-service-account-defaultsa-mountspec service account token volume mount: true
  Sep 30 13:10:50.108: INFO: created pod pod-service-account-mountsa-mountspec
  Sep 30 13:10:50.108: INFO: pod pod-service-account-mountsa-mountspec service account token volume mount: true
  Sep 30 13:10:50.115: INFO: created pod pod-service-account-nomountsa-mountspec
  Sep 30 13:10:50.115: INFO: pod pod-service-account-nomountsa-mountspec service account token volume mount: true
  Sep 30 13:10:50.121: INFO: created pod pod-service-account-defaultsa-nomountspec
  Sep 30 13:10:50.121: INFO: pod pod-service-account-defaultsa-nomountspec service account token volume mount: false
  Sep 30 13:10:50.129: INFO: created pod pod-service-account-mountsa-nomountspec
  Sep 30 13:10:50.129: INFO: pod pod-service-account-mountsa-nomountspec service account token volume mount: false
  Sep 30 13:10:50.136: INFO: created pod pod-service-account-nomountsa-nomountspec
  Sep 30 13:10:50.136: INFO: pod pod-service-account-nomountsa-nomountspec service account token volume mount: false
  Sep 30 13:10:50.136: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-1462" for this suite. @ 09/30/23 13:10:50.141
â€¢ [0.113 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]
test/e2e/apimachinery/resource_quota.go:232
  STEP: Creating a kubernetes client @ 09/30/23 13:10:50.15
  Sep 30 13:10:50.150: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 13:10:50.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:10:50.166
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:10:50.171
  STEP: Counting existing ResourceQuota @ 09/30/23 13:10:50.176
  STEP: Creating a ResourceQuota @ 09/30/23 13:10:55.181
  STEP: Ensuring resource quota status is calculated @ 09/30/23 13:10:55.187
  STEP: Creating a Pod that fits quota @ 09/30/23 13:10:57.192
  STEP: Ensuring ResourceQuota status captures the pod usage @ 09/30/23 13:10:57.207
  STEP: Not allowing a pod to be created that exceeds remaining quota @ 09/30/23 13:10:59.212
  STEP: Not allowing a pod to be created that exceeds remaining quota(validation on extended resources) @ 09/30/23 13:10:59.215
  STEP: Ensuring a pod cannot update its resource requirements @ 09/30/23 13:10:59.218
  STEP: Ensuring attempts to update pod resource requirements did not change quota usage @ 09/30/23 13:10:59.223
  STEP: Deleting the pod @ 09/30/23 13:11:01.228
  STEP: Ensuring resource quota status released the pod usage @ 09/30/23 13:11:01.241
  Sep 30 13:11:03.245: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8237" for this suite. @ 09/30/23 13:11:03.25
â€¢ [13.106 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]
test/e2e/common/node/expansion.go:115
  STEP: Creating a kubernetes client @ 09/30/23 13:11:03.257
  Sep 30 13:11:03.257: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename var-expansion @ 09/30/23 13:11:03.258
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:11:03.274
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:11:03.278
  STEP: Creating a pod to test substitution in volume subpath @ 09/30/23 13:11:03.282
  STEP: Saw pod success @ 09/30/23 13:11:07.304
  Sep 30 13:11:07.308: INFO: Trying to get logs from node ip-172-31-31-30 pod var-expansion-f5496e17-38d5-453c-8489-ce29a803fc06 container dapi-container: <nil>
  STEP: delete the pod @ 09/30/23 13:11:07.315
  Sep 30 13:11:07.332: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-52" for this suite. @ 09/30/23 13:11:07.336
â€¢ [4.085 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:84
  STEP: Creating a kubernetes client @ 09/30/23 13:11:07.343
  Sep 30 13:11:07.343: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pod-network-test @ 09/30/23 13:11:07.344
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:11:07.36
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:11:07.364
  STEP: Performing setup for networking test in namespace pod-network-test-7776 @ 09/30/23 13:11:07.368
  STEP: creating a selector @ 09/30/23 13:11:07.368
  STEP: Creating the service pods in kubernetes @ 09/30/23 13:11:07.368
  Sep 30 13:11:07.368: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 09/30/23 13:11:29.472
  Sep 30 13:11:31.489: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Sep 30 13:11:31.490: INFO: Breadth first check of 192.168.10.125 on host 172.31.31.30...
  Sep 30 13:11:31.493: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.10.115:9080/dial?request=hostname&protocol=http&host=192.168.10.125&port=8083&tries=1'] Namespace:pod-network-test-7776 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:11:31.493: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:11:31.493: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:11:31.493: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-7776/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.10.115%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D192.168.10.125%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Sep 30 13:11:31.610: INFO: Waiting for responses: map[]
  Sep 30 13:11:31.610: INFO: reached 192.168.10.125 after 0/1 tries
  Sep 30 13:11:31.611: INFO: Breadth first check of 192.168.35.200 on host 172.31.39.81...
  Sep 30 13:11:31.615: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.10.115:9080/dial?request=hostname&protocol=http&host=192.168.35.200&port=8083&tries=1'] Namespace:pod-network-test-7776 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:11:31.615: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:11:31.615: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:11:31.615: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-7776/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.10.115%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D192.168.35.200%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Sep 30 13:11:31.728: INFO: Waiting for responses: map[]
  Sep 30 13:11:31.728: INFO: reached 192.168.35.200 after 0/1 tries
  Sep 30 13:11:31.728: INFO: Breadth first check of 192.168.224.230 on host 172.31.81.206...
  Sep 30 13:11:31.732: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.10.115:9080/dial?request=hostname&protocol=http&host=192.168.224.230&port=8083&tries=1'] Namespace:pod-network-test-7776 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:11:31.733: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:11:31.733: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:11:31.733: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-7776/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.10.115%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D192.168.224.230%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Sep 30 13:11:31.851: INFO: Waiting for responses: map[]
  Sep 30 13:11:31.851: INFO: reached 192.168.224.230 after 0/1 tries
  Sep 30 13:11:31.851: INFO: Going to retry 0 out of 3 pods....
  Sep 30 13:11:31.851: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-7776" for this suite. @ 09/30/23 13:11:31.856
â€¢ [24.520 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]
test/e2e/apimachinery/resource_quota.go:887
  STEP: Creating a kubernetes client @ 09/30/23 13:11:31.864
  Sep 30 13:11:31.864: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 13:11:31.865
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:11:31.881
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:11:31.885
  STEP: Creating a ResourceQuota @ 09/30/23 13:11:31.889
  STEP: Getting a ResourceQuota @ 09/30/23 13:11:31.894
  STEP: Updating a ResourceQuota @ 09/30/23 13:11:31.898
  STEP: Verifying a ResourceQuota was modified @ 09/30/23 13:11:31.903
  STEP: Deleting a ResourceQuota @ 09/30/23 13:11:31.907
  STEP: Verifying the deleted ResourceQuota @ 09/30/23 13:11:31.913
  Sep 30 13:11:31.917: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-9152" for this suite. @ 09/30/23 13:11:31.922
â€¢ [0.065 seconds]
------------------------------
SSS
------------------------------
[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:175
  STEP: Creating a kubernetes client @ 09/30/23 13:11:31.929
  Sep 30 13:11:31.929: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 13:11:31.93
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:11:31.951
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:11:31.955
  STEP: Creating configMap with name configmap-test-upd-07cdb18c-b79e-4c45-87fc-0bd588f71319 @ 09/30/23 13:11:31.962
  STEP: Creating the pod @ 09/30/23 13:11:31.968
  STEP: Waiting for pod with text data @ 09/30/23 13:11:33.988
  STEP: Waiting for pod with binary data @ 09/30/23 13:11:34.009
  Sep 30 13:11:34.016: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8574" for this suite. @ 09/30/23 13:11:34.02
â€¢ [2.099 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]
test/e2e/apimachinery/discovery.go:169
  STEP: Creating a kubernetes client @ 09/30/23 13:11:34.029
  Sep 30 13:11:34.029: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename discovery @ 09/30/23 13:11:34.029
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:11:34.045
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:11:34.049
  STEP: Setting up server cert @ 09/30/23 13:11:34.054
  STEP: Requesting APIResourceList from "/api/v1" @ 09/30/23 13:11:34.519
  STEP: Requesting APIResourceList from "/apis/admissionregistration.k8s.io/v1" @ 09/30/23 13:11:34.522
  STEP: Requesting APIResourceList from "/apis/apiextensions.k8s.io/v1" @ 09/30/23 13:11:34.523
  STEP: Requesting APIResourceList from "/apis/apiregistration.k8s.io/v1" @ 09/30/23 13:11:34.525
  STEP: Requesting APIResourceList from "/apis/apps/v1" @ 09/30/23 13:11:34.526
  STEP: Requesting APIResourceList from "/apis/authentication.k8s.io/v1" @ 09/30/23 13:11:34.528
  STEP: Requesting APIResourceList from "/apis/authorization.k8s.io/v1" @ 09/30/23 13:11:34.529
  STEP: Requesting APIResourceList from "/apis/autoscaling/v1" @ 09/30/23 13:11:34.531
  STEP: Requesting APIResourceList from "/apis/autoscaling/v2" @ 09/30/23 13:11:34.532
  STEP: Requesting APIResourceList from "/apis/batch/v1" @ 09/30/23 13:11:34.534
  STEP: Requesting APIResourceList from "/apis/certificates.k8s.io/v1" @ 09/30/23 13:11:34.535
  STEP: Requesting APIResourceList from "/apis/coordination.k8s.io/v1" @ 09/30/23 13:11:34.537
  STEP: Requesting APIResourceList from "/apis/discovery.k8s.io/v1" @ 09/30/23 13:11:34.538
  STEP: Requesting APIResourceList from "/apis/events.k8s.io/v1" @ 09/30/23 13:11:34.54
  STEP: Requesting APIResourceList from "/apis/networking.k8s.io/v1" @ 09/30/23 13:11:34.542
  STEP: Requesting APIResourceList from "/apis/node.k8s.io/v1" @ 09/30/23 13:11:34.544
  STEP: Requesting APIResourceList from "/apis/policy/v1" @ 09/30/23 13:11:34.546
  STEP: Requesting APIResourceList from "/apis/scheduling.k8s.io/v1" @ 09/30/23 13:11:34.547
  STEP: Requesting APIResourceList from "/apis/storage.k8s.io/v1" @ 09/30/23 13:11:34.549
  Sep 30 13:11:34.551: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-2614" for this suite. @ 09/30/23 13:11:34.555
â€¢ [0.534 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]
test/e2e/node/security_context.go:129
  STEP: Creating a kubernetes client @ 09/30/23 13:11:34.563
  Sep 30 13:11:34.563: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename security-context @ 09/30/23 13:11:34.564
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:11:34.582
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:11:34.585
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 09/30/23 13:11:34.589
  STEP: Saw pod success @ 09/30/23 13:11:38.612
  Sep 30 13:11:38.616: INFO: Trying to get logs from node ip-172-31-31-30 pod security-context-ef38d789-1702-41fb-b597-2ef03e3b2b02 container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:11:38.624
  Sep 30 13:11:38.639: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-7221" for this suite. @ 09/30/23 13:11:38.643
â€¢ [4.088 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]
test/e2e/scheduling/preemption.go:812
  STEP: Creating a kubernetes client @ 09/30/23 13:11:38.651
  Sep 30 13:11:38.651: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-preemption @ 09/30/23 13:11:38.652
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:11:38.671
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:11:38.674
  Sep 30 13:11:38.693: INFO: Waiting up to 1m0s for all nodes to be ready
  Sep 30 13:12:38.722: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 09/30/23 13:12:38.726
  Sep 30 13:12:38.726: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-preemption-path @ 09/30/23 13:12:38.727
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:12:38.744
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:12:38.748
  Sep 30 13:12:38.768: INFO: PriorityClass.scheduling.k8s.io "p1" is invalid: value: Forbidden: may not be changed in an update.
  Sep 30 13:12:38.773: INFO: PriorityClass.scheduling.k8s.io "p2" is invalid: value: Forbidden: may not be changed in an update.
  Sep 30 13:12:38.792: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 13:12:38.809: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-3238" for this suite. @ 09/30/23 13:12:38.855
  STEP: Destroying namespace "sched-preemption-990" for this suite. @ 09/30/23 13:12:38.861
â€¢ [60.217 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:141
  STEP: Creating a kubernetes client @ 09/30/23 13:12:38.869
  Sep 30 13:12:38.869: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-webhook @ 09/30/23 13:12:38.87
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:12:38.888
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:12:38.892
  STEP: Setting up server cert @ 09/30/23 13:12:38.896
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 09/30/23 13:12:40.059
  STEP: Deploying the custom resource conversion webhook pod @ 09/30/23 13:12:40.068
  STEP: Wait for the deployment to be ready @ 09/30/23 13:12:40.081
  Sep 30 13:12:40.089: INFO: deployment "sample-crd-conversion-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 13:12:42.101
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:12:42.113
  Sep 30 13:12:43.113: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Sep 30 13:12:43.121: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Creating a v1 custom resource @ 09/30/23 13:12:45.691
  STEP: v2 custom resource should be converted @ 09/30/23 13:12:45.697
  Sep 30 13:12:45.701: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-2116" for this suite. @ 09/30/23 13:12:46.257
â€¢ [7.396 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]
test/e2e/common/node/init_container.go:335
  STEP: Creating a kubernetes client @ 09/30/23 13:12:46.266
  Sep 30 13:12:46.266: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename init-container @ 09/30/23 13:12:46.267
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:12:46.286
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:12:46.289
  STEP: creating the pod @ 09/30/23 13:12:46.293
  Sep 30 13:12:46.293: INFO: PodSpec: initContainers in spec.initContainers
  Sep 30 13:13:31.824: INFO: init container has failed twice: &v1.Pod{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"pod-init-a7c3a8a6-97e6-4a3c-bd47-2a3ef142a5cb", GenerateName:"", Namespace:"init-container-2126", SelfLink:"", UID:"4b6ccdee-3525-4b92-8214-6bc912ce0bb3", ResourceVersion:"25367", Generation:0, CreationTimestamp:time.Date(2023, time.September, 30, 13, 12, 46, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"name":"foo", "time":"293614606"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.September, 30, 13, 12, 46, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0049d9458), Subresource:""}, v1.ManagedFieldsEntry{Manager:"kubelet", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.September, 30, 13, 13, 31, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0049d94a0), Subresource:"status"}}}, Spec:v1.PodSpec{Volumes:[]v1.Volume{v1.Volume{Name:"kube-api-access-6g9mj", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(nil), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(0xc003b5bb00), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil), Ephemeral:(*v1.EphemeralVolumeSource)(nil)}}}, InitContainers:[]v1.Container{v1.Container{Name:"init1", Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", Command:[]string{"/bin/false"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-6g9mj", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}, v1.Container{Name:"init2", Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", Command:[]string{"/bin/true"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-6g9mj", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, Containers:[]v1.Container{v1.Container{Name:"run1", Image:"registry.k8s.io/pause:3.9", Command:[]string(nil), Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Requests:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-6g9mj", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, EphemeralContainers:[]v1.EphemeralContainer(nil), RestartPolicy:"Always", TerminationGracePeriodSeconds:(*int64)(0xc002218458), ActiveDeadlineSeconds:(*int64)(nil), DNSPolicy:"ClusterFirst", NodeSelector:map[string]string(nil), ServiceAccountName:"default", DeprecatedServiceAccount:"default", AutomountServiceAccountToken:(*bool)(nil), NodeName:"ip-172-31-31-30", HostNetwork:false, HostPID:false, HostIPC:false, ShareProcessNamespace:(*bool)(nil), SecurityContext:(*v1.PodSecurityContext)(0xc000438150), ImagePullSecrets:[]v1.LocalObjectReference(nil), Hostname:"", Subdomain:"", Affinity:(*v1.Affinity)(nil), SchedulerName:"default-scheduler", Tolerations:[]v1.Toleration{v1.Toleration{Key:"node.kubernetes.io/not-ready", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc0022184e0)}, v1.Toleration{Key:"node.kubernetes.io/unreachable", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc002218500)}}, HostAliases:[]v1.HostAlias(nil), PriorityClassName:"", Priority:(*int32)(0xc002218508), DNSConfig:(*v1.PodDNSConfig)(nil), ReadinessGates:[]v1.PodReadinessGate(nil), RuntimeClassName:(*string)(nil), EnableServiceLinks:(*bool)(0xc00221850c), PreemptionPolicy:(*v1.PreemptionPolicy)(0xc0011caa30), Overhead:v1.ResourceList(nil), TopologySpreadConstraints:[]v1.TopologySpreadConstraint(nil), SetHostnameAsFQDN:(*bool)(nil), OS:(*v1.PodOS)(nil), HostUsers:(*bool)(nil), SchedulingGates:[]v1.PodSchedulingGate(nil), ResourceClaims:[]v1.PodResourceClaim(nil)}, Status:v1.PodStatus{Phase:"Pending", Conditions:[]v1.PodCondition{v1.PodCondition{Type:"Initialized", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.September, 30, 13, 12, 46, 0, time.Local), Reason:"ContainersNotInitialized", Message:"containers with incomplete status: [init1 init2]"}, v1.PodCondition{Type:"Ready", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.September, 30, 13, 12, 46, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"ContainersReady", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.September, 30, 13, 12, 46, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"PodScheduled", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.September, 30, 13, 12, 46, 0, time.Local), Reason:"", Message:""}}, Message:"", Reason:"", NominatedNodeName:"", HostIP:"172.31.31.30", HostIPs:[]v1.HostIP(nil), PodIP:"192.168.10.114", PodIPs:[]v1.PodIP{v1.PodIP{IP:"192.168.10.114"}}, StartTime:time.Date(2023, time.September, 30, 13, 12, 46, 0, time.Local), InitContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"init1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc0004388c0)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc000438930)}, Ready:false, RestartCount:3, Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", ImageID:"registry.k8s.io/e2e-test-images/busybox@sha256:2e0f836850e09b8b7cc937681d6194537a09fbd5f6b9e08f4d646a85128e8937", ContainerID:"containerd://1456ba5703b904acd3a5e270ad61ccf88ac8e1abce6030c746b51f4aa537f93c", Started:(*bool)(0xc0022185aa), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}, v1.ContainerStatus{Name:"init2", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc003b5bc00), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", ImageID:"", ContainerID:"", Started:(*bool)(0xc0022185bf), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, ContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"run1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc003b5bb60), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/pause:3.9", ImageID:"", ContainerID:"", Started:(*bool)(0xc00221858f), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, QOSClass:"Burstable", EphemeralContainerStatuses:[]v1.ContainerStatus(nil), Resize:"", ResourceClaimStatuses:[]v1.PodResourceClaimStatus(nil)}}
  Sep 30 13:13:31.825: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-2126" for this suite. @ 09/30/23 13:13:31.829
â€¢ [45.570 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:486
  STEP: Creating a kubernetes client @ 09/30/23 13:13:31.837
  Sep 30 13:13:31.837: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename security-context-test @ 09/30/23 13:13:31.838
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:13:31.856
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:13:31.86
  Sep 30 13:13:35.889: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-8187" for this suite. @ 09/30/23 13:13:35.894
â€¢ [4.064 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Slow] [Conformance]
test/e2e/common/node/expansion.go:155
  STEP: Creating a kubernetes client @ 09/30/23 13:13:35.905
  Sep 30 13:13:35.905: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename var-expansion @ 09/30/23 13:13:35.906
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:13:35.923
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:13:35.927
  Sep 30 13:13:37.947: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 13:13:37.951: INFO: Deleting pod "var-expansion-ff868f1d-1de3-42c5-9281-7036aacd2c34" in namespace "var-expansion-9032"
  Sep 30 13:13:37.958: INFO: Wait up to 5m0s for pod "var-expansion-ff868f1d-1de3-42c5-9281-7036aacd2c34" to be fully deleted
  STEP: Destroying namespace "var-expansion-9032" for this suite. @ 09/30/23 13:13:39.966
â€¢ [4.067 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]
test/e2e/common/node/podtemplates.go:53
  STEP: Creating a kubernetes client @ 09/30/23 13:13:39.974
  Sep 30 13:13:39.974: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename podtemplate @ 09/30/23 13:13:39.975
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:13:39.992
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:13:39.996
  Sep 30 13:13:40.032: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-4644" for this suite. @ 09/30/23 13:13:40.037
â€¢ [0.070 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:69
  STEP: Creating a kubernetes client @ 09/30/23 13:13:40.045
  Sep 30 13:13:40.045: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:13:40.046
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:13:40.063
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:13:40.067
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:13:40.072
  STEP: Saw pod success @ 09/30/23 13:13:44.097
  Sep 30 13:13:44.100: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-40c58c97-5764-4e34-b65a-5340e5619682 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:13:44.124
  Sep 30 13:13:44.140: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7302" for this suite. @ 09/30/23 13:13:44.144
â€¢ [4.105 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:75
  STEP: Creating a kubernetes client @ 09/30/23 13:13:44.15
  Sep 30 13:13:44.150: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename containers @ 09/30/23 13:13:44.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:13:44.168
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:13:44.172
  STEP: Creating a pod to test override command @ 09/30/23 13:13:44.175
  STEP: Saw pod success @ 09/30/23 13:13:48.197
  Sep 30 13:13:48.201: INFO: Trying to get logs from node ip-172-31-31-30 pod client-containers-47838764-9806-49c8-a2ae-0b0aa5428389 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:13:48.209
  Sep 30 13:13:48.223: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-5296" for this suite. @ 09/30/23 13:13:48.228
â€¢ [4.084 seconds]
------------------------------
SSS
------------------------------
[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:89
  STEP: Creating a kubernetes client @ 09/30/23 13:13:48.234
  Sep 30 13:13:48.234: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename containers @ 09/30/23 13:13:48.235
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:13:48.253
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:13:48.257
  STEP: Creating a pod to test override all @ 09/30/23 13:13:48.261
  STEP: Saw pod success @ 09/30/23 13:13:52.282
  Sep 30 13:13:52.286: INFO: Trying to get logs from node ip-172-31-31-30 pod client-containers-39ceb490-c675-4c13-b4c3-7fea805e0e61 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:13:52.292
  Sep 30 13:13:52.305: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-7786" for this suite. @ 09/30/23 13:13:52.31
â€¢ [4.084 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]
test/e2e/scheduling/limit_range.go:61
  STEP: Creating a kubernetes client @ 09/30/23 13:13:52.318
  Sep 30 13:13:52.318: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename limitrange @ 09/30/23 13:13:52.319
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:13:52.335
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:13:52.339
  STEP: Creating a LimitRange @ 09/30/23 13:13:52.343
  STEP: Setting up watch @ 09/30/23 13:13:52.343
  STEP: Submitting a LimitRange @ 09/30/23 13:13:52.448
  STEP: Verifying LimitRange creation was observed @ 09/30/23 13:13:52.452
  STEP: Fetching the LimitRange to ensure it has proper values @ 09/30/23 13:13:52.452
  Sep 30 13:13:52.456: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Sep 30 13:13:52.456: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with no resource requirements @ 09/30/23 13:13:52.456
  STEP: Ensuring Pod has resource requirements applied from LimitRange @ 09/30/23 13:13:52.463
  Sep 30 13:13:52.466: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Sep 30 13:13:52.466: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with partial resource requirements @ 09/30/23 13:13:52.466
  STEP: Ensuring Pod has merged resource requirements applied from LimitRange @ 09/30/23 13:13:52.472
  Sep 30 13:13:52.477: INFO: Verifying requests: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}]
  Sep 30 13:13:52.477: INFO: Verifying limits: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Failing to create a Pod with less than min resources @ 09/30/23 13:13:52.477
  STEP: Failing to create a Pod with more than max resources @ 09/30/23 13:13:52.48
  STEP: Updating a LimitRange @ 09/30/23 13:13:52.483
  STEP: Verifying LimitRange updating is effective @ 09/30/23 13:13:52.488
  STEP: Creating a Pod with less than former min resources @ 09/30/23 13:13:54.493
  STEP: Failing to create a Pod with more than max resources @ 09/30/23 13:13:54.5
  STEP: Deleting a LimitRange @ 09/30/23 13:13:54.502
  STEP: Verifying the LimitRange was deleted @ 09/30/23 13:13:54.51
  Sep 30 13:13:59.516: INFO: limitRange is already deleted
  STEP: Creating a Pod with more than former max resources @ 09/30/23 13:13:59.516
  Sep 30 13:13:59.529: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-8022" for this suite. @ 09/30/23 13:13:59.535
â€¢ [7.224 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]
test/e2e/auth/certificates.go:200
  STEP: Creating a kubernetes client @ 09/30/23 13:13:59.543
  Sep 30 13:13:59.543: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename certificates @ 09/30/23 13:13:59.544
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:13:59.561
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:13:59.565
  STEP: getting /apis @ 09/30/23 13:14:01.005
  STEP: getting /apis/certificates.k8s.io @ 09/30/23 13:14:01.01
  STEP: getting /apis/certificates.k8s.io/v1 @ 09/30/23 13:14:01.012
  STEP: creating @ 09/30/23 13:14:01.013
  STEP: getting @ 09/30/23 13:14:01.032
  STEP: listing @ 09/30/23 13:14:01.036
  STEP: watching @ 09/30/23 13:14:01.04
  Sep 30 13:14:01.040: INFO: starting watch
  STEP: patching @ 09/30/23 13:14:01.042
  STEP: updating @ 09/30/23 13:14:01.047
  Sep 30 13:14:01.054: INFO: waiting for watch events with expected annotations
  Sep 30 13:14:01.054: INFO: saw patched and updated annotations
  STEP: getting /approval @ 09/30/23 13:14:01.054
  STEP: patching /approval @ 09/30/23 13:14:01.058
  STEP: updating /approval @ 09/30/23 13:14:01.064
  STEP: getting /status @ 09/30/23 13:14:01.071
  STEP: patching /status @ 09/30/23 13:14:01.075
  STEP: updating /status @ 09/30/23 13:14:01.083
  STEP: deleting @ 09/30/23 13:14:01.091
  STEP: deleting a collection @ 09/30/23 13:14:01.105
  Sep 30 13:14:01.121: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "certificates-9858" for this suite. @ 09/30/23 13:14:01.126
â€¢ [1.590 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support rollover [Conformance]
test/e2e/apps/deployment.go:132
  STEP: Creating a kubernetes client @ 09/30/23 13:14:01.135
  Sep 30 13:14:01.135: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename deployment @ 09/30/23 13:14:01.135
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:14:01.151
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:14:01.155
  Sep 30 13:14:01.168: INFO: Pod name rollover-pod: Found 0 pods out of 1
  Sep 30 13:14:06.173: INFO: Pod name rollover-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 09/30/23 13:14:06.174
  Sep 30 13:14:06.174: INFO: Waiting for pods owned by replica set "test-rollover-controller" to become ready
  Sep 30 13:14:08.177: INFO: Creating deployment "test-rollover-deployment"
  Sep 30 13:14:08.185: INFO: Make sure deployment "test-rollover-deployment" performs scaling operations
  Sep 30 13:14:10.193: INFO: Check revision of new replica set for deployment "test-rollover-deployment"
  Sep 30 13:14:10.202: INFO: Ensure that both replica sets have 1 created replica
  Sep 30 13:14:10.209: INFO: Rollover old replica sets for deployment "test-rollover-deployment" with new image update
  Sep 30 13:14:10.220: INFO: Updating deployment test-rollover-deployment
  Sep 30 13:14:10.220: INFO: Wait deployment "test-rollover-deployment" to be observed by the deployment controller
  Sep 30 13:14:12.228: INFO: Wait for revision update of deployment "test-rollover-deployment" to 2
  Sep 30 13:14:12.235: INFO: Make sure deployment "test-rollover-deployment" is complete
  Sep 30 13:14:12.243: INFO: all replica sets need to contain the pod-template-hash label
  Sep 30 13:14:12.243: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:14:14.252: INFO: all replica sets need to contain the pod-template-hash label
  Sep 30 13:14:14.252: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:14:16.253: INFO: all replica sets need to contain the pod-template-hash label
  Sep 30 13:14:16.253: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:14:18.253: INFO: all replica sets need to contain the pod-template-hash label
  Sep 30 13:14:18.253: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:14:20.254: INFO: all replica sets need to contain the pod-template-hash label
  Sep 30 13:14:20.254: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.September, 30, 13, 14, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.September, 30, 13, 14, 8, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Sep 30 13:14:22.251: INFO: 
  Sep 30 13:14:22.251: INFO: Ensure that both old replica sets have no replicas
  Sep 30 13:14:22.262: INFO: Deployment "test-rollover-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6894",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2133b38b-4d00-4ede-a778-17f5f8e5311c",
      ResourceVersion: (string) (len=5) "25823",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676448,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676450,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000040  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000050  2c 22 66 3a 70 72 6f 67  72 65 73 73 44 65 61 64  |,"f:progressDead|
              00000060  6c 69 6e 65 53 65 63 6f  6e 64 73 22 3a 7b 7d 2c  |lineSeconds":{},|
              00000070  22 66 3a 72 65 70 6c 69  63 61 73 22 3a 7b 7d 2c  |"f:replicas":{},|
              00000080  22 66 3a 72 65 76 69 73  69 6f 6e 48 69 73 74 6f  |"f:revisionHisto|
              00000090  72 79 4c 69 6d 69 74 22  3a 7b 7d 2c 22 66 3a 73  |ryLimit":{},"f:s|
              000000a0  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 73  |elector":{},"f:s|
              000000b0  74 72 61 74 65 67 79 22  3a 7b 22 66 3a 72 6f 6c  |trategy":{"f:rol|
              000000c0  6c 69 6e 67 55 70 64 61  74 65 22 3a 7b 22 2e 22  |lingUpdate":{"."|
              000000d0  3a 7b 7d 2c 22 66 3a 6d  61 78 53 75 72 67 65 22  |:{},"f:maxSurge"|
              000000e0  3a 7b 7d 2c 22 66 3a 6d  61 78 55 6e 61 76 61 69  |:{},"f:maxUnavai|
              000000f0  6c 61 62 6c 65 22 3a 7b  7d 7d 2c 22 66 3a 74 79  |lable":{}},"f:ty|
              00000100  70 65 22 3a 7b 7d 7d 2c  22 66 3a 74 65 6d 70 6c  |pe":{}},"f:templ|
              00000110  61 74 65 22 3a 7b 22 66  3a 6d 65 74 61 64 61 74  |ate":{"f:metadat|
              00000120  61 22 3a 7b 22 66 3a 6c  61 62 65 6c 73 22 3a 7b  |a":{"f:labels":{|
              00000130  22 2e 22 3a 7b 7d 2c 22  66 3a 6e 61 6d 65 22 3a  |".":{},"f:name":|
              00000140  7b 7d 7d 7d 2c 22 66 3a  73 70 65 63 22 3a 7b 22  |{}}},"f:spec":{"|
              00000150  66 3a 63 6f 6e 74 61 69  6e 65 72 73 22 3a 7b 22  |f:containers":{"|
              00000160  6b 3a 7b 5c 22 6e 61 6d  65 5c 22 3a 5c 22 61 67  |k:{\"name\":\"ag|
              00000170  6e 68 6f 73 74 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |nhost\"}":{".":{|
              00000180  7d 2c 22 66 3a 69 6d 61  67 65 22 3a 7b 7d 2c 22  |},"f:image":{},"|
              00000190  66 3a 69 6d 61 67 65 50  75 6c 6c 50 6f 6c 69 63  |f:imagePullPolic|
              000001a0  79 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |y":{},"f:name":{|
              000001b0  7d 2c 22 66 3a 72 65 73  6f 75 72 63 65 73 22 3a  |},"f:resources":|
              000001c0  7b 7d 2c 22 66 3a 73 65  63 75 72 69 74 79 43 6f  |{},"f:securityCo|
              000001d0  6e 74 65 78 74 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ntext":{},"f:ter|
              000001e0  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000001f0  61 74 68 22 3a 7b 7d 2c  22 66 3a 74 65 72 6d 69  |ath":{},"f:termi|
              00000200  6e 61 74 69 6f 6e 4d 65  73 73 61 67 65 50 6f 6c  |nationMessagePol|
              00000210  69 63 79 22 3a 7b 7d 7d  7d 2c 22 66 3a 64 6e 73  |icy":{}}},"f:dns|
              00000220  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 72 65  |Policy":{},"f:re|
              00000230  73 74 61 72 74 50 6f 6c  69 63 79 22 3a 7b 7d 2c  |startPolicy":{},|
              00000240  22 66 3a 73 63 68 65 64  75 6c 65 72 4e 61 6d 65  |"f:schedulerName|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 47 72 61 63 65 50  |erminationGraceP|
              00000280  65 72 69 6f 64 53 65 63  6f 6e 64 73 22 3a 7b 7d  |eriodSeconds":{}|
              00000290  7d 7d 7d 7d                                       |}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676461,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 0,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 1,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 10,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676448,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676448,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676461,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676448,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=77) "ReplicaSet \"test-rollover-deployment-5d484bf7f9\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Sep 30 13:14:22.268: INFO: New ReplicaSet "test-rollover-deployment-5d484bf7f9" of Deployment "test-rollover-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6894",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b561ad72-7bc1-4ea7-812b-401f2eefb4b0",
      ResourceVersion: (string) (len=5) "25813",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676450,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "2133b38b-4d00-4ede-a778-17f5f8e5311c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676450,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=806) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 32 31 33 33 62 33  38 62 2d 34 64 30 30 2d  |\"2133b38b-4d00-|
              00000120  34 65 64 65 2d 61 37 37  38 2d 31 37 66 35 66 38  |4ede-a778-17f5f8|
              00000130  65 35 33 31 31 63 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |e5311c\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  61 67 6e 68 6f 73 74 5c  22 7d 22 3a 7b 22 2e 22  |agnhost\"}":{"."|
              00000210  3a 7b 7d 2c 22 66 3a 69  6d 61 67 65 22 3a 7b 7d  |:{},"f:image":{}|
              00000220  2c 22 66 3a 69 6d 61 67  65 50 75 6c 6c 50 6f 6c  |,"f:imagePullPol|
              00000230  69 63 79 22 3a 7b 7d 2c  22 66 3a 6e 61 6d 65 22  |icy":{},"f:name"|
              00000240  3a 7b 7d 2c 22 66 3a 72  65 73 6f 75 72 63 65 73  |:{},"f:resources|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 4d 65 73 73 61 67  |erminationMessag|
              00000280  65 50 61 74 68 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ePath":{},"f:ter|
              00000290  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000002a0  6f 6c 69 63 79 22 3a 7b  7d 7d 7d 2c 22 66 3a 64  |olicy":{}}},"f:d|
              000002b0  6e 73 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |nsPolicy":{},"f:|
              000002c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000002d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000002e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000002f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000300  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000310  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000320  7b 7d 7d 7d 7d 7d                                 |{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676461,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9",
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:14:22.269: INFO: All old ReplicaSets of Deployment "test-rollover-deployment":
  Sep 30 13:14:22.269: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6894",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4c0297da-8931-4f91-86f9-a6b30983d446",
      ResourceVersion: (string) (len=5) "25822",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676441,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=2) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "2133b38b-4d00-4ede-a778-17f5f8e5311c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676441,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=467) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  73 65 6c 65 63 74 6f 72  |ec":{"f:selector|
              00000050  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000060  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000070  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000080  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000090  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000a0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000b0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000c0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000d0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000e0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              000000f0  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000100  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000110  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000120  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000130  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000140  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000150  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000160  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000170  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000180  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              00000190  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001a0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001b0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001c0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001d0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676461,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=249) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 7d 2c 22 66  3a 6f 77 6e 65 72 52 65  |":{}},"f:ownerRe|
              00000090  66 65 72 65 6e 63 65 73  22 3a 7b 22 2e 22 3a 7b  |ferences":{".":{|
              000000a0  7d 2c 22 6b 3a 7b 5c 22  75 69 64 5c 22 3a 5c 22  |},"k:{\"uid\":\"|
              000000b0  32 31 33 33 62 33 38 62  2d 34 64 30 30 2d 34 65  |2133b38b-4d00-4e|
              000000c0  64 65 2d 61 37 37 38 2d  31 37 66 35 66 38 65 35  |de-a778-17f5f8e5|
              000000d0  33 31 31 63 5c 22 7d 22  3a 7b 7d 7d 7d 2c 22 66  |311c\"}":{}}},"f|
              000000e0  3a 73 70 65 63 22 3a 7b  22 66 3a 72 65 70 6c 69  |:spec":{"f:repli|
              000000f0  63 61 73 22 3a 7b 7d 7d  7d                       |cas":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676461,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=3) "pod": (string) (len=5) "httpd",
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:14:22.270: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-664fc6c874",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6894",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8342306d-8de6-4b8d-aecc-eee024131dcf",
      ResourceVersion: (string) (len=5) "25772",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676448,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "2133b38b-4d00-4ede-a778-17f5f8e5311c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676450,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=810) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 32 31 33 33 62 33  38 62 2d 34 64 30 30 2d  |\"2133b38b-4d00-|
              00000120  34 65 64 65 2d 61 37 37  38 2d 31 37 66 35 66 38  |4ede-a778-17f5f8|
              00000130  65 35 33 31 31 63 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |e5311c\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  72 65 64 69 73 2d 73 6c  61 76 65 5c 22 7d 22 3a  |redis-slave\"}":|
              00000210  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000220  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000230  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000240  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000250  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000260  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000270  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000280  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              00000290  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000002a0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000002b0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000002c0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000002d0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000002e0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              000002f0  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000300  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000310  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000320  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676450,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=11) "redis-slave",
              Image: (string) (len=47) "gcr.io/google_samples/gb-redisslave:nonexistent",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:14:22.275: INFO: Pod "test-rollover-deployment-5d484bf7f9-g5db9" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=41) "test-rollover-deployment-5d484bf7f9-g5db9",
      GenerateName: (string) (len=36) "test-rollover-deployment-5d484bf7f9-",
      Namespace: (string) (len=15) "deployment-6894",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7e9fa07a-890d-4e53-92b5-ff2aa47bba6c",
      ResourceVersion: (string) (len=5) "25791",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676450,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
          UID: (types.UID) (len=36) "b561ad72-7bc1-4ea7-812b-401f2eefb4b0",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676450,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 62 35  36 31 61 64 37 32 2d 37  |d\":\"b561ad72-7|
              00000090  62 63 31 2d 34 65 61 37  2d 38 31 32 62 2d 34 30  |bc1-4ea7-812b-40|
              000000a0  31 66 32 65 65 66 62 34  62 30 5c 22 7d 22 3a 7b  |1f2eefb4b0\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676451,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=521) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  33 35 2e 31 39 37 5c 22  |192.168.35.197\"|
              000001e0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 70  |}":{".":{},"f:ip|
              000001f0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 74 61 72 74 54  |":{}}},"f:startT|
              00000200  69 6d 65 22 3a 7b 7d 7d  7d                       |ime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-dtfwj",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-dtfwj",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-39-81",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676450,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676451,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676451,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831676450,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.39.81",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=14) "192.168.35.197",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.35.197"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831676450,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831676451,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://8480e794743769b1fa23690f1d5e6e58cee3a44e4ac32916f9149c6022dffc33",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:14:22.277: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-6894" for this suite. @ 09/30/23 13:14:22.282
â€¢ [21.155 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]
test/e2e/apimachinery/namespace.go:252
  STEP: Creating a kubernetes client @ 09/30/23 13:14:22.29
  Sep 30 13:14:22.290: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename namespaces @ 09/30/23 13:14:22.291
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:14:22.311
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:14:22.315
  STEP: Creating a test namespace @ 09/30/23 13:14:22.319
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:14:22.334
  STEP: Creating a service in the namespace @ 09/30/23 13:14:22.338
  STEP: Deleting the namespace @ 09/30/23 13:14:22.348
  STEP: Waiting for the namespace to be removed. @ 09/30/23 13:14:22.357
  STEP: Recreating the namespace @ 09/30/23 13:14:28.361
  STEP: Verifying there is no service in the namespace @ 09/30/23 13:14:28.377
  Sep 30 13:14:28.380: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-2223" for this suite. @ 09/30/23 13:14:28.385
  STEP: Destroying namespace "nsdeletetest-1155" for this suite. @ 09/30/23 13:14:28.393
  Sep 30 13:14:28.396: INFO: Namespace nsdeletetest-1155 was already deleted
  STEP: Destroying namespace "nsdeletetest-6757" for this suite. @ 09/30/23 13:14:28.396
â€¢ [6.113 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:218
  STEP: Creating a kubernetes client @ 09/30/23 13:14:28.403
  Sep 30 13:14:28.403: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 13:14:28.404
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:14:28.42
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:14:28.424
  STEP: Creating a pod to test downward api env vars @ 09/30/23 13:14:28.428
  STEP: Saw pod success @ 09/30/23 13:14:32.448
  Sep 30 13:14:32.452: INFO: Trying to get logs from node ip-172-31-31-30 pod downward-api-5c5c9750-84da-4409-9709-e94ce6e10b74 container dapi-container: <nil>
  STEP: delete the pod @ 09/30/23 13:14:32.459
  Sep 30 13:14:32.476: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1468" for this suite. @ 09/30/23 13:14:32.48
â€¢ [4.083 seconds]
------------------------------
SS
------------------------------
[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]
test/e2e/kubectl/kubectl.go:396
  STEP: Creating a kubernetes client @ 09/30/23 13:14:32.486
  Sep 30 13:14:32.486: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:14:32.487
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:14:32.505
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:14:32.509
  STEP: creating all guestbook components @ 09/30/23 13:14:32.514
  Sep 30 13:14:32.514: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-replica
    labels:
      app: agnhost
      role: replica
      tier: backend
  spec:
    ports:
    - port: 6379
    selector:
      app: agnhost
      role: replica
      tier: backend

  Sep 30 13:14:32.514: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 create -f -'
  Sep 30 13:14:32.770: INFO: stderr: ""
  Sep 30 13:14:32.770: INFO: stdout: "service/agnhost-replica created\n"
  Sep 30 13:14:32.770: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-primary
    labels:
      app: agnhost
      role: primary
      tier: backend
  spec:
    ports:
    - port: 6379
      targetPort: 6379
    selector:
      app: agnhost
      role: primary
      tier: backend

  Sep 30 13:14:32.771: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 create -f -'
  Sep 30 13:14:32.995: INFO: stderr: ""
  Sep 30 13:14:32.995: INFO: stdout: "service/agnhost-primary created\n"
  Sep 30 13:14:32.995: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: frontend
    labels:
      app: guestbook
      tier: frontend
  spec:
    # if your cluster supports it, uncomment the following to automatically create
    # an external load-balanced IP for the frontend service.
    # type: LoadBalancer
    ports:
    - port: 80
    selector:
      app: guestbook
      tier: frontend

  Sep 30 13:14:32.995: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 create -f -'
  Sep 30 13:14:33.216: INFO: stderr: ""
  Sep 30 13:14:33.216: INFO: stdout: "service/frontend created\n"
  Sep 30 13:14:33.216: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: frontend
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: guestbook
        tier: frontend
    template:
      metadata:
        labels:
          app: guestbook
          tier: frontend
      spec:
        containers:
        - name: guestbook-frontend
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--backend-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 80

  Sep 30 13:14:33.217: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 create -f -'
  Sep 30 13:14:33.398: INFO: stderr: ""
  Sep 30 13:14:33.398: INFO: stdout: "deployment.apps/frontend created\n"
  Sep 30 13:14:33.398: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-primary
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agnhost
        role: primary
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: primary
          tier: backend
      spec:
        containers:
        - name: primary
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Sep 30 13:14:33.399: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 create -f -'
  Sep 30 13:14:33.702: INFO: stderr: ""
  Sep 30 13:14:33.702: INFO: stdout: "deployment.apps/agnhost-primary created\n"
  Sep 30 13:14:33.702: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-replica
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: agnhost
        role: replica
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: replica
          tier: backend
      spec:
        containers:
        - name: replica
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--replicaof", "agnhost-primary", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Sep 30 13:14:33.702: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 create -f -'
  Sep 30 13:14:33.893: INFO: stderr: ""
  Sep 30 13:14:33.893: INFO: stdout: "deployment.apps/agnhost-replica created\n"
  STEP: validating guestbook app @ 09/30/23 13:14:33.894
  Sep 30 13:14:33.894: INFO: Waiting for all frontend pods to be Running.
  Sep 30 13:14:38.945: INFO: Waiting for frontend to serve content.
  Sep 30 13:14:38.956: INFO: Trying to add a new entry to the guestbook.
  Sep 30 13:14:38.969: INFO: Verifying that added entry can be retrieved.
  STEP: using delete to clean up resources @ 09/30/23 13:14:38.98
  Sep 30 13:14:38.980: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 delete --grace-period=0 --force -f -'
  Sep 30 13:14:39.068: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Sep 30 13:14:39.068: INFO: stdout: "service \"agnhost-replica\" force deleted\n"
  STEP: using delete to clean up resources @ 09/30/23 13:14:39.069
  Sep 30 13:14:39.069: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 delete --grace-period=0 --force -f -'
  Sep 30 13:14:39.158: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Sep 30 13:14:39.158: INFO: stdout: "service \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 09/30/23 13:14:39.158
  Sep 30 13:14:39.158: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 delete --grace-period=0 --force -f -'
  Sep 30 13:14:39.246: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Sep 30 13:14:39.246: INFO: stdout: "service \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 09/30/23 13:14:39.246
  Sep 30 13:14:39.246: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 delete --grace-period=0 --force -f -'
  Sep 30 13:14:39.323: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Sep 30 13:14:39.323: INFO: stdout: "deployment.apps \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 09/30/23 13:14:39.323
  Sep 30 13:14:39.323: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 delete --grace-period=0 --force -f -'
  Sep 30 13:14:39.406: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Sep 30 13:14:39.406: INFO: stdout: "deployment.apps \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 09/30/23 13:14:39.406
  Sep 30 13:14:39.406: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-6304 delete --grace-period=0 --force -f -'
  Sep 30 13:14:39.486: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Sep 30 13:14:39.486: INFO: stdout: "deployment.apps \"agnhost-replica\" force deleted\n"
  Sep 30 13:14:39.486: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6304" for this suite. @ 09/30/23 13:14:39.491
â€¢ [7.011 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]
test/e2e/apimachinery/webhook.go:572
  STEP: Creating a kubernetes client @ 09/30/23 13:14:39.497
  Sep 30 13:14:39.497: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:14:39.498
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:14:39.516
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:14:39.52
  STEP: Setting up server cert @ 09/30/23 13:14:39.552
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:14:40.499
  STEP: Deploying the webhook pod @ 09/30/23 13:14:40.509
  STEP: Wait for the deployment to be ready @ 09/30/23 13:14:40.522
  Sep 30 13:14:40.532: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 13:14:42.542
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:14:42.554
  Sep 30 13:14:43.555: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 09/30/23 13:14:43.628
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 09/30/23 13:14:43.664
  STEP: Deleting the collection of validation webhooks @ 09/30/23 13:14:43.694
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 09/30/23 13:14:43.742
  Sep 30 13:14:43.754: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6585" for this suite. @ 09/30/23 13:14:43.794
  STEP: Destroying namespace "webhook-markers-3781" for this suite. @ 09/30/23 13:14:43.804
â€¢ [4.314 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]
test/e2e/apps/statefulset.go:329
  STEP: Creating a kubernetes client @ 09/30/23 13:14:43.816
  Sep 30 13:14:43.816: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename statefulset @ 09/30/23 13:14:43.817
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:14:43.836
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:14:43.839
  STEP: Creating service test in namespace statefulset-5880 @ 09/30/23 13:14:43.844
  STEP: Creating a new StatefulSet @ 09/30/23 13:14:43.849
  Sep 30 13:14:43.860: INFO: Found 0 stateful pods, waiting for 3
  Sep 30 13:14:53.865: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:14:53.865: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:14:53.865: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Updating stateful set template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 09/30/23 13:14:53.876
  Sep 30 13:14:53.897: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 09/30/23 13:14:53.897
  STEP: Not applying an update when the partition is greater than the number of replicas @ 09/30/23 13:15:03.915
  STEP: Performing a canary update @ 09/30/23 13:15:03.915
  Sep 30 13:15:03.936: INFO: Updating stateful set ss2
  Sep 30 13:15:03.945: INFO: Waiting for Pod statefulset-5880/ss2-2 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  STEP: Restoring Pods to the correct revision when they are deleted @ 09/30/23 13:15:13.954
  Sep 30 13:15:13.993: INFO: Found 2 stateful pods, waiting for 3
  Sep 30 13:15:24.000: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:15:24.000: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:15:24.000: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Performing a phased rolling update @ 09/30/23 13:15:24.007
  Sep 30 13:15:24.029: INFO: Updating stateful set ss2
  Sep 30 13:15:24.038: INFO: Waiting for Pod statefulset-5880/ss2-1 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Sep 30 13:15:34.069: INFO: Updating stateful set ss2
  Sep 30 13:15:34.078: INFO: Waiting for StatefulSet statefulset-5880/ss2 to complete update
  Sep 30 13:15:34.078: INFO: Waiting for Pod statefulset-5880/ss2-0 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Sep 30 13:15:44.086: INFO: Deleting all statefulset in ns statefulset-5880
  Sep 30 13:15:44.090: INFO: Scaling statefulset ss2 to 0
  Sep 30 13:15:54.109: INFO: Waiting for statefulset status.replicas updated to 0
  Sep 30 13:15:54.113: INFO: Deleting statefulset ss2
  Sep 30 13:15:54.126: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-5880" for this suite. @ 09/30/23 13:15:54.131
â€¢ [70.321 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:208
  STEP: Creating a kubernetes client @ 09/30/23 13:15:54.138
  Sep 30 13:15:54.138: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:15:54.139
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:15:54.156
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:15:54.16
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:15:54.164
  STEP: Saw pod success @ 09/30/23 13:15:58.189
  Sep 30 13:15:58.193: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-0d5aebd5-bee1-4ed4-a770-d9a54c6ccf28 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:15:58.201
  Sep 30 13:15:58.216: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2374" for this suite. @ 09/30/23 13:15:58.22
â€¢ [4.088 seconds]
------------------------------
[sig-network] DNS should provide DNS for ExternalName services [Conformance]
test/e2e/network/dns.go:329
  STEP: Creating a kubernetes client @ 09/30/23 13:15:58.226
  Sep 30 13:15:58.226: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename dns @ 09/30/23 13:15:58.227
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:15:58.247
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:15:58.25
  STEP: Creating a test externalName service @ 09/30/23 13:15:58.254
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2899.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-2899.svc.cluster.local; sleep 1; done
   @ 09/30/23 13:15:58.26
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2899.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-2899.svc.cluster.local; sleep 1; done
   @ 09/30/23 13:15:58.26
  STEP: creating a pod to probe DNS @ 09/30/23 13:15:58.26
  STEP: submitting the pod to kubernetes @ 09/30/23 13:15:58.26
  STEP: retrieving the pod @ 09/30/23 13:16:00.278
  STEP: looking for the results for each expected name from probers @ 09/30/23 13:16:00.282
  Sep 30 13:16:00.293: INFO: DNS probes using dns-test-29f8c1fa-3e1f-4965-80cc-64260a08b422 succeeded

  STEP: changing the externalName to bar.example.com @ 09/30/23 13:16:00.293
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2899.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-2899.svc.cluster.local; sleep 1; done
   @ 09/30/23 13:16:00.302
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2899.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-2899.svc.cluster.local; sleep 1; done
   @ 09/30/23 13:16:00.302
  STEP: creating a second pod to probe DNS @ 09/30/23 13:16:00.302
  STEP: submitting the pod to kubernetes @ 09/30/23 13:16:00.302
  STEP: retrieving the pod @ 09/30/23 13:16:02.318
  STEP: looking for the results for each expected name from probers @ 09/30/23 13:16:02.322
  Sep 30 13:16:02.329: INFO: File wheezy_udp@dns-test-service-3.dns-2899.svc.cluster.local from pod  dns-2899/dns-test-d7c4a5d7-cc15-410a-a43c-0815de7ea841 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Sep 30 13:16:02.333: INFO: File jessie_udp@dns-test-service-3.dns-2899.svc.cluster.local from pod  dns-2899/dns-test-d7c4a5d7-cc15-410a-a43c-0815de7ea841 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Sep 30 13:16:02.333: INFO: Lookups using dns-2899/dns-test-d7c4a5d7-cc15-410a-a43c-0815de7ea841 failed for: [wheezy_udp@dns-test-service-3.dns-2899.svc.cluster.local jessie_udp@dns-test-service-3.dns-2899.svc.cluster.local]

  Sep 30 13:16:02.358: INFO: Pod client logs for webserver: 
  Sep 30 13:16:02.366: INFO: Pod client logs for querier: 
  Sep 30 13:16:02.373: INFO: Pod client logs for jessie-querier: 
  Sep 30 13:16:07.384: INFO: DNS probes using dns-test-d7c4a5d7-cc15-410a-a43c-0815de7ea841 succeeded

  STEP: changing the service to type=ClusterIP @ 09/30/23 13:16:07.384
  W0930 13:16:07.397236      23 warnings.go:70] spec.externalName is ignored when spec.type is not "ExternalName"
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2899.svc.cluster.local A > /results/wheezy_udp@dns-test-service-3.dns-2899.svc.cluster.local; sleep 1; done
   @ 09/30/23 13:16:07.397
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2899.svc.cluster.local A > /results/jessie_udp@dns-test-service-3.dns-2899.svc.cluster.local; sleep 1; done
   @ 09/30/23 13:16:07.397
  STEP: creating a third pod to probe DNS @ 09/30/23 13:16:07.397
  STEP: submitting the pod to kubernetes @ 09/30/23 13:16:07.401
  STEP: retrieving the pod @ 09/30/23 13:16:09.419
  STEP: looking for the results for each expected name from probers @ 09/30/23 13:16:09.422
  Sep 30 13:16:09.433: INFO: DNS probes using dns-test-616ec8a2-5769-4230-9081-b1a0cc4743d8 succeeded

  Sep 30 13:16:09.433: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:16:09.436
  STEP: deleting the pod @ 09/30/23 13:16:09.447
  STEP: deleting the pod @ 09/30/23 13:16:09.462
  STEP: deleting the test externalName service @ 09/30/23 13:16:09.478
  STEP: Destroying namespace "dns-2899" for this suite. @ 09/30/23 13:16:09.492
â€¢ [11.272 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:152
  STEP: Creating a kubernetes client @ 09/30/23 13:16:09.499
  Sep 30 13:16:09.499: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 09/30/23 13:16:09.5
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:16:09.516
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:16:09.52
  STEP: create the container to handle the HTTPGet hook request. @ 09/30/23 13:16:09.528
  STEP: create the pod with lifecycle hook @ 09/30/23 13:16:11.551
  STEP: delete the pod with lifecycle hook @ 09/30/23 13:16:13.567
  STEP: check prestop hook @ 09/30/23 13:16:15.584
  Sep 30 13:16:15.591: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-5896" for this suite. @ 09/30/23 13:16:15.595
â€¢ [6.102 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]
test/e2e/network/service.go:1455
  STEP: Creating a kubernetes client @ 09/30/23 13:16:15.602
  Sep 30 13:16:15.602: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:16:15.602
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:16:15.619
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:16:15.623
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-6914 @ 09/30/23 13:16:15.629
  STEP: changing the ExternalName service to type=NodePort @ 09/30/23 13:16:15.636
  STEP: creating replication controller externalname-service in namespace services-6914 @ 09/30/23 13:16:15.658
  I0930 13:16:15.666603      23 runners.go:197] Created replication controller with name: externalname-service, namespace: services-6914, replica count: 2
  I0930 13:16:18.717527      23 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Sep 30 13:16:18.717: INFO: Creating new exec pod
  Sep 30 13:16:21.743: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-6914 exec execpoddcsvk -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Sep 30 13:16:21.940: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Sep 30 13:16:21.940: INFO: stdout: ""
  Sep 30 13:16:22.940: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-6914 exec execpoddcsvk -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Sep 30 13:16:23.127: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Sep 30 13:16:23.127: INFO: stdout: "externalname-service-f69fd"
  Sep 30 13:16:23.127: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-6914 exec execpoddcsvk -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.143 80'
  Sep 30 13:16:23.314: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.143 80\nConnection to 10.152.183.143 80 port [tcp/http] succeeded!\n"
  Sep 30 13:16:23.314: INFO: stdout: ""
  Sep 30 13:16:24.315: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-6914 exec execpoddcsvk -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.143 80'
  Sep 30 13:16:24.494: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.143 80\nConnection to 10.152.183.143 80 port [tcp/http] succeeded!\n"
  Sep 30 13:16:24.494: INFO: stdout: "externalname-service-f69fd"
  Sep 30 13:16:24.494: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-6914 exec execpoddcsvk -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.81.206 32118'
  Sep 30 13:16:24.679: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.81.206 32118\nConnection to 172.31.81.206 32118 port [tcp/*] succeeded!\n"
  Sep 30 13:16:24.679: INFO: stdout: ""
  Sep 30 13:16:25.680: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-6914 exec execpoddcsvk -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.81.206 32118'
  Sep 30 13:16:25.855: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.81.206 32118\nConnection to 172.31.81.206 32118 port [tcp/*] succeeded!\n"
  Sep 30 13:16:25.855: INFO: stdout: ""
  Sep 30 13:16:26.680: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-6914 exec execpoddcsvk -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.81.206 32118'
  Sep 30 13:16:26.876: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.81.206 32118\nConnection to 172.31.81.206 32118 port [tcp/*] succeeded!\n"
  Sep 30 13:16:26.876: INFO: stdout: ""
  Sep 30 13:16:27.680: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-6914 exec execpoddcsvk -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.81.206 32118'
  Sep 30 13:16:27.895: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.81.206 32118\nConnection to 172.31.81.206 32118 port [tcp/*] succeeded!\n"
  Sep 30 13:16:27.895: INFO: stdout: "externalname-service-85hwg"
  Sep 30 13:16:27.895: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-6914 exec execpoddcsvk -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.39.81 32118'
  Sep 30 13:16:28.077: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.39.81 32118\nConnection to 172.31.39.81 32118 port [tcp/*] succeeded!\n"
  Sep 30 13:16:28.077: INFO: stdout: "externalname-service-85hwg"
  Sep 30 13:16:28.077: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 13:16:28.081: INFO: Cleaning up the ExternalName to NodePort test service
  STEP: Destroying namespace "services-6914" for this suite. @ 09/30/23 13:16:28.102
â€¢ [12.508 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]
test/e2e/apps/rc.go:69
  STEP: Creating a kubernetes client @ 09/30/23 13:16:28.111
  Sep 30 13:16:28.111: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replication-controller @ 09/30/23 13:16:28.112
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:16:28.131
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:16:28.134
  STEP: Creating replication controller my-hostname-basic-cd61e0d7-617b-4f2c-a914-bb2b300b72ea @ 09/30/23 13:16:28.138
  Sep 30 13:16:28.149: INFO: Pod name my-hostname-basic-cd61e0d7-617b-4f2c-a914-bb2b300b72ea: Found 0 pods out of 1
  Sep 30 13:16:33.155: INFO: Pod name my-hostname-basic-cd61e0d7-617b-4f2c-a914-bb2b300b72ea: Found 1 pods out of 1
  Sep 30 13:16:33.155: INFO: Ensuring all pods for ReplicationController "my-hostname-basic-cd61e0d7-617b-4f2c-a914-bb2b300b72ea" are running
  Sep 30 13:16:33.159: INFO: Pod "my-hostname-basic-cd61e0d7-617b-4f2c-a914-bb2b300b72ea-pgwlj" is running and ready(conditions: [{Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-09-30 13:16:28 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-09-30 13:16:29 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-09-30 13:16:29 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-09-30 13:16:28 +0000 UTC Reason: Message:}])
  Sep 30 13:16:33.159: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 09/30/23 13:16:33.159
  Sep 30 13:16:33.172: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-58" for this suite. @ 09/30/23 13:16:33.178
â€¢ [5.074 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:550
  STEP: Creating a kubernetes client @ 09/30/23 13:16:33.186
  Sep 30 13:16:33.186: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 13:16:33.186
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:16:33.205
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:16:33.209
  STEP: Creating pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226 @ 09/30/23 13:16:33.215
  STEP: checking the pod's current state and verifying that restartCount is present @ 09/30/23 13:16:35.236
  Sep 30 13:16:35.240: INFO: Initial restart count of pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a is 0
  Sep 30 13:16:35.244: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:37.248: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:39.253: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:41.258: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:43.263: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:45.268: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:47.273: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:49.278: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:51.283: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:53.289: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:55.294: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:57.298: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:16:59.303: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:01.307: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:03.312: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:05.317: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:07.322: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:09.327: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:11.333: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:13.338: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:15.343: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:17.348: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:19.351: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:21.356: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:23.362: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:25.368: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:27.373: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:29.379: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:31.383: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:33.389: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:35.394: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:37.399: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:39.402: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:41.407: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:43.412: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:45.417: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:47.423: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:49.427: INFO: Get pod test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a in namespace container-probe-7226
  Sep 30 13:17:49.427: INFO: Restart count of pod container-probe-7226/test-grpc-af2cf22d-f7dd-4c5d-b8f7-5838d9d3532a is now 1 (1m14.187206167s elapsed)
  Sep 30 13:17:49.427: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:17:49.432
  STEP: Destroying namespace "container-probe-7226" for this suite. @ 09/30/23 13:17:49.444
â€¢ [76.265 seconds]
------------------------------
S
------------------------------
[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]
test/e2e/common/storage/configmap_volume.go:504
  STEP: Creating a kubernetes client @ 09/30/23 13:17:49.451
  Sep 30 13:17:49.451: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 13:17:49.452
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:17:49.469
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:17:49.473
  Sep 30 13:17:49.517: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-4549" for this suite. @ 09/30/23 13:17:49.522
â€¢ [0.077 seconds]
------------------------------
SSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:168
  STEP: Creating a kubernetes client @ 09/30/23 13:17:49.529
  Sep 30 13:17:49.529: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 09/30/23 13:17:49.53
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:17:49.543
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:17:49.546
  STEP: create the container to handle the HTTPGet hook request. @ 09/30/23 13:17:49.556
  STEP: create the pod with lifecycle hook @ 09/30/23 13:17:51.577
  STEP: check poststart hook @ 09/30/23 13:17:53.594
  STEP: delete the pod with lifecycle hook @ 09/30/23 13:17:53.613
  Sep 30 13:17:55.630: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-9277" for this suite. @ 09/30/23 13:17:55.635
â€¢ [6.112 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]
test/e2e/apimachinery/resource_quota.go:328
  STEP: Creating a kubernetes client @ 09/30/23 13:17:55.641
  Sep 30 13:17:55.641: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 13:17:55.642
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:17:55.659
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:17:55.662
  STEP: Counting existing ResourceQuota @ 09/30/23 13:18:12.67
  STEP: Creating a ResourceQuota @ 09/30/23 13:18:17.674
  STEP: Ensuring resource quota status is calculated @ 09/30/23 13:18:17.681
  STEP: Creating a ConfigMap @ 09/30/23 13:18:19.685
  STEP: Ensuring resource quota status captures configMap creation @ 09/30/23 13:18:19.697
  STEP: Deleting a ConfigMap @ 09/30/23 13:18:21.702
  STEP: Ensuring resource quota status released usage @ 09/30/23 13:18:21.708
  Sep 30 13:18:23.714: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2551" for this suite. @ 09/30/23 13:18:23.718
â€¢ [28.085 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]
test/e2e/network/dns.go:191
  STEP: Creating a kubernetes client @ 09/30/23 13:18:23.727
  Sep 30 13:18:23.727: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename dns @ 09/30/23 13:18:23.728
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:18:23.745
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:18:23.749
  STEP: Creating a test headless service @ 09/30/23 13:18:23.753
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-5239 A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-5239;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-5239 A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-5239;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-5239.svc A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-5239.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-5239.svc A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-5239.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-5239.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-5239.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-5239.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-5239.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-5239.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-5239.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-5239.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-5239.svc;check="$$(dig +notcp +noall +answer +search 167.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.167_udp@PTR;check="$$(dig +tcp +noall +answer +search 167.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.167_tcp@PTR;sleep 1; done
   @ 09/30/23 13:18:23.771
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-5239 A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-5239;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-5239 A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-5239;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-5239.svc A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-5239.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-5239.svc A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-5239.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-5239.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-5239.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-5239.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-5239.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-5239.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-5239.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-5239.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-5239.svc;check="$$(dig +notcp +noall +answer +search 167.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.167_udp@PTR;check="$$(dig +tcp +noall +answer +search 167.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.167_tcp@PTR;sleep 1; done
   @ 09/30/23 13:18:23.771
  STEP: creating a pod to probe DNS @ 09/30/23 13:18:23.771
  STEP: submitting the pod to kubernetes @ 09/30/23 13:18:23.771
  STEP: retrieving the pod @ 09/30/23 13:18:25.791
  STEP: looking for the results for each expected name from probers @ 09/30/23 13:18:25.795
  Sep 30 13:18:25.800: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.804: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.808: INFO: Unable to read wheezy_udp@dns-test-service.dns-5239 from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.812: INFO: Unable to read wheezy_tcp@dns-test-service.dns-5239 from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.817: INFO: Unable to read wheezy_udp@dns-test-service.dns-5239.svc from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.821: INFO: Unable to read wheezy_tcp@dns-test-service.dns-5239.svc from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.825: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-5239.svc from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.829: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-5239.svc from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.850: INFO: Unable to read jessie_udp@dns-test-service from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.854: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.858: INFO: Unable to read jessie_udp@dns-test-service.dns-5239 from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.862: INFO: Unable to read jessie_tcp@dns-test-service.dns-5239 from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.866: INFO: Unable to read jessie_udp@dns-test-service.dns-5239.svc from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.871: INFO: Unable to read jessie_tcp@dns-test-service.dns-5239.svc from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.875: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-5239.svc from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.879: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-5239.svc from pod dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c: the server could not find the requested resource (get pods dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c)
  Sep 30 13:18:25.897: INFO: Lookups using dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-5239 wheezy_tcp@dns-test-service.dns-5239 wheezy_udp@dns-test-service.dns-5239.svc wheezy_tcp@dns-test-service.dns-5239.svc wheezy_udp@_http._tcp.dns-test-service.dns-5239.svc wheezy_tcp@_http._tcp.dns-test-service.dns-5239.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-5239 jessie_tcp@dns-test-service.dns-5239 jessie_udp@dns-test-service.dns-5239.svc jessie_tcp@dns-test-service.dns-5239.svc jessie_udp@_http._tcp.dns-test-service.dns-5239.svc jessie_tcp@_http._tcp.dns-test-service.dns-5239.svc]

  Sep 30 13:18:25.904: INFO: Pod client logs for webserver: 
  Sep 30 13:18:25.912: INFO: Pod client logs for querier: 
  Sep 30 13:18:25.918: INFO: Pod client logs for jessie-querier: 
  Sep 30 13:18:31.023: INFO: DNS probes using dns-5239/dns-test-73d95919-f89c-4b68-a7d9-4bdec679931c succeeded

  Sep 30 13:18:31.023: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:18:31.027
  STEP: deleting the test service @ 09/30/23 13:18:31.038
  STEP: deleting the test headless service @ 09/30/23 13:18:31.058
  STEP: Destroying namespace "dns-5239" for this suite. @ 09/30/23 13:18:31.071
â€¢ [7.354 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:89
  STEP: Creating a kubernetes client @ 09/30/23 13:18:31.082
  Sep 30 13:18:31.082: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:18:31.083
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:18:31.102
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:18:31.105
  STEP: Creating configMap with name projected-configmap-test-volume-map-ea308957-9b38-4f05-ad20-74b7dd96ea89 @ 09/30/23 13:18:31.109
  STEP: Creating a pod to test consume configMaps @ 09/30/23 13:18:31.114
  STEP: Saw pod success @ 09/30/23 13:18:35.139
  Sep 30 13:18:35.143: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-configmaps-391b29a4-b35b-474e-ba17-73e74d260f55 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:18:35.15
  Sep 30 13:18:35.167: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-79" for this suite. @ 09/30/23 13:18:35.171
â€¢ [4.095 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]
test/e2e/apimachinery/resource_quota.go:451
  STEP: Creating a kubernetes client @ 09/30/23 13:18:35.178
  Sep 30 13:18:35.178: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 13:18:35.179
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:18:35.195
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:18:35.199
  STEP: Counting existing ResourceQuota @ 09/30/23 13:18:35.203
  STEP: Creating a ResourceQuota @ 09/30/23 13:18:40.208
  STEP: Ensuring resource quota status is calculated @ 09/30/23 13:18:40.213
  STEP: Creating a ReplicaSet @ 09/30/23 13:18:42.218
  STEP: Ensuring resource quota status captures replicaset creation @ 09/30/23 13:18:42.231
  STEP: Deleting a ReplicaSet @ 09/30/23 13:18:44.236
  STEP: Ensuring resource quota status released usage @ 09/30/23 13:18:44.243
  Sep 30 13:18:46.248: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8275" for this suite. @ 09/30/23 13:18:46.253
â€¢ [11.081 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]
test/e2e/network/service.go:2202
  STEP: Creating a kubernetes client @ 09/30/23 13:18:46.26
  Sep 30 13:18:46.260: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:18:46.26
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:18:46.276
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:18:46.28
  STEP: creating service in namespace services-5948 @ 09/30/23 13:18:46.284
  STEP: creating service affinity-nodeport in namespace services-5948 @ 09/30/23 13:18:46.284
  STEP: creating replication controller affinity-nodeport in namespace services-5948 @ 09/30/23 13:18:46.299
  I0930 13:18:46.306912      23 runners.go:197] Created replication controller with name: affinity-nodeport, namespace: services-5948, replica count: 3
  I0930 13:18:49.357752      23 runners.go:197] affinity-nodeport Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Sep 30 13:18:49.369: INFO: Creating new exec pod
  Sep 30 13:18:52.391: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-5948 exec execpod-affinitywvjb2 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport 80'
  Sep 30 13:18:52.584: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport 80\nConnection to affinity-nodeport 80 port [tcp/http] succeeded!\n"
  Sep 30 13:18:52.584: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 13:18:52.584: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-5948 exec execpod-affinitywvjb2 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.159 80'
  Sep 30 13:18:52.794: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.159 80\nConnection to 10.152.183.159 80 port [tcp/http] succeeded!\n"
  Sep 30 13:18:52.794: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 13:18:52.794: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-5948 exec execpod-affinitywvjb2 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.31.30 31313'
  Sep 30 13:18:52.975: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.31.30 31313\nConnection to 172.31.31.30 31313 port [tcp/*] succeeded!\n"
  Sep 30 13:18:52.975: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 13:18:52.975: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-5948 exec execpod-affinitywvjb2 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.39.81 31313'
  Sep 30 13:18:53.151: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.39.81 31313\nConnection to 172.31.39.81 31313 port [tcp/*] succeeded!\n"
  Sep 30 13:18:53.151: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 13:18:53.151: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-5948 exec execpod-affinitywvjb2 -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://172.31.31.30:31313/ ; done'
  Sep 30 13:18:53.431: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.31.30:31313/\n"
  Sep 30 13:18:53.431: INFO: stdout: "\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686\naffinity-nodeport-ms686"
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Received response from host: affinity-nodeport-ms686
  Sep 30 13:18:53.431: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 13:18:53.435: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport in namespace services-5948, will wait for the garbage collector to delete the pods @ 09/30/23 13:18:53.445
  Sep 30 13:18:53.506: INFO: Deleting ReplicationController affinity-nodeport took: 6.741767ms
  Sep 30 13:18:53.607: INFO: Terminating ReplicationController affinity-nodeport pods took: 100.756504ms
  STEP: Destroying namespace "services-5948" for this suite. @ 09/30/23 13:18:56.627
â€¢ [10.375 seconds]
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:135
  STEP: Creating a kubernetes client @ 09/30/23 13:18:56.634
  Sep 30 13:18:56.634: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubelet-test @ 09/30/23 13:18:56.635
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:18:56.651
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:18:56.655
  Sep 30 13:18:56.682: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-8857" for this suite. @ 09/30/23 13:18:56.686
â€¢ [0.060 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]
test/e2e/apps/statefulset.go:593
  STEP: Creating a kubernetes client @ 09/30/23 13:18:56.695
  Sep 30 13:18:56.695: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename statefulset @ 09/30/23 13:18:56.696
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:18:56.712
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:18:56.716
  STEP: Creating service test in namespace statefulset-2529 @ 09/30/23 13:18:56.72
  STEP: Initializing watcher for selector baz=blah,foo=bar @ 09/30/23 13:18:56.725
  STEP: Creating stateful set ss in namespace statefulset-2529 @ 09/30/23 13:18:56.73
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-2529 @ 09/30/23 13:18:56.736
  Sep 30 13:18:56.739: INFO: Found 0 stateful pods, waiting for 1
  Sep 30 13:19:06.744: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will halt with unhealthy stateful pod @ 09/30/23 13:19:06.744
  Sep 30 13:19:06.747: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-2529 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:19:06.932: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:19:06.932: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:19:06.932: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Sep 30 13:19:06.937: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Sep 30 13:19:16.942: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Sep 30 13:19:16.942: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Sep 30 13:19:16.960: INFO: Verifying statefulset ss doesn't scale past 1 for another 9.99999979s
  Sep 30 13:19:17.964: INFO: Verifying statefulset ss doesn't scale past 1 for another 8.996612412s
  Sep 30 13:19:18.969: INFO: Verifying statefulset ss doesn't scale past 1 for another 7.992026491s
  Sep 30 13:19:19.973: INFO: Verifying statefulset ss doesn't scale past 1 for another 6.987633823s
  Sep 30 13:19:20.977: INFO: Verifying statefulset ss doesn't scale past 1 for another 5.983235985s
  Sep 30 13:19:21.982: INFO: Verifying statefulset ss doesn't scale past 1 for another 4.979034229s
  Sep 30 13:19:22.987: INFO: Verifying statefulset ss doesn't scale past 1 for another 3.97397449s
  Sep 30 13:19:23.992: INFO: Verifying statefulset ss doesn't scale past 1 for another 2.969065684s
  Sep 30 13:19:24.996: INFO: Verifying statefulset ss doesn't scale past 1 for another 1.964460621s
  Sep 30 13:19:26.000: INFO: Verifying statefulset ss doesn't scale past 1 for another 960.066963ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-2529 @ 09/30/23 13:19:27.001
  Sep 30 13:19:27.006: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-2529 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Sep 30 13:19:27.212: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Sep 30 13:19:27.212: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Sep 30 13:19:27.212: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Sep 30 13:19:27.216: INFO: Found 1 stateful pods, waiting for 3
  Sep 30 13:19:37.222: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:19:37.222: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:19:37.222: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Verifying that stateful set ss was scaled up in order @ 09/30/23 13:19:37.222
  STEP: Scale down will halt with unhealthy stateful pod @ 09/30/23 13:19:37.222
  Sep 30 13:19:37.231: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-2529 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:19:37.421: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:19:37.421: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:19:37.421: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Sep 30 13:19:37.421: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-2529 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:19:37.602: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:19:37.602: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:19:37.602: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Sep 30 13:19:37.602: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-2529 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:19:37.786: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:19:37.786: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:19:37.786: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Sep 30 13:19:37.786: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Sep 30 13:19:37.791: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  Sep 30 13:19:47.801: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Sep 30 13:19:47.801: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Sep 30 13:19:47.801: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Sep 30 13:19:47.814: INFO: Verifying statefulset ss doesn't scale past 3 for another 9.99999978s
  Sep 30 13:19:48.820: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.995424288s
  Sep 30 13:19:49.824: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.990722645s
  Sep 30 13:19:50.828: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.986708913s
  Sep 30 13:19:51.833: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.981968359s
  Sep 30 13:19:52.838: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.97685926s
  Sep 30 13:19:53.843: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.971622479s
  Sep 30 13:19:54.847: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.967114889s
  Sep 30 13:19:55.852: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.963187028s
  Sep 30 13:19:56.857: INFO: Verifying statefulset ss doesn't scale past 3 for another 958.15692ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-2529 @ 09/30/23 13:19:57.857
  Sep 30 13:19:57.861: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-2529 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Sep 30 13:19:58.037: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Sep 30 13:19:58.037: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Sep 30 13:19:58.037: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Sep 30 13:19:58.037: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-2529 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Sep 30 13:19:58.229: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Sep 30 13:19:58.229: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Sep 30 13:19:58.229: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Sep 30 13:19:58.229: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-2529 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Sep 30 13:19:58.411: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Sep 30 13:19:58.411: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Sep 30 13:19:58.411: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Sep 30 13:19:58.411: INFO: Scaling statefulset ss to 0
  STEP: Verifying that stateful set ss was scaled down in reverse order @ 09/30/23 13:20:08.428
  Sep 30 13:20:08.428: INFO: Deleting all statefulset in ns statefulset-2529
  Sep 30 13:20:08.432: INFO: Scaling statefulset ss to 0
  Sep 30 13:20:08.445: INFO: Waiting for statefulset status.replicas updated to 0
  Sep 30 13:20:08.449: INFO: Deleting statefulset ss
  Sep 30 13:20:08.463: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-2529" for this suite. @ 09/30/23 13:20:08.467
â€¢ [71.778 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]
test/e2e/apps/statefulset.go:318
  STEP: Creating a kubernetes client @ 09/30/23 13:20:08.474
  Sep 30 13:20:08.474: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename statefulset @ 09/30/23 13:20:08.475
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:20:08.492
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:20:08.496
  STEP: Creating service test in namespace statefulset-7663 @ 09/30/23 13:20:08.501
  STEP: Creating a new StatefulSet @ 09/30/23 13:20:08.507
  Sep 30 13:20:08.520: INFO: Found 0 stateful pods, waiting for 3
  Sep 30 13:20:18.527: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:20:18.527: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:20:18.527: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  Sep 30 13:20:18.539: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-7663 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:20:18.746: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:20:18.746: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:20:18.746: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  STEP: Updating StatefulSet template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 09/30/23 13:20:28.766
  Sep 30 13:20:28.788: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 09/30/23 13:20:28.788
  STEP: Updating Pods in reverse ordinal order @ 09/30/23 13:20:38.805
  Sep 30 13:20:38.809: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-7663 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Sep 30 13:20:38.996: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Sep 30 13:20:38.996: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Sep 30 13:20:38.996: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  STEP: Rolling back to a previous revision @ 09/30/23 13:20:49.023
  Sep 30 13:20:49.023: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-7663 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Sep 30 13:20:49.208: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Sep 30 13:20:49.208: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Sep 30 13:20:49.208: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Sep 30 13:20:59.246: INFO: Updating stateful set ss2
  STEP: Rolling back update in reverse ordinal order @ 09/30/23 13:21:09.263
  Sep 30 13:21:09.267: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=statefulset-7663 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Sep 30 13:21:09.453: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Sep 30 13:21:09.453: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Sep 30 13:21:09.453: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Sep 30 13:21:19.478: INFO: Deleting all statefulset in ns statefulset-7663
  Sep 30 13:21:19.481: INFO: Scaling statefulset ss2 to 0
  Sep 30 13:21:29.505: INFO: Waiting for statefulset status.replicas updated to 0
  Sep 30 13:21:29.508: INFO: Deleting statefulset ss2
  Sep 30 13:21:29.522: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-7663" for this suite. @ 09/30/23 13:21:29.526
â€¢ [81.059 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] Job should manage the lifecycle of a job [Conformance]
test/e2e/apps/job.go:713
  STEP: Creating a kubernetes client @ 09/30/23 13:21:29.533
  Sep 30 13:21:29.533: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename job @ 09/30/23 13:21:29.534
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:21:29.554
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:21:29.557
  STEP: Creating a suspended job @ 09/30/23 13:21:29.565
  STEP: Patching the Job @ 09/30/23 13:21:29.57
  STEP: Watching for Job to be patched @ 09/30/23 13:21:29.588
  Sep 30 13:21:29.590: INFO: Event ADDED observed for Job e2e-b944b in namespace job-5098 with labels: map[e2e-job-label:e2e-b944b] and annotations: map[]
  Sep 30 13:21:29.590: INFO: Event MODIFIED observed for Job e2e-b944b in namespace job-5098 with labels: map[e2e-job-label:e2e-b944b] and annotations: map[]
  Sep 30 13:21:29.590: INFO: Event MODIFIED found for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[]
  STEP: Updating the job @ 09/30/23 13:21:29.59
  STEP: Watching for Job to be updated @ 09/30/23 13:21:29.601
  Sep 30 13:21:29.602: INFO: Event MODIFIED found for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[updated:true]
  Sep 30 13:21:29.603: INFO: Found Job annotations: map[string]string{"updated":"true"}
  STEP: Listing all Jobs with LabelSelector @ 09/30/23 13:21:29.603
  Sep 30 13:21:29.606: INFO: Job: e2e-b944b as labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b]
  STEP: Waiting for job to complete @ 09/30/23 13:21:29.606
  STEP: Delete a job collection with a labelselector @ 09/30/23 13:21:37.61
  STEP: Watching for Job to be deleted @ 09/30/23 13:21:37.618
  Sep 30 13:21:37.620: INFO: Event MODIFIED observed for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[updated:true]
  Sep 30 13:21:37.620: INFO: Event MODIFIED observed for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[updated:true]
  Sep 30 13:21:37.621: INFO: Event MODIFIED observed for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[updated:true]
  Sep 30 13:21:37.621: INFO: Event MODIFIED observed for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[updated:true]
  Sep 30 13:21:37.621: INFO: Event MODIFIED observed for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[updated:true]
  Sep 30 13:21:37.621: INFO: Event MODIFIED observed for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[updated:true]
  Sep 30 13:21:37.621: INFO: Event MODIFIED observed for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[updated:true]
  Sep 30 13:21:37.621: INFO: Event DELETED found for Job e2e-b944b in namespace job-5098 with labels: map[e2e-b944b:patched e2e-job-label:e2e-b944b] and annotations: map[updated:true]
  STEP: Relist jobs to confirm deletion @ 09/30/23 13:21:37.621
  Sep 30 13:21:37.624: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-5098" for this suite. @ 09/30/23 13:21:37.633
â€¢ [8.109 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:89
  STEP: Creating a kubernetes client @ 09/30/23 13:21:37.643
  Sep 30 13:21:37.643: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 13:21:37.644
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:21:37.659
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:21:37.663
  STEP: Creating configMap with name configmap-test-volume-map-ea473cd1-24d6-46d1-bb53-2d1482995529 @ 09/30/23 13:21:37.667
  STEP: Creating a pod to test consume configMaps @ 09/30/23 13:21:37.671
  STEP: Saw pod success @ 09/30/23 13:21:41.696
  Sep 30 13:21:41.699: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-configmaps-9efeaf82-d82b-4227-9024-aebf7a495ac5 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:21:41.723
  Sep 30 13:21:41.738: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7566" for this suite. @ 09/30/23 13:21:41.742
â€¢ [4.105 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]
test/e2e/apimachinery/field_validation.go:168
  STEP: Creating a kubernetes client @ 09/30/23 13:21:41.749
  Sep 30 13:21:41.749: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename field-validation @ 09/30/23 13:21:41.75
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:21:41.769
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:21:41.773
  Sep 30 13:21:41.777: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  W0930 13:21:44.328563      23 warnings.go:70] unknown field "alpha"
  W0930 13:21:44.328593      23 warnings.go:70] unknown field "beta"
  W0930 13:21:44.328599      23 warnings.go:70] unknown field "delta"
  W0930 13:21:44.328604      23 warnings.go:70] unknown field "epsilon"
  W0930 13:21:44.328609      23 warnings.go:70] unknown field "gamma"
  Sep 30 13:21:44.862: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-3282" for this suite. @ 09/30/23 13:21:44.881
â€¢ [3.141 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]
test/e2e/apimachinery/field_validation.go:64
  STEP: Creating a kubernetes client @ 09/30/23 13:21:44.89
  Sep 30 13:21:44.890: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename field-validation @ 09/30/23 13:21:44.891
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:21:44.908
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:21:44.912
  STEP: apply creating a deployment @ 09/30/23 13:21:44.916
  Sep 30 13:21:44.917: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-9973" for this suite. @ 09/30/23 13:21:44.936
â€¢ [0.053 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:85
  STEP: Creating a kubernetes client @ 09/30/23 13:21:44.944
  Sep 30 13:21:44.944: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename custom-resource-definition @ 09/30/23 13:21:44.945
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:21:44.961
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:21:44.965
  Sep 30 13:21:44.970: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:21:51.202: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-9890" for this suite. @ 09/30/23 13:21:51.206
â€¢ [6.269 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]
test/e2e/apimachinery/webhook.go:273
  STEP: Creating a kubernetes client @ 09/30/23 13:21:51.215
  Sep 30 13:21:51.215: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:21:51.216
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:21:51.235
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:21:51.238
  STEP: Setting up server cert @ 09/30/23 13:21:51.268
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:21:51.823
  STEP: Deploying the webhook pod @ 09/30/23 13:21:51.831
  STEP: Wait for the deployment to be ready @ 09/30/23 13:21:51.845
  Sep 30 13:21:51.853: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 09/30/23 13:21:53.864
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:21:53.877
  Sep 30 13:21:54.878: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a validating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 09/30/23 13:21:54.886
  STEP: Registering a mutating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 09/30/23 13:21:54.905
  STEP: Creating a dummy validating-webhook-configuration object @ 09/30/23 13:21:54.923
  STEP: Deleting the validating-webhook-configuration, which should be possible to remove @ 09/30/23 13:21:54.933
  STEP: Creating a dummy mutating-webhook-configuration object @ 09/30/23 13:21:54.939
  STEP: Deleting the mutating-webhook-configuration, which should be possible to remove @ 09/30/23 13:21:54.949
  Sep 30 13:21:54.955: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-54" for this suite. @ 09/30/23 13:21:55.011
  STEP: Destroying namespace "webhook-markers-1561" for this suite. @ 09/30/23 13:21:55.019
â€¢ [3.811 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should apply changes to a job status [Conformance]
test/e2e/apps/job.go:642
  STEP: Creating a kubernetes client @ 09/30/23 13:21:55.028
  Sep 30 13:21:55.028: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename job @ 09/30/23 13:21:55.029
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:21:55.047
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:21:55.051
  STEP: Creating a job @ 09/30/23 13:21:55.055
  STEP: Ensure pods equal to parallelism count is attached to the job @ 09/30/23 13:21:55.061
  STEP: patching /status @ 09/30/23 13:21:57.066
  STEP: updating /status @ 09/30/23 13:21:57.076
  STEP: get /status @ 09/30/23 13:21:57.084
  Sep 30 13:21:57.088: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-1971" for this suite. @ 09/30/23 13:21:57.093
â€¢ [2.072 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:87
  STEP: Creating a kubernetes client @ 09/30/23 13:21:57.101
  Sep 30 13:21:57.101: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:21:57.102
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:21:57.12
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:21:57.123
  STEP: Creating a pod to test emptydir volume type on tmpfs @ 09/30/23 13:21:57.127
  STEP: Saw pod success @ 09/30/23 13:22:01.151
  Sep 30 13:22:01.157: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-4f31dd0a-0626-42f2-9e3e-bbc0bbf26b0b container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:22:01.164
  Sep 30 13:22:01.182: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6514" for this suite. @ 09/30/23 13:22:01.187
â€¢ [4.094 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]
test/e2e/common/storage/empty_dir.go:227
  STEP: Creating a kubernetes client @ 09/30/23 13:22:01.195
  Sep 30 13:22:01.195: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:22:01.196
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:22:01.213
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:22:01.217
  STEP: Creating Pod @ 09/30/23 13:22:01.221
  STEP: Reading file content from the nginx-container @ 09/30/23 13:22:03.241
  Sep 30 13:22:03.241: INFO: ExecWithOptions {Command:[/bin/sh -c cat /usr/share/volumeshare/shareddata.txt] Namespace:emptydir-5697 PodName:pod-sharedvolume-8a698a19-00ac-4d34-b62a-cb4e98677eeb ContainerName:busybox-main-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:22:03.241: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:22:03.242: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:22:03.242: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/emptydir-5697/pods/pod-sharedvolume-8a698a19-00ac-4d34-b62a-cb4e98677eeb/exec?command=%2Fbin%2Fsh&command=-c&command=cat+%2Fusr%2Fshare%2Fvolumeshare%2Fshareddata.txt&container=busybox-main-container&container=busybox-main-container&stderr=true&stdout=true)
  Sep 30 13:22:03.351: INFO: Exec stderr: ""
  Sep 30 13:22:03.351: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5697" for this suite. @ 09/30/23 13:22:03.355
â€¢ [2.168 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]
test/e2e/apimachinery/field_validation.go:622
  STEP: Creating a kubernetes client @ 09/30/23 13:22:03.365
  Sep 30 13:22:03.365: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename field-validation @ 09/30/23 13:22:03.366
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:22:03.383
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:22:03.387
  Sep 30 13:22:03.391: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  W0930 13:22:05.943339      23 warnings.go:70] unknown field "alpha"
  W0930 13:22:05.943371      23 warnings.go:70] unknown field "beta"
  W0930 13:22:05.943377      23 warnings.go:70] unknown field "delta"
  W0930 13:22:05.943383      23 warnings.go:70] unknown field "epsilon"
  W0930 13:22:05.943388      23 warnings.go:70] unknown field "gamma"
  Sep 30 13:22:06.476: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-4774" for this suite. @ 09/30/23 13:22:06.499
â€¢ [3.140 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]
test/e2e/auth/service_accounts.go:740
  STEP: Creating a kubernetes client @ 09/30/23 13:22:06.505
  Sep 30 13:22:06.505: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename svcaccounts @ 09/30/23 13:22:06.506
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:22:06.523
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:22:06.527
  Sep 30 13:22:06.535: INFO: Got root ca configmap in namespace "svcaccounts-1350"
  Sep 30 13:22:06.541: INFO: Deleted root ca configmap in namespace "svcaccounts-1350"
  STEP: waiting for a new root ca configmap created @ 09/30/23 13:22:07.042
  Sep 30 13:22:07.046: INFO: Recreated root ca configmap in namespace "svcaccounts-1350"
  Sep 30 13:22:07.052: INFO: Updated root ca configmap in namespace "svcaccounts-1350"
  STEP: waiting for the root ca configmap reconciled @ 09/30/23 13:22:07.553
  Sep 30 13:22:07.557: INFO: Reconciled root ca configmap in namespace "svcaccounts-1350"
  Sep 30 13:22:07.557: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-1350" for this suite. @ 09/30/23 13:22:07.562
â€¢ [1.063 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]
test/e2e/apps/replica_set.go:165
  STEP: Creating a kubernetes client @ 09/30/23 13:22:07.569
  Sep 30 13:22:07.569: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replicaset @ 09/30/23 13:22:07.57
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:22:07.586
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:22:07.59
  STEP: Create a ReplicaSet @ 09/30/23 13:22:07.594
  STEP: Verify that the required pods have come up @ 09/30/23 13:22:07.6
  Sep 30 13:22:07.604: INFO: Pod name sample-pod: Found 0 pods out of 3
  Sep 30 13:22:12.610: INFO: Pod name sample-pod: Found 3 pods out of 3
  STEP: ensuring each pod is running @ 09/30/23 13:22:12.61
  Sep 30 13:22:12.614: INFO: Replica Status: {Replicas:3 FullyLabeledReplicas:3 ReadyReplicas:3 AvailableReplicas:3 ObservedGeneration:1 Conditions:[]}
  STEP: Listing all ReplicaSets @ 09/30/23 13:22:12.614
  STEP: DeleteCollection of the ReplicaSets @ 09/30/23 13:22:12.617
  STEP: After DeleteCollection verify that ReplicaSets have been deleted @ 09/30/23 13:22:12.626
  Sep 30 13:22:12.630: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-2966" for this suite. @ 09/30/23 13:22:12.634
â€¢ [5.073 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]
test/e2e/storage/subpath.go:79
  STEP: Creating a kubernetes client @ 09/30/23 13:22:12.642
  Sep 30 13:22:12.642: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename subpath @ 09/30/23 13:22:12.643
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:22:12.664
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:22:12.668
  STEP: Setting up data @ 09/30/23 13:22:12.672
  STEP: Creating pod pod-subpath-test-configmap-pt88 @ 09/30/23 13:22:12.682
  STEP: Creating a pod to test atomic-volume-subpath @ 09/30/23 13:22:12.683
  STEP: Saw pod success @ 09/30/23 13:22:36.756
  Sep 30 13:22:36.759: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-subpath-test-configmap-pt88 container test-container-subpath-configmap-pt88: <nil>
  STEP: delete the pod @ 09/30/23 13:22:36.768
  STEP: Deleting pod pod-subpath-test-configmap-pt88 @ 09/30/23 13:22:36.784
  Sep 30 13:22:36.784: INFO: Deleting pod "pod-subpath-test-configmap-pt88" in namespace "subpath-3572"
  Sep 30 13:22:36.788: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-3572" for this suite. @ 09/30/23 13:22:36.793
â€¢ [24.158 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:135
  STEP: Creating a kubernetes client @ 09/30/23 13:22:36.8
  Sep 30 13:22:36.800: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 09/30/23 13:22:36.801
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:22:36.818
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:22:36.822
  STEP: create the container to handle the HTTPGet hook request. @ 09/30/23 13:22:36.83
  STEP: create the pod with lifecycle hook @ 09/30/23 13:22:38.85
  STEP: check poststart hook @ 09/30/23 13:22:40.868
  STEP: delete the pod with lifecycle hook @ 09/30/23 13:22:40.892
  Sep 30 13:22:42.907: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-7498" for this suite. @ 09/30/23 13:22:42.912
â€¢ [6.120 seconds]
------------------------------
S
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]
test/e2e/common/node/expansion.go:95
  STEP: Creating a kubernetes client @ 09/30/23 13:22:42.92
  Sep 30 13:22:42.920: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename var-expansion @ 09/30/23 13:22:42.921
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:22:42.937
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:22:42.941
  STEP: Creating a pod to test substitution in container's args @ 09/30/23 13:22:42.945
  STEP: Saw pod success @ 09/30/23 13:22:46.967
  Sep 30 13:22:46.970: INFO: Trying to get logs from node ip-172-31-31-30 pod var-expansion-538d86b7-45a0-4f40-9bf6-36acf4f79dc2 container dapi-container: <nil>
  STEP: delete the pod @ 09/30/23 13:22:46.977
  Sep 30 13:22:46.993: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-6361" for this suite. @ 09/30/23 13:22:46.998
â€¢ [4.086 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]
test/e2e/apps/cronjob.go:161
  STEP: Creating a kubernetes client @ 09/30/23 13:22:47.006
  Sep 30 13:22:47.006: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename cronjob @ 09/30/23 13:22:47.007
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:22:47.025
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:22:47.029
  STEP: Creating a ReplaceConcurrent cronjob @ 09/30/23 13:22:47.033
  STEP: Ensuring a job is scheduled @ 09/30/23 13:22:47.038
  STEP: Ensuring exactly one is scheduled @ 09/30/23 13:23:01.044
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 09/30/23 13:23:01.047
  STEP: Ensuring the job is replaced with a new one @ 09/30/23 13:23:01.051
  STEP: Removing cronjob @ 09/30/23 13:24:01.055
  Sep 30 13:24:01.062: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-6671" for this suite. @ 09/30/23 13:24:01.066
â€¢ [74.069 seconds]
------------------------------
S
------------------------------
[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]
test/e2e/apps/daemon_set.go:205
  STEP: Creating a kubernetes client @ 09/30/23 13:24:01.075
  Sep 30 13:24:01.075: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename daemonsets @ 09/30/23 13:24:01.076
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:24:01.095
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:24:01.099
  Sep 30 13:24:01.124: INFO: Creating daemon "daemon-set" with a node selector
  STEP: Initially, daemon pods should not be running on any nodes. @ 09/30/23 13:24:01.13
  Sep 30 13:24:01.139: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:24:01.139: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Change node label to blue, check that daemon pod is launched. @ 09/30/23 13:24:01.139
  Sep 30 13:24:01.166: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:24:01.166: INFO: Node ip-172-31-81-206 is running 0 daemon pod, expected 1
  Sep 30 13:24:02.170: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:24:02.170: INFO: Node ip-172-31-81-206 is running 0 daemon pod, expected 1
  Sep 30 13:24:03.170: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Sep 30 13:24:03.170: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Update the node label to green, and wait for daemons to be unscheduled @ 09/30/23 13:24:03.174
  Sep 30 13:24:03.191: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Sep 30 13:24:03.191: INFO: Number of running nodes: 0, number of available pods: 1 in daemonset daemon-set
  Sep 30 13:24:04.196: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:24:04.196: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Update DaemonSet node selector to green, and change its update strategy to RollingUpdate @ 09/30/23 13:24:04.196
  Sep 30 13:24:04.209: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:24:04.209: INFO: Node ip-172-31-81-206 is running 0 daemon pod, expected 1
  Sep 30 13:24:05.214: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:24:05.215: INFO: Node ip-172-31-81-206 is running 0 daemon pod, expected 1
  Sep 30 13:24:06.213: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Sep 30 13:24:06.213: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 09/30/23 13:24:06.221
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-1232, will wait for the garbage collector to delete the pods @ 09/30/23 13:24:06.221
  Sep 30 13:24:06.282: INFO: Deleting DaemonSet.extensions daemon-set took: 6.537775ms
  Sep 30 13:24:06.383: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.713045ms
  Sep 30 13:24:07.691: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:24:07.691: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Sep 30 13:24:07.695: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"30200"},"items":null}

  Sep 30 13:24:07.699: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"30200"},"items":null}

  Sep 30 13:24:07.726: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-1232" for this suite. @ 09/30/23 13:24:07.731
â€¢ [6.662 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]
test/e2e/apps/replica_set.go:131
  STEP: Creating a kubernetes client @ 09/30/23 13:24:07.738
  Sep 30 13:24:07.738: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replicaset @ 09/30/23 13:24:07.739
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:24:07.756
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:24:07.76
  STEP: Given a Pod with a 'name' label pod-adoption-release is created @ 09/30/23 13:24:07.764
  STEP: When a replicaset with a matching selector is created @ 09/30/23 13:24:09.786
  STEP: Then the orphan pod is adopted @ 09/30/23 13:24:09.792
  STEP: When the matched label of one of its pods change @ 09/30/23 13:24:10.8
  Sep 30 13:24:10.804: INFO: Pod name pod-adoption-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 09/30/23 13:24:10.815
  Sep 30 13:24:11.823: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-3685" for this suite. @ 09/30/23 13:24:11.828
â€¢ [4.098 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:537
  STEP: Creating a kubernetes client @ 09/30/23 13:24:11.839
  Sep 30 13:24:11.839: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 13:24:11.84
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:24:11.856
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:24:11.86
  Sep 30 13:24:11.864: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: creating the pod @ 09/30/23 13:24:11.864
  STEP: submitting the pod to kubernetes @ 09/30/23 13:24:11.864
  Sep 30 13:24:14.015: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-5857" for this suite. @ 09/30/23 13:24:14.02
â€¢ [2.188 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:74
  STEP: Creating a kubernetes client @ 09/30/23 13:24:14.028
  Sep 30 13:24:14.028: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 13:24:14.029
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:24:14.045
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:24:14.049
  STEP: Creating configMap with name configmap-test-volume-866af328-eed8-44e5-bef9-e926d2051789 @ 09/30/23 13:24:14.053
  STEP: Creating a pod to test consume configMaps @ 09/30/23 13:24:14.058
  STEP: Saw pod success @ 09/30/23 13:24:18.082
  Sep 30 13:24:18.085: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-configmaps-119d7f99-6f25-42b4-a198-c5237c85500d container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:24:18.105
  Sep 30 13:24:18.121: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6040" for this suite. @ 09/30/23 13:24:18.126
â€¢ [4.104 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]
test/e2e/network/endpointslice.go:68
  STEP: Creating a kubernetes client @ 09/30/23 13:24:18.132
  Sep 30 13:24:18.132: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename endpointslice @ 09/30/23 13:24:18.133
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:24:18.15
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:24:18.154
  Sep 30 13:24:18.169: INFO: Endpoints addresses: [172.31.4.148 172.31.77.161] , ports: [6443]
  Sep 30 13:24:18.169: INFO: EndpointSlices addresses: [172.31.4.148 172.31.77.161] , ports: [6443]
  Sep 30 13:24:18.169: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-6128" for this suite. @ 09/30/23 13:24:18.176
â€¢ [0.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:131
  STEP: Creating a kubernetes client @ 09/30/23 13:24:18.183
  Sep 30 13:24:18.183: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:24:18.184
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:24:18.202
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:24:18.206
  STEP: Creating the pod @ 09/30/23 13:24:18.21
  Sep 30 13:24:20.766: INFO: Successfully updated pod "labelsupdate84b0bad1-a5c4-4562-8733-e5b11c069a66"
  Sep 30 13:24:22.783: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8318" for this suite. @ 09/30/23 13:24:22.787
â€¢ [4.612 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:445
  STEP: Creating a kubernetes client @ 09/30/23 13:24:22.796
  Sep 30 13:24:22.796: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 13:24:22.796
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:24:22.814
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:24:22.818
  STEP: Saw pod success @ 09/30/23 13:24:28.881
  Sep 30 13:24:28.885: INFO: Trying to get logs from node ip-172-31-31-30 pod client-envvars-c6f77c48-3c3b-43d1-a3ef-2d695d8d8fbb container env3cont: <nil>
  STEP: delete the pod @ 09/30/23 13:24:28.894
  Sep 30 13:24:28.908: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-3383" for this suite. @ 09/30/23 13:24:28.912
â€¢ [6.122 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]
test/e2e/auth/service_accounts.go:78
  STEP: Creating a kubernetes client @ 09/30/23 13:24:28.919
  Sep 30 13:24:28.919: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename svcaccounts @ 09/30/23 13:24:28.92
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:24:28.937
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:24:28.941
  STEP: reading a file in the container @ 09/30/23 13:24:30.969
  Sep 30 13:24:30.969: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-1222 pod-service-account-ecc88409-41d1-4dd0-9a37-6dc2ec9545ad -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/token'
  STEP: reading a file in the container @ 09/30/23 13:24:31.153
  Sep 30 13:24:31.153: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-1222 pod-service-account-ecc88409-41d1-4dd0-9a37-6dc2ec9545ad -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
  STEP: reading a file in the container @ 09/30/23 13:24:31.35
  Sep 30 13:24:31.350: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-1222 pod-service-account-ecc88409-41d1-4dd0-9a37-6dc2ec9545ad -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/namespace'
  Sep 30 13:24:31.528: INFO: Got root ca configmap in namespace "svcaccounts-1222"
  Sep 30 13:24:31.531: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-1222" for this suite. @ 09/30/23 13:24:31.536
â€¢ [2.624 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]
test/e2e/scheduling/preemption.go:130
  STEP: Creating a kubernetes client @ 09/30/23 13:24:31.544
  Sep 30 13:24:31.544: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-preemption @ 09/30/23 13:24:31.545
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:24:31.563
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:24:31.567
  Sep 30 13:24:31.586: INFO: Waiting up to 1m0s for all nodes to be ready
  Sep 30 13:25:31.612: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 09/30/23 13:25:31.616
  Sep 30 13:25:31.637: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Sep 30 13:25:31.645: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Sep 30 13:25:31.662: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Sep 30 13:25:31.669: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  Sep 30 13:25:31.688: INFO: Created pod: pod2-0-sched-preemption-medium-priority
  Sep 30 13:25:31.695: INFO: Created pod: pod2-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 09/30/23 13:25:31.695
  STEP: Run a high priority pod that has same requirements as that of lower priority pod @ 09/30/23 13:25:33.727
  Sep 30 13:25:37.770: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-3337" for this suite. @ 09/30/23 13:25:37.817
â€¢ [66.279 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:177
  STEP: Creating a kubernetes client @ 09/30/23 13:25:37.823
  Sep 30 13:25:37.824: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:25:37.824
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:25:37.841
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:25:37.845
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 09/30/23 13:25:37.849
  STEP: Saw pod success @ 09/30/23 13:25:41.87
  Sep 30 13:25:41.874: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-f5a0b834-d2e4-4a33-8d76-ca90a2f1b3fa container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:25:41.881
  Sep 30 13:25:41.898: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2923" for this suite. @ 09/30/23 13:25:41.901
â€¢ [4.084 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:232
  STEP: Creating a kubernetes client @ 09/30/23 13:25:41.91
  Sep 30 13:25:41.910: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-runtime @ 09/30/23 13:25:41.911
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:25:41.927
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:25:41.931
  STEP: create the container @ 09/30/23 13:25:41.934
  W0930 13:25:41.942656      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 09/30/23 13:25:41.942
  STEP: get the container status @ 09/30/23 13:25:44.962
  STEP: the container should be terminated @ 09/30/23 13:25:44.966
  STEP: the termination message should be set @ 09/30/23 13:25:44.966
  Sep 30 13:25:44.966: INFO: Expected: &{} to match Container's Termination Message:  --
  STEP: delete the container @ 09/30/23 13:25:44.966
  Sep 30 13:25:44.982: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-9658" for this suite. @ 09/30/23 13:25:44.99
â€¢ [3.087 seconds]
------------------------------
S
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]
test/e2e/apps/statefulset.go:983
  STEP: Creating a kubernetes client @ 09/30/23 13:25:44.996
  Sep 30 13:25:44.996: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename statefulset @ 09/30/23 13:25:44.997
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:25:45.013
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:25:45.017
  STEP: Creating service test in namespace statefulset-3785 @ 09/30/23 13:25:45.021
  STEP: Creating statefulset ss in namespace statefulset-3785 @ 09/30/23 13:25:45.029
  Sep 30 13:25:45.040: INFO: Found 0 stateful pods, waiting for 1
  Sep 30 13:25:55.045: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Patch Statefulset to include a label @ 09/30/23 13:25:55.053
  STEP: Getting /status @ 09/30/23 13:25:55.061
  Sep 30 13:25:55.066: INFO: StatefulSet ss has Conditions: []v1.StatefulSetCondition(nil)
  STEP: updating the StatefulSet Status @ 09/30/23 13:25:55.066
  Sep 30 13:25:55.075: INFO: updatedStatus.Conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the statefulset status to be updated @ 09/30/23 13:25:55.075
  Sep 30 13:25:55.078: INFO: Observed &StatefulSet event: ADDED
  Sep 30 13:25:55.078: INFO: Found Statefulset ss in namespace statefulset-3785 with labels: map[e2e:testing] annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Sep 30 13:25:55.078: INFO: Statefulset ss has an updated status
  STEP: patching the Statefulset Status @ 09/30/23 13:25:55.078
  Sep 30 13:25:55.078: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Sep 30 13:25:55.086: INFO: Patched status conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Statefulset status to be patched @ 09/30/23 13:25:55.086
  Sep 30 13:25:55.088: INFO: Observed &StatefulSet event: ADDED
  Sep 30 13:25:55.088: INFO: Observed Statefulset ss in namespace statefulset-3785 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Sep 30 13:25:55.088: INFO: Observed &StatefulSet event: MODIFIED
  Sep 30 13:25:55.088: INFO: Deleting all statefulset in ns statefulset-3785
  Sep 30 13:25:55.092: INFO: Scaling statefulset ss to 0
  Sep 30 13:26:05.110: INFO: Waiting for statefulset status.replicas updated to 0
  Sep 30 13:26:05.114: INFO: Deleting statefulset ss
  Sep 30 13:26:05.128: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3785" for this suite. @ 09/30/23 13:26:05.132
â€¢ [20.142 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]
test/e2e/kubectl/kubectl.go:1481
  STEP: Creating a kubernetes client @ 09/30/23 13:26:05.14
  Sep 30 13:26:05.140: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:26:05.14
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:05.157
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:05.16
  STEP: creating Agnhost RC @ 09/30/23 13:26:05.164
  Sep 30 13:26:05.164: INFO: namespace kubectl-2090
  Sep 30 13:26:05.164: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-2090 create -f -'
  Sep 30 13:26:05.390: INFO: stderr: ""
  Sep 30 13:26:05.390: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 09/30/23 13:26:05.39
  Sep 30 13:26:06.394: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 13:26:06.394: INFO: Found 0 / 1
  Sep 30 13:26:07.395: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 13:26:07.395: INFO: Found 1 / 1
  Sep 30 13:26:07.395: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Sep 30 13:26:07.399: INFO: Selector matched 1 pods for map[app:agnhost]
  Sep 30 13:26:07.399: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Sep 30 13:26:07.399: INFO: wait on agnhost-primary startup in kubectl-2090 
  Sep 30 13:26:07.399: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-2090 logs agnhost-primary-62sz4 agnhost-primary'
  Sep 30 13:26:07.482: INFO: stderr: ""
  Sep 30 13:26:07.482: INFO: stdout: "Paused\n"
  STEP: exposing RC @ 09/30/23 13:26:07.482
  Sep 30 13:26:07.483: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-2090 expose rc agnhost-primary --name=rm2 --port=1234 --target-port=6379'
  Sep 30 13:26:07.570: INFO: stderr: ""
  Sep 30 13:26:07.570: INFO: stdout: "service/rm2 exposed\n"
  Sep 30 13:26:07.577: INFO: Service rm2 in namespace kubectl-2090 found.
  STEP: exposing service @ 09/30/23 13:26:09.584
  Sep 30 13:26:09.584: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-2090 expose service rm2 --name=rm3 --port=2345 --target-port=6379'
  Sep 30 13:26:09.670: INFO: stderr: ""
  Sep 30 13:26:09.670: INFO: stdout: "service/rm3 exposed\n"
  Sep 30 13:26:09.674: INFO: Service rm3 in namespace kubectl-2090 found.
  Sep 30 13:26:11.682: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2090" for this suite. @ 09/30/23 13:26:11.686
â€¢ [6.553 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]
test/e2e/apps/disruption.go:141
  STEP: Creating a kubernetes client @ 09/30/23 13:26:11.693
  Sep 30 13:26:11.693: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename disruption @ 09/30/23 13:26:11.694
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:11.709
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:11.713
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:26:11.722
  STEP: Waiting for all pods to be running @ 09/30/23 13:26:13.751
  Sep 30 13:26:13.755: INFO: running pods: 0 < 3
  Sep 30 13:26:15.765: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-3338" for this suite. @ 09/30/23 13:26:15.769
â€¢ [4.083 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]
test/e2e/apimachinery/namespace.go:303
  STEP: Creating a kubernetes client @ 09/30/23 13:26:15.777
  Sep 30 13:26:15.777: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename namespaces @ 09/30/23 13:26:15.778
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:15.795
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:15.8
  STEP: Read namespace status @ 09/30/23 13:26:15.804
  Sep 30 13:26:15.807: INFO: Status: v1.NamespaceStatus{Phase:"Active", Conditions:[]v1.NamespaceCondition(nil)}
  STEP: Patch namespace status @ 09/30/23 13:26:15.808
  Sep 30 13:26:15.814: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusPatch", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Patched by an e2e test"}
  STEP: Update namespace status @ 09/30/23 13:26:15.814
  Sep 30 13:26:15.822: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Updated by an e2e test"}
  Sep 30 13:26:15.822: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-7567" for this suite. @ 09/30/23 13:26:15.826
â€¢ [0.057 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]
test/e2e/apps/daemon_set.go:875
  STEP: Creating a kubernetes client @ 09/30/23 13:26:15.836
  Sep 30 13:26:15.836: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename daemonsets @ 09/30/23 13:26:15.836
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:15.852
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:15.856
  STEP: Creating simple DaemonSet "daemon-set" @ 09/30/23 13:26:15.884
  STEP: Check that daemon pods launch on every node of the cluster. @ 09/30/23 13:26:15.891
  Sep 30 13:26:15.895: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:15.895: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:15.898: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:26:15.898: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 13:26:16.903: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:16.903: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:16.909: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Sep 30 13:26:16.909: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 13:26:17.904: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:17.904: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:17.907: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Sep 30 13:26:17.907: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Getting /status @ 09/30/23 13:26:17.911
  Sep 30 13:26:17.915: INFO: Daemon Set daemon-set has Conditions: []
  STEP: updating the DaemonSet Status @ 09/30/23 13:26:17.915
  Sep 30 13:26:17.926: INFO: updatedStatus.Conditions: []v1.DaemonSetCondition{v1.DaemonSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the daemon set status to be updated @ 09/30/23 13:26:17.926
  Sep 30 13:26:17.928: INFO: Observed &DaemonSet event: ADDED
  Sep 30 13:26:17.929: INFO: Observed &DaemonSet event: MODIFIED
  Sep 30 13:26:17.929: INFO: Observed &DaemonSet event: MODIFIED
  Sep 30 13:26:17.929: INFO: Observed &DaemonSet event: MODIFIED
  Sep 30 13:26:17.929: INFO: Observed &DaemonSet event: MODIFIED
  Sep 30 13:26:17.929: INFO: Found daemon set daemon-set in namespace daemonsets-1073 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Sep 30 13:26:17.929: INFO: Daemon set daemon-set has an updated status
  STEP: patching the DaemonSet Status @ 09/30/23 13:26:17.929
  STEP: watching for the daemon set status to be patched @ 09/30/23 13:26:17.937
  Sep 30 13:26:17.939: INFO: Observed &DaemonSet event: ADDED
  Sep 30 13:26:17.939: INFO: Observed &DaemonSet event: MODIFIED
  Sep 30 13:26:17.939: INFO: Observed &DaemonSet event: MODIFIED
  Sep 30 13:26:17.939: INFO: Observed &DaemonSet event: MODIFIED
  Sep 30 13:26:17.939: INFO: Observed &DaemonSet event: MODIFIED
  Sep 30 13:26:17.940: INFO: Observed daemon set daemon-set in namespace daemonsets-1073 with annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Sep 30 13:26:17.940: INFO: Observed &DaemonSet event: MODIFIED
  Sep 30 13:26:17.940: INFO: Found daemon set daemon-set in namespace daemonsets-1073 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }]
  Sep 30 13:26:17.940: INFO: Daemon set daemon-set has a patched status
  STEP: Deleting DaemonSet "daemon-set" @ 09/30/23 13:26:17.943
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-1073, will wait for the garbage collector to delete the pods @ 09/30/23 13:26:17.944
  Sep 30 13:26:18.004: INFO: Deleting DaemonSet.extensions daemon-set took: 5.838305ms
  Sep 30 13:26:18.105: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.878903ms
  Sep 30 13:26:19.509: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:26:19.509: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Sep 30 13:26:19.513: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"31313"},"items":null}

  Sep 30 13:26:19.517: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"31313"},"items":null}

  Sep 30 13:26:19.533: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-1073" for this suite. @ 09/30/23 13:26:19.537
â€¢ [3.707 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]
test/e2e/apps/controller_revision.go:124
  STEP: Creating a kubernetes client @ 09/30/23 13:26:19.543
  Sep 30 13:26:19.543: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename controllerrevisions @ 09/30/23 13:26:19.544
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:19.56
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:19.563
  STEP: Creating DaemonSet "e2e-fbtbh-daemon-set" @ 09/30/23 13:26:19.588
  STEP: Check that daemon pods launch on every node of the cluster. @ 09/30/23 13:26:19.593
  Sep 30 13:26:19.600: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:19.600: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:19.604: INFO: Number of nodes with available pods controlled by daemonset e2e-fbtbh-daemon-set: 0
  Sep 30 13:26:19.604: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  Sep 30 13:26:20.608: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:20.608: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:20.612: INFO: Number of nodes with available pods controlled by daemonset e2e-fbtbh-daemon-set: 1
  Sep 30 13:26:20.612: INFO: Node ip-172-31-39-81 is running 0 daemon pod, expected 1
  Sep 30 13:26:21.609: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:21.610: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:26:21.614: INFO: Number of nodes with available pods controlled by daemonset e2e-fbtbh-daemon-set: 3
  Sep 30 13:26:21.614: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset e2e-fbtbh-daemon-set
  STEP: Confirm DaemonSet "e2e-fbtbh-daemon-set" successfully created with "daemonset-name=e2e-fbtbh-daemon-set" label @ 09/30/23 13:26:21.618
  STEP: Listing all ControllerRevisions with label "daemonset-name=e2e-fbtbh-daemon-set" @ 09/30/23 13:26:21.625
  Sep 30 13:26:21.629: INFO: Located ControllerRevision: "e2e-fbtbh-daemon-set-77f4476ffc"
  STEP: Patching ControllerRevision "e2e-fbtbh-daemon-set-77f4476ffc" @ 09/30/23 13:26:21.632
  Sep 30 13:26:21.639: INFO: e2e-fbtbh-daemon-set-77f4476ffc has been patched
  STEP: Create a new ControllerRevision @ 09/30/23 13:26:21.639
  Sep 30 13:26:21.644: INFO: Created ControllerRevision: e2e-fbtbh-daemon-set-6c65799d49
  STEP: Confirm that there are two ControllerRevisions @ 09/30/23 13:26:21.645
  Sep 30 13:26:21.645: INFO: Requesting list of ControllerRevisions to confirm quantity
  Sep 30 13:26:21.648: INFO: Found 2 ControllerRevisions
  STEP: Deleting ControllerRevision "e2e-fbtbh-daemon-set-77f4476ffc" @ 09/30/23 13:26:21.648
  STEP: Confirm that there is only one ControllerRevision @ 09/30/23 13:26:21.654
  Sep 30 13:26:21.654: INFO: Requesting list of ControllerRevisions to confirm quantity
  Sep 30 13:26:21.657: INFO: Found 1 ControllerRevisions
  STEP: Updating ControllerRevision "e2e-fbtbh-daemon-set-6c65799d49" @ 09/30/23 13:26:21.661
  Sep 30 13:26:21.671: INFO: e2e-fbtbh-daemon-set-6c65799d49 has been updated
  STEP: Generate another ControllerRevision by patching the Daemonset @ 09/30/23 13:26:21.671
  W0930 13:26:21.677588      23 warnings.go:70] unknown field "updateStrategy"
  STEP: Confirm that there are two ControllerRevisions @ 09/30/23 13:26:21.677
  Sep 30 13:26:21.677: INFO: Requesting list of ControllerRevisions to confirm quantity
  Sep 30 13:26:22.684: INFO: Requesting list of ControllerRevisions to confirm quantity
  Sep 30 13:26:22.688: INFO: Found 2 ControllerRevisions
  STEP: Removing a ControllerRevision via 'DeleteCollection' with labelSelector: "e2e-fbtbh-daemon-set-6c65799d49=updated" @ 09/30/23 13:26:22.689
  STEP: Confirm that there is only one ControllerRevision @ 09/30/23 13:26:22.697
  Sep 30 13:26:22.697: INFO: Requesting list of ControllerRevisions to confirm quantity
  Sep 30 13:26:22.700: INFO: Found 1 ControllerRevisions
  Sep 30 13:26:22.704: INFO: ControllerRevision "e2e-fbtbh-daemon-set-5447dd478d" has revision 3
  STEP: Deleting DaemonSet "e2e-fbtbh-daemon-set" @ 09/30/23 13:26:22.708
  STEP: deleting DaemonSet.extensions e2e-fbtbh-daemon-set in namespace controllerrevisions-3303, will wait for the garbage collector to delete the pods @ 09/30/23 13:26:22.708
  Sep 30 13:26:22.769: INFO: Deleting DaemonSet.extensions e2e-fbtbh-daemon-set took: 6.797326ms
  Sep 30 13:26:22.870: INFO: Terminating DaemonSet.extensions e2e-fbtbh-daemon-set pods took: 100.916893ms
  Sep 30 13:26:24.575: INFO: Number of nodes with available pods controlled by daemonset e2e-fbtbh-daemon-set: 0
  Sep 30 13:26:24.575: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset e2e-fbtbh-daemon-set
  Sep 30 13:26:24.578: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"31491"},"items":null}

  Sep 30 13:26:24.581: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"31491"},"items":null}

  Sep 30 13:26:24.597: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "controllerrevisions-3303" for this suite. @ 09/30/23 13:26:24.601
â€¢ [5.066 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:85
  STEP: Creating a kubernetes client @ 09/30/23 13:26:24.61
  Sep 30 13:26:24.610: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:26:24.611
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:24.627
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:24.631
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:26:24.635
  STEP: Saw pod success @ 09/30/23 13:26:28.66
  Sep 30 13:26:28.664: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-08f3c84e-86ac-47d6-b118-deb2ec3dc84c container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:26:28.671
  Sep 30 13:26:28.688: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2217" for this suite. @ 09/30/23 13:26:28.693
â€¢ [4.089 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:58
  STEP: Creating a kubernetes client @ 09/30/23 13:26:28.7
  Sep 30 13:26:28.700: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename custom-resource-definition @ 09/30/23 13:26:28.701
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:28.719
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:28.723
  Sep 30 13:26:28.727: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:26:29.750: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-8694" for this suite. @ 09/30/23 13:26:29.755
â€¢ [1.064 seconds]
------------------------------
SS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]
test/e2e/storage/subpath.go:91
  STEP: Creating a kubernetes client @ 09/30/23 13:26:29.764
  Sep 30 13:26:29.764: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename subpath @ 09/30/23 13:26:29.765
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:29.78
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:29.784
  STEP: Setting up data @ 09/30/23 13:26:29.788
  STEP: Creating pod pod-subpath-test-downwardapi-swt7 @ 09/30/23 13:26:29.797
  STEP: Creating a pod to test atomic-volume-subpath @ 09/30/23 13:26:29.797
  STEP: Saw pod success @ 09/30/23 13:26:53.866
  Sep 30 13:26:53.870: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-subpath-test-downwardapi-swt7 container test-container-subpath-downwardapi-swt7: <nil>
  STEP: delete the pod @ 09/30/23 13:26:53.883
  STEP: Deleting pod pod-subpath-test-downwardapi-swt7 @ 09/30/23 13:26:53.897
  Sep 30 13:26:53.897: INFO: Deleting pod "pod-subpath-test-downwardapi-swt7" in namespace "subpath-989"
  Sep 30 13:26:53.900: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-989" for this suite. @ 09/30/23 13:26:53.905
â€¢ [24.147 seconds]
------------------------------
SSS
------------------------------
[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]
test/e2e/apps/rc.go:112
  STEP: Creating a kubernetes client @ 09/30/23 13:26:53.912
  Sep 30 13:26:53.912: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replication-controller @ 09/30/23 13:26:53.912
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:53.932
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:53.935
  STEP: creating a ReplicationController @ 09/30/23 13:26:53.942
  STEP: waiting for RC to be added @ 09/30/23 13:26:53.948
  STEP: waiting for available Replicas @ 09/30/23 13:26:53.948
  STEP: patching ReplicationController @ 09/30/23 13:26:55.558
  STEP: waiting for RC to be modified @ 09/30/23 13:26:55.567
  STEP: patching ReplicationController status @ 09/30/23 13:26:55.568
  STEP: waiting for RC to be modified @ 09/30/23 13:26:55.573
  STEP: waiting for available Replicas @ 09/30/23 13:26:55.573
  STEP: fetching ReplicationController status @ 09/30/23 13:26:55.579
  STEP: patching ReplicationController scale @ 09/30/23 13:26:55.583
  STEP: waiting for RC to be modified @ 09/30/23 13:26:55.591
  STEP: waiting for ReplicationController's scale to be the max amount @ 09/30/23 13:26:55.591
  STEP: fetching ReplicationController; ensuring that it's patched @ 09/30/23 13:26:56.933
  STEP: updating ReplicationController status @ 09/30/23 13:26:56.936
  STEP: waiting for RC to be modified @ 09/30/23 13:26:56.943
  STEP: listing all ReplicationControllers @ 09/30/23 13:26:56.943
  STEP: checking that ReplicationController has expected values @ 09/30/23 13:26:56.95
  STEP: deleting ReplicationControllers by collection @ 09/30/23 13:26:56.95
  STEP: waiting for ReplicationController to have a DELETED watchEvent @ 09/30/23 13:26:56.959
  Sep 30 13:26:57.007: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0930 13:26:57.007880      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "replication-controller-4370" for this suite. @ 09/30/23 13:26:57.011
â€¢ [3.107 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]
test/e2e/apps/job.go:430
  STEP: Creating a kubernetes client @ 09/30/23 13:26:57.02
  Sep 30 13:26:57.020: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename job @ 09/30/23 13:26:57.021
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:26:57.037
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:26:57.041
  STEP: Creating a job @ 09/30/23 13:26:57.045
  STEP: Ensuring job reaches completions @ 09/30/23 13:26:57.051
  E0930 13:26:58.008638      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:26:59.009095      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:00.009206      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:01.009316      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:02.010358      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:03.010690      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:04.011741      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:05.011950      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:06.012474      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:07.013074      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:27:07.057: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-7319" for this suite. @ 09/30/23 13:27:07.062
â€¢ [10.048 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]
test/e2e/common/node/secrets.go:140
  STEP: Creating a kubernetes client @ 09/30/23 13:27:07.069
  Sep 30 13:27:07.069: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 13:27:07.07
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:27:07.087
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:27:07.09
  STEP: Creating projection with secret that has name secret-emptykey-test-db67c556-8ec2-4b4a-8092-ce9b1384c04f @ 09/30/23 13:27:07.097
  Sep 30 13:27:07.099: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9158" for this suite. @ 09/30/23 13:27:07.103
â€¢ [0.041 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should be updated [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:345
  STEP: Creating a kubernetes client @ 09/30/23 13:27:07.111
  Sep 30 13:27:07.111: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 13:27:07.112
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:27:07.127
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:27:07.131
  STEP: creating the pod @ 09/30/23 13:27:07.135
  STEP: submitting the pod to kubernetes @ 09/30/23 13:27:07.136
  E0930 13:27:08.013109      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:09.013567      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: verifying the pod is in kubernetes @ 09/30/23 13:27:09.158
  STEP: updating the pod @ 09/30/23 13:27:09.162
  Sep 30 13:27:09.673: INFO: Successfully updated pod "pod-update-78918b83-6da8-4c39-afab-67463b0d3f45"
  STEP: verifying the updated pod is in kubernetes @ 09/30/23 13:27:09.678
  Sep 30 13:27:09.682: INFO: Pod update OK
  Sep 30 13:27:09.682: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-9293" for this suite. @ 09/30/23 13:27:09.686
â€¢ [2.581 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]
test/e2e/apimachinery/watch.go:60
  STEP: Creating a kubernetes client @ 09/30/23 13:27:09.693
  Sep 30 13:27:09.693: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename watch @ 09/30/23 13:27:09.694
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:27:09.711
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:27:09.715
  STEP: creating a watch on configmaps with label A @ 09/30/23 13:27:09.719
  STEP: creating a watch on configmaps with label B @ 09/30/23 13:27:09.721
  STEP: creating a watch on configmaps with label A or B @ 09/30/23 13:27:09.722
  STEP: creating a configmap with label A and ensuring the correct watchers observe the notification @ 09/30/23 13:27:09.724
  Sep 30 13:27:09.730: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2268  e1542766-ecfc-414b-ad1e-cd0357fa1710 31950 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:27:09.730: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2268  e1542766-ecfc-414b-ad1e-cd0357fa1710 31950 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A and ensuring the correct watchers observe the notification @ 09/30/23 13:27:09.73
  Sep 30 13:27:09.739: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2268  e1542766-ecfc-414b-ad1e-cd0357fa1710 31951 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:27:09.739: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2268  e1542766-ecfc-414b-ad1e-cd0357fa1710 31951 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A again and ensuring the correct watchers observe the notification @ 09/30/23 13:27:09.739
  Sep 30 13:27:09.748: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2268  e1542766-ecfc-414b-ad1e-cd0357fa1710 31952 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:27:09.748: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2268  e1542766-ecfc-414b-ad1e-cd0357fa1710 31952 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap A and ensuring the correct watchers observe the notification @ 09/30/23 13:27:09.748
  Sep 30 13:27:09.754: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2268  e1542766-ecfc-414b-ad1e-cd0357fa1710 31953 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:27:09.754: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2268  e1542766-ecfc-414b-ad1e-cd0357fa1710 31953 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: creating a configmap with label B and ensuring the correct watchers observe the notification @ 09/30/23 13:27:09.754
  Sep 30 13:27:09.760: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-2268  09cf5aca-a9f4-4af4-8d47-3f3a959bb36a 31954 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:27:09.760: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-2268  09cf5aca-a9f4-4af4-8d47-3f3a959bb36a 31954 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  E0930 13:27:10.014093      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:11.014982      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:12.015057      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:13.015319      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:14.015526      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:15.015738      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:16.016029      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:17.016160      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:18.016237      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:19.016492      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting configmap B and ensuring the correct watchers observe the notification @ 09/30/23 13:27:19.761
  Sep 30 13:27:19.769: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-2268  09cf5aca-a9f4-4af4-8d47-3f3a959bb36a 32032 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:27:19.769: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-2268  09cf5aca-a9f4-4af4-8d47-3f3a959bb36a 32032 0 2023-09-30 13:27:09 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-09-30 13:27:09 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  E0930 13:27:20.016583      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:21.016649      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:22.016978      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:23.017067      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:24.017243      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:25.017319      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:26.017495      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:27.018001      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:28.018082      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:29.018576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:27:29.769: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-2268" for this suite. @ 09/30/23 13:27:29.775
â€¢ [20.088 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]
test/e2e/common/node/ephemeral_containers.go:51
  STEP: Creating a kubernetes client @ 09/30/23 13:27:29.782
  Sep 30 13:27:29.782: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 09/30/23 13:27:29.782
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:27:29.8
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:27:29.804
  STEP: creating a target pod @ 09/30/23 13:27:29.807
  E0930 13:27:30.018604      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:31.018670      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: adding an ephemeral container @ 09/30/23 13:27:31.828
  E0930 13:27:32.018743      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:33.018862      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking pod container endpoints @ 09/30/23 13:27:33.849
  Sep 30 13:27:33.849: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-3782 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:27:33.849: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:27:33.850: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:27:33.850: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/ephemeral-containers-test-3782/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Sep 30 13:27:33.982: INFO: Exec stderr: ""
  Sep 30 13:27:33.990: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-3782" for this suite. @ 09/30/23 13:27:33.994
â€¢ [4.219 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]
test/e2e/auth/service_accounts.go:529
  STEP: Creating a kubernetes client @ 09/30/23 13:27:34.001
  Sep 30 13:27:34.001: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename svcaccounts @ 09/30/23 13:27:34.002
  E0930 13:27:34.019163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:27:34.02
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:27:34.024
  Sep 30 13:27:34.042: INFO: created pod
  E0930 13:27:35.019323      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:36.019753      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:37.019973      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:38.020217      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:27:38.055
  E0930 13:27:39.020978      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:40.021219      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:41.021308      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:42.021645      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:43.022042      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:44.022272      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:45.022349      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:46.022457      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:47.022639      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:48.023720      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:49.024501      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:50.024683      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:51.024888      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:52.025308      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:53.025494      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:54.025674      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:55.026446      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:56.027467      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:57.028030      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:58.028179      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:27:59.028751      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:00.028955      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:01.029153      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:02.029475      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:03.029681      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:04.030224      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:05.030702      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:06.031723      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:07.031831      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:08.031941      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:08.056: INFO: polling logs
  Sep 30 13:28:08.064: INFO: Pod logs: 
  I0930 13:27:34.876644       1 log.go:194] OK: Got token
  I0930 13:27:34.876732       1 log.go:194] validating with in-cluster discovery
  I0930 13:27:34.877021       1 log.go:194] OK: got issuer https://kubernetes.default.svc
  I0930 13:27:34.877062       1 log.go:194] Full, not-validated claims: 
  openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-2978:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc0004eab20), NotBefore:(*jwt.NumericDate)(0xc0004eac08), IssuedAt:(*jwt.NumericDate)(0xc0004eab30), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-2978", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"b9c75cf7-02d5-4dc7-ae00-dfba90854bac"}}}
  I0930 13:27:34.889862       1 log.go:194] OK: Constructed OIDC provider for issuer https://kubernetes.default.svc
  I0930 13:27:34.900005       1 log.go:194] OK: Validated signature on JWT
  I0930 13:27:34.900138       1 log.go:194] OK: Got valid claims from token!
  I0930 13:27:34.900176       1 log.go:194] Full, validated claims: 
  &openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-2978:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc000221268), NotBefore:(*jwt.NumericDate)(0xc000221290), IssuedAt:(*jwt.NumericDate)(0xc000221270), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-2978", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"b9c75cf7-02d5-4dc7-ae00-dfba90854bac"}}}

  Sep 30 13:28:08.064: INFO: completed pod
  Sep 30 13:28:08.071: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-2978" for this suite. @ 09/30/23 13:28:08.075
â€¢ [34.080 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:391
  STEP: Creating a kubernetes client @ 09/30/23 13:28:08.082
  Sep 30 13:28:08.082: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-publish-openapi @ 09/30/23 13:28:08.082
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:28:08.1
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:28:08.104
  STEP: set up a multi version CRD @ 09/30/23 13:28:08.108
  Sep 30 13:28:08.109: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:28:09.032441      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:10.033115      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:11.033889      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: rename a version @ 09/30/23 13:28:11.706
  STEP: check the new version name is served @ 09/30/23 13:28:11.723
  E0930 13:28:12.034526      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: check the old version name is removed @ 09/30/23 13:28:12.654
  E0930 13:28:13.035642      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: check the other version is not changed @ 09/30/23 13:28:13.363
  E0930 13:28:14.036460      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:15.036984      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:16.038924      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:16.248: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-136" for this suite. @ 09/30/23 13:28:16.26
â€¢ [8.184 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:151
  STEP: Creating a kubernetes client @ 09/30/23 13:28:16.266
  Sep 30 13:28:16.266: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 13:28:16.267
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:28:16.281
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:28:16.285
  STEP: Creating pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546 @ 09/30/23 13:28:16.289
  E0930 13:28:17.039390      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:18.039806      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 09/30/23 13:28:18.307
  Sep 30 13:28:18.311: INFO: Initial restart count of pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 is 0
  Sep 30 13:28:18.315: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:19.039851      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:20.040093      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:20.321: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:21.040223      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:22.040611      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:22.325: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:23.041691      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:24.041964      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:24.330: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:25.042489      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:26.042687      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:26.335: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:27.042793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:28.043725      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:28.339: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:29.044587      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:30.044779      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:30.345: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:31.044894      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:32.044971      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:32.349: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:33.044999      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:34.045426      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:34.353: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:35.046425      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:36.046687      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:36.358: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:37.047663      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:38.047801      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:38.363: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:39.047965      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:40.048168      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:40.368: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:41.048270      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:42.048917      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:42.374: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:43.049419      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:44.049714      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:44.378: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:45.050301      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:46.050582      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:46.384: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:47.050583      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:48.050671      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:48.388: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:49.051743      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:50.051949      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:50.394: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:51.052008      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:52.052307      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:52.398: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:53.053359      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:54.053451      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:54.403: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:55.053497      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:56.053619      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:56.407: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:57.053694      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:28:58.053921      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:28:58.411: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:28:59.054015      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:00.054202      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:00.416: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:01.054345      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:02.054630      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:02.421: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:03.055071      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:04.055728      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:04.426: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:05.055905      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:06.056247      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:06.430: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:07.056397      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:08.056708      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:08.435: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:09.056783      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:10.056841      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:10.440: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:11.056993      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:12.057419      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:12.444: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:13.058295      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:14.058545      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:14.449: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:15.059713      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:16.060448      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:16.454: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:17.060682      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:18.060872      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:18.458: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:19.060973      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:20.061275      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:20.463: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:21.061381      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:22.061458      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:22.468: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:23.062579      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:24.062805      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:24.473: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:25.062892      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:26.063011      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:26.477: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:27.063691      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:28.063812      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:28.482: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:29.064180      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:30.064262      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:30.487: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:31.064385      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:32.064493      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:32.491: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:33.064576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:34.064689      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:34.495: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:35.065748      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:36.065869      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:36.501: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:37.066706      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:38.066900      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:38.505: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:39.067328      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:40.067432      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:40.511: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:41.067554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:42.067663      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:42.516: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:43.068643      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:44.068851      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:44.520: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:45.068996      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:46.069066      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:46.524: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:47.069192      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:48.069451      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:48.528: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:49.070168      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:50.070484      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:50.533: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:51.071403      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:52.071852      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:52.538: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:53.072887      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:54.073209      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:54.543: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:55.073597      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:56.073909      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:56.547: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:57.074157      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:29:58.074366      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:29:58.552: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:29:59.075240      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:00.075553      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:00.557: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:01.076481      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:02.076596      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:02.561: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:03.077352      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:04.077477      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:04.566: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:05.078002      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:06.078169      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:06.570: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:07.078329      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:08.078576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:08.576: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:09.078660      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:10.079748      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:10.581: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:11.079783      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:12.079858      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:12.585: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:13.080821      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:14.081389      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:14.590: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:15.081774      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:16.081895      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:16.594: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:17.082020      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:18.082112      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:18.600: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:19.082923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:20.083076      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:20.605: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:21.083856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:22.084294      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:22.610: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:23.084895      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:24.085040      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:24.614: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:25.086007      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:26.086172      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:26.618: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:27.086276      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:28.086467      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:28.623: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:29.087142      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:30.087304      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:30.627: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:31.087555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:32.088204      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:32.632: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:33.089250      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:34.090048      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:34.636: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:35.090715      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:36.091728      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:36.641: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:37.092675      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:38.093102      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:38.646: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:39.093788      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:40.094123      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:40.651: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:41.094998      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:42.095958      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:42.655: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:43.097017      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:44.097307      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:44.660: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:45.097493      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:46.097793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:46.664: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:47.098419      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:48.098744      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:48.669: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:49.099075      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:50.099251      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:50.674: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:51.099594      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:52.099921      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:52.679: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:53.100745      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:54.100892      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:54.683: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:55.101444      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:56.101671      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:56.688: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:57.102625      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:30:58.102650      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:30:58.694: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:30:59.103728      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:00.104008      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:00.699: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:01.104147      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:02.104729      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:02.704: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:03.105710      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:04.105862      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:04.708: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:05.106633      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:06.106791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:06.713: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:07.107329      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:08.107576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:08.717: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:09.108516      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:10.108804      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:10.723: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:11.109425      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:12.109762      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:12.728: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:13.109810      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:14.110000      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:14.732: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:15.110959      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:16.111279      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:16.736: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:17.111437      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:18.111669      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:18.741: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:19.112535      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:20.112834      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:20.746: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:21.113860      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:22.114351      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:22.750: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:23.115190      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:24.115367      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:24.755: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:25.116242      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:26.116473      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:26.760: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:27.117041      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:28.117268      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:28.764: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:29.118329      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:30.118624      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:30.770: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:31.118650      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:32.119711      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:32.775: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:33.119984      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:34.120147      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:34.779: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:35.120275      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:36.120626      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:36.784: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:37.121396      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:38.121562      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:38.788: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:39.122575      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:40.122664      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:40.794: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:41.123024      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:42.123722      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:42.799: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:43.123805      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:44.124047      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:44.803: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:45.124148      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:46.124608      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:46.808: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:47.125664      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:48.126024      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:48.812: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:49.126131      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:50.126282      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:50.818: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:51.126397      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:52.126748      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:52.822: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:53.126781      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:54.126892      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:54.827: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:55.127415      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:56.127839      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:56.832: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:57.128416      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:31:58.128652      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:31:58.836: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:31:59.129676      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:00.129949      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:00.841: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:32:01.130891      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:02.131001      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:02.846: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:32:03.131824      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:04.131921      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:04.850: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:32:05.131951      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:06.132329      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:06.854: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:32:07.133317      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:08.133706      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:08.859: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:32:09.134185      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:10.134262      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:10.864: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:32:11.135240      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:12.135369      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:12.868: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:32:13.136171      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:14.136523      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:14.873: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:32:15.137204      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:16.137579      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:16.879: INFO: Get pod busybox-5e2a35d8-56ed-43a4-91a9-ddeb9822a1d4 in namespace container-probe-546
  E0930 13:32:17.138671      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:18.139048      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:18.879: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:32:18.883
  STEP: Destroying namespace "container-probe-546" for this suite. @ 09/30/23 13:32:18.897
â€¢ [242.639 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]
test/e2e/apimachinery/webhook.go:285
  STEP: Creating a kubernetes client @ 09/30/23 13:32:18.905
  Sep 30 13:32:18.905: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:32:18.906
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:32:18.922
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:32:18.926
  STEP: Setting up server cert @ 09/30/23 13:32:18.948
  E0930 13:32:19.140110      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:32:19.175
  STEP: Deploying the webhook pod @ 09/30/23 13:32:19.182
  STEP: Wait for the deployment to be ready @ 09/30/23 13:32:19.194
  Sep 30 13:32:19.202: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E0930 13:32:20.140232      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:21.140578      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 09/30/23 13:32:21.214
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:32:21.224
  E0930 13:32:22.141048      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:22.224: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Sep 30 13:32:22.232: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-3435-crds.webhook.example.com via the AdmissionRegistration API @ 09/30/23 13:32:22.743
  STEP: Creating a custom resource that should be mutated by the webhook @ 09/30/23 13:32:22.762
  E0930 13:32:23.142082      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:24.142382      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:24.793: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0930 13:32:25.142623      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "webhook-9128" for this suite. @ 09/30/23 13:32:25.363
  STEP: Destroying namespace "webhook-markers-9271" for this suite. @ 09/30/23 13:32:25.369
â€¢ [6.471 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:217
  STEP: Creating a kubernetes client @ 09/30/23 13:32:25.376
  Sep 30 13:32:25.376: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:32:25.377
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:32:25.39
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:32:25.394
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 09/30/23 13:32:25.398
  E0930 13:32:26.142919      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:27.143749      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:28.144817      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:29.144934      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:32:29.419
  Sep 30 13:32:29.423: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-ebc8b153-8440-4880-8883-9f03c2410a29 container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:32:29.447
  Sep 30 13:32:29.462: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9483" for this suite. @ 09/30/23 13:32:29.467
â€¢ [4.097 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]
test/e2e/apimachinery/webhook.go:646
  STEP: Creating a kubernetes client @ 09/30/23 13:32:29.474
  Sep 30 13:32:29.474: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:32:29.474
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:32:29.49
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:32:29.493
  STEP: Setting up server cert @ 09/30/23 13:32:29.516
  E0930 13:32:30.145725      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:32:30.324
  STEP: Deploying the webhook pod @ 09/30/23 13:32:30.329
  STEP: Wait for the deployment to be ready @ 09/30/23 13:32:30.341
  Sep 30 13:32:30.350: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E0930 13:32:31.146732      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:32.146936      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 09/30/23 13:32:32.363
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:32:32.373
  E0930 13:32:33.147025      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:33.373: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 09/30/23 13:32:33.444
  STEP: Creating a configMap that should be mutated @ 09/30/23 13:32:33.46
  STEP: Deleting the collection of validation webhooks @ 09/30/23 13:32:33.491
  STEP: Creating a configMap that should not be mutated @ 09/30/23 13:32:33.54
  Sep 30 13:32:33.550: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2259" for this suite. @ 09/30/23 13:32:33.59
  STEP: Destroying namespace "webhook-markers-153" for this suite. @ 09/30/23 13:32:33.599
â€¢ [4.132 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]
test/e2e/apimachinery/webhook.go:332
  STEP: Creating a kubernetes client @ 09/30/23 13:32:33.606
  Sep 30 13:32:33.606: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:32:33.607
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:32:33.62
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:32:33.624
  STEP: Setting up server cert @ 09/30/23 13:32:33.649
  E0930 13:32:34.147323      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:32:34.549
  STEP: Deploying the webhook pod @ 09/30/23 13:32:34.554
  STEP: Wait for the deployment to be ready @ 09/30/23 13:32:34.565
  Sep 30 13:32:34.573: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E0930 13:32:35.147660      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:36.148127      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 09/30/23 13:32:36.584
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:32:36.593
  E0930 13:32:37.148904      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:37.593: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Sep 30 13:32:37.600: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-7939-crds.webhook.example.com via the AdmissionRegistration API @ 09/30/23 13:32:38.114
  STEP: Creating a custom resource that should be mutated by the webhook @ 09/30/23 13:32:38.132
  E0930 13:32:38.149480      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:39.149770      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:40.150027      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:40.181: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1435" for this suite. @ 09/30/23 13:32:40.745
  STEP: Destroying namespace "webhook-markers-2428" for this suite. @ 09/30/23 13:32:40.751
â€¢ [7.151 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]
test/e2e/apps/disruption.go:108
  STEP: Creating a kubernetes client @ 09/30/23 13:32:40.758
  Sep 30 13:32:40.758: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename disruption @ 09/30/23 13:32:40.759
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:32:40.772
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:32:40.776
  STEP: creating the pdb @ 09/30/23 13:32:40.779
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:32:40.784
  E0930 13:32:41.150822      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:42.151725      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: updating the pdb @ 09/30/23 13:32:42.793
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:32:42.802
  STEP: patching the pdb @ 09/30/23 13:32:42.807
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:32:42.818
  E0930 13:32:43.151830      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:44.151942      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for the pdb to be deleted @ 09/30/23 13:32:44.832
  Sep 30 13:32:44.836: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-7710" for this suite. @ 09/30/23 13:32:44.841
â€¢ [4.090 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]
test/e2e/network/service.go:2187
  STEP: Creating a kubernetes client @ 09/30/23 13:32:44.849
  Sep 30 13:32:44.849: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:32:44.85
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:32:44.863
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:32:44.868
  STEP: creating service in namespace services-9825 @ 09/30/23 13:32:44.873
  STEP: creating service affinity-clusterip-transition in namespace services-9825 @ 09/30/23 13:32:44.873
  STEP: creating replication controller affinity-clusterip-transition in namespace services-9825 @ 09/30/23 13:32:44.883
  I0930 13:32:44.890851      23 runners.go:197] Created replication controller with name: affinity-clusterip-transition, namespace: services-9825, replica count: 3
  E0930 13:32:45.152277      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:46.152736      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:47.153809      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0930 13:32:47.941907      23 runners.go:197] affinity-clusterip-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Sep 30 13:32:47.956: INFO: Creating new exec pod
  E0930 13:32:48.154616      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:49.154818      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:50.155764      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:50.970: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-9825 exec execpod-affinityx7l6g -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip-transition 80'
  E0930 13:32:51.156272      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:32:51.158: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip-transition 80\nConnection to affinity-clusterip-transition 80 port [tcp/http] succeeded!\n"
  Sep 30 13:32:51.158: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 13:32:51.158: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-9825 exec execpod-affinityx7l6g -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.31 80'
  Sep 30 13:32:51.341: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.31 80\nConnection to 10.152.183.31 80 port [tcp/http] succeeded!\n"
  Sep 30 13:32:51.341: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Sep 30 13:32:51.351: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-9825 exec execpod-affinityx7l6g -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.31:80/ ; done'
  Sep 30 13:32:51.632: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n"
  Sep 30 13:32:51.632: INFO: stdout: "\naffinity-clusterip-transition-7s9nt\naffinity-clusterip-transition-qnr24\naffinity-clusterip-transition-7s9nt\naffinity-clusterip-transition-7s9nt\naffinity-clusterip-transition-7s9nt\naffinity-clusterip-transition-qnr24\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-qnr24\naffinity-clusterip-transition-7s9nt\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-qnr24\naffinity-clusterip-transition-qnr24\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-7s9nt\naffinity-clusterip-transition-7s9nt"
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-7s9nt
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-qnr24
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-7s9nt
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-7s9nt
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-7s9nt
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-qnr24
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-qnr24
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-7s9nt
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-qnr24
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-qnr24
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-7s9nt
  Sep 30 13:32:51.632: INFO: Received response from host: affinity-clusterip-transition-7s9nt
  Sep 30 13:32:51.643: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-9825 exec execpod-affinityx7l6g -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.31:80/ ; done'
  Sep 30 13:32:51.880: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.31:80/\n"
  Sep 30 13:32:51.880: INFO: stdout: "\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp\naffinity-clusterip-transition-5p4jp"
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Received response from host: affinity-clusterip-transition-5p4jp
  Sep 30 13:32:51.880: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Sep 30 13:32:51.885: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip-transition in namespace services-9825, will wait for the garbage collector to delete the pods @ 09/30/23 13:32:51.895
  Sep 30 13:32:51.959: INFO: Deleting ReplicationController affinity-clusterip-transition took: 10.490163ms
  Sep 30 13:32:52.059: INFO: Terminating ReplicationController affinity-clusterip-transition pods took: 100.116236ms
  E0930 13:32:52.156988      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:53.157234      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:54.157705      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:55.158725      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "services-9825" for this suite. @ 09/30/23 13:32:55.376
â€¢ [10.535 seconds]
------------------------------
SS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:95
  STEP: Creating a kubernetes client @ 09/30/23 13:32:55.384
  Sep 30 13:32:55.384: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pod-network-test @ 09/30/23 13:32:55.385
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:32:55.399
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:32:55.403
  STEP: Performing setup for networking test in namespace pod-network-test-6394 @ 09/30/23 13:32:55.407
  STEP: creating a selector @ 09/30/23 13:32:55.407
  STEP: Creating the service pods in kubernetes @ 09/30/23 13:32:55.408
  Sep 30 13:32:55.408: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  E0930 13:32:56.159087      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:57.159465      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:58.159541      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:32:59.159652      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:00.160598      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:01.161582      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:02.162068      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:03.162163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:04.162264      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:05.162384      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:06.163292      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:07.163699      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:08.163832      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:09.164070      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:10.165009      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:11.165370      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:12.166238      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:13.166346      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:14.166478      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:15.166621      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:16.166798      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:17.167745      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating test pods @ 09/30/23 13:33:17.51
  E0930 13:33:18.168692      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:19.168984      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:33:19.527: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Sep 30 13:33:19.527: INFO: Breadth first check of 192.168.10.124 on host 172.31.31.30...
  Sep 30 13:33:19.531: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.10.106:9080/dial?request=hostname&protocol=udp&host=192.168.10.124&port=8081&tries=1'] Namespace:pod-network-test-6394 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:33:19.531: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:33:19.532: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:33:19.532: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-6394/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.10.106%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D192.168.10.124%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Sep 30 13:33:19.646: INFO: Waiting for responses: map[]
  Sep 30 13:33:19.646: INFO: reached 192.168.10.124 after 0/1 tries
  Sep 30 13:33:19.646: INFO: Breadth first check of 192.168.35.231 on host 172.31.39.81...
  Sep 30 13:33:19.650: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.10.106:9080/dial?request=hostname&protocol=udp&host=192.168.35.231&port=8081&tries=1'] Namespace:pod-network-test-6394 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:33:19.650: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:33:19.650: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:33:19.650: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-6394/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.10.106%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D192.168.35.231%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Sep 30 13:33:19.759: INFO: Waiting for responses: map[]
  Sep 30 13:33:19.759: INFO: reached 192.168.35.231 after 0/1 tries
  Sep 30 13:33:19.759: INFO: Breadth first check of 192.168.224.253 on host 172.31.81.206...
  Sep 30 13:33:19.763: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.10.106:9080/dial?request=hostname&protocol=udp&host=192.168.224.253&port=8081&tries=1'] Namespace:pod-network-test-6394 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:33:19.763: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:33:19.764: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:33:19.764: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-6394/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.10.106%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D192.168.224.253%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Sep 30 13:33:19.862: INFO: Waiting for responses: map[]
  Sep 30 13:33:19.862: INFO: reached 192.168.224.253 after 0/1 tries
  Sep 30 13:33:19.862: INFO: Going to retry 0 out of 3 pods....
  Sep 30 13:33:19.862: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-6394" for this suite. @ 09/30/23 13:33:19.867
â€¢ [24.489 seconds]
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]
test/e2e/apimachinery/resource_quota.go:693
  STEP: Creating a kubernetes client @ 09/30/23 13:33:19.873
  Sep 30 13:33:19.874: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 13:33:19.874
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:33:19.892
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:33:19.9
  STEP: Creating a ResourceQuota with terminating scope @ 09/30/23 13:33:19.905
  STEP: Ensuring ResourceQuota status is calculated @ 09/30/23 13:33:19.912
  E0930 13:33:20.169323      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:21.170364      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota with not terminating scope @ 09/30/23 13:33:21.915
  STEP: Ensuring ResourceQuota status is calculated @ 09/30/23 13:33:21.921
  E0930 13:33:22.171410      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:23.171771      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a long running pod @ 09/30/23 13:33:23.925
  STEP: Ensuring resource quota with not terminating scope captures the pod usage @ 09/30/23 13:33:23.942
  E0930 13:33:24.172652      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:25.173060      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with terminating scope ignored the pod usage @ 09/30/23 13:33:25.948
  E0930 13:33:26.174146      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:27.174376      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 09/30/23 13:33:27.956
  STEP: Ensuring resource quota status released the pod usage @ 09/30/23 13:33:27.968
  E0930 13:33:28.174399      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:29.174565      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a terminating pod @ 09/30/23 13:33:29.972
  STEP: Ensuring resource quota with terminating scope captures the pod usage @ 09/30/23 13:33:29.984
  E0930 13:33:30.174621      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:31.175585      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with not terminating scope ignored the pod usage @ 09/30/23 13:33:31.989
  E0930 13:33:32.175698      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:33.175832      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 09/30/23 13:33:33.993
  STEP: Ensuring resource quota status released the pod usage @ 09/30/23 13:33:34.007
  E0930 13:33:34.176202      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:35.176331      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:33:36.013: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8484" for this suite. @ 09/30/23 13:33:36.017
â€¢ [16.150 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:269
  STEP: Creating a kubernetes client @ 09/30/23 13:33:36.024
  Sep 30 13:33:36.024: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename custom-resource-definition @ 09/30/23 13:33:36.024
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:33:36.038
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:33:36.042
  Sep 30 13:33:36.047: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:33:36.177157      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:37.177444      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:38.177799      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:33:39.147: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-6713" for this suite. @ 09/30/23 13:33:39.152
â€¢ [3.134 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:78
  STEP: Creating a kubernetes client @ 09/30/23 13:33:39.158
  Sep 30 13:33:39.159: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:33:39.159
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:33:39.171
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:33:39.175
  E0930 13:33:39.177874      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating projection with secret that has name projected-secret-test-map-f362bedf-3299-4a38-a477-89f1dafe69bf @ 09/30/23 13:33:39.179
  STEP: Creating a pod to test consume secrets @ 09/30/23 13:33:39.185
  E0930 13:33:40.178014      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:41.178486      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:42.178629      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:43.178826      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:33:43.207
  Sep 30 13:33:43.211: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-secrets-ddd0be6a-a8fd-4411-9e01-1497542c4051 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 13:33:43.218
  Sep 30 13:33:43.234: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6171" for this suite. @ 09/30/23 13:33:43.239
â€¢ [4.087 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should succeed in writing subpaths in container [Slow] [Conformance]
test/e2e/common/node/expansion.go:300
  STEP: Creating a kubernetes client @ 09/30/23 13:33:43.247
  Sep 30 13:33:43.247: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename var-expansion @ 09/30/23 13:33:43.248
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:33:43.26
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:33:43.265
  STEP: creating the pod @ 09/30/23 13:33:43.268
  STEP: waiting for pod running @ 09/30/23 13:33:43.277
  E0930 13:33:44.178933      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:45.179741      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: creating a file in subpath @ 09/30/23 13:33:45.286
  Sep 30 13:33:45.290: INFO: ExecWithOptions {Command:[/bin/sh -c touch /volume_mount/mypath/foo/test.log] Namespace:var-expansion-7185 PodName:var-expansion-aa81d40e-e4eb-46ae-aea5-6094bd0d85fb ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:33:45.290: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:33:45.291: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:33:45.291: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/var-expansion-7185/pods/var-expansion-aa81d40e-e4eb-46ae-aea5-6094bd0d85fb/exec?command=%2Fbin%2Fsh&command=-c&command=touch+%2Fvolume_mount%2Fmypath%2Ffoo%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: test for file in mounted path @ 09/30/23 13:33:45.394
  Sep 30 13:33:45.398: INFO: ExecWithOptions {Command:[/bin/sh -c test -f /subpath_mount/test.log] Namespace:var-expansion-7185 PodName:var-expansion-aa81d40e-e4eb-46ae-aea5-6094bd0d85fb ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:33:45.398: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:33:45.399: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:33:45.399: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/var-expansion-7185/pods/var-expansion-aa81d40e-e4eb-46ae-aea5-6094bd0d85fb/exec?command=%2Fbin%2Fsh&command=-c&command=test+-f+%2Fsubpath_mount%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: updating the annotation value @ 09/30/23 13:33:45.518
  Sep 30 13:33:46.032: INFO: Successfully updated pod "var-expansion-aa81d40e-e4eb-46ae-aea5-6094bd0d85fb"
  STEP: waiting for annotated pod running @ 09/30/23 13:33:46.032
  STEP: deleting the pod gracefully @ 09/30/23 13:33:46.035
  Sep 30 13:33:46.035: INFO: Deleting pod "var-expansion-aa81d40e-e4eb-46ae-aea5-6094bd0d85fb" in namespace "var-expansion-7185"
  Sep 30 13:33:46.044: INFO: Wait up to 5m0s for pod "var-expansion-aa81d40e-e4eb-46ae-aea5-6094bd0d85fb" to be fully deleted
  E0930 13:33:46.180249      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:47.180476      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:48.180540      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:49.180648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:50.181596      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:51.181915      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:52.182240      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:53.182387      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:54.183244      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:55.183419      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:56.183763      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:57.183971      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:58.184136      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:33:59.184346      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:00.184861      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:01.185656      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:02.186635      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:03.186785      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:04.187278      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:05.187729      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:06.188055      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:07.188203      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:08.188456      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:09.188672      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:10.189348      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:11.189814      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:12.190559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:13.190666      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:14.191679      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:15.191951      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:16.192355      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:17.192844      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:34:18.119: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-7185" for this suite. @ 09/30/23 13:34:18.124
â€¢ [34.884 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]
test/e2e/apimachinery/crd_watch.go:51
  STEP: Creating a kubernetes client @ 09/30/23 13:34:18.131
  Sep 30 13:34:18.131: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-watch @ 09/30/23 13:34:18.132
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:34:18.146
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:34:18.151
  Sep 30 13:34:18.155: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:34:18.193835      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:19.194815      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:20.195723      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating first CR  @ 09/30/23 13:34:20.698
  Sep 30 13:34:20.704: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-09-30T13:34:20Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-09-30T13:34:20Z]] name:name1 resourceVersion:33707 uid:b057d764-6474-40b9-875e-e19b31e7a810] num:map[num1:9223372036854775807 num2:1000000]]}
  E0930 13:34:21.196590      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:22.196688      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:23.197171      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:24.197426      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:25.197685      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:26.198496      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:27.198646      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:28.199726      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:29.199850      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:30.200193      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating second CR @ 09/30/23 13:34:30.704
  Sep 30 13:34:30.711: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-09-30T13:34:30Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-09-30T13:34:30Z]] name:name2 resourceVersion:33738 uid:9f27bfab-3348-4718-a558-917d028cd946] num:map[num1:9223372036854775807 num2:1000000]]}
  E0930 13:34:31.200493      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:32.200736      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:33.200991      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:34.201814      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:35.202133      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:36.202582      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:37.202663      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:38.203714      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:39.203890      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:40.204225      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Modifying first CR @ 09/30/23 13:34:40.711
  Sep 30 13:34:40.719: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-09-30T13:34:20Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-09-30T13:34:40Z]] name:name1 resourceVersion:33758 uid:b057d764-6474-40b9-875e-e19b31e7a810] num:map[num1:9223372036854775807 num2:1000000]]}
  E0930 13:34:41.205080      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:42.205190      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:43.205298      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:44.205373      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:45.205477      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:46.205847      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:47.205957      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:48.206065      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:49.206374      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:50.206486      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Modifying second CR @ 09/30/23 13:34:50.719
  Sep 30 13:34:50.726: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-09-30T13:34:30Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-09-30T13:34:50Z]] name:name2 resourceVersion:33778 uid:9f27bfab-3348-4718-a558-917d028cd946] num:map[num1:9223372036854775807 num2:1000000]]}
  E0930 13:34:51.207110      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:52.207279      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:53.207462      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:54.207648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:55.207953      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:56.208628      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:57.208857      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:58.209206      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:34:59.209532      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:00.209804      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting first CR @ 09/30/23 13:35:00.726
  Sep 30 13:35:00.734: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-09-30T13:34:20Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-09-30T13:34:40Z]] name:name1 resourceVersion:33798 uid:b057d764-6474-40b9-875e-e19b31e7a810] num:map[num1:9223372036854775807 num2:1000000]]}
  E0930 13:35:01.210419      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:02.210634      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:03.211721      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:04.211897      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:05.212072      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:06.212893      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:07.213007      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:08.213107      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:09.213446      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:10.213561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting second CR @ 09/30/23 13:35:10.735
  Sep 30 13:35:10.744: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-09-30T13:34:30Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-09-30T13:34:50Z]] name:name2 resourceVersion:33818 uid:9f27bfab-3348-4718-a558-917d028cd946] num:map[num1:9223372036854775807 num2:1000000]]}
  E0930 13:35:11.214120      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:12.214296      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:13.214473      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:14.214656      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:15.214856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:16.215316      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:17.215795      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:18.216005      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:19.216181      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:20.216356      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:21.217384      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:21.257: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-watch-7076" for this suite. @ 09/30/23 13:35:21.262
â€¢ [63.137 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:88
  STEP: Creating a kubernetes client @ 09/30/23 13:35:21.268
  Sep 30 13:35:21.268: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:35:21.269
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:35:21.284
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:35:21.288
  STEP: Creating projection with secret that has name projected-secret-test-map-baf88c51-70e9-4686-97f8-7ff7213491cb @ 09/30/23 13:35:21.291
  STEP: Creating a pod to test consume secrets @ 09/30/23 13:35:21.296
  E0930 13:35:22.217599      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:23.217849      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:24.217858      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:25.217949      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:35:25.319
  Sep 30 13:35:25.324: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-secrets-6fc1ceb1-d5ef-4585-883b-744f4517508c container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 13:35:25.345
  Sep 30 13:35:25.362: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3309" for this suite. @ 09/30/23 13:35:25.367
â€¢ [4.106 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]
test/e2e/common/node/sysctl.go:123
  STEP: Creating a kubernetes client @ 09/30/23 13:35:25.375
  Sep 30 13:35:25.375: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sysctl @ 09/30/23 13:35:25.376
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:35:25.388
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:35:25.392
  STEP: Creating a pod with one valid and two invalid sysctls @ 09/30/23 13:35:25.397
  Sep 30 13:35:25.402: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-72" for this suite. @ 09/30/23 13:35:25.407
â€¢ [0.040 seconds]
------------------------------
SSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]
test/e2e/common/node/init_container.go:178
  STEP: Creating a kubernetes client @ 09/30/23 13:35:25.415
  Sep 30 13:35:25.415: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename init-container @ 09/30/23 13:35:25.416
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:35:25.433
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:35:25.439
  STEP: creating the pod @ 09/30/23 13:35:25.444
  Sep 30 13:35:25.444: INFO: PodSpec: initContainers in spec.initContainers
  E0930 13:35:26.218810      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:27.218908      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:28.219798      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:29.219902      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:29.768: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-8931" for this suite. @ 09/30/23 13:35:29.773
â€¢ [4.365 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]
test/e2e/apimachinery/garbage_collector.go:321
  STEP: Creating a kubernetes client @ 09/30/23 13:35:29.78
  Sep 30 13:35:29.780: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename gc @ 09/30/23 13:35:29.781
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:35:29.795
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:35:29.799
  STEP: create the rc @ 09/30/23 13:35:29.803
  W0930 13:35:29.809552      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  E0930 13:35:30.220016      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:31.220474      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:32.220680      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:33.220874      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:34.221086      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the rc @ 09/30/23 13:35:34.814
  STEP: wait for all pods to be garbage collected @ 09/30/23 13:35:34.821
  E0930 13:35:35.221983      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:36.222810      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:37.222936      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:38.223352      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:39.223451      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 09/30/23 13:35:39.829
  W0930 13:35:39.835400      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Sep 30 13:35:39.835: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Sep 30 13:35:39.835: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-7771" for this suite. @ 09/30/23 13:35:39.839
â€¢ [10.065 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:214
  STEP: Creating a kubernetes client @ 09/30/23 13:35:39.848
  Sep 30 13:35:39.848: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 13:35:39.848
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:35:39.862
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:35:39.866
  STEP: Creating pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107 @ 09/30/23 13:35:39.87
  E0930 13:35:40.223758      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:41.224225      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 09/30/23 13:35:41.888
  Sep 30 13:35:41.892: INFO: Initial restart count of pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 is 0
  Sep 30 13:35:41.895: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:35:42.225028      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:43.225132      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:43.900: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:35:44.225541      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:45.225758      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:45.905: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:35:46.225853      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:47.225951      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:47.909: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:35:48.226985      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:49.227216      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:49.914: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:35:50.227711      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:51.228242      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:51.919: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:35:52.228548      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:53.228693      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:53.923: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:35:54.229247      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:55.229493      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:55.928: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:35:56.230542      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:57.230658      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:57.933: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:35:58.231531      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:35:59.231793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:35:59.937: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:00.232042      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:01.232388      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:01.941: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:02.232813      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:03.233278      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:03.949: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:04.234325      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:05.235365      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:05.954: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:06.235429      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:07.235540      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:07.959: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:08.235629      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:09.235858      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:09.963: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:10.235935      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:11.236701      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:11.967: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:12.237213      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:13.237454      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:13.971: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:14.238242      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:15.238465      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:15.977: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:16.238848      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:17.239002      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:17.981: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:18.239738      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:19.239958      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:19.986: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:20.240551      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:21.240901      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:21.990: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:22.241468      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:23.241636      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:23.995: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:24.242186      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:25.242376      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:26.000: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:26.242528      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:27.242677      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:28.005: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:28.243742      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:29.244057      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:30.010: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:30.244866      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:31.245397      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:32.015: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:32.245516      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:33.245724      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:34.019: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:34.245923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:35.246090      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:36.025: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:36.246881      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:37.246995      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:38.029: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:38.247408      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:39.247645      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:40.033: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:40.248456      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:41.248793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:42.036: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:42.249421      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:43.250323      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:44.041: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:44.250798      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:45.251073      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:46.046: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:46.251345      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:47.251752      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:48.051: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:48.252688      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:49.252991      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:50.055: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:50.253790      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:51.254734      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:52.059: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:52.255767      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:53.256027      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:54.063: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:54.256047      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:55.256143      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:56.068: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:56.256234      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:57.256365      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:36:58.072: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:36:58.257058      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:36:59.257284      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:00.077: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:00.257371      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:01.257645      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:02.081: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:02.258559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:03.258659      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:04.085: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:04.258987      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:05.259195      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:06.090: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:06.259274      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:07.259724      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:08.095: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:08.260693      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:09.260819      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:10.100: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:10.261329      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:11.261695      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:12.104: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:12.262634      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:13.262874      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:14.108: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:14.263713      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:15.263866      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:16.114: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:16.264095      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:17.264421      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:18.119: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:18.264530      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:19.264621      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:20.123: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:20.265059      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:21.265699      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:22.128: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:22.265920      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:23.266044      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:24.133: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:24.266146      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:25.267122      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:26.138: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:26.267365      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:27.267601      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:28.142: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:28.268444      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:29.268554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:30.147: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:30.269560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:31.269871      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:32.151: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:32.270620      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:33.271738      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:34.155: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:34.272659      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:35.272852      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:36.161: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:36.273428      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:37.273644      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:38.165: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:38.273904      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:39.274004      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:40.170: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:40.274330      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:41.274672      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:42.174: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:42.275691      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:43.275921      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:44.178: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:44.276661      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:45.276873      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:46.184: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:46.277476      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:47.277670      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:48.188: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:48.277923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:49.278062      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:50.192: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:50.278882      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:51.279241      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:52.197: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:52.279466      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:53.279687      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:54.201: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:54.280597      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:55.280842      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:56.207: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:56.281521      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:57.281733      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:37:58.211: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:37:58.282704      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:37:59.282974      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:00.216: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:00.283662      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:01.283983      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:02.220: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:02.284618      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:03.284765      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:04.224: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:04.285734      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:05.285943      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:06.229: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:06.286430      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:07.286612      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:08.233: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:08.287088      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:09.287290      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:10.238: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:10.287515      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:11.287874      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:12.242: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:12.288811      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:13.289016      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:14.247: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:14.289172      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:15.289307      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:16.253: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:16.289466      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:17.290072      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:18.257: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:18.290825      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:19.290979      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:20.261: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:20.291647      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:21.292716      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:22.264: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:22.293215      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:23.293330      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:24.268: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:24.294092      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:25.294203      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:26.274: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:26.294352      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:27.294487      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:28.278: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:28.294999      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:29.295878      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:30.283: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:30.296563      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:31.296987      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:32.287: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:32.297848      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:33.298677      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:34.292: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:34.299311      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:35.299449      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:36.297: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:36.299487      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:37.299613      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:38.299682      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:38.300: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:39.300047      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:40.300269      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:40.305: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:41.300695      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:42.300784      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:42.309: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:43.300883      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:44.300983      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:44.314: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:45.301646      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:46.301977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:46.319: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:47.302686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:48.302836      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:48.323: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:49.302961      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:50.303037      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:50.328: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:51.304009      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:52.304206      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:52.333: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:53.304417      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:54.304650      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:54.338: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:55.304753      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:56.305245      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:56.343: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:57.306097      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:38:58.306310      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:38:58.348: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:38:59.307144      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:00.307346      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:00.352: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:01.308372      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:02.309186      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:02.356: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:03.309818      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:04.310040      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:04.361: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:05.310148      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:06.310904      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:06.366: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:07.311006      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:08.311735      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:08.371: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:09.312552      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:10.312765      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:10.375: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:11.313723      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:12.313933      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:12.379: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:13.314015      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:14.314229      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:14.384: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:15.314667      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:16.314757      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:16.389: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:17.314871      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:18.314977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:18.394: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:19.315095      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:20.315197      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:20.398: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:21.315835      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:22.316061      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:22.402: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:23.316207      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:24.316406      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:24.406: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:25.316624      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:26.317097      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:26.412: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:27.317346      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:28.317560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:28.416: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:29.317640      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:30.317748      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:30.420: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:31.318050      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:32.318652      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:32.425: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:33.318766      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:34.318836      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:34.429: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:35.318887      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:36.318918      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:36.434: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:37.319030      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:38.319124      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:38.439: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:39.319332      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:40.319395      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:40.443: INFO: Get pod test-webserver-eccd2b4f-2508-478b-b8c9-d7f4bb0e0934 in namespace container-probe-3107
  E0930 13:39:41.319457      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:42.319728      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:42.444: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:39:42.448
  STEP: Destroying namespace "container-probe-3107" for this suite. @ 09/30/23 13:39:42.459
â€¢ [242.620 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]
test/e2e/apps/rc.go:94
  STEP: Creating a kubernetes client @ 09/30/23 13:39:42.473
  Sep 30 13:39:42.473: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replication-controller @ 09/30/23 13:39:42.474
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:39:42.49
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:39:42.494
  STEP: Given a Pod with a 'name' label pod-adoption is created @ 09/30/23 13:39:42.498
  E0930 13:39:43.320386      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:44.320692      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: When a replication controller with a matching selector is created @ 09/30/23 13:39:44.52
  STEP: Then the orphan pod is adopted @ 09/30/23 13:39:44.525
  E0930 13:39:45.321393      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:45.534: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-8711" for this suite. @ 09/30/23 13:39:45.539
â€¢ [3.073 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]
test/e2e/kubectl/kubectl.go:341
  STEP: Creating a kubernetes client @ 09/30/23 13:39:45.546
  Sep 30 13:39:45.546: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:39:45.547
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:39:45.562
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:39:45.567
  STEP: creating a replication controller @ 09/30/23 13:39:45.57
  Sep 30 13:39:45.570: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 create -f -'
  Sep 30 13:39:45.803: INFO: stderr: ""
  Sep 30 13:39:45.803: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 09/30/23 13:39:45.803
  Sep 30 13:39:45.803: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Sep 30 13:39:45.880: INFO: stderr: ""
  Sep 30 13:39:45.880: INFO: stdout: "update-demo-nautilus-rzmr4 update-demo-nautilus-zp6cv "
  Sep 30 13:39:45.880: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 get pods update-demo-nautilus-rzmr4 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:39:45.954: INFO: stderr: ""
  Sep 30 13:39:45.954: INFO: stdout: ""
  Sep 30 13:39:45.954: INFO: update-demo-nautilus-rzmr4 is created but not running
  E0930 13:39:46.321722      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:47.322041      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:48.322113      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:49.322195      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:50.322369      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:50.955: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Sep 30 13:39:51.031: INFO: stderr: ""
  Sep 30 13:39:51.031: INFO: stdout: "update-demo-nautilus-rzmr4 update-demo-nautilus-zp6cv "
  Sep 30 13:39:51.031: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 get pods update-demo-nautilus-rzmr4 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:39:51.108: INFO: stderr: ""
  Sep 30 13:39:51.108: INFO: stdout: "true"
  Sep 30 13:39:51.108: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 get pods update-demo-nautilus-rzmr4 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Sep 30 13:39:51.183: INFO: stderr: ""
  Sep 30 13:39:51.183: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Sep 30 13:39:51.183: INFO: validating pod update-demo-nautilus-rzmr4
  Sep 30 13:39:51.189: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Sep 30 13:39:51.189: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Sep 30 13:39:51.189: INFO: update-demo-nautilus-rzmr4 is verified up and running
  Sep 30 13:39:51.189: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 get pods update-demo-nautilus-zp6cv -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Sep 30 13:39:51.262: INFO: stderr: ""
  Sep 30 13:39:51.262: INFO: stdout: "true"
  Sep 30 13:39:51.263: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 get pods update-demo-nautilus-zp6cv -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  E0930 13:39:51.323376      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:51.338: INFO: stderr: ""
  Sep 30 13:39:51.338: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Sep 30 13:39:51.338: INFO: validating pod update-demo-nautilus-zp6cv
  Sep 30 13:39:51.344: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Sep 30 13:39:51.344: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Sep 30 13:39:51.344: INFO: update-demo-nautilus-zp6cv is verified up and running
  STEP: using delete to clean up resources @ 09/30/23 13:39:51.344
  Sep 30 13:39:51.344: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 delete --grace-period=0 --force -f -'
  Sep 30 13:39:51.422: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Sep 30 13:39:51.422: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Sep 30 13:39:51.422: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 get rc,svc -l name=update-demo --no-headers'
  Sep 30 13:39:51.509: INFO: stderr: "No resources found in kubectl-1614 namespace.\n"
  Sep 30 13:39:51.509: INFO: stdout: ""
  Sep 30 13:39:51.509: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1614 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Sep 30 13:39:51.593: INFO: stderr: ""
  Sep 30 13:39:51.593: INFO: stdout: ""
  Sep 30 13:39:51.593: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1614" for this suite. @ 09/30/23 13:39:51.598
â€¢ [6.061 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/kubelet_etc_hosts.go:64
  STEP: Creating a kubernetes client @ 09/30/23 13:39:51.61
  Sep 30 13:39:51.610: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename e2e-kubelet-etc-hosts @ 09/30/23 13:39:51.611
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:39:51.625
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:39:51.631
  STEP: Setting up the test @ 09/30/23 13:39:51.635
  STEP: Creating hostNetwork=false pod @ 09/30/23 13:39:51.635
  E0930 13:39:52.323482      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:53.323587      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating hostNetwork=true pod @ 09/30/23 13:39:53.658
  E0930 13:39:54.323773      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:55.323979      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Running the test @ 09/30/23 13:39:55.679
  STEP: Verifying /etc/hosts of container is kubelet-managed for pod with hostNetwork=false @ 09/30/23 13:39:55.679
  Sep 30 13:39:55.679: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:55.679: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:55.680: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:55.680: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Sep 30 13:39:55.783: INFO: Exec stderr: ""
  Sep 30 13:39:55.783: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:55.783: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:55.784: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:55.784: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Sep 30 13:39:55.891: INFO: Exec stderr: ""
  Sep 30 13:39:55.891: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:55.891: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:55.891: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:55.891: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Sep 30 13:39:55.991: INFO: Exec stderr: ""
  Sep 30 13:39:55.991: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:55.991: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:55.991: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:55.991: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Sep 30 13:39:56.090: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts of container is not kubelet-managed since container specifies /etc/hosts mount @ 09/30/23 13:39:56.09
  Sep 30 13:39:56.090: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:56.090: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:56.091: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:56.091: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Sep 30 13:39:56.203: INFO: Exec stderr: ""
  Sep 30 13:39:56.203: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:56.203: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:56.203: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:56.203: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  E0930 13:39:56.324098      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:39:56.330: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts content of container is not kubelet-managed for pod with hostNetwork=true @ 09/30/23 13:39:56.33
  Sep 30 13:39:56.330: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:56.330: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:56.331: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:56.331: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Sep 30 13:39:56.438: INFO: Exec stderr: ""
  Sep 30 13:39:56.438: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:56.438: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:56.439: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:56.439: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Sep 30 13:39:56.550: INFO: Exec stderr: ""
  Sep 30 13:39:56.550: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:56.550: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:56.550: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:56.551: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Sep 30 13:39:56.679: INFO: Exec stderr: ""
  Sep 30 13:39:56.679: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9785 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:39:56.679: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:39:56.680: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:39:56.680: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9785/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Sep 30 13:39:56.786: INFO: Exec stderr: ""
  Sep 30 13:39:56.786: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "e2e-kubelet-etc-hosts-9785" for this suite. @ 09/30/23 13:39:56.791
â€¢ [5.189 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]
test/e2e/instrumentation/core_events.go:57
  STEP: Creating a kubernetes client @ 09/30/23 13:39:56.799
  Sep 30 13:39:56.799: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename events @ 09/30/23 13:39:56.8
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:39:56.814
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:39:56.817
  STEP: creating a test event @ 09/30/23 13:39:56.821
  STEP: listing all events in all namespaces @ 09/30/23 13:39:56.826
  STEP: patching the test event @ 09/30/23 13:39:56.83
  STEP: fetching the test event @ 09/30/23 13:39:56.838
  STEP: updating the test event @ 09/30/23 13:39:56.841
  STEP: getting the test event @ 09/30/23 13:39:56.851
  STEP: deleting the test event @ 09/30/23 13:39:56.854
  STEP: listing all events in all namespaces @ 09/30/23 13:39:56.863
  Sep 30 13:39:56.867: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-2371" for this suite. @ 09/30/23 13:39:56.872
â€¢ [0.079 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:194
  STEP: Creating a kubernetes client @ 09/30/23 13:39:56.879
  Sep 30 13:39:56.879: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:39:56.88
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:39:56.893
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:39:56.897
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:39:56.902
  E0930 13:39:57.324924      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:58.325888      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:39:59.326581      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:00.326685      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:40:00.925
  Sep 30 13:40:00.929: INFO: Trying to get logs from node ip-172-31-39-81 pod downwardapi-volume-12e9b211-cef4-4d47-b71b-8935dc74a04e container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:40:00.953
  Sep 30 13:40:00.978: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9598" for this suite. @ 09/30/23 13:40:00.983
â€¢ [4.110 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:148
  STEP: Creating a kubernetes client @ 09/30/23 13:40:00.99
  Sep 30 13:40:00.990: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubelet-test @ 09/30/23 13:40:00.99
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:01.003
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:01.008
  STEP: Waiting for pod completion @ 09/30/23 13:40:01.02
  E0930 13:40:01.327383      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:02.327826      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:03.328732      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:04.329021      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:40:05.044: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-7288" for this suite. @ 09/30/23 13:40:05.048
â€¢ [4.065 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:110
  STEP: Creating a kubernetes client @ 09/30/23 13:40:05.056
  Sep 30 13:40:05.056: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubelet-test @ 09/30/23 13:40:05.057
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:05.07
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:05.074
  E0930 13:40:05.329966      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:06.330998      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:07.331078      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:08.332131      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:40:09.095: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-770" for this suite. @ 09/30/23 13:40:09.099
â€¢ [4.049 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:198
  STEP: Creating a kubernetes client @ 09/30/23 13:40:09.106
  Sep 30 13:40:09.106: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename custom-resource-definition @ 09/30/23 13:40:09.107
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:09.121
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:09.125
  STEP: fetching the /apis discovery document @ 09/30/23 13:40:09.129
  STEP: finding the apiextensions.k8s.io API group in the /apis discovery document @ 09/30/23 13:40:09.13
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis discovery document @ 09/30/23 13:40:09.13
  STEP: fetching the /apis/apiextensions.k8s.io discovery document @ 09/30/23 13:40:09.131
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis/apiextensions.k8s.io discovery document @ 09/30/23 13:40:09.132
  STEP: fetching the /apis/apiextensions.k8s.io/v1 discovery document @ 09/30/23 13:40:09.132
  STEP: finding customresourcedefinitions resources in the /apis/apiextensions.k8s.io/v1 discovery document @ 09/30/23 13:40:09.134
  Sep 30 13:40:09.134: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-7429" for this suite. @ 09/30/23 13:40:09.138
â€¢ [0.039 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIStorageCapacity  should support CSIStorageCapacities API operations [Conformance]
test/e2e/storage/csistoragecapacity.go:49
  STEP: Creating a kubernetes client @ 09/30/23 13:40:09.147
  Sep 30 13:40:09.147: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename csistoragecapacity @ 09/30/23 13:40:09.148
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:09.159
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:09.163
  STEP: getting /apis @ 09/30/23 13:40:09.167
  STEP: getting /apis/storage.k8s.io @ 09/30/23 13:40:09.172
  STEP: getting /apis/storage.k8s.io/v1 @ 09/30/23 13:40:09.173
  STEP: creating @ 09/30/23 13:40:09.175
  STEP: watching @ 09/30/23 13:40:09.19
  Sep 30 13:40:09.190: INFO: starting watch
  STEP: getting @ 09/30/23 13:40:09.197
  STEP: listing in namespace @ 09/30/23 13:40:09.201
  STEP: listing across namespaces @ 09/30/23 13:40:09.205
  STEP: patching @ 09/30/23 13:40:09.208
  STEP: updating @ 09/30/23 13:40:09.214
  Sep 30 13:40:09.219: INFO: waiting for watch events with expected annotations in namespace
  Sep 30 13:40:09.220: INFO: waiting for watch events with expected annotations across namespace
  STEP: deleting @ 09/30/23 13:40:09.22
  STEP: deleting a collection @ 09/30/23 13:40:09.232
  Sep 30 13:40:09.247: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csistoragecapacity-4908" for this suite. @ 09/30/23 13:40:09.252
â€¢ [0.112 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:46
  STEP: Creating a kubernetes client @ 09/30/23 13:40:09.261
  Sep 30 13:40:09.261: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:40:09.262
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:09.274
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:09.278
  STEP: Creating projection with secret that has name projected-secret-test-c0e8d0ef-a9ec-4702-bb04-17b8dd32f022 @ 09/30/23 13:40:09.282
  STEP: Creating a pod to test consume secrets @ 09/30/23 13:40:09.287
  E0930 13:40:09.333068      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:10.333491      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:11.334557      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:12.334748      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:40:13.31
  Sep 30 13:40:13.314: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-secrets-f6eef236-ff5b-47c9-b8c8-2548377314e6 container projected-secret-volume-test: <nil>
  E0930 13:40:13.335661      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the pod @ 09/30/23 13:40:13.337
  Sep 30 13:40:13.351: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-340" for this suite. @ 09/30/23 13:40:13.355
â€¢ [4.101 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:213
  STEP: Creating a kubernetes client @ 09/30/23 13:40:13.362
  Sep 30 13:40:13.362: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 09/30/23 13:40:13.363
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:13.377
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:13.381
  STEP: create the container to handle the HTTPGet hook request. @ 09/30/23 13:40:13.39
  E0930 13:40:14.336457      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:15.336502      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: create the pod with lifecycle hook @ 09/30/23 13:40:15.411
  E0930 13:40:16.336942      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:17.337048      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the pod with lifecycle hook @ 09/30/23 13:40:17.43
  E0930 13:40:18.337636      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:19.337867      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: check prestop hook @ 09/30/23 13:40:19.448
  Sep 30 13:40:19.455: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-2009" for this suite. @ 09/30/23 13:40:19.46
â€¢ [6.104 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:222
  STEP: Creating a kubernetes client @ 09/30/23 13:40:19.468
  Sep 30 13:40:19.468: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 13:40:19.469
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:19.484
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:19.489
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:40:19.493
  E0930 13:40:20.338678      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:21.338912      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:22.339043      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:23.339197      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:40:23.518
  Sep 30 13:40:23.521: INFO: Trying to get logs from node ip-172-31-39-81 pod downwardapi-volume-96162e5e-0c21-4579-aeaa-b198fbe80cf4 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:40:23.529
  Sep 30 13:40:23.545: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4379" for this suite. @ 09/30/23 13:40:23.549
â€¢ [4.087 seconds]
------------------------------
SS
------------------------------
[sig-instrumentation] Events should delete a collection of events [Conformance]
test/e2e/instrumentation/core_events.go:175
  STEP: Creating a kubernetes client @ 09/30/23 13:40:23.556
  Sep 30 13:40:23.556: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename events @ 09/30/23 13:40:23.557
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:23.57
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:23.575
  STEP: Create set of events @ 09/30/23 13:40:23.579
  Sep 30 13:40:23.588: INFO: created test-event-1
  Sep 30 13:40:23.593: INFO: created test-event-2
  Sep 30 13:40:23.598: INFO: created test-event-3
  STEP: get a list of Events with a label in the current namespace @ 09/30/23 13:40:23.598
  STEP: delete collection of events @ 09/30/23 13:40:23.601
  Sep 30 13:40:23.601: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 09/30/23 13:40:23.626
  Sep 30 13:40:23.626: INFO: requesting list of events to confirm quantity
  Sep 30 13:40:23.629: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-1492" for this suite. @ 09/30/23 13:40:23.634
â€¢ [0.085 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:119
  STEP: Creating a kubernetes client @ 09/30/23 13:40:23.642
  Sep 30 13:40:23.642: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:40:23.642
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:23.656
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:23.661
  STEP: Creating secret with name projected-secret-test-458b4ded-0e9c-4ac8-84ef-15b72638b3e0 @ 09/30/23 13:40:23.665
  STEP: Creating a pod to test consume secrets @ 09/30/23 13:40:23.67
  E0930 13:40:24.339754      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:25.339846      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:26.340398      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:27.340458      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:40:27.694
  Sep 30 13:40:27.698: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-projected-secrets-46a4a6a8-b97b-4c23-aa57-2d1ed91f43dc container secret-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 13:40:27.711
  Sep 30 13:40:27.726: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6256" for this suite. @ 09/30/23 13:40:27.731
â€¢ [4.096 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]
test/e2e/scheduling/predicates.go:444
  STEP: Creating a kubernetes client @ 09/30/23 13:40:27.739
  Sep 30 13:40:27.739: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-pred @ 09/30/23 13:40:27.739
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:27.753
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:27.757
  Sep 30 13:40:27.761: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Sep 30 13:40:27.770: INFO: Waiting for terminating namespaces to be deleted...
  Sep 30 13:40:27.774: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-31-30 before test
  Sep 30 13:40:27.781: INFO: nginx-ingress-controller-kubernetes-worker-w7gdg from ingress-nginx-kubernetes-worker started at 2023-09-30 12:45:41 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.781: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 13:40:27.781: INFO: calico-node-cbqpx from kube-system started at 2023-09-30 12:13:54 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.781: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 13:40:27.781: INFO: sonobuoy from sonobuoy started at 2023-09-30 12:19:38 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.781: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Sep 30 13:40:27.781: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-8zjmf from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:40:27.781: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:40:27.781: INFO: 	Container systemd-logs ready: true, restart count 0
  Sep 30 13:40:27.781: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-39-81 before test
  Sep 30 13:40:27.787: INFO: nginx-ingress-controller-kubernetes-worker-7vl6k from ingress-nginx-kubernetes-worker started at 2023-09-30 12:10:20 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.787: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 13:40:27.787: INFO: calico-node-dk4rw from kube-system started at 2023-09-30 12:10:04 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.787: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 13:40:27.787: INFO: sonobuoy-e2e-job-65ff53df4dd046c8 from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:40:27.787: INFO: 	Container e2e ready: true, restart count 0
  Sep 30 13:40:27.787: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:40:27.787: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-mghww from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:40:27.787: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:40:27.787: INFO: 	Container systemd-logs ready: true, restart count 0
  Sep 30 13:40:27.787: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-81-206 before test
  Sep 30 13:40:27.793: INFO: default-http-backend-kubernetes-worker-5c79cc75ff-66tqr from ingress-nginx-kubernetes-worker started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.794: INFO: 	Container default-http-backend-kubernetes-worker ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: nginx-ingress-controller-kubernetes-worker-h7hhr from ingress-nginx-kubernetes-worker started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.794: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: calico-node-6bdbf from kube-system started at 2023-09-30 12:08:56 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.794: INFO: 	Container calico-node ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: coredns-59cfb5bf46-6jbqw from kube-system started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.794: INFO: 	Container coredns ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: kube-state-metrics-775d9f4f79-6xd92 from kube-system started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.794: INFO: 	Container kube-state-metrics ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: metrics-server-v0.6.3-69d7fbfdf8-pwwn7 from kube-system started at 2023-09-30 12:09:12 +0000 UTC (2 container statuses recorded)
  Sep 30 13:40:27.794: INFO: 	Container metrics-server ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: 	Container metrics-server-nanny ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: dashboard-metrics-scraper-5dd7cb5fc-lw5nw from kubernetes-dashboard started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.794: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: kubernetes-dashboard-7b899cb9d9-pjt4m from kubernetes-dashboard started at 2023-09-30 12:09:12 +0000 UTC (1 container statuses recorded)
  Sep 30 13:40:27.794: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: sonobuoy-systemd-logs-daemon-set-884d4a3b725c4a87-87x6p from sonobuoy started at 2023-09-30 12:19:40 +0000 UTC (2 container statuses recorded)
  Sep 30 13:40:27.794: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Sep 30 13:40:27.794: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to schedule Pod with nonempty NodeSelector. @ 09/30/23 13:40:27.794
  STEP: Considering event: 
  Type = [Warning], Name = [restricted-pod.1789b0e3f650b128], Reason = [FailedScheduling], Message = [0/5 nodes are available: 2 node(s) had untolerated taint {node-role.kubernetes.io/control-plane: }, 3 node(s) didn't match Pod's node affinity/selector. preemption: 0/5 nodes are available: 5 Preemption is not helpful for scheduling..] @ 09/30/23 13:40:27.824
  E0930 13:40:28.341058      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:40:28.823: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-454" for this suite. @ 09/30/23 13:40:28.828
â€¢ [1.096 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:55
  STEP: Creating a kubernetes client @ 09/30/23 13:40:28.836
  Sep 30 13:40:28.836: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename runtimeclass @ 09/30/23 13:40:28.836
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:28.85
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:28.854
  Sep 30 13:40:28.868: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-1849" for this suite. @ 09/30/23 13:40:28.872
â€¢ [0.043 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]
test/e2e/storage/csi_inline.go:157
  STEP: Creating a kubernetes client @ 09/30/23 13:40:28.88
  Sep 30 13:40:28.880: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename csiinlinevolumes @ 09/30/23 13:40:28.881
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:28.894
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:28.898
  STEP: Creating two CSIDrivers @ 09/30/23 13:40:28.902
  STEP: Getting "inline-driver-fe4facff-bf33-4cd7-a2f3-a1a1cc1d47a5" & "inline-driver-2c667bac-98a8-48f1-ae3d-14f817f41341" @ 09/30/23 13:40:28.919
  STEP: Patching the CSIDriver "inline-driver-2c667bac-98a8-48f1-ae3d-14f817f41341" @ 09/30/23 13:40:28.926
  STEP: Updating the CSIDriver "inline-driver-2c667bac-98a8-48f1-ae3d-14f817f41341" @ 09/30/23 13:40:28.932
  STEP: Listing all CSIDrivers with the labelSelector: "e2e-test=csiinlinevolumes-6343" @ 09/30/23 13:40:28.941
  STEP: Deleting CSIDriver "inline-driver-fe4facff-bf33-4cd7-a2f3-a1a1cc1d47a5" @ 09/30/23 13:40:28.945
  STEP: Confirm deletion of CSIDriver "inline-driver-fe4facff-bf33-4cd7-a2f3-a1a1cc1d47a5" @ 09/30/23 13:40:28.951
  STEP: Deleting CSIDriver "inline-driver-2c667bac-98a8-48f1-ae3d-14f817f41341" via DeleteCollection @ 09/30/23 13:40:28.954
  STEP: Confirm deletion of CSIDriver "inline-driver-2c667bac-98a8-48f1-ae3d-14f817f41341" @ 09/30/23 13:40:28.961
  Sep 30 13:40:28.965: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-6343" for this suite. @ 09/30/23 13:40:28.972
â€¢ [0.099 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:47
  STEP: Creating a kubernetes client @ 09/30/23 13:40:28.98
  Sep 30 13:40:28.980: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:40:28.981
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:28.992
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:28.996
  STEP: Creating configMap with name projected-configmap-test-volume-fade53bf-8b2b-4dfe-af24-78d9228760f6 @ 09/30/23 13:40:28.999
  STEP: Creating a pod to test consume configMaps @ 09/30/23 13:40:29.004
  E0930 13:40:29.341875      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:30.341995      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:31.342817      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:32.342944      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:40:33.026
  Sep 30 13:40:33.030: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-configmaps-0fe8aeaa-1384-4cc5-9b3c-4b9f6244ed4c container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:40:33.039
  Sep 30 13:40:33.057: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8499" for this suite. @ 09/30/23 13:40:33.061
â€¢ [4.088 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]
test/e2e/apps/job.go:513
  STEP: Creating a kubernetes client @ 09/30/23 13:40:33.069
  Sep 30 13:40:33.069: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename job @ 09/30/23 13:40:33.069
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:33.083
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:33.087
  STEP: Creating a job @ 09/30/23 13:40:33.091
  STEP: Ensuring active pods == parallelism @ 09/30/23 13:40:33.098
  E0930 13:40:33.342943      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:34.343453      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Orphaning one of the Job's Pods @ 09/30/23 13:40:35.103
  E0930 13:40:35.344263      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:40:35.620: INFO: Successfully updated pod "adopt-release-cwszp"
  STEP: Checking that the Job readopts the Pod @ 09/30/23 13:40:35.62
  E0930 13:40:36.344478      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:37.344702      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Removing the labels from the Job's Pod @ 09/30/23 13:40:37.629
  Sep 30 13:40:38.140: INFO: Successfully updated pod "adopt-release-cwszp"
  STEP: Checking that the Job releases the Pod @ 09/30/23 13:40:38.14
  E0930 13:40:38.344794      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:39.345151      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:40:40.150: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-9290" for this suite. @ 09/30/23 13:40:40.154
â€¢ [7.093 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:97
  STEP: Creating a kubernetes client @ 09/30/23 13:40:40.162
  Sep 30 13:40:40.162: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:40:40.163
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:40.176
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:40.18
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 09/30/23 13:40:40.184
  E0930 13:40:40.345717      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:41.346379      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:42.347061      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:43.347209      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:40:44.206
  Sep 30 13:40:44.209: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-bb4ac467-97c1-4ac6-83c5-d931d5bf733f container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:40:44.216
  Sep 30 13:40:44.231: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-7009" for this suite. @ 09/30/23 13:40:44.235
â€¢ [4.080 seconds]
------------------------------
[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]
test/e2e/storage/empty_dir_wrapper.go:67
  STEP: Creating a kubernetes client @ 09/30/23 13:40:44.242
  Sep 30 13:40:44.242: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir-wrapper @ 09/30/23 13:40:44.243
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:44.258
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:44.262
  E0930 13:40:44.347331      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:45.347888      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:40:46.295: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Cleaning up the secret @ 09/30/23 13:40:46.299
  STEP: Cleaning up the configmap @ 09/30/23 13:40:46.305
  STEP: Cleaning up the pod @ 09/30/23 13:40:46.311
  STEP: Destroying namespace "emptydir-wrapper-4626" for this suite. @ 09/30/23 13:40:46.323
â€¢ [2.088 seconds]
------------------------------
SSS
------------------------------
[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]
test/e2e/apps/cronjob.go:97
  STEP: Creating a kubernetes client @ 09/30/23 13:40:46.331
  Sep 30 13:40:46.331: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename cronjob @ 09/30/23 13:40:46.332
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:40:46.345
  E0930 13:40:46.348051      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:40:46.349
  STEP: Creating a suspended cronjob @ 09/30/23 13:40:46.353
  STEP: Ensuring no jobs are scheduled @ 09/30/23 13:40:46.359
  E0930 13:40:47.348172      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:48.348646      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:49.349315      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:50.350205      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:51.351277      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:52.351741      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:53.351854      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:54.351942      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:55.352335      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:56.352960      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:57.353090      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:58.353320      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:40:59.353459      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:00.354316      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:01.354770      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:02.355079      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:03.355193      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:04.355488      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:05.355566      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:06.356193      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:07.356309      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:08.356659      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:09.356842      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:10.357271      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:11.357841      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:12.358093      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:13.358677      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:14.358782      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:15.358925      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:16.360170      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:17.360313      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:18.360728      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:19.360853      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:20.360935      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:21.361831      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:22.362175      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:23.362758      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:24.363855      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:25.363981      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:26.364494      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:27.364756      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:28.365558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:29.365858      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:30.366856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:31.367278      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:32.368257      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:33.368464      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:34.369365      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:35.369715      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:36.370113      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:37.370349      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:38.370334      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:39.370671      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:40.371485      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:41.371968      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:42.372368      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:43.372498      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:44.372545      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:45.372694      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:46.373656      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:47.373957      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:48.374630      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:49.374846      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:50.375178      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:51.375821      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:52.376326      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:53.376528      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:54.377292      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:55.377443      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:56.377635      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:57.377840      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:58.378736      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:41:59.378916      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:00.378926      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:01.379168      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:02.379396      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:03.379739      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:04.379734      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:05.379866      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:06.380237      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:07.380468      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:08.380993      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:09.381115      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:10.381557      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:11.381820      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:12.382680      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:13.382817      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:14.383515      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:15.383888      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:16.384766      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:17.385099      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:18.385577      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:19.385804      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:20.386603      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:21.386945      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:22.387416      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:23.387628      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:24.387821      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:25.387987      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:26.388235      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:27.388403      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:28.388753      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:29.389085      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:30.390101      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:31.390338      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:32.390868      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:33.391726      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:34.392483      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:35.392704      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:36.393596      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:37.393840      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:38.393873      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:39.394092      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:40.394583      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:41.395036      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:42.395512      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:43.395721      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:44.395892      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:45.396220      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:46.396796      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:47.397130      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:48.397201      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:49.397344      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:50.398270      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:51.398487      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:52.399071      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:53.399382      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:54.399789      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:55.400000      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:56.400672      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:57.400871      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:58.401133      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:42:59.401459      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:00.401710      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:01.402156      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:02.402971      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:03.403718      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:04.404220      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:05.404385      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:06.404628      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:07.404821      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:08.405418      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:09.405695      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:10.406188      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:11.407038      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:12.407080      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:13.408082      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:14.408774      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:15.408977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:16.409601      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:17.409776      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:18.410818      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:19.411017      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:20.411188      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:21.411708      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:22.412649      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:23.412934      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:24.413515      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:25.413857      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:26.414292      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:27.414485      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:28.414816      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:29.415010      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:30.415000      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:31.415701      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:32.415847      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:33.416177      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:34.416410      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:35.416713      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:36.417755      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:37.418494      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:38.418891      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:39.419088      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:40.419248      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:41.419519      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:42.419805      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:43.419964      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:44.420695      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:45.420920      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:46.421318      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:47.421488      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:48.422359      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:49.422559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:50.422943      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:51.423237      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:52.423558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:53.423725      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:54.424560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:55.424770      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:56.425228      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:57.425436      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:58.425686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:43:59.425876      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:00.426603      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:01.426852      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:02.426909      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:03.427125      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:04.427172      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:05.427356      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:06.427383      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:07.427583      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:08.428580      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:09.429575      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:10.430543      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:11.430651      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:12.431413      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:13.431729      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:14.432258      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:15.432429      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:16.432646      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:17.432989      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:18.433900      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:19.434136      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:20.435022      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:21.435361      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:22.435375      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:23.435568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:24.436391      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:25.436529      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:26.437168      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:27.437338      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:28.437535      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:29.437663      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:30.438261      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:31.438747      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:32.439066      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:33.439728      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:34.440124      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:35.440405      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:36.440669      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:37.440835      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:38.440896      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:39.441158      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:40.441968      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:41.442905      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:42.443585      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:43.443719      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:44.443725      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:45.443856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:46.444625      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:47.444774      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:48.445166      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:49.445377      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:50.446372      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:51.446671      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:52.447515      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:53.447743      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:54.448706      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:55.448877      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:56.448895      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:57.449115      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:58.449953      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:44:59.450135      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:00.450462      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:01.450633      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:02.451676      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:03.451987      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:04.452499      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:05.452717      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:06.453424      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:07.453686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:08.453762      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:09.453955      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:10.454965      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:11.455913      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:12.456483      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:13.456861      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:14.457132      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:15.457536      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:16.458386      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:17.458702      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:18.459489      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:19.459785      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:20.460680      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:21.460942      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:22.461818      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:23.462020      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:24.462227      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:25.462913      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:26.463829      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:27.464024      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:28.464558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:29.464921      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:30.465774      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:31.466029      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:32.466614      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:33.466652      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:34.467525      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:35.467914      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:36.468740      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:37.469069      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:38.469965      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:39.470391      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:40.471059      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:41.471369      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:42.471986      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:43.472157      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:44.472244      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:45.472582      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring no job exists by listing jobs explicitly @ 09/30/23 13:45:46.367
  STEP: Removing cronjob @ 09/30/23 13:45:46.37
  Sep 30 13:45:46.376: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-6760" for this suite. @ 09/30/23 13:45:46.381
â€¢ [300.058 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:167
  STEP: Creating a kubernetes client @ 09/30/23 13:45:46.389
  Sep 30 13:45:46.389: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:45:46.39
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:45:46.413
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:45:46.416
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 09/30/23 13:45:46.42
  E0930 13:45:46.472895      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:47.473092      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:48.474088      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:49.474253      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:45:50.441
  Sep 30 13:45:50.444: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-c5271f7a-63fd-401b-a6e2-8d26a41ec613 container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:45:50.468
  E0930 13:45:50.474357      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:45:50.482: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9137" for this suite. @ 09/30/23 13:45:50.486
â€¢ [4.104 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]
test/e2e/apimachinery/watch.go:257
  STEP: Creating a kubernetes client @ 09/30/23 13:45:50.494
  Sep 30 13:45:50.494: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename watch @ 09/30/23 13:45:50.495
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:45:50.508
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:45:50.512
  STEP: creating a watch on configmaps with a certain label @ 09/30/23 13:45:50.516
  STEP: creating a new configmap @ 09/30/23 13:45:50.517
  STEP: modifying the configmap once @ 09/30/23 13:45:50.522
  STEP: changing the label value of the configmap @ 09/30/23 13:45:50.531
  STEP: Expecting to observe a delete notification for the watched object @ 09/30/23 13:45:50.54
  Sep 30 13:45:50.540: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2364  fc17fc81-71fe-4eb2-a778-87da280685ae 36061 0 2023-09-30 13:45:50 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-09-30 13:45:50 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:45:50.540: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2364  fc17fc81-71fe-4eb2-a778-87da280685ae 36062 0 2023-09-30 13:45:50 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-09-30 13:45:50 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:45:50.540: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2364  fc17fc81-71fe-4eb2-a778-87da280685ae 36063 0 2023-09-30 13:45:50 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-09-30 13:45:50 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time @ 09/30/23 13:45:50.54
  STEP: Expecting not to observe a notification because the object no longer meets the selector's requirements @ 09/30/23 13:45:50.548
  E0930 13:45:51.474963      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:52.475127      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:53.475743      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:54.475997      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:55.476075      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:56.476613      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:57.476757      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:58.476911      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:45:59.477042      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:00.477609      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: changing the label value of the configmap back @ 09/30/23 13:46:00.548
  STEP: modifying the configmap a third time @ 09/30/23 13:46:00.558
  STEP: deleting the configmap @ 09/30/23 13:46:00.566
  STEP: Expecting to observe an add notification for the watched object when the label value was restored @ 09/30/23 13:46:00.573
  Sep 30 13:46:00.573: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2364  fc17fc81-71fe-4eb2-a778-87da280685ae 36100 0 2023-09-30 13:45:50 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-09-30 13:46:00 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:46:00.573: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2364  fc17fc81-71fe-4eb2-a778-87da280685ae 36101 0 2023-09-30 13:45:50 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-09-30 13:46:00 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:46:00.573: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2364  fc17fc81-71fe-4eb2-a778-87da280685ae 36102 0 2023-09-30 13:45:50 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-09-30 13:46:00 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Sep 30 13:46:00.573: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-2364" for this suite. @ 09/30/23 13:46:00.578
â€¢ [10.089 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:216
  STEP: Creating a kubernetes client @ 09/30/23 13:46:00.584
  Sep 30 13:46:00.584: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-runtime @ 09/30/23 13:46:00.585
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:46:00.599
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:46:00.603
  STEP: create the container @ 09/30/23 13:46:00.607
  W0930 13:46:00.615371      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Failed @ 09/30/23 13:46:00.615
  E0930 13:46:01.477734      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:02.477872      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:03.478419      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 09/30/23 13:46:03.634
  STEP: the container should be terminated @ 09/30/23 13:46:03.638
  STEP: the termination message should be set @ 09/30/23 13:46:03.638
  Sep 30 13:46:03.638: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 09/30/23 13:46:03.638
  Sep 30 13:46:03.651: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-6938" for this suite. @ 09/30/23 13:46:03.66
â€¢ [3.085 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]
test/e2e/common/storage/projected_combined.go:44
  STEP: Creating a kubernetes client @ 09/30/23 13:46:03.671
  Sep 30 13:46:03.671: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:46:03.672
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:46:03.685
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:46:03.688
  STEP: Creating configMap with name configmap-projected-all-test-volume-adfc56ac-1266-4c81-9668-acbd25078ca4 @ 09/30/23 13:46:03.693
  STEP: Creating secret with name secret-projected-all-test-volume-e467ca27-8f7d-441e-a786-487e7c3d7e2f @ 09/30/23 13:46:03.697
  STEP: Creating a pod to test Check all projections for projected volume plugin @ 09/30/23 13:46:03.703
  E0930 13:46:04.478705      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:05.479064      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:06.480141      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:07.480233      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:46:07.725
  Sep 30 13:46:07.729: INFO: Trying to get logs from node ip-172-31-31-30 pod projected-volume-ea62f913-2797-4daa-823a-8fbf0bfbd97e container projected-all-volume-test: <nil>
  STEP: delete the pod @ 09/30/23 13:46:07.736
  Sep 30 13:46:07.752: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4639" for this suite. @ 09/30/23 13:46:07.757
â€¢ [4.094 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:208
  STEP: Creating a kubernetes client @ 09/30/23 13:46:07.765
  Sep 30 13:46:07.765: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 13:46:07.765
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:46:07.779
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:46:07.784
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:46:07.788
  E0930 13:46:08.480373      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:09.480515      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:10.481309      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:11.481940      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:46:11.811
  Sep 30 13:46:11.815: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-6fde7c37-96b5-4fab-b864-72c3944d7e21 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:46:11.821
  Sep 30 13:46:11.838: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7640" for this suite. @ 09/30/23 13:46:11.843
â€¢ [4.086 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]
test/e2e/scheduling/preemption.go:224
  STEP: Creating a kubernetes client @ 09/30/23 13:46:11.852
  Sep 30 13:46:11.852: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename sched-preemption @ 09/30/23 13:46:11.852
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:46:11.867
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:46:11.87
  Sep 30 13:46:11.890: INFO: Waiting up to 1m0s for all nodes to be ready
  E0930 13:46:12.482638      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:13.482777      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:14.482893      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:15.483123      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:16.483173      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:17.486692      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:18.484119      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:19.484314      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:20.484639      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:21.484937      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:22.485271      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:23.485495      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:24.485558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:25.486645      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:26.486971      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:27.487728      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:28.488389      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:29.488587      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:30.489332      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:31.489854      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:32.489960      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:33.490030      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:34.490286      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:35.490478      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:36.490630      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:37.490858      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:38.491795      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:39.491994      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:40.492949      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:41.493311      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:42.493446      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:43.493621      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:44.494027      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:45.494087      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:46.494335      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:47.494542      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:48.494675      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:49.494856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:50.495626      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:51.495902      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:52.496983      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:53.497087      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:54.497320      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:55.497702      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:56.498435      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:57.498590      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:58.498656      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:46:59.498779      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:00.499718      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:01.499827      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:02.499868      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:03.499916      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:04.500942      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:05.501140      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:06.501276      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:07.501591      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:08.501681      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:09.501981      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:10.502274      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:11.502645      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:11.917: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 09/30/23 13:47:11.921
  Sep 30 13:47:11.940: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Sep 30 13:47:11.950: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Sep 30 13:47:11.963: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Sep 30 13:47:11.970: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  Sep 30 13:47:11.985: INFO: Created pod: pod2-0-sched-preemption-medium-priority
  Sep 30 13:47:11.991: INFO: Created pod: pod2-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 09/30/23 13:47:11.991
  E0930 13:47:12.503470      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:13.504131      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Run a critical pod that use same resources as that of a lower priority pod @ 09/30/23 13:47:14.021
  E0930 13:47:14.504970      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:15.505189      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:16.505913      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:17.506084      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:18.086: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-4074" for this suite. @ 09/30/23 13:47:18.14
â€¢ [66.297 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Service endpoints latency should not be very high  [Conformance]
test/e2e/network/service_latency.go:59
  STEP: Creating a kubernetes client @ 09/30/23 13:47:18.15
  Sep 30 13:47:18.150: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename svc-latency @ 09/30/23 13:47:18.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:47:18.162
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:47:18.166
  Sep 30 13:47:18.172: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: creating replication controller svc-latency-rc in namespace svc-latency-3096 @ 09/30/23 13:47:18.172
  I0930 13:47:18.179260      23 runners.go:197] Created replication controller with name: svc-latency-rc, namespace: svc-latency-3096, replica count: 1
  E0930 13:47:18.506417      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0930 13:47:19.230367      23 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  E0930 13:47:19.506889      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0930 13:47:20.231567      23 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Sep 30 13:47:20.342: INFO: Created: latency-svc-9xg9p
  Sep 30 13:47:20.359: INFO: Got endpoints: latency-svc-9xg9p [26.575262ms]
  Sep 30 13:47:20.370: INFO: Created: latency-svc-6gxnj
  Sep 30 13:47:20.376: INFO: Got endpoints: latency-svc-6gxnj [16.545021ms]
  Sep 30 13:47:20.378: INFO: Created: latency-svc-t9xgl
  Sep 30 13:47:20.382: INFO: Got endpoints: latency-svc-t9xgl [22.913648ms]
  Sep 30 13:47:20.385: INFO: Created: latency-svc-lz6mk
  Sep 30 13:47:20.391: INFO: Got endpoints: latency-svc-lz6mk [31.961718ms]
  Sep 30 13:47:20.392: INFO: Created: latency-svc-wz86c
  Sep 30 13:47:20.395: INFO: Got endpoints: latency-svc-wz86c [36.243669ms]
  Sep 30 13:47:20.398: INFO: Created: latency-svc-54m74
  Sep 30 13:47:20.402: INFO: Got endpoints: latency-svc-54m74 [43.162083ms]
  Sep 30 13:47:20.402: INFO: Created: latency-svc-nvlnk
  Sep 30 13:47:20.407: INFO: Got endpoints: latency-svc-nvlnk [48.021782ms]
  Sep 30 13:47:20.470: INFO: Created: latency-svc-jpxhz
  Sep 30 13:47:20.470: INFO: Created: latency-svc-hljlb
  Sep 30 13:47:20.472: INFO: Created: latency-svc-d6x6x
  Sep 30 13:47:20.472: INFO: Created: latency-svc-mpb5d
  Sep 30 13:47:20.473: INFO: Created: latency-svc-jhwj6
  Sep 30 13:47:20.473: INFO: Created: latency-svc-rkxcf
  Sep 30 13:47:20.475: INFO: Created: latency-svc-j9sx2
  Sep 30 13:47:20.475: INFO: Created: latency-svc-tfvjc
  Sep 30 13:47:20.475: INFO: Created: latency-svc-klg9p
  Sep 30 13:47:20.476: INFO: Created: latency-svc-qn6nt
  Sep 30 13:47:20.476: INFO: Created: latency-svc-r2twh
  Sep 30 13:47:20.476: INFO: Created: latency-svc-4d8h5
  Sep 30 13:47:20.476: INFO: Created: latency-svc-4rz2h
  Sep 30 13:47:20.476: INFO: Created: latency-svc-jcmpk
  Sep 30 13:47:20.476: INFO: Got endpoints: latency-svc-hljlb [116.959618ms]
  Sep 30 13:47:20.476: INFO: Created: latency-svc-sqcdn
  Sep 30 13:47:20.479: INFO: Got endpoints: latency-svc-jpxhz [71.868471ms]
  Sep 30 13:47:20.479: INFO: Got endpoints: latency-svc-mpb5d [120.344359ms]
  Sep 30 13:47:20.485: INFO: Got endpoints: latency-svc-rkxcf [93.753677ms]
  Sep 30 13:47:20.489: INFO: Got endpoints: latency-svc-d6x6x [129.572971ms]
  Sep 30 13:47:20.490: INFO: Got endpoints: latency-svc-r2twh [130.707684ms]
  Sep 30 13:47:20.490: INFO: Got endpoints: latency-svc-qn6nt [130.925717ms]
  Sep 30 13:47:20.493: INFO: Got endpoints: latency-svc-jhwj6 [134.112496ms]
  Sep 30 13:47:20.495: INFO: Got endpoints: latency-svc-4d8h5 [136.169021ms]
  Sep 30 13:47:20.497: INFO: Got endpoints: latency-svc-sqcdn [137.614688ms]
  Sep 30 13:47:20.497: INFO: Created: latency-svc-54smz
  Sep 30 13:47:20.497: INFO: Got endpoints: latency-svc-4rz2h [101.186027ms]
  Sep 30 13:47:20.499: INFO: Got endpoints: latency-svc-jcmpk [139.639703ms]
  Sep 30 13:47:20.502: INFO: Created: latency-svc-bfcqz
  Sep 30 13:47:20.503: INFO: Got endpoints: latency-svc-j9sx2 [121.25942ms]
  Sep 30 13:47:20.503: INFO: Got endpoints: latency-svc-tfvjc [127.838999ms]
  Sep 30 13:47:20.506: INFO: Got endpoints: latency-svc-klg9p [103.97532ms]
  Sep 30 13:47:20.506: INFO: Got endpoints: latency-svc-54smz [30.136725ms]
  E0930 13:47:20.506906      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:20.511: INFO: Got endpoints: latency-svc-bfcqz [31.41558ms]
  Sep 30 13:47:20.511: INFO: Created: latency-svc-qlg2f
  Sep 30 13:47:20.516: INFO: Got endpoints: latency-svc-qlg2f [37.13933ms]
  Sep 30 13:47:20.518: INFO: Created: latency-svc-ffzsz
  Sep 30 13:47:20.523: INFO: Got endpoints: latency-svc-ffzsz [38.184483ms]
  Sep 30 13:47:20.524: INFO: Created: latency-svc-9lvd2
  Sep 30 13:47:20.528: INFO: Created: latency-svc-jzqdp
  Sep 30 13:47:20.530: INFO: Got endpoints: latency-svc-9lvd2 [40.689253ms]
  Sep 30 13:47:20.536: INFO: Got endpoints: latency-svc-jzqdp [45.716264ms]
  Sep 30 13:47:20.537: INFO: Created: latency-svc-8xjh8
  Sep 30 13:47:20.540: INFO: Got endpoints: latency-svc-8xjh8 [49.360038ms]
  Sep 30 13:47:20.541: INFO: Created: latency-svc-tfvg5
  Sep 30 13:47:20.547: INFO: Got endpoints: latency-svc-tfvg5 [53.071103ms]
  Sep 30 13:47:20.549: INFO: Created: latency-svc-nrs6w
  Sep 30 13:47:20.555: INFO: Got endpoints: latency-svc-nrs6w [59.741784ms]
  Sep 30 13:47:20.556: INFO: Created: latency-svc-fvsdv
  Sep 30 13:47:20.562: INFO: Created: latency-svc-q9hmj
  Sep 30 13:47:20.563: INFO: Got endpoints: latency-svc-fvsdv [66.281984ms]
  Sep 30 13:47:20.571: INFO: Got endpoints: latency-svc-q9hmj [71.800271ms]
  Sep 30 13:47:20.571: INFO: Created: latency-svc-v8q54
  Sep 30 13:47:20.575: INFO: Got endpoints: latency-svc-v8q54 [78.032596ms]
  Sep 30 13:47:20.578: INFO: Created: latency-svc-qdhlp
  Sep 30 13:47:20.582: INFO: Created: latency-svc-ssj2j
  Sep 30 13:47:20.588: INFO: Created: latency-svc-mhljr
  Sep 30 13:47:20.592: INFO: Created: latency-svc-czfr9
  Sep 30 13:47:20.598: INFO: Got endpoints: latency-svc-qdhlp [94.359384ms]
  Sep 30 13:47:20.599: INFO: Created: latency-svc-djgxd
  Sep 30 13:47:20.604: INFO: Created: latency-svc-b7556
  Sep 30 13:47:20.609: INFO: Created: latency-svc-4g9ts
  Sep 30 13:47:20.614: INFO: Created: latency-svc-rsp76
  Sep 30 13:47:20.620: INFO: Created: latency-svc-4dcc6
  Sep 30 13:47:20.627: INFO: Created: latency-svc-tb2f4
  Sep 30 13:47:20.632: INFO: Created: latency-svc-f5t5r
  Sep 30 13:47:20.639: INFO: Created: latency-svc-22fl9
  Sep 30 13:47:20.644: INFO: Created: latency-svc-vn7ml
  Sep 30 13:47:20.647: INFO: Got endpoints: latency-svc-ssj2j [143.056214ms]
  Sep 30 13:47:20.650: INFO: Created: latency-svc-zv27d
  Sep 30 13:47:20.656: INFO: Created: latency-svc-h5j5c
  Sep 30 13:47:20.661: INFO: Created: latency-svc-6fj94
  Sep 30 13:47:20.665: INFO: Created: latency-svc-7sgrj
  Sep 30 13:47:20.697: INFO: Got endpoints: latency-svc-mhljr [190.457809ms]
  Sep 30 13:47:20.706: INFO: Created: latency-svc-rgntd
  Sep 30 13:47:20.746: INFO: Got endpoints: latency-svc-czfr9 [239.877108ms]
  Sep 30 13:47:20.757: INFO: Created: latency-svc-ckwrp
  Sep 30 13:47:20.799: INFO: Got endpoints: latency-svc-djgxd [288.578798ms]
  Sep 30 13:47:20.808: INFO: Created: latency-svc-c8gz2
  Sep 30 13:47:20.847: INFO: Got endpoints: latency-svc-b7556 [330.665529ms]
  Sep 30 13:47:20.857: INFO: Created: latency-svc-nqbf7
  Sep 30 13:47:20.898: INFO: Got endpoints: latency-svc-4g9ts [374.43786ms]
  Sep 30 13:47:20.907: INFO: Created: latency-svc-5z255
  Sep 30 13:47:20.947: INFO: Got endpoints: latency-svc-rsp76 [417.806595ms]
  Sep 30 13:47:20.958: INFO: Created: latency-svc-xmdtr
  Sep 30 13:47:20.996: INFO: Got endpoints: latency-svc-4dcc6 [460.449492ms]
  Sep 30 13:47:21.006: INFO: Created: latency-svc-6fcw9
  Sep 30 13:47:21.047: INFO: Got endpoints: latency-svc-tb2f4 [506.897786ms]
  Sep 30 13:47:21.057: INFO: Created: latency-svc-qspgr
  Sep 30 13:47:21.098: INFO: Got endpoints: latency-svc-f5t5r [551.456306ms]
  Sep 30 13:47:21.107: INFO: Created: latency-svc-ljhkv
  Sep 30 13:47:21.148: INFO: Got endpoints: latency-svc-22fl9 [592.737727ms]
  Sep 30 13:47:21.157: INFO: Created: latency-svc-gt49w
  Sep 30 13:47:21.197: INFO: Got endpoints: latency-svc-vn7ml [633.986716ms]
  Sep 30 13:47:21.207: INFO: Created: latency-svc-2bjvf
  Sep 30 13:47:21.247: INFO: Got endpoints: latency-svc-zv27d [676.017366ms]
  Sep 30 13:47:21.257: INFO: Created: latency-svc-pslr6
  Sep 30 13:47:21.298: INFO: Got endpoints: latency-svc-h5j5c [722.702133ms]
  Sep 30 13:47:21.307: INFO: Created: latency-svc-8748v
  Sep 30 13:47:21.346: INFO: Got endpoints: latency-svc-6fj94 [748.278652ms]
  Sep 30 13:47:21.357: INFO: Created: latency-svc-gpmg2
  Sep 30 13:47:21.398: INFO: Got endpoints: latency-svc-7sgrj [751.011625ms]
  Sep 30 13:47:21.407: INFO: Created: latency-svc-5t9ht
  Sep 30 13:47:21.447: INFO: Got endpoints: latency-svc-rgntd [749.876112ms]
  Sep 30 13:47:21.457: INFO: Created: latency-svc-7m4zf
  Sep 30 13:47:21.499: INFO: Got endpoints: latency-svc-ckwrp [752.897038ms]
  E0930 13:47:21.507856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:21.510: INFO: Created: latency-svc-jg7nb
  Sep 30 13:47:21.545: INFO: Got endpoints: latency-svc-c8gz2 [746.162196ms]
  Sep 30 13:47:21.555: INFO: Created: latency-svc-trvrd
  Sep 30 13:47:21.597: INFO: Got endpoints: latency-svc-nqbf7 [749.642099ms]
  Sep 30 13:47:21.611: INFO: Created: latency-svc-nl8w5
  Sep 30 13:47:21.647: INFO: Got endpoints: latency-svc-5z255 [749.122922ms]
  Sep 30 13:47:21.657: INFO: Created: latency-svc-9vndm
  Sep 30 13:47:21.697: INFO: Got endpoints: latency-svc-xmdtr [749.68396ms]
  Sep 30 13:47:21.708: INFO: Created: latency-svc-fzl9c
  Sep 30 13:47:21.748: INFO: Got endpoints: latency-svc-6fcw9 [751.175097ms]
  Sep 30 13:47:21.759: INFO: Created: latency-svc-mxn68
  Sep 30 13:47:21.798: INFO: Got endpoints: latency-svc-qspgr [751.119766ms]
  Sep 30 13:47:21.809: INFO: Created: latency-svc-4spck
  Sep 30 13:47:21.847: INFO: Got endpoints: latency-svc-ljhkv [748.382464ms]
  Sep 30 13:47:21.856: INFO: Created: latency-svc-mjh4w
  Sep 30 13:47:21.897: INFO: Got endpoints: latency-svc-gt49w [748.810059ms]
  Sep 30 13:47:21.908: INFO: Created: latency-svc-qv642
  Sep 30 13:47:21.948: INFO: Got endpoints: latency-svc-2bjvf [751.030265ms]
  Sep 30 13:47:21.958: INFO: Created: latency-svc-k7kgz
  Sep 30 13:47:21.998: INFO: Got endpoints: latency-svc-pslr6 [750.976885ms]
  Sep 30 13:47:22.008: INFO: Created: latency-svc-mgd8v
  Sep 30 13:47:22.047: INFO: Got endpoints: latency-svc-8748v [749.052651ms]
  Sep 30 13:47:22.057: INFO: Created: latency-svc-kqsmg
  Sep 30 13:47:22.096: INFO: Got endpoints: latency-svc-gpmg2 [750.005493ms]
  Sep 30 13:47:22.107: INFO: Created: latency-svc-z8w9p
  Sep 30 13:47:22.147: INFO: Got endpoints: latency-svc-5t9ht [749.623769ms]
  Sep 30 13:47:22.156: INFO: Created: latency-svc-62xtz
  Sep 30 13:47:22.198: INFO: Got endpoints: latency-svc-7m4zf [751.39251ms]
  Sep 30 13:47:22.209: INFO: Created: latency-svc-58knk
  Sep 30 13:47:22.247: INFO: Got endpoints: latency-svc-jg7nb [747.217599ms]
  Sep 30 13:47:22.257: INFO: Created: latency-svc-nlgd6
  Sep 30 13:47:22.298: INFO: Got endpoints: latency-svc-trvrd [752.107989ms]
  Sep 30 13:47:22.307: INFO: Created: latency-svc-jbrp4
  Sep 30 13:47:22.346: INFO: Got endpoints: latency-svc-nl8w5 [749.172173ms]
  Sep 30 13:47:22.356: INFO: Created: latency-svc-s2mfr
  Sep 30 13:47:22.399: INFO: Got endpoints: latency-svc-9vndm [751.894276ms]
  Sep 30 13:47:22.410: INFO: Created: latency-svc-w6xhw
  Sep 30 13:47:22.447: INFO: Got endpoints: latency-svc-fzl9c [750.151675ms]
  Sep 30 13:47:22.457: INFO: Created: latency-svc-5dhns
  Sep 30 13:47:22.497: INFO: Got endpoints: latency-svc-mxn68 [749.215243ms]
  Sep 30 13:47:22.507: INFO: Created: latency-svc-hc8vs
  E0930 13:47:22.508445      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:22.547: INFO: Got endpoints: latency-svc-4spck [749.375806ms]
  Sep 30 13:47:22.561: INFO: Created: latency-svc-5q5l2
  Sep 30 13:47:22.597: INFO: Got endpoints: latency-svc-mjh4w [750.684801ms]
  Sep 30 13:47:22.606: INFO: Created: latency-svc-bfr47
  Sep 30 13:47:22.647: INFO: Got endpoints: latency-svc-qv642 [750.303717ms]
  Sep 30 13:47:22.658: INFO: Created: latency-svc-v89qq
  Sep 30 13:47:22.697: INFO: Got endpoints: latency-svc-k7kgz [748.694327ms]
  Sep 30 13:47:22.708: INFO: Created: latency-svc-p5wrk
  Sep 30 13:47:22.746: INFO: Got endpoints: latency-svc-mgd8v [748.286762ms]
  Sep 30 13:47:22.755: INFO: Created: latency-svc-kr45r
  Sep 30 13:47:22.797: INFO: Got endpoints: latency-svc-kqsmg [749.682659ms]
  Sep 30 13:47:22.807: INFO: Created: latency-svc-wttgx
  Sep 30 13:47:22.848: INFO: Got endpoints: latency-svc-z8w9p [751.492681ms]
  Sep 30 13:47:22.860: INFO: Created: latency-svc-vdkfl
  Sep 30 13:47:22.897: INFO: Got endpoints: latency-svc-62xtz [749.932663ms]
  Sep 30 13:47:22.907: INFO: Created: latency-svc-778qj
  Sep 30 13:47:22.947: INFO: Got endpoints: latency-svc-58knk [748.527906ms]
  Sep 30 13:47:22.958: INFO: Created: latency-svc-9t594
  Sep 30 13:47:22.997: INFO: Got endpoints: latency-svc-nlgd6 [750.233816ms]
  Sep 30 13:47:23.008: INFO: Created: latency-svc-q8ttv
  Sep 30 13:47:23.048: INFO: Got endpoints: latency-svc-jbrp4 [749.866881ms]
  Sep 30 13:47:23.057: INFO: Created: latency-svc-qt8zw
  Sep 30 13:47:23.098: INFO: Got endpoints: latency-svc-s2mfr [751.253258ms]
  Sep 30 13:47:23.108: INFO: Created: latency-svc-njfwd
  Sep 30 13:47:23.149: INFO: Got endpoints: latency-svc-w6xhw [750.220835ms]
  Sep 30 13:47:23.160: INFO: Created: latency-svc-ndgsl
  Sep 30 13:47:23.199: INFO: Got endpoints: latency-svc-5dhns [751.928337ms]
  Sep 30 13:47:23.209: INFO: Created: latency-svc-nfhx4
  Sep 30 13:47:23.247: INFO: Got endpoints: latency-svc-hc8vs [750.322848ms]
  Sep 30 13:47:23.259: INFO: Created: latency-svc-b25mq
  Sep 30 13:47:23.296: INFO: Got endpoints: latency-svc-5q5l2 [748.642827ms]
  Sep 30 13:47:23.307: INFO: Created: latency-svc-rvpjl
  Sep 30 13:47:23.348: INFO: Got endpoints: latency-svc-bfr47 [751.133597ms]
  Sep 30 13:47:23.359: INFO: Created: latency-svc-ssjqn
  Sep 30 13:47:23.397: INFO: Got endpoints: latency-svc-v89qq [750.050044ms]
  Sep 30 13:47:23.407: INFO: Created: latency-svc-gzfjx
  Sep 30 13:47:23.448: INFO: Got endpoints: latency-svc-p5wrk [750.928414ms]
  Sep 30 13:47:23.459: INFO: Created: latency-svc-ng7tn
  Sep 30 13:47:23.498: INFO: Got endpoints: latency-svc-kr45r [751.979098ms]
  E0930 13:47:23.508655      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:23.510: INFO: Created: latency-svc-cn7k5
  Sep 30 13:47:23.546: INFO: Got endpoints: latency-svc-wttgx [749.521237ms]
  Sep 30 13:47:23.558: INFO: Created: latency-svc-5wpjp
  Sep 30 13:47:23.596: INFO: Got endpoints: latency-svc-vdkfl [748.524395ms]
  Sep 30 13:47:23.609: INFO: Created: latency-svc-ncd2t
  Sep 30 13:47:23.646: INFO: Got endpoints: latency-svc-778qj [748.409784ms]
  Sep 30 13:47:23.659: INFO: Created: latency-svc-qc42r
  Sep 30 13:47:23.701: INFO: Got endpoints: latency-svc-9t594 [754.007692ms]
  Sep 30 13:47:23.713: INFO: Created: latency-svc-f5ndh
  Sep 30 13:47:23.746: INFO: Got endpoints: latency-svc-q8ttv [748.802168ms]
  Sep 30 13:47:23.756: INFO: Created: latency-svc-x4z6k
  Sep 30 13:47:23.798: INFO: Got endpoints: latency-svc-qt8zw [749.984353ms]
  Sep 30 13:47:23.808: INFO: Created: latency-svc-vmq5q
  Sep 30 13:47:23.848: INFO: Got endpoints: latency-svc-njfwd [750.54852ms]
  Sep 30 13:47:23.857: INFO: Created: latency-svc-bcb82
  Sep 30 13:47:23.898: INFO: Got endpoints: latency-svc-ndgsl [748.416394ms]
  Sep 30 13:47:23.908: INFO: Created: latency-svc-n4mhs
  Sep 30 13:47:23.950: INFO: Got endpoints: latency-svc-nfhx4 [750.452429ms]
  Sep 30 13:47:23.962: INFO: Created: latency-svc-df5xt
  Sep 30 13:47:23.996: INFO: Got endpoints: latency-svc-b25mq [748.92486ms]
  Sep 30 13:47:24.006: INFO: Created: latency-svc-mlqdx
  Sep 30 13:47:24.048: INFO: Got endpoints: latency-svc-rvpjl [751.562741ms]
  Sep 30 13:47:24.058: INFO: Created: latency-svc-gz86l
  Sep 30 13:47:24.097: INFO: Got endpoints: latency-svc-ssjqn [748.87639ms]
  Sep 30 13:47:24.107: INFO: Created: latency-svc-f2rp9
  Sep 30 13:47:24.147: INFO: Got endpoints: latency-svc-gzfjx [749.454786ms]
  Sep 30 13:47:24.157: INFO: Created: latency-svc-4qn4b
  Sep 30 13:47:24.199: INFO: Got endpoints: latency-svc-ng7tn [750.479579ms]
  Sep 30 13:47:24.208: INFO: Created: latency-svc-knd8r
  Sep 30 13:47:24.248: INFO: Got endpoints: latency-svc-cn7k5 [749.836301ms]
  Sep 30 13:47:24.259: INFO: Created: latency-svc-mz564
  Sep 30 13:47:24.296: INFO: Got endpoints: latency-svc-5wpjp [750.037684ms]
  Sep 30 13:47:24.306: INFO: Created: latency-svc-jczmp
  Sep 30 13:47:24.347: INFO: Got endpoints: latency-svc-ncd2t [751.002755ms]
  Sep 30 13:47:24.359: INFO: Created: latency-svc-l87qq
  Sep 30 13:47:24.396: INFO: Got endpoints: latency-svc-qc42r [750.59595ms]
  Sep 30 13:47:24.407: INFO: Created: latency-svc-hm28n
  Sep 30 13:47:24.449: INFO: Got endpoints: latency-svc-f5ndh [747.835477ms]
  Sep 30 13:47:24.458: INFO: Created: latency-svc-7s269
  Sep 30 13:47:24.498: INFO: Got endpoints: latency-svc-x4z6k [752.159ms]
  Sep 30 13:47:24.507: INFO: Created: latency-svc-rhsjz
  E0930 13:47:24.509048      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:24.547: INFO: Got endpoints: latency-svc-vmq5q [749.644669ms]
  Sep 30 13:47:24.558: INFO: Created: latency-svc-4zdh4
  Sep 30 13:47:24.598: INFO: Got endpoints: latency-svc-bcb82 [749.70555ms]
  Sep 30 13:47:24.608: INFO: Created: latency-svc-4nvzs
  Sep 30 13:47:24.647: INFO: Got endpoints: latency-svc-n4mhs [749.273804ms]
  Sep 30 13:47:24.656: INFO: Created: latency-svc-q8wg4
  Sep 30 13:47:24.697: INFO: Got endpoints: latency-svc-df5xt [746.704003ms]
  Sep 30 13:47:24.708: INFO: Created: latency-svc-vzshp
  Sep 30 13:47:24.747: INFO: Got endpoints: latency-svc-mlqdx [750.472039ms]
  Sep 30 13:47:24.757: INFO: Created: latency-svc-z9m6b
  Sep 30 13:47:24.797: INFO: Got endpoints: latency-svc-gz86l [748.96754ms]
  Sep 30 13:47:24.806: INFO: Created: latency-svc-8m2rh
  Sep 30 13:47:24.847: INFO: Got endpoints: latency-svc-f2rp9 [749.168883ms]
  Sep 30 13:47:24.857: INFO: Created: latency-svc-p42rg
  Sep 30 13:47:24.898: INFO: Got endpoints: latency-svc-4qn4b [751.144427ms]
  Sep 30 13:47:24.908: INFO: Created: latency-svc-mbc4r
  Sep 30 13:47:24.947: INFO: Got endpoints: latency-svc-knd8r [747.907768ms]
  Sep 30 13:47:24.959: INFO: Created: latency-svc-krz8j
  Sep 30 13:47:24.996: INFO: Got endpoints: latency-svc-mz564 [748.365703ms]
  Sep 30 13:47:25.007: INFO: Created: latency-svc-vwgxf
  Sep 30 13:47:25.046: INFO: Got endpoints: latency-svc-jczmp [749.896802ms]
  Sep 30 13:47:25.056: INFO: Created: latency-svc-f9pgx
  Sep 30 13:47:25.098: INFO: Got endpoints: latency-svc-l87qq [750.62326ms]
  Sep 30 13:47:25.107: INFO: Created: latency-svc-wzs9g
  Sep 30 13:47:25.148: INFO: Got endpoints: latency-svc-hm28n [751.290499ms]
  Sep 30 13:47:25.159: INFO: Created: latency-svc-h2wzs
  Sep 30 13:47:25.199: INFO: Got endpoints: latency-svc-7s269 [749.7403ms]
  Sep 30 13:47:25.208: INFO: Created: latency-svc-fjsqq
  Sep 30 13:47:25.246: INFO: Got endpoints: latency-svc-rhsjz [747.762726ms]
  Sep 30 13:47:25.257: INFO: Created: latency-svc-2qxt7
  Sep 30 13:47:25.298: INFO: Got endpoints: latency-svc-4zdh4 [750.685251ms]
  Sep 30 13:47:25.308: INFO: Created: latency-svc-8lqb5
  Sep 30 13:47:25.348: INFO: Got endpoints: latency-svc-4nvzs [749.951252ms]
  Sep 30 13:47:25.358: INFO: Created: latency-svc-vstqg
  Sep 30 13:47:25.400: INFO: Got endpoints: latency-svc-q8wg4 [752.981229ms]
  Sep 30 13:47:25.410: INFO: Created: latency-svc-d9dw4
  Sep 30 13:47:25.449: INFO: Got endpoints: latency-svc-vzshp [752.152989ms]
  Sep 30 13:47:25.460: INFO: Created: latency-svc-b56z9
  Sep 30 13:47:25.497: INFO: Got endpoints: latency-svc-z9m6b [749.654509ms]
  Sep 30 13:47:25.508: INFO: Created: latency-svc-x7cvc
  E0930 13:47:25.510111      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:25.546: INFO: Got endpoints: latency-svc-8m2rh [749.746859ms]
  Sep 30 13:47:25.556: INFO: Created: latency-svc-6s9ln
  Sep 30 13:47:25.598: INFO: Got endpoints: latency-svc-p42rg [750.989616ms]
  Sep 30 13:47:25.608: INFO: Created: latency-svc-hn96m
  Sep 30 13:47:25.648: INFO: Got endpoints: latency-svc-mbc4r [749.323015ms]
  Sep 30 13:47:25.657: INFO: Created: latency-svc-mm7dv
  Sep 30 13:47:25.698: INFO: Got endpoints: latency-svc-krz8j [751.525602ms]
  Sep 30 13:47:25.709: INFO: Created: latency-svc-tz9fb
  Sep 30 13:47:25.747: INFO: Got endpoints: latency-svc-vwgxf [750.356028ms]
  Sep 30 13:47:25.763: INFO: Created: latency-svc-52882
  Sep 30 13:47:25.797: INFO: Got endpoints: latency-svc-f9pgx [750.542469ms]
  Sep 30 13:47:25.808: INFO: Created: latency-svc-djkvw
  Sep 30 13:47:25.848: INFO: Got endpoints: latency-svc-wzs9g [749.7647ms]
  Sep 30 13:47:25.858: INFO: Created: latency-svc-2f48h
  Sep 30 13:47:25.898: INFO: Got endpoints: latency-svc-h2wzs [750.370568ms]
  Sep 30 13:47:25.909: INFO: Created: latency-svc-tnzgt
  Sep 30 13:47:25.946: INFO: Got endpoints: latency-svc-fjsqq [747.489952ms]
  Sep 30 13:47:25.957: INFO: Created: latency-svc-s2s9z
  Sep 30 13:47:25.996: INFO: Got endpoints: latency-svc-2qxt7 [749.954663ms]
  Sep 30 13:47:26.006: INFO: Created: latency-svc-5k92v
  Sep 30 13:47:26.047: INFO: Got endpoints: latency-svc-8lqb5 [749.280085ms]
  Sep 30 13:47:26.058: INFO: Created: latency-svc-g54q7
  Sep 30 13:47:26.098: INFO: Got endpoints: latency-svc-vstqg [749.540858ms]
  Sep 30 13:47:26.107: INFO: Created: latency-svc-9mlm9
  Sep 30 13:47:26.147: INFO: Got endpoints: latency-svc-d9dw4 [746.892555ms]
  Sep 30 13:47:26.157: INFO: Created: latency-svc-wj54q
  Sep 30 13:47:26.197: INFO: Got endpoints: latency-svc-b56z9 [747.561573ms]
  Sep 30 13:47:26.207: INFO: Created: latency-svc-vpt4v
  Sep 30 13:47:26.246: INFO: Got endpoints: latency-svc-x7cvc [748.962811ms]
  Sep 30 13:47:26.255: INFO: Created: latency-svc-97x2n
  Sep 30 13:47:26.297: INFO: Got endpoints: latency-svc-6s9ln [751.145677ms]
  Sep 30 13:47:26.307: INFO: Created: latency-svc-bk9pv
  Sep 30 13:47:26.347: INFO: Got endpoints: latency-svc-hn96m [749.567408ms]
  Sep 30 13:47:26.358: INFO: Created: latency-svc-f9zbd
  Sep 30 13:47:26.396: INFO: Got endpoints: latency-svc-mm7dv [748.400254ms]
  Sep 30 13:47:26.407: INFO: Created: latency-svc-c4g4p
  Sep 30 13:47:26.446: INFO: Got endpoints: latency-svc-tz9fb [747.458722ms]
  Sep 30 13:47:26.455: INFO: Created: latency-svc-6xxw8
  Sep 30 13:47:26.498: INFO: Got endpoints: latency-svc-52882 [750.929234ms]
  Sep 30 13:47:26.507: INFO: Created: latency-svc-6bqq6
  E0930 13:47:26.510965      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:26.547: INFO: Got endpoints: latency-svc-djkvw [750.164955ms]
  Sep 30 13:47:26.557: INFO: Created: latency-svc-qzsfc
  Sep 30 13:47:26.598: INFO: Got endpoints: latency-svc-2f48h [749.924871ms]
  Sep 30 13:47:26.608: INFO: Created: latency-svc-mqwnc
  Sep 30 13:47:26.646: INFO: Got endpoints: latency-svc-tnzgt [747.922257ms]
  Sep 30 13:47:26.657: INFO: Created: latency-svc-xr8f2
  Sep 30 13:47:26.696: INFO: Got endpoints: latency-svc-s2s9z [750.108654ms]
  Sep 30 13:47:26.706: INFO: Created: latency-svc-6vfz7
  Sep 30 13:47:26.747: INFO: Got endpoints: latency-svc-5k92v [750.449158ms]
  Sep 30 13:47:26.757: INFO: Created: latency-svc-mcvkg
  Sep 30 13:47:26.798: INFO: Got endpoints: latency-svc-g54q7 [750.441278ms]
  Sep 30 13:47:26.808: INFO: Created: latency-svc-9chmr
  Sep 30 13:47:26.850: INFO: Got endpoints: latency-svc-9mlm9 [752.28882ms]
  Sep 30 13:47:26.859: INFO: Created: latency-svc-qgvf4
  Sep 30 13:47:26.896: INFO: Got endpoints: latency-svc-wj54q [749.187762ms]
  Sep 30 13:47:26.908: INFO: Created: latency-svc-f6rxr
  Sep 30 13:47:26.946: INFO: Got endpoints: latency-svc-vpt4v [749.540347ms]
  Sep 30 13:47:26.956: INFO: Created: latency-svc-tqmrs
  Sep 30 13:47:26.996: INFO: Got endpoints: latency-svc-97x2n [750.720072ms]
  Sep 30 13:47:27.006: INFO: Created: latency-svc-sr6v9
  Sep 30 13:47:27.048: INFO: Got endpoints: latency-svc-bk9pv [750.794233ms]
  Sep 30 13:47:27.058: INFO: Created: latency-svc-84dzt
  Sep 30 13:47:27.097: INFO: Got endpoints: latency-svc-f9zbd [750.017843ms]
  Sep 30 13:47:27.109: INFO: Created: latency-svc-k5zsc
  Sep 30 13:47:27.147: INFO: Got endpoints: latency-svc-c4g4p [750.782213ms]
  Sep 30 13:47:27.157: INFO: Created: latency-svc-tvzh4
  Sep 30 13:47:27.196: INFO: Got endpoints: latency-svc-6xxw8 [750.536119ms]
  Sep 30 13:47:27.207: INFO: Created: latency-svc-wfhrd
  Sep 30 13:47:27.246: INFO: Got endpoints: latency-svc-6bqq6 [748.571485ms]
  Sep 30 13:47:27.257: INFO: Created: latency-svc-485cr
  Sep 30 13:47:27.298: INFO: Got endpoints: latency-svc-qzsfc [750.747532ms]
  Sep 30 13:47:27.309: INFO: Created: latency-svc-ztfsx
  Sep 30 13:47:27.348: INFO: Got endpoints: latency-svc-mqwnc [750.372327ms]
  Sep 30 13:47:27.358: INFO: Created: latency-svc-gqtmc
  Sep 30 13:47:27.397: INFO: Got endpoints: latency-svc-xr8f2 [751.145368ms]
  Sep 30 13:47:27.410: INFO: Created: latency-svc-lsv7l
  Sep 30 13:47:27.448: INFO: Got endpoints: latency-svc-6vfz7 [751.314638ms]
  Sep 30 13:47:27.459: INFO: Created: latency-svc-ns9v4
  Sep 30 13:47:27.498: INFO: Got endpoints: latency-svc-mcvkg [751.688434ms]
  Sep 30 13:47:27.510: INFO: Created: latency-svc-k6b8g
  E0930 13:47:27.510980      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:27.551: INFO: Got endpoints: latency-svc-9chmr [752.679975ms]
  Sep 30 13:47:27.562: INFO: Created: latency-svc-s7brh
  Sep 30 13:47:27.598: INFO: Got endpoints: latency-svc-qgvf4 [748.524605ms]
  Sep 30 13:47:27.609: INFO: Created: latency-svc-gs9qg
  Sep 30 13:47:27.649: INFO: Got endpoints: latency-svc-f6rxr [753.185992ms]
  Sep 30 13:47:27.660: INFO: Created: latency-svc-7mkqg
  Sep 30 13:47:27.697: INFO: Got endpoints: latency-svc-tqmrs [751.151856ms]
  Sep 30 13:47:27.710: INFO: Created: latency-svc-xgwq8
  Sep 30 13:47:27.751: INFO: Got endpoints: latency-svc-sr6v9 [754.276305ms]
  Sep 30 13:47:27.760: INFO: Created: latency-svc-r6kts
  Sep 30 13:47:27.797: INFO: Got endpoints: latency-svc-84dzt [748.972501ms]
  Sep 30 13:47:27.807: INFO: Created: latency-svc-z2lj8
  Sep 30 13:47:27.848: INFO: Got endpoints: latency-svc-k5zsc [750.299676ms]
  Sep 30 13:47:27.857: INFO: Created: latency-svc-wnl7x
  Sep 30 13:47:27.896: INFO: Got endpoints: latency-svc-tvzh4 [749.460336ms]
  Sep 30 13:47:27.907: INFO: Created: latency-svc-vsqtq
  Sep 30 13:47:27.949: INFO: Got endpoints: latency-svc-wfhrd [752.667406ms]
  Sep 30 13:47:27.962: INFO: Created: latency-svc-pmtkv
  Sep 30 13:47:27.997: INFO: Got endpoints: latency-svc-485cr [750.998695ms]
  Sep 30 13:47:28.008: INFO: Created: latency-svc-lx25f
  Sep 30 13:47:28.047: INFO: Got endpoints: latency-svc-ztfsx [749.210864ms]
  Sep 30 13:47:28.056: INFO: Created: latency-svc-p4hbb
  Sep 30 13:47:28.105: INFO: Got endpoints: latency-svc-gqtmc [756.312019ms]
  Sep 30 13:47:28.115: INFO: Created: latency-svc-wdnls
  Sep 30 13:47:28.147: INFO: Got endpoints: latency-svc-lsv7l [749.941662ms]
  Sep 30 13:47:28.159: INFO: Created: latency-svc-cxjj6
  Sep 30 13:47:28.196: INFO: Got endpoints: latency-svc-ns9v4 [748.747758ms]
  Sep 30 13:47:28.248: INFO: Got endpoints: latency-svc-k6b8g [749.338615ms]
  Sep 30 13:47:28.296: INFO: Got endpoints: latency-svc-s7brh [745.367626ms]
  Sep 30 13:47:28.347: INFO: Got endpoints: latency-svc-gs9qg [748.658667ms]
  Sep 30 13:47:28.397: INFO: Got endpoints: latency-svc-7mkqg [747.639004ms]
  Sep 30 13:47:28.448: INFO: Got endpoints: latency-svc-xgwq8 [750.729012ms]
  Sep 30 13:47:28.497: INFO: Got endpoints: latency-svc-r6kts [746.381719ms]
  E0930 13:47:28.511709      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:28.548: INFO: Got endpoints: latency-svc-z2lj8 [750.162454ms]
  Sep 30 13:47:28.596: INFO: Got endpoints: latency-svc-wnl7x [748.580845ms]
  Sep 30 13:47:28.647: INFO: Got endpoints: latency-svc-vsqtq [750.364488ms]
  Sep 30 13:47:28.697: INFO: Got endpoints: latency-svc-pmtkv [747.742295ms]
  Sep 30 13:47:28.749: INFO: Got endpoints: latency-svc-lx25f [751.187758ms]
  Sep 30 13:47:28.796: INFO: Got endpoints: latency-svc-p4hbb [748.557505ms]
  Sep 30 13:47:28.848: INFO: Got endpoints: latency-svc-wdnls [743.054289ms]
  Sep 30 13:47:28.897: INFO: Got endpoints: latency-svc-cxjj6 [749.407205ms]
  Sep 30 13:47:28.897: INFO: Latencies: [16.545021ms 22.913648ms 30.136725ms 31.41558ms 31.961718ms 36.243669ms 37.13933ms 38.184483ms 40.689253ms 43.162083ms 45.716264ms 48.021782ms 49.360038ms 53.071103ms 59.741784ms 66.281984ms 71.800271ms 71.868471ms 78.032596ms 93.753677ms 94.359384ms 101.186027ms 103.97532ms 116.959618ms 120.344359ms 121.25942ms 127.838999ms 129.572971ms 130.707684ms 130.925717ms 134.112496ms 136.169021ms 137.614688ms 139.639703ms 143.056214ms 190.457809ms 239.877108ms 288.578798ms 330.665529ms 374.43786ms 417.806595ms 460.449492ms 506.897786ms 551.456306ms 592.737727ms 633.986716ms 676.017366ms 722.702133ms 743.054289ms 745.367626ms 746.162196ms 746.381719ms 746.704003ms 746.892555ms 747.217599ms 747.458722ms 747.489952ms 747.561573ms 747.639004ms 747.742295ms 747.762726ms 747.835477ms 747.907768ms 747.922257ms 748.278652ms 748.286762ms 748.365703ms 748.382464ms 748.400254ms 748.409784ms 748.416394ms 748.524395ms 748.524605ms 748.527906ms 748.557505ms 748.571485ms 748.580845ms 748.642827ms 748.658667ms 748.694327ms 748.747758ms 748.802168ms 748.810059ms 748.87639ms 748.92486ms 748.962811ms 748.96754ms 748.972501ms 749.052651ms 749.122922ms 749.168883ms 749.172173ms 749.187762ms 749.210864ms 749.215243ms 749.273804ms 749.280085ms 749.323015ms 749.338615ms 749.375806ms 749.407205ms 749.454786ms 749.460336ms 749.521237ms 749.540347ms 749.540858ms 749.567408ms 749.623769ms 749.642099ms 749.644669ms 749.654509ms 749.682659ms 749.68396ms 749.70555ms 749.7403ms 749.746859ms 749.7647ms 749.836301ms 749.866881ms 749.876112ms 749.896802ms 749.924871ms 749.932663ms 749.941662ms 749.951252ms 749.954663ms 749.984353ms 750.005493ms 750.017843ms 750.037684ms 750.050044ms 750.108654ms 750.151675ms 750.162454ms 750.164955ms 750.220835ms 750.233816ms 750.299676ms 750.303717ms 750.322848ms 750.356028ms 750.364488ms 750.370568ms 750.372327ms 750.441278ms 750.449158ms 750.452429ms 750.472039ms 750.479579ms 750.536119ms 750.542469ms 750.54852ms 750.59595ms 750.62326ms 750.684801ms 750.685251ms 750.720072ms 750.729012ms 750.747532ms 750.782213ms 750.794233ms 750.928414ms 750.929234ms 750.976885ms 750.989616ms 750.998695ms 751.002755ms 751.011625ms 751.030265ms 751.119766ms 751.133597ms 751.144427ms 751.145368ms 751.145677ms 751.151856ms 751.175097ms 751.187758ms 751.253258ms 751.290499ms 751.314638ms 751.39251ms 751.492681ms 751.525602ms 751.562741ms 751.688434ms 751.894276ms 751.928337ms 751.979098ms 752.107989ms 752.152989ms 752.159ms 752.28882ms 752.667406ms 752.679975ms 752.897038ms 752.981229ms 753.185992ms 754.007692ms 754.276305ms 756.312019ms]
  Sep 30 13:47:28.897: INFO: 50 %ile: 749.407205ms
  Sep 30 13:47:28.897: INFO: 90 %ile: 751.39251ms
  Sep 30 13:47:28.897: INFO: 99 %ile: 754.276305ms
  Sep 30 13:47:28.897: INFO: Total sample count: 200
  Sep 30 13:47:28.897: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svc-latency-3096" for this suite. @ 09/30/23 13:47:28.903
â€¢ [10.761 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:609
  STEP: Creating a kubernetes client @ 09/30/23 13:47:28.912
  Sep 30 13:47:28.912: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename security-context-test @ 09/30/23 13:47:28.912
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:47:28.926
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:47:28.93
  E0930 13:47:29.511805      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:30.512064      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:31.512890      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:32.513214      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:32.964: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-3581" for this suite. @ 09/30/23 13:47:32.968
â€¢ [4.065 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance]
test/e2e/architecture/conformance.go:39
  STEP: Creating a kubernetes client @ 09/30/23 13:47:32.978
  Sep 30 13:47:32.978: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename conformance-tests @ 09/30/23 13:47:32.978
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:47:32.992
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:47:32.996
  STEP: Getting node addresses @ 09/30/23 13:47:33.001
  Sep 30 13:47:33.001: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  Sep 30 13:47:33.007: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "conformance-tests-4203" for this suite. @ 09/30/23 13:47:33.012
â€¢ [0.041 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]
test/e2e/apimachinery/resource_quota.go:806
  STEP: Creating a kubernetes client @ 09/30/23 13:47:33.019
  Sep 30 13:47:33.019: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 13:47:33.02
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:47:33.034
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:47:33.038
  STEP: Creating a ResourceQuota with best effort scope @ 09/30/23 13:47:33.042
  STEP: Ensuring ResourceQuota status is calculated @ 09/30/23 13:47:33.047
  E0930 13:47:33.513823      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:34.513917      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota with not best effort scope @ 09/30/23 13:47:35.052
  STEP: Ensuring ResourceQuota status is calculated @ 09/30/23 13:47:35.058
  E0930 13:47:35.514102      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:36.514370      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a best-effort pod @ 09/30/23 13:47:37.064
  STEP: Ensuring resource quota with best effort scope captures the pod usage @ 09/30/23 13:47:37.079
  E0930 13:47:37.514969      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:38.515196      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with not best effort ignored the pod usage @ 09/30/23 13:47:39.083
  E0930 13:47:39.516206      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:40.516339      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 09/30/23 13:47:41.087
  STEP: Ensuring resource quota status released the pod usage @ 09/30/23 13:47:41.099
  E0930 13:47:41.517028      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:42.517220      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a not best-effort pod @ 09/30/23 13:47:43.103
  STEP: Ensuring resource quota with not best effort scope captures the pod usage @ 09/30/23 13:47:43.114
  E0930 13:47:43.518268      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:44.518466      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with best effort scope ignored the pod usage @ 09/30/23 13:47:45.119
  E0930 13:47:45.518978      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:46.519090      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 09/30/23 13:47:47.124
  STEP: Ensuring resource quota status released the pod usage @ 09/30/23 13:47:47.134
  E0930 13:47:47.519746      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:48.519971      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:49.139: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-6112" for this suite. @ 09/30/23 13:47:49.143
â€¢ [16.131 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]
test/e2e/apps/rc.go:424
  STEP: Creating a kubernetes client @ 09/30/23 13:47:49.151
  Sep 30 13:47:49.151: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replication-controller @ 09/30/23 13:47:49.152
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:47:49.166
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:47:49.17
  STEP: Creating ReplicationController "e2e-rc-9fqhg" @ 09/30/23 13:47:49.174
  Sep 30 13:47:49.178: INFO: Get Replication Controller "e2e-rc-9fqhg" to confirm replicas
  E0930 13:47:49.520524      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:50.183: INFO: Get Replication Controller "e2e-rc-9fqhg" to confirm replicas
  Sep 30 13:47:50.187: INFO: Found 1 replicas for "e2e-rc-9fqhg" replication controller
  STEP: Getting scale subresource for ReplicationController "e2e-rc-9fqhg" @ 09/30/23 13:47:50.187
  STEP: Updating a scale subresource @ 09/30/23 13:47:50.19
  STEP: Verifying replicas where modified for replication controller "e2e-rc-9fqhg" @ 09/30/23 13:47:50.195
  Sep 30 13:47:50.195: INFO: Get Replication Controller "e2e-rc-9fqhg" to confirm replicas
  E0930 13:47:50.520875      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:51.199: INFO: Get Replication Controller "e2e-rc-9fqhg" to confirm replicas
  Sep 30 13:47:51.202: INFO: Found 2 replicas for "e2e-rc-9fqhg" replication controller
  Sep 30 13:47:51.202: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-8432" for this suite. @ 09/30/23 13:47:51.207
â€¢ [2.061 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should replace a pod template [Conformance]
test/e2e/common/node/podtemplates.go:176
  STEP: Creating a kubernetes client @ 09/30/23 13:47:51.214
  Sep 30 13:47:51.214: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename podtemplate @ 09/30/23 13:47:51.215
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:47:51.227
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:47:51.233
  STEP: Create a pod template @ 09/30/23 13:47:51.236
  STEP: Replace a pod template @ 09/30/23 13:47:51.242
  Sep 30 13:47:51.251: INFO: Found updated podtemplate annotation: "true"

  Sep 30 13:47:51.251: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-7479" for this suite. @ 09/30/23 13:47:51.255
â€¢ [0.047 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:262
  STEP: Creating a kubernetes client @ 09/30/23 13:47:51.263
  Sep 30 13:47:51.263: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 13:47:51.263
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:47:51.276
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:47:51.28
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:47:51.283
  E0930 13:47:51.521823      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:52.521929      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:53.522885      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:54.523124      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:47:55.306
  Sep 30 13:47:55.309: INFO: Trying to get logs from node ip-172-31-31-30 pod downwardapi-volume-3dca0b45-5dbd-4caf-9f56-fd1f72fe81fb container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:47:55.316
  Sep 30 13:47:55.336: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8134" for this suite. @ 09/30/23 13:47:55.343
â€¢ [4.087 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]
test/e2e/apps/daemon_set.go:836
  STEP: Creating a kubernetes client @ 09/30/23 13:47:55.35
  Sep 30 13:47:55.350: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename daemonsets @ 09/30/23 13:47:55.351
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:47:55.366
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:47:55.37
  STEP: Creating simple DaemonSet "daemon-set" @ 09/30/23 13:47:55.396
  STEP: Check that daemon pods launch on every node of the cluster. @ 09/30/23 13:47:55.401
  Sep 30 13:47:55.405: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:47:55.405: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:47:55.408: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:47:55.408: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  E0930 13:47:55.524186      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:56.414: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:47:56.414: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:47:56.418: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Sep 30 13:47:56.418: INFO: Node ip-172-31-31-30 is running 0 daemon pod, expected 1
  E0930 13:47:56.525039      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:47:57.414: INFO: DaemonSet pods can't tolerate node ip-172-31-4-148 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:47:57.414: INFO: DaemonSet pods can't tolerate node ip-172-31-77-161 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Sep 30 13:47:57.418: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Sep 30 13:47:57.418: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: listing all DaemonSets @ 09/30/23 13:47:57.421
  STEP: DeleteCollection of the DaemonSets @ 09/30/23 13:47:57.425
  STEP: Verify that ReplicaSets have been deleted @ 09/30/23 13:47:57.434
  Sep 30 13:47:57.449: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"38522"},"items":null}

  Sep 30 13:47:57.454: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"38522"},"items":[{"metadata":{"name":"daemon-set-5n77s","generateName":"daemon-set-","namespace":"daemonsets-4101","uid":"08596d4e-ca5c-48e6-b3a6-82c63aed83d5","resourceVersion":"38520","creationTimestamp":"2023-09-30T13:47:55Z","deletionTimestamp":"2023-09-30T13:48:27Z","deletionGracePeriodSeconds":30,"labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"c727ad4d-7717-49b3-98d8-aa26c23b13df","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2023-09-30T13:47:55Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"c727ad4d-7717-49b3-98d8-aa26c23b13df\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2023-09-30T13:47:57Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"192.168.35.249\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-hkrjv","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-hkrjv","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"ip-172-31-39-81","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["ip-172-31-39-81"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:55Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:57Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:57Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:55Z"}],"hostIP":"172.31.39.81","podIP":"192.168.35.249","podIPs":[{"ip":"192.168.35.249"}],"startTime":"2023-09-30T13:47:55Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2023-09-30T13:47:56Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://8762bffd495ace2db15b9b85e521e33eb1b65a73b232a5660c8b8b8f028e0dbe","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-bclmp","generateName":"daemon-set-","namespace":"daemonsets-4101","uid":"fcf05d9e-3480-47c7-842f-4836d2ac6c77","resourceVersion":"38522","creationTimestamp":"2023-09-30T13:47:55Z","deletionTimestamp":"2023-09-30T13:48:27Z","deletionGracePeriodSeconds":30,"labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"c727ad4d-7717-49b3-98d8-aa26c23b13df","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2023-09-30T13:47:55Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"c727ad4d-7717-49b3-98d8-aa26c23b13df\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2023-09-30T13:47:56Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"192.168.10.94\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-tz8hq","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-tz8hq","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"ip-172-31-31-30","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["ip-172-31-31-30"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:55Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:56Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:56Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:55Z"}],"hostIP":"172.31.31.30","podIP":"192.168.10.94","podIPs":[{"ip":"192.168.10.94"}],"startTime":"2023-09-30T13:47:55Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2023-09-30T13:47:56Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://3d0a71c89ce25cce6c085e472be9e755f5af94c52590a85d227ed65f379a1e7f","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-jqggm","generateName":"daemon-set-","namespace":"daemonsets-4101","uid":"fe27b584-19b0-46aa-bdec-b5c5c74ac4a2","resourceVersion":"38521","creationTimestamp":"2023-09-30T13:47:55Z","deletionTimestamp":"2023-09-30T13:48:27Z","deletionGracePeriodSeconds":30,"labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"c727ad4d-7717-49b3-98d8-aa26c23b13df","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2023-09-30T13:47:55Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"c727ad4d-7717-49b3-98d8-aa26c23b13df\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2023-09-30T13:47:56Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"192.168.224.208\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-c9xpm","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-c9xpm","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"ip-172-31-81-206","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["ip-172-31-81-206"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:55Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:56Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:56Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-09-30T13:47:55Z"}],"hostIP":"172.31.81.206","podIP":"192.168.224.208","podIPs":[{"ip":"192.168.224.208"}],"startTime":"2023-09-30T13:47:55Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2023-09-30T13:47:56Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://7941ef85b303d75ee5a7425bf2d40bd3794478e78ff6d6760eb5a32d44fafa2b","started":true}],"qosClass":"BestEffort"}}]}

  Sep 30 13:47:57.468: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-4101" for this suite. @ 09/30/23 13:47:57.473
â€¢ [2.129 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] ReplicationController should release no longer matching pods [Conformance]
test/e2e/apps/rc.go:103
  STEP: Creating a kubernetes client @ 09/30/23 13:47:57.48
  Sep 30 13:47:57.480: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename replication-controller @ 09/30/23 13:47:57.481
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:47:57.494
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:47:57.498
  STEP: Given a ReplicationController is created @ 09/30/23 13:47:57.503
  STEP: When the matched label of one of its pods change @ 09/30/23 13:47:57.508
  Sep 30 13:47:57.512: INFO: Pod name pod-release: Found 0 pods out of 1
  E0930 13:47:57.525302      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:58.525686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:47:59.525893      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:00.526103      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:01.526783      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:02.516: INFO: Pod name pod-release: Found 1 pods out of 1
  E0930 13:48:02.527056      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Then the pod is released @ 09/30/23 13:48:02.528
  E0930 13:48:03.527204      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:03.537: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-7610" for this suite. @ 09/30/23 13:48:03.541
â€¢ [6.067 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:309
  STEP: Creating a kubernetes client @ 09/30/23 13:48:03.547
  Sep 30 13:48:03.547: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-publish-openapi @ 09/30/23 13:48:03.548
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:48:03.562
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:48:03.566
  STEP: CRs in the same group but different versions (one multiversion CRD) show up in OpenAPI documentation @ 09/30/23 13:48:03.57
  Sep 30 13:48:03.571: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:48:04.528227      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:05.529162      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:06.529375      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:07.530006      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:08.530544      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: CRs in the same group but different versions (two CRDs) show up in OpenAPI documentation @ 09/30/23 13:48:09.331
  Sep 30 13:48:09.331: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:48:09.530926      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:10.531752      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:10.771: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:48:11.531891      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:12.532791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:13.533097      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:14.533137      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:15.533213      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:16.511: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-4846" for this suite. @ 09/30/23 13:48:16.522
â€¢ [12.982 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:176
  STEP: Creating a kubernetes client @ 09/30/23 13:48:16.53
  Sep 30 13:48:16.530: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-webhook @ 09/30/23 13:48:16.531
  E0930 13:48:16.533989      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:48:16.543
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:48:16.548
  STEP: Setting up server cert @ 09/30/23 13:48:16.553
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 09/30/23 13:48:17.043
  STEP: Deploying the custom resource conversion webhook pod @ 09/30/23 13:48:17.052
  STEP: Wait for the deployment to be ready @ 09/30/23 13:48:17.065
  Sep 30 13:48:17.074: INFO: new replicaset for deployment "sample-crd-conversion-webhook-deployment" is yet to be created
  E0930 13:48:17.534999      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:18.535264      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 09/30/23 13:48:19.088
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:48:19.098
  E0930 13:48:19.535430      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:20.099: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Sep 30 13:48:20.107: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:48:20.535519      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:21.536517      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:22.536750      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a v1 custom resource @ 09/30/23 13:48:22.673
  STEP: Create a v2 custom resource @ 09/30/23 13:48:22.69
  STEP: List CRs in v1 @ 09/30/23 13:48:22.735
  STEP: List CRs in v2 @ 09/30/23 13:48:22.743
  Sep 30 13:48:22.750: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-5377" for this suite. @ 09/30/23 13:48:23.304
â€¢ [6.782 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]
test/e2e/node/pods.go:163
  STEP: Creating a kubernetes client @ 09/30/23 13:48:23.313
  Sep 30 13:48:23.313: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 13:48:23.314
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:48:23.328
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:48:23.333
  STEP: creating the pod @ 09/30/23 13:48:23.337
  STEP: submitting the pod to kubernetes @ 09/30/23 13:48:23.337
  STEP: verifying QOS class is set on the pod @ 09/30/23 13:48:23.347
  Sep 30 13:48:23.350: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-5428" for this suite. @ 09/30/23 13:48:23.354
â€¢ [0.048 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:198
  STEP: Creating a kubernetes client @ 09/30/23 13:48:23.363
  Sep 30 13:48:23.363: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 13:48:23.364
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:48:23.379
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:48:23.383
  STEP: Creating pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049 @ 09/30/23 13:48:23.387
  E0930 13:48:23.537606      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:24.538643      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 09/30/23 13:48:25.404
  Sep 30 13:48:25.408: INFO: Initial restart count of pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe is 0
  Sep 30 13:48:25.413: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:25.539368      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:26.539958      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:27.417: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:27.540906      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:28.541182      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:29.422: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:29.542146      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:30.542342      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:31.427: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:31.543382      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:32.543598      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:33.431: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:33.544022      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:34.544219      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:35.438: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:35.544973      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:36.545529      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:37.443: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:37.546438      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:38.546585      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:39.447: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:39.546901      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:40.547738      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:41.452: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:41.548224      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:42.548455      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:43.456: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:43.548548      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:44.548848      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:45.460: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  Sep 30 13:48:45.460: INFO: Restart count of pod container-probe-8049/liveness-986f0090-79f1-46d9-bf53-0201ba65acfe is now 1 (20.052342984s elapsed)
  E0930 13:48:45.549088      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:46.549682      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:47.465: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:47.550120      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:48.550211      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:49.469: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:49.550696      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:50.550775      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:51.474: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:51.551289      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:52.551526      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:53.477: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:53.551924      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:54.552137      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:55.482: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:55.552171      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:56.552196      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:57.486: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:57.553218      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:48:58.553322      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:48:59.491: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:48:59.553495      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:00.553730      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:01.495: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:01.554395      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:02.554636      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:03.499: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:03.554978      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:04.555736      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:05.504: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  Sep 30 13:49:05.504: INFO: Restart count of pod container-probe-8049/liveness-986f0090-79f1-46d9-bf53-0201ba65acfe is now 2 (40.09615554s elapsed)
  E0930 13:49:05.555921      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:06.556055      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:07.508: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:07.557099      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:08.557439      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:09.514: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:09.558208      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:10.558439      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:11.518: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:11.558892      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:12.559140      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:13.522: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:13.559855      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:14.560133      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:15.527: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:15.560133      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:16.560794      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:17.531: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:17.560817      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:18.560916      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:19.537: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:19.561328      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:20.561532      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:21.541: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:21.561954      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:22.562081      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:23.546: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:23.562670      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:24.563734      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:25.551: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  Sep 30 13:49:25.551: INFO: Restart count of pod container-probe-8049/liveness-986f0090-79f1-46d9-bf53-0201ba65acfe is now 3 (1m0.142977686s elapsed)
  E0930 13:49:25.564648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:26.564791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:27.556: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:27.565547      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:28.565747      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:29.561: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:29.566411      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:30.566633      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:31.565: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:31.567655      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:32.567819      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:33.568346      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:33.570: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:34.569330      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:35.569582      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:35.577: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:36.570150      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:37.570343      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:37.582: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:38.570434      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:39.570656      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:39.587: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:40.571593      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:41.571667      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:41.591: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:42.572445      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:43.572518      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:43.597: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:44.573070      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:45.573178      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:45.601: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  Sep 30 13:49:45.601: INFO: Restart count of pod container-probe-8049/liveness-986f0090-79f1-46d9-bf53-0201ba65acfe is now 4 (1m20.192537624s elapsed)
  E0930 13:49:46.573366      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:47.573664      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:47.606: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:48.574331      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:49.574655      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:49.611: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:50.574733      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:51.575074      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:51.616: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:52.575177      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:53.575271      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:53.620: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:54.575381      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:55.575468      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:55.625: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:56.576073      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:57.576466      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:57.630: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:49:58.576559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:49:59.576648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:49:59.635: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:00.577232      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:01.577547      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:01.640: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:02.577881      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:03.578109      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:03.644: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:04.578210      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:05.578306      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:05.648: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:06.578839      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:07.579067      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:07.652: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:08.579123      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:09.579245      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:09.658: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:10.579364      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:11.579693      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:11.663: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:12.579791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:13.579892      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:13.667: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:14.580574      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:15.580917      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:15.672: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:16.581159      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:17.581482      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:17.676: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:18.581798      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:19.582002      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:19.682: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:20.582350      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:21.582888      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:21.687: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:22.583311      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:23.583715      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:23.692: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:24.584444      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:25.584739      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:25.697: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:26.585336      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:27.585511      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:27.701: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:28.586398      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:29.586709      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:29.707: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:30.586892      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:31.587718      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:31.712: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:32.588299      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:33.588491      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:33.716: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:34.588854      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:35.589157      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:35.721: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:36.590013      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:37.590351      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:37.725: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:38.590429      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:39.590636      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:39.731: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:40.591722      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:41.592167      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:41.735: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:42.592291      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:43.592486      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:43.739: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:44.592615      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:45.592736      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:45.744: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:46.593626      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:47.593972      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:47.749: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:48.594269      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:49.594393      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:49.754: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:50.594656      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:51.594980      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:51.758: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:52.595655      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:53.595963      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:53.763: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:54.596233      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:55.596625      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:55.768: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  E0930 13:50:56.597255      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:57.597446      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:50:57.772: INFO: Get pod liveness-986f0090-79f1-46d9-bf53-0201ba65acfe in namespace container-probe-8049
  Sep 30 13:50:57.772: INFO: Restart count of pod container-probe-8049/liveness-986f0090-79f1-46d9-bf53-0201ba65acfe is now 5 (2m32.363895947s elapsed)
  Sep 30 13:50:57.772: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:50:57.776
  STEP: Destroying namespace "container-probe-8049" for this suite. @ 09/30/23 13:50:57.789
â€¢ [154.433 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] PreStop should call prestop when killing a pod  [Conformance]
test/e2e/node/pre_stop.go:169
  STEP: Creating a kubernetes client @ 09/30/23 13:50:57.796
  Sep 30 13:50:57.796: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename prestop @ 09/30/23 13:50:57.797
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:50:57.811
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:50:57.815
  STEP: Creating server pod server in namespace prestop-511 @ 09/30/23 13:50:57.82
  STEP: Waiting for pods to come up. @ 09/30/23 13:50:57.829
  E0930 13:50:58.597499      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:50:59.597721      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating tester pod tester in namespace prestop-511 @ 09/30/23 13:50:59.841
  E0930 13:51:00.598069      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:01.598762      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting pre-stop pod @ 09/30/23 13:51:01.855
  E0930 13:51:02.598846      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:03.599737      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:04.600185      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:05.600402      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:06.600431      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:51:06.868: INFO: Saw: {
  	"Hostname": "server",
  	"Sent": null,
  	"Received": {
  		"prestop": 1
  	},
  	"Errors": null,
  	"Log": [
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up.",
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up."
  	],
  	"StillContactingPeers": true
  }
  Sep 30 13:51:06.869: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Deleting the server pod @ 09/30/23 13:51:06.873
  STEP: Destroying namespace "prestop-511" for this suite. @ 09/30/23 13:51:06.886
â€¢ [9.097 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:248
  STEP: Creating a kubernetes client @ 09/30/23 13:51:06.895
  Sep 30 13:51:06.895: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-runtime @ 09/30/23 13:51:06.895
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:51:06.907
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:51:06.911
  STEP: create the container @ 09/30/23 13:51:06.915
  W0930 13:51:06.923958      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 09/30/23 13:51:06.924
  E0930 13:51:07.600529      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:08.600590      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:09.600711      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 09/30/23 13:51:09.942
  STEP: the container should be terminated @ 09/30/23 13:51:09.945
  STEP: the termination message should be set @ 09/30/23 13:51:09.945
  Sep 30 13:51:09.945: INFO: Expected: &{OK} to match Container's Termination Message: OK --
  STEP: delete the container @ 09/30/23 13:51:09.945
  Sep 30 13:51:09.959: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-5107" for this suite. @ 09/30/23 13:51:09.967
â€¢ [3.079 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]
test/e2e/apimachinery/resource_quota.go:1013
  STEP: Creating a kubernetes client @ 09/30/23 13:51:09.976
  Sep 30 13:51:09.976: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename resourcequota @ 09/30/23 13:51:09.977
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:51:09.99
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:51:09.994
  STEP: Creating resourceQuota "e2e-rq-status-kz4pf" @ 09/30/23 13:51:10.002
  Sep 30 13:51:10.009: INFO: Resource quota "e2e-rq-status-kz4pf" reports spec: hard cpu limit of 500m
  Sep 30 13:51:10.010: INFO: Resource quota "e2e-rq-status-kz4pf" reports spec: hard memory limit of 500Mi
  STEP: Updating resourceQuota "e2e-rq-status-kz4pf" /status @ 09/30/23 13:51:10.01
  STEP: Confirm /status for "e2e-rq-status-kz4pf" resourceQuota via watch @ 09/30/23 13:51:10.019
  Sep 30 13:51:10.021: INFO: observed resourceQuota "e2e-rq-status-kz4pf" in namespace "resourcequota-5924" with hard status: v1.ResourceList(nil)
  Sep 30 13:51:10.021: INFO: Found resourceQuota "e2e-rq-status-kz4pf" in namespace "resourcequota-5924" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Sep 30 13:51:10.021: INFO: ResourceQuota "e2e-rq-status-kz4pf" /status was updated
  STEP: Patching hard spec values for cpu & memory @ 09/30/23 13:51:10.025
  Sep 30 13:51:10.032: INFO: Resource quota "e2e-rq-status-kz4pf" reports spec: hard cpu limit of 1
  Sep 30 13:51:10.032: INFO: Resource quota "e2e-rq-status-kz4pf" reports spec: hard memory limit of 1Gi
  STEP: Patching "e2e-rq-status-kz4pf" /status @ 09/30/23 13:51:10.032
  STEP: Confirm /status for "e2e-rq-status-kz4pf" resourceQuota via watch @ 09/30/23 13:51:10.038
  Sep 30 13:51:10.040: INFO: observed resourceQuota "e2e-rq-status-kz4pf" in namespace "resourcequota-5924" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Sep 30 13:51:10.040: INFO: Found resourceQuota "e2e-rq-status-kz4pf" in namespace "resourcequota-5924" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}
  Sep 30 13:51:10.040: INFO: ResourceQuota "e2e-rq-status-kz4pf" /status was patched
  STEP: Get "e2e-rq-status-kz4pf" /status @ 09/30/23 13:51:10.04
  Sep 30 13:51:10.044: INFO: Resourcequota "e2e-rq-status-kz4pf" reports status: hard cpu of 1
  Sep 30 13:51:10.044: INFO: Resourcequota "e2e-rq-status-kz4pf" reports status: hard memory of 1Gi
  STEP: Repatching "e2e-rq-status-kz4pf" /status before checking Spec is unchanged @ 09/30/23 13:51:10.047
  Sep 30 13:51:10.053: INFO: Resourcequota "e2e-rq-status-kz4pf" reports status: hard cpu of 2
  Sep 30 13:51:10.053: INFO: Resourcequota "e2e-rq-status-kz4pf" reports status: hard memory of 2Gi
  Sep 30 13:51:10.055: INFO: Found resourceQuota "e2e-rq-status-kz4pf" in namespace "resourcequota-5924" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}
  E0930 13:51:10.601760      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:11.602420      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:12.602641      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:13.602858      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:14.603047      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:15.603735      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:16.604062      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:17.604304      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:18.604534      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:19.604773      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:20.604857      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:21.605297      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:22.605466      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:23.605602      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:24.605835      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:25.605902      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:26.606368      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:27.606545      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:28.606753      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:29.607751      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:30.608581      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:31.608682      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:32.609572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:33.609817      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:34.610008      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:35.610087      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:36.610203      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:37.610254      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:38.610370      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:39.610578      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:40.610675      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:41.611021      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:42.611733      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:43.611834      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:44.611957      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:45.612976      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:46.614049      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:47.614244      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:48.614388      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:49.614628      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:51:50.064: INFO: ResourceQuota "e2e-rq-status-kz4pf" Spec was unchanged and /status reset
  Sep 30 13:51:50.064: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-5924" for this suite. @ 09/30/23 13:51:50.068
â€¢ [40.099 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should delete a job [Conformance]
test/e2e/apps/job.go:485
  STEP: Creating a kubernetes client @ 09/30/23 13:51:50.077
  Sep 30 13:51:50.078: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename job @ 09/30/23 13:51:50.078
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:51:50.093
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:51:50.097
  STEP: Creating a job @ 09/30/23 13:51:50.101
  STEP: Ensuring active pods == parallelism @ 09/30/23 13:51:50.106
  E0930 13:51:50.615286      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:51.615809      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete a job @ 09/30/23 13:51:52.111
  STEP: deleting Job.batch foo in namespace job-4348, will wait for the garbage collector to delete the pods @ 09/30/23 13:51:52.111
  Sep 30 13:51:52.172: INFO: Deleting Job.batch foo took: 6.228373ms
  Sep 30 13:51:52.272: INFO: Terminating Job.batch foo pods took: 100.500328ms
  E0930 13:51:52.616658      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:53.617443      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:54.617734      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:55.618161      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:56.618872      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:57.619423      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:58.619874      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:51:59.620559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:00.621113      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:01.621506      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:02.621827      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:03.622234      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:04.622902      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:05.623299      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:06.624158      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:07.624805      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:08.625150      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:09.625606      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:10.626006      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:11.626622      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:12.627098      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:13.627535      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:14.628589      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:15.628998      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:16.629662      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:17.630119      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:18.630544      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:19.631118      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:20.631398      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:21.631986      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:22.632525      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:23.632807      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring job was deleted @ 09/30/23 13:52:23.673
  Sep 30 13:52:23.679: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-4348" for this suite. @ 09/30/23 13:52:23.683
â€¢ [33.612 seconds]
------------------------------
SS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:195
  STEP: Creating a kubernetes client @ 09/30/23 13:52:23.69
  Sep 30 13:52:23.690: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-runtime @ 09/30/23 13:52:23.691
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:23.704
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:23.708
  STEP: create the container @ 09/30/23 13:52:23.713
  W0930 13:52:23.722352      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 09/30/23 13:52:23.722
  E0930 13:52:24.633897      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:25.634666      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:26.634718      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 09/30/23 13:52:26.739
  STEP: the container should be terminated @ 09/30/23 13:52:26.742
  STEP: the termination message should be set @ 09/30/23 13:52:26.742
  Sep 30 13:52:26.742: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 09/30/23 13:52:26.742
  Sep 30 13:52:26.753: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-5667" for this suite. @ 09/30/23 13:52:26.762
â€¢ [3.079 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:109
  STEP: Creating a kubernetes client @ 09/30/23 13:52:26.769
  Sep 30 13:52:26.769: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 13:52:26.77
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:26.782
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:26.787
  STEP: Creating configMap with name configmap-test-volume-map-2d391f43-21ac-4283-881f-eded6c926dd4 @ 09/30/23 13:52:26.791
  STEP: Creating a pod to test consume configMaps @ 09/30/23 13:52:26.796
  E0930 13:52:27.634917      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:28.635728      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:29.636586      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:30.636682      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:52:30.82
  Sep 30 13:52:30.823: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-configmaps-58ddf899-3ecf-4b8e-b8c6-b5e9d5042696 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:52:30.847
  Sep 30 13:52:30.864: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1010" for this suite. @ 09/30/23 13:52:30.869
â€¢ [4.106 seconds]
------------------------------
SSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:127
  STEP: Creating a kubernetes client @ 09/30/23 13:52:30.876
  Sep 30 13:52:30.876: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename emptydir @ 09/30/23 13:52:30.877
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:30.889
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:30.893
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 09/30/23 13:52:30.897
  E0930 13:52:31.637777      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:32.637886      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:33.638041      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:34.638137      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:52:34.923
  Sep 30 13:52:34.926: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-0d342f52-eb05-40ce-9f82-4592ba296823 container test-container: <nil>
  STEP: delete the pod @ 09/30/23 13:52:34.933
  Sep 30 13:52:34.949: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5990" for this suite. @ 09/30/23 13:52:34.953
â€¢ [4.083 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:41
  STEP: Creating a kubernetes client @ 09/30/23 13:52:34.96
  Sep 30 13:52:34.960: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename containers @ 09/30/23 13:52:34.96
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:34.974
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:34.979
  E0930 13:52:35.638226      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:36.638756      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:52:37.008: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-3152" for this suite. @ 09/30/23 13:52:37.013
â€¢ [2.059 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]
test/e2e/apimachinery/field_validation.go:289
  STEP: Creating a kubernetes client @ 09/30/23 13:52:37.019
  Sep 30 13:52:37.019: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename field-validation @ 09/30/23 13:52:37.019
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:37.031
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:37.036
  Sep 30 13:52:37.039: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:52:37.639451      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:38.639720      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:39.640559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:52:40.119: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-9931" for this suite. @ 09/30/23 13:52:40.138
â€¢ [3.126 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]
test/e2e/network/proxy.go:380
  STEP: Creating a kubernetes client @ 09/30/23 13:52:40.145
  Sep 30 13:52:40.145: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename proxy @ 09/30/23 13:52:40.145
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:40.16
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:40.163
  Sep 30 13:52:40.168: INFO: Creating pod...
  E0930 13:52:40.641402      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:41.641825      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:52:42.187: INFO: Creating service...
  Sep 30 13:52:42.199: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/pods/agnhost/proxy?method=DELETE
  Sep 30 13:52:42.205: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Sep 30 13:52:42.205: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/pods/agnhost/proxy?method=OPTIONS
  Sep 30 13:52:42.210: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Sep 30 13:52:42.211: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/pods/agnhost/proxy?method=PATCH
  Sep 30 13:52:42.215: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Sep 30 13:52:42.215: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/pods/agnhost/proxy?method=POST
  Sep 30 13:52:42.219: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Sep 30 13:52:42.219: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/pods/agnhost/proxy?method=PUT
  Sep 30 13:52:42.224: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Sep 30 13:52:42.224: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/services/e2e-proxy-test-service/proxy?method=DELETE
  Sep 30 13:52:42.230: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Sep 30 13:52:42.230: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/services/e2e-proxy-test-service/proxy?method=OPTIONS
  Sep 30 13:52:42.235: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Sep 30 13:52:42.235: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/services/e2e-proxy-test-service/proxy?method=PATCH
  Sep 30 13:52:42.242: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Sep 30 13:52:42.242: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/services/e2e-proxy-test-service/proxy?method=POST
  Sep 30 13:52:42.248: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Sep 30 13:52:42.249: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/services/e2e-proxy-test-service/proxy?method=PUT
  Sep 30 13:52:42.254: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Sep 30 13:52:42.254: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/pods/agnhost/proxy?method=GET
  Sep 30 13:52:42.258: INFO: http.Client request:GET StatusCode:301
  Sep 30 13:52:42.258: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/services/e2e-proxy-test-service/proxy?method=GET
  Sep 30 13:52:42.263: INFO: http.Client request:GET StatusCode:301
  Sep 30 13:52:42.263: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/pods/agnhost/proxy?method=HEAD
  Sep 30 13:52:42.266: INFO: http.Client request:HEAD StatusCode:301
  Sep 30 13:52:42.266: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-916/services/e2e-proxy-test-service/proxy?method=HEAD
  Sep 30 13:52:42.274: INFO: http.Client request:HEAD StatusCode:301
  Sep 30 13:52:42.274: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-916" for this suite. @ 09/30/23 13:52:42.278
â€¢ [2.140 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] server version should find the server version [Conformance]
test/e2e/apimachinery/server_version.go:40
  STEP: Creating a kubernetes client @ 09/30/23 13:52:42.285
  Sep 30 13:52:42.285: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename server-version @ 09/30/23 13:52:42.286
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:42.299
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:42.303
  STEP: Request ServerVersion @ 09/30/23 13:52:42.307
  STEP: Confirm major version @ 09/30/23 13:52:42.308
  Sep 30 13:52:42.308: INFO: Major version: 1
  STEP: Confirm minor version @ 09/30/23 13:52:42.308
  Sep 30 13:52:42.308: INFO: cleanMinorVersion: 28
  Sep 30 13:52:42.308: INFO: Minor version: 28
  Sep 30 13:52:42.308: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "server-version-7670" for this suite. @ 09/30/23 13:52:42.313
â€¢ [0.035 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support proxy with --port 0  [Conformance]
test/e2e/kubectl/kubectl.go:1781
  STEP: Creating a kubernetes client @ 09/30/23 13:52:42.32
  Sep 30 13:52:42.321: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl @ 09/30/23 13:52:42.321
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:42.336
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:42.34
  STEP: starting the proxy server @ 09/30/23 13:52:42.344
  Sep 30 13:52:42.345: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-1473 proxy -p 0 --disable-filter'
  STEP: curling proxy /api/ output @ 09/30/23 13:52:42.4
  Sep 30 13:52:42.411: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1473" for this suite. @ 09/30/23 13:52:42.416
â€¢ [0.104 seconds]
------------------------------
S
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]
test/e2e/common/node/ephemeral_containers.go:98
  STEP: Creating a kubernetes client @ 09/30/23 13:52:42.425
  Sep 30 13:52:42.425: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 09/30/23 13:52:42.426
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:42.44
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:42.444
  STEP: creating a target pod @ 09/30/23 13:52:42.448
  E0930 13:52:42.642722      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:43.642871      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: adding an ephemeral container @ 09/30/23 13:52:44.47
  E0930 13:52:44.643184      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:45.643740      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking pod container endpoints @ 09/30/23 13:52:46.487
  Sep 30 13:52:46.487: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-6517 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Sep 30 13:52:46.487: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  Sep 30 13:52:46.487: INFO: ExecWithOptions: Clientset creation
  Sep 30 13:52:46.487: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/ephemeral-containers-test-6517/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Sep 30 13:52:46.598: INFO: Exec stderr: ""
  STEP: checking pod "ephemeral-containers-target-pod" has only one ephemeralcontainer @ 09/30/23 13:52:46.606
  STEP: adding another ephemeralcontainer to pod "ephemeral-containers-target-pod" @ 09/30/23 13:52:46.611
  STEP: checking pod "ephemeral-containers-target-pod" has only two ephemeralcontainers @ 09/30/23 13:52:46.622
  Sep 30 13:52:46.626: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-6517" for this suite. @ 09/30/23 13:52:46.632
â€¢ [4.216 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]
test/e2e/apimachinery/garbage_collector.go:538
  STEP: Creating a kubernetes client @ 09/30/23 13:52:46.641
  Sep 30 13:52:46.641: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename gc @ 09/30/23 13:52:46.642
  E0930 13:52:46.644595      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:46.657
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:46.661
  STEP: create the deployment @ 09/30/23 13:52:46.664
  W0930 13:52:46.669820      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 09/30/23 13:52:46.669
  STEP: delete the deployment @ 09/30/23 13:52:47.182
  STEP: wait for deployment deletion to see if the garbage collector mistakenly deletes the rs @ 09/30/23 13:52:47.189
  E0930 13:52:47.644798      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 09/30/23 13:52:47.711
  W0930 13:52:47.718762      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Sep 30 13:52:47.718: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Sep 30 13:52:47.719: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-3987" for this suite. @ 09/30/23 13:52:47.726
â€¢ [1.092 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]
test/e2e/common/node/init_container.go:256
  STEP: Creating a kubernetes client @ 09/30/23 13:52:47.736
  Sep 30 13:52:47.736: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename init-container @ 09/30/23 13:52:47.737
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:47.751
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:47.755
  STEP: creating the pod @ 09/30/23 13:52:47.76
  Sep 30 13:52:47.760: INFO: PodSpec: initContainers in spec.initContainers
  E0930 13:52:48.645784      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:49.646107      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:50.646778      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:52:51.500: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-4386" for this suite. @ 09/30/23 13:52:51.504
â€¢ [3.775 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]
test/e2e/apimachinery/webhook.go:403
  STEP: Creating a kubernetes client @ 09/30/23 13:52:51.512
  Sep 30 13:52:51.512: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename webhook @ 09/30/23 13:52:51.513
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:51.523
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:51.527
  STEP: Setting up server cert @ 09/30/23 13:52:51.551
  E0930 13:52:51.647456      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 09/30/23 13:52:52.007
  STEP: Deploying the webhook pod @ 09/30/23 13:52:52.015
  STEP: Wait for the deployment to be ready @ 09/30/23 13:52:52.029
  Sep 30 13:52:52.037: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E0930 13:52:52.647715      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:53.647870      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 09/30/23 13:52:54.048
  STEP: Verifying the service has paired with the endpoint @ 09/30/23 13:52:54.059
  E0930 13:52:54.648643      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:52:55.060: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a validating webhook configuration @ 09/30/23 13:52:55.066
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 09/30/23 13:52:55.086
  STEP: Updating a validating webhook configuration's rules to not include the create operation @ 09/30/23 13:52:55.098
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 09/30/23 13:52:55.108
  STEP: Patching a validating webhook configuration's rules to include the create operation @ 09/30/23 13:52:55.12
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 09/30/23 13:52:55.129
  Sep 30 13:52:55.139: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9895" for this suite. @ 09/30/23 13:52:55.177
  STEP: Destroying namespace "webhook-markers-8632" for this suite. @ 09/30/23 13:52:55.185
â€¢ [3.681 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should provide secure master service  [Conformance]
test/e2e/network/service.go:775
  STEP: Creating a kubernetes client @ 09/30/23 13:52:55.194
  Sep 30 13:52:55.194: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:52:55.194
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:55.206
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:55.21
  Sep 30 13:52:55.217: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4574" for this suite. @ 09/30/23 13:52:55.221
â€¢ [0.033 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]
test/e2e/common/node/secrets.go:46
  STEP: Creating a kubernetes client @ 09/30/23 13:52:55.228
  Sep 30 13:52:55.228: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename secrets @ 09/30/23 13:52:55.228
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:55.242
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:55.246
  STEP: Creating secret with name secret-test-4cb2a543-3c4c-4003-9e00-05ae6daf792f @ 09/30/23 13:52:55.25
  STEP: Creating a pod to test consume secrets @ 09/30/23 13:52:55.255
  E0930 13:52:55.649543      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:56.650341      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:57.650442      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:52:58.650576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:52:59.279
  Sep 30 13:52:59.282: INFO: Trying to get logs from node ip-172-31-39-81 pod pod-secrets-fcbfc1bd-1ac1-4781-b9b1-8b913135adf4 container secret-env-test: <nil>
  STEP: delete the pod @ 09/30/23 13:52:59.306
  Sep 30 13:52:59.321: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-4647" for this suite. @ 09/30/23 13:52:59.326
â€¢ [4.106 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:194
  STEP: Creating a kubernetes client @ 09/30/23 13:52:59.334
  Sep 30 13:52:59.334: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename downward-api @ 09/30/23 13:52:59.335
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:52:59.349
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:52:59.352
  STEP: Creating a pod to test downward API volume plugin @ 09/30/23 13:52:59.356
  E0930 13:52:59.651191      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:00.652057      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:01.652439      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:02.652541      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:53:03.38
  Sep 30 13:53:03.383: INFO: Trying to get logs from node ip-172-31-39-81 pod downwardapi-volume-9f5a2d83-7fc9-4264-b8e6-a01b6a8e7813 container client-container: <nil>
  STEP: delete the pod @ 09/30/23 13:53:03.391
  Sep 30 13:53:03.408: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9144" for this suite. @ 09/30/23 13:53:03.412
â€¢ [4.085 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]
test/e2e/apps/disruption.go:164
  STEP: Creating a kubernetes client @ 09/30/23 13:53:03.419
  Sep 30 13:53:03.420: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename disruption @ 09/30/23 13:53:03.42
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:53:03.432
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:53:03.436
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:53:03.446
  E0930 13:53:03.652912      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:04.653576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Updating PodDisruptionBudget status @ 09/30/23 13:53:05.453
  STEP: Waiting for all pods to be running @ 09/30/23 13:53:05.461
  Sep 30 13:53:05.467: INFO: running pods: 0 < 1
  E0930 13:53:05.654554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:06.654628      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: locating a running pod @ 09/30/23 13:53:07.472
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:53:07.484
  STEP: Patching PodDisruptionBudget status @ 09/30/23 13:53:07.491
  STEP: Waiting for the pdb to be processed @ 09/30/23 13:53:07.502
  Sep 30 13:53:07.506: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-936" for this suite. @ 09/30/23 13:53:07.511
â€¢ [4.097 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]
test/e2e/apimachinery/garbage_collector.go:638
  STEP: Creating a kubernetes client @ 09/30/23 13:53:07.517
  Sep 30 13:53:07.517: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename gc @ 09/30/23 13:53:07.518
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:53:07.53
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:53:07.535
  STEP: create the rc @ 09/30/23 13:53:07.543
  W0930 13:53:07.550217      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  E0930 13:53:07.655616      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:08.656123      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:09.657314      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:10.657409      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:11.658361      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:12.658440      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the rc @ 09/30/23 13:53:13.554
  STEP: wait for the rc to be deleted @ 09/30/23 13:53:13.561
  E0930 13:53:13.658649      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:53:14.576: INFO: 80 pods remaining
  Sep 30 13:53:14.576: INFO: 80 pods has nil DeletionTimestamp
  Sep 30 13:53:14.576: INFO: 
  E0930 13:53:14.659375      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:53:15.606: INFO: 70 pods remaining
  Sep 30 13:53:15.606: INFO: 69 pods has nil DeletionTimestamp
  Sep 30 13:53:15.606: INFO: 
  E0930 13:53:15.659610      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:53:16.574: INFO: 60 pods remaining
  Sep 30 13:53:16.574: INFO: 60 pods has nil DeletionTimestamp
  Sep 30 13:53:16.574: INFO: 
  E0930 13:53:16.659872      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:53:17.577: INFO: 40 pods remaining
  Sep 30 13:53:17.577: INFO: 40 pods has nil DeletionTimestamp
  Sep 30 13:53:17.577: INFO: 
  E0930 13:53:17.660359      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:53:18.573: INFO: 31 pods remaining
  Sep 30 13:53:18.573: INFO: 31 pods has nil DeletionTimestamp
  Sep 30 13:53:18.573: INFO: 
  E0930 13:53:18.661083      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:53:19.571: INFO: 20 pods remaining
  Sep 30 13:53:19.571: INFO: 20 pods has nil DeletionTimestamp
  Sep 30 13:53:19.571: INFO: 
  E0930 13:53:19.661654      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 09/30/23 13:53:20.571
  W0930 13:53:20.578492      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Sep 30 13:53:20.578: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Sep 30 13:53:20.579: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-2269" for this suite. @ 09/30/23 13:53:20.585
â€¢ [13.075 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]
test/e2e/network/service.go:1493
  STEP: Creating a kubernetes client @ 09/30/23 13:53:20.593
  Sep 30 13:53:20.593: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename services @ 09/30/23 13:53:20.594
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:53:20.61
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:53:20.614
  STEP: creating a service clusterip-service with the type=ClusterIP in namespace services-3980 @ 09/30/23 13:53:20.618
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 09/30/23 13:53:20.631
  STEP: creating service externalsvc in namespace services-3980 @ 09/30/23 13:53:20.631
  STEP: creating replication controller externalsvc in namespace services-3980 @ 09/30/23 13:53:20.641
  I0930 13:53:20.648973      23 runners.go:197] Created replication controller with name: externalsvc, namespace: services-3980, replica count: 2
  E0930 13:53:20.662607      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:21.663459      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:22.664105      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:23.664409      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0930 13:53:23.700770      23 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the ClusterIP service to type=ExternalName @ 09/30/23 13:53:23.705
  Sep 30 13:53:23.719: INFO: Creating new exec pod
  E0930 13:53:24.664791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:25.664919      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:53:25.734: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=services-3980 exec execpodtl4tb -- /bin/sh -x -c nslookup clusterip-service.services-3980.svc.cluster.local'
  Sep 30 13:53:25.964: INFO: stderr: "+ nslookup clusterip-service.services-3980.svc.cluster.local\n"
  Sep 30 13:53:25.964: INFO: stdout: "Server:\t\t10.152.183.166\nAddress:\t10.152.183.166#53\n\nclusterip-service.services-3980.svc.cluster.local\tcanonical name = externalsvc.services-3980.svc.cluster.local.\nName:\texternalsvc.services-3980.svc.cluster.local\nAddress: 10.152.183.111\n\n"
  Sep 30 13:53:25.964: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController externalsvc in namespace services-3980, will wait for the garbage collector to delete the pods @ 09/30/23 13:53:25.97
  Sep 30 13:53:26.031: INFO: Deleting ReplicationController externalsvc took: 6.690162ms
  Sep 30 13:53:26.132: INFO: Terminating ReplicationController externalsvc pods took: 100.87274ms
  E0930 13:53:26.665973      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:27.666632      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:28.666925      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:53:29.150: INFO: Cleaning up the ClusterIP to ExternalName test service
  STEP: Destroying namespace "services-3980" for this suite. @ 09/30/23 13:53:29.161
â€¢ [8.575 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should patch a pod status [Conformance]
test/e2e/common/node/pods.go:1084
  STEP: Creating a kubernetes client @ 09/30/23 13:53:29.169
  Sep 30 13:53:29.169: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 13:53:29.17
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:53:29.187
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:53:29.191
  STEP: Create a pod @ 09/30/23 13:53:29.195
  E0930 13:53:29.667730      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:30.668065      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: patching /status @ 09/30/23 13:53:31.214
  Sep 30 13:53:31.225: INFO: Status Message: "Patched by e2e test" and Reason: "E2E"
  Sep 30 13:53:31.225: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-3813" for this suite. @ 09/30/23 13:53:31.23
â€¢ [2.068 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]
test/e2e/apps/cronjob.go:70
  STEP: Creating a kubernetes client @ 09/30/23 13:53:31.237
  Sep 30 13:53:31.237: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename cronjob @ 09/30/23 13:53:31.238
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:53:31.253
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:53:31.257
  STEP: Creating a cronjob @ 09/30/23 13:53:31.263
  STEP: Ensuring more than one job is running at a time @ 09/30/23 13:53:31.27
  E0930 13:53:31.669064      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:32.669663      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:33.670672      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:34.671753      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:35.672743      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:36.672942      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:37.673652      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:38.673878      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:39.674001      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:40.675047      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:41.675153      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:42.675270      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:43.675756      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:44.675930      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:45.676721      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:46.677215      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:47.677268      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:48.677490      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:49.678455      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:50.678648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:51.679340      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:52.679454      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:53.679731      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:54.679908      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:55.680258      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:56.680962      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:57.681938      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:58.682045      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:53:59.682398      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:00.682701      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:01.683342      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:02.683735      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:03.684342      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:04.684586      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:05.685002      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:06.685621      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:07.685927      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:08.686171      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:09.686748      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:10.686975      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:11.687957      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:12.688094      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:13.688711      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:14.689082      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:15.689163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:16.690013      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:17.690341      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:18.690628      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:19.690814      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:20.690990      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:21.691696      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:22.691856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:23.692038      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:24.692196      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:25.692658      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:26.693141      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:27.693358      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:28.693467      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:29.694055      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:30.694164      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:31.695051      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:32.695268      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:33.695706      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:34.696030      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:35.696626      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:36.696739      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:37.697336      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:38.697457      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:39.698360      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:40.698743      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:41.699483      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:42.699692      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:43.700505      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:44.700603      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:45.700709      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:46.701241      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:47.702075      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:48.702432      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:49.703163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:50.703373      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:51.703946      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:52.704291      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:53.705209      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:54.705331      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:55.706383      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:56.706667      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:57.706730      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:58.706990      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:54:59.707923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:00.708503      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring at least two running jobs exists by listing jobs explicitly @ 09/30/23 13:55:01.276
  STEP: Removing cronjob @ 09/30/23 13:55:01.28
  Sep 30 13:55:01.287: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-9292" for this suite. @ 09/30/23 13:55:01.291
â€¢ [90.061 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]
test/e2e/apimachinery/namespace.go:272
  STEP: Creating a kubernetes client @ 09/30/23 13:55:01.299
  Sep 30 13:55:01.299: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename namespaces @ 09/30/23 13:55:01.3
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:01.318
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:01.322
  STEP: creating a Namespace @ 09/30/23 13:55:01.328
  STEP: patching the Namespace @ 09/30/23 13:55:01.341
  STEP: get the Namespace and ensuring it has the label @ 09/30/23 13:55:01.349
  Sep 30 13:55:01.352: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-6943" for this suite. @ 09/30/23 13:55:01.357
  STEP: Destroying namespace "nspatchtest-201bc2e0-02d4-4f07-a46f-28c0effb2888-9085" for this suite. @ 09/30/23 13:55:01.364
â€¢ [0.071 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:153
  STEP: Creating a kubernetes client @ 09/30/23 13:55:01.372
  Sep 30 13:55:01.372: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-publish-openapi @ 09/30/23 13:55:01.372
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:01.386
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:01.389
  Sep 30 13:55:01.393: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:55:01.708710      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:02.709064      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 09/30/23 13:55:02.804
  Sep 30 13:55:02.805: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2283 --namespace=crd-publish-openapi-2283 create -f -'
  Sep 30 13:55:03.338: INFO: stderr: ""
  Sep 30 13:55:03.338: INFO: stdout: "e2e-test-crd-publish-openapi-3408-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Sep 30 13:55:03.339: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2283 --namespace=crd-publish-openapi-2283 delete e2e-test-crd-publish-openapi-3408-crds test-cr'
  Sep 30 13:55:03.421: INFO: stderr: ""
  Sep 30 13:55:03.421: INFO: stdout: "e2e-test-crd-publish-openapi-3408-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  Sep 30 13:55:03.421: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2283 --namespace=crd-publish-openapi-2283 apply -f -'
  E0930 13:55:03.709338      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:03.982: INFO: stderr: ""
  Sep 30 13:55:03.982: INFO: stdout: "e2e-test-crd-publish-openapi-3408-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Sep 30 13:55:03.982: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2283 --namespace=crd-publish-openapi-2283 delete e2e-test-crd-publish-openapi-3408-crds test-cr'
  Sep 30 13:55:04.065: INFO: stderr: ""
  Sep 30 13:55:04.065: INFO: stdout: "e2e-test-crd-publish-openapi-3408-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR without validation schema @ 09/30/23 13:55:04.065
  Sep 30 13:55:04.065: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=crd-publish-openapi-2283 explain e2e-test-crd-publish-openapi-3408-crds'
  Sep 30 13:55:04.349: INFO: stderr: ""
  Sep 30 13:55:04.349: INFO: stdout: "GROUP:      crd-publish-openapi-test-empty.example.com\nKIND:       e2e-test-crd-publish-openapi-3408-crd\nVERSION:    v1\n\nDESCRIPTION:\n    <empty>\nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n\n"
  E0930 13:55:04.709449      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:05.709815      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:05.762: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2283" for this suite. @ 09/30/23 13:55:05.774
â€¢ [4.409 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should delete a collection of pod templates [Conformance]
test/e2e/common/node/podtemplates.go:122
  STEP: Creating a kubernetes client @ 09/30/23 13:55:05.782
  Sep 30 13:55:05.782: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename podtemplate @ 09/30/23 13:55:05.783
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:05.796
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:05.799
  STEP: Create set of pod templates @ 09/30/23 13:55:05.804
  Sep 30 13:55:05.811: INFO: created test-podtemplate-1
  Sep 30 13:55:05.816: INFO: created test-podtemplate-2
  Sep 30 13:55:05.820: INFO: created test-podtemplate-3
  STEP: get a list of pod templates with a label in the current namespace @ 09/30/23 13:55:05.82
  STEP: delete collection of pod templates @ 09/30/23 13:55:05.824
  Sep 30 13:55:05.825: INFO: requesting DeleteCollection of pod templates
  STEP: check that the list of pod templates matches the requested quantity @ 09/30/23 13:55:05.841
  Sep 30 13:55:05.841: INFO: requesting list of pod templates to confirm quantity
  Sep 30 13:55:05.844: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-857" for this suite. @ 09/30/23 13:55:05.848
â€¢ [0.075 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Pods should delete a collection of pods [Conformance]
test/e2e/common/node/pods.go:846
  STEP: Creating a kubernetes client @ 09/30/23 13:55:05.857
  Sep 30 13:55:05.857: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename pods @ 09/30/23 13:55:05.858
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:05.87
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:05.873
  STEP: Create set of pods @ 09/30/23 13:55:05.878
  Sep 30 13:55:05.885: INFO: created test-pod-1
  Sep 30 13:55:05.892: INFO: created test-pod-2
  Sep 30 13:55:05.900: INFO: created test-pod-3
  STEP: waiting for all 3 pods to be running @ 09/30/23 13:55:05.9
  E0930 13:55:06.709943      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:07.710035      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting for all pods to be deleted @ 09/30/23 13:55:07.95
  Sep 30 13:55:07.957: INFO: Pod quantity 3 is different from expected quantity 0
  E0930 13:55:08.710661      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:08.962: INFO: Pod quantity 3 is different from expected quantity 0
  E0930 13:55:09.711735      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:09.961: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-5899" for this suite. @ 09/30/23 13:55:09.966
â€¢ [4.117 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:52
  STEP: Creating a kubernetes client @ 09/30/23 13:55:09.974
  Sep 30 13:55:09.974: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-runtime @ 09/30/23 13:55:09.975
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:09.988
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:09.993
  STEP: Container 'terminate-cmd-rpa': should get the expected 'RestartCount' @ 09/30/23 13:55:10.005
  E0930 13:55:10.712232      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:11.713062      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:12.713171      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:13.713729      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:14.713817      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:15.714650      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:16.714756      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:17.714886      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:18.715180      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:19.715516      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:20.715621      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:21.716601      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:22.717561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:23.718675      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:24.719779      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:25.719878      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:26.719968      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:27.720775      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Phase' @ 09/30/23 13:55:28.089
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Ready' condition @ 09/30/23 13:55:28.093
  STEP: Container 'terminate-cmd-rpa': should get the expected 'State' @ 09/30/23 13:55:28.1
  STEP: Container 'terminate-cmd-rpa': should be possible to delete [NodeConformance] @ 09/30/23 13:55:28.1
  STEP: Container 'terminate-cmd-rpof': should get the expected 'RestartCount' @ 09/30/23 13:55:28.124
  E0930 13:55:28.720933      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:29.721201      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Phase' @ 09/30/23 13:55:30.139
  E0930 13:55:30.721302      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:31.721418      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Ready' condition @ 09/30/23 13:55:32.151
  STEP: Container 'terminate-cmd-rpof': should get the expected 'State' @ 09/30/23 13:55:32.158
  STEP: Container 'terminate-cmd-rpof': should be possible to delete [NodeConformance] @ 09/30/23 13:55:32.158
  STEP: Container 'terminate-cmd-rpn': should get the expected 'RestartCount' @ 09/30/23 13:55:32.18
  E0930 13:55:32.721537      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Phase' @ 09/30/23 13:55:33.191
  E0930 13:55:33.721667      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:34.721794      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:35.722224      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Ready' condition @ 09/30/23 13:55:36.208
  STEP: Container 'terminate-cmd-rpn': should get the expected 'State' @ 09/30/23 13:55:36.216
  STEP: Container 'terminate-cmd-rpn': should be possible to delete [NodeConformance] @ 09/30/23 13:55:36.216
  Sep 30 13:55:36.230: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-9107" for this suite. @ 09/30/23 13:55:36.248
â€¢ [26.283 seconds]
------------------------------
SS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:57
  STEP: Creating a kubernetes client @ 09/30/23 13:55:36.257
  Sep 30 13:55:36.257: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename configmap @ 09/30/23 13:55:36.258
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:36.276
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:36.279
  STEP: Creating configMap with name configmap-test-volume-33f13ca3-6649-4a8b-ac41-a969ec8abbfe @ 09/30/23 13:55:36.284
  STEP: Creating a pod to test consume configMaps @ 09/30/23 13:55:36.29
  E0930 13:55:36.723075      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:37.723215      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:38.723334      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:39.723452      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:55:40.315
  Sep 30 13:55:40.318: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-configmaps-4cd0a8a8-b327-499d-839b-c7760c70855f container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:55:40.338
  Sep 30 13:55:40.354: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-542" for this suite. @ 09/30/23 13:55:40.358
â€¢ [4.107 seconds]
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:276
  STEP: Creating a kubernetes client @ 09/30/23 13:55:40.364
  Sep 30 13:55:40.364: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename crd-publish-openapi @ 09/30/23 13:55:40.365
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:40.378
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:40.382
  STEP: CRs in different groups (two CRDs) show up in OpenAPI documentation @ 09/30/23 13:55:40.386
  Sep 30 13:55:40.387: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:55:40.723530      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:41.724065      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:41.851: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  E0930 13:55:42.725145      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:43.725225      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:44.726178      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:45.726473      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:46.726704      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:47.549: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2631" for this suite. @ 09/30/23 13:55:47.561
â€¢ [7.204 seconds]
------------------------------
SS
------------------------------
[sig-network] DNS should provide DNS for the cluster  [Conformance]
test/e2e/network/dns.go:50
  STEP: Creating a kubernetes client @ 09/30/23 13:55:47.568
  Sep 30 13:55:47.568: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename dns @ 09/30/23 13:55:47.569
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:47.584
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:47.588
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 09/30/23 13:55:47.591
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 09/30/23 13:55:47.591
  STEP: creating a pod to probe DNS @ 09/30/23 13:55:47.591
  STEP: submitting the pod to kubernetes @ 09/30/23 13:55:47.591
  E0930 13:55:47.727374      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:48.727853      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 09/30/23 13:55:49.614
  STEP: looking for the results for each expected name from probers @ 09/30/23 13:55:49.618
  Sep 30 13:55:49.636: INFO: DNS probes using dns-1665/dns-test-166eda8e-d73f-48e1-baf3-097deeeef2fc succeeded

  Sep 30 13:55:49.636: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 09/30/23 13:55:49.64
  STEP: Destroying namespace "dns-1665" for this suite. @ 09/30/23 13:55:49.654
â€¢ [2.094 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]
test/e2e/apimachinery/garbage_collector.go:479
  STEP: Creating a kubernetes client @ 09/30/23 13:55:49.663
  Sep 30 13:55:49.663: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename gc @ 09/30/23 13:55:49.664
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:49.677
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:49.681
  STEP: create the deployment @ 09/30/23 13:55:49.685
  W0930 13:55:49.691499      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 09/30/23 13:55:49.691
  E0930 13:55:49.728039      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the deployment @ 09/30/23 13:55:50.199
  STEP: wait for all rs to be garbage collected @ 09/30/23 13:55:50.206
  STEP: expected 0 rs, got 1 rs @ 09/30/23 13:55:50.214
  STEP: expected 0 pods, got 2 pods @ 09/30/23 13:55:50.218
  E0930 13:55:50.728641      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 09/30/23 13:55:50.73
  W0930 13:55:50.736398      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Sep 30 13:55:50.736: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Sep 30 13:55:50.736: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-4780" for this suite. @ 09/30/23 13:55:50.741
â€¢ [1.084 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl logs logs should be able to retrieve and filter logs  [Conformance]
test/e2e/kubectl/logs.go:114
  STEP: Creating a kubernetes client @ 09/30/23 13:55:50.748
  Sep 30 13:55:50.748: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename kubectl-logs @ 09/30/23 13:55:50.749
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:50.763
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:50.767
  STEP: creating an pod @ 09/30/23 13:55:50.771
  Sep 30 13:55:50.771: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-logs-4100 run logs-generator --image=registry.k8s.io/e2e-test-images/agnhost:2.45 --restart=Never --pod-running-timeout=2m0s -- logs-generator --log-lines-total 100 --run-duration 20s'
  Sep 30 13:55:50.855: INFO: stderr: ""
  Sep 30 13:55:50.855: INFO: stdout: "pod/logs-generator created\n"
  STEP: Waiting for log generator to start. @ 09/30/23 13:55:50.855
  Sep 30 13:55:50.855: INFO: Waiting up to 5m0s for 1 pods to be running and ready, or succeeded: [logs-generator]
  E0930 13:55:51.729723      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:52.730141      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:52.867: INFO: Wanted all 1 pods to be running and ready, or succeeded. Result: true. Pods: [logs-generator]
  STEP: checking for a matching strings @ 09/30/23 13:55:52.867
  Sep 30 13:55:52.867: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-logs-4100 logs logs-generator logs-generator'
  Sep 30 13:55:52.952: INFO: stderr: ""
  Sep 30 13:55:52.952: INFO: stdout: "I0930 13:55:51.693087       1 logs_generator.go:76] 0 GET /api/v1/namespaces/ns/pods/nqlq 404\nI0930 13:55:51.893519       1 logs_generator.go:76] 1 GET /api/v1/namespaces/kube-system/pods/f75 346\nI0930 13:55:52.093869       1 logs_generator.go:76] 2 GET /api/v1/namespaces/ns/pods/x87 448\nI0930 13:55:52.293166       1 logs_generator.go:76] 3 POST /api/v1/namespaces/ns/pods/tdj4 452\nI0930 13:55:52.493492       1 logs_generator.go:76] 4 PUT /api/v1/namespaces/default/pods/j5t 366\nI0930 13:55:52.693871       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/ns/pods/f7zh 371\nI0930 13:55:52.893132       1 logs_generator.go:76] 6 GET /api/v1/namespaces/kube-system/pods/f5d 341\n"
  STEP: limiting log lines @ 09/30/23 13:55:52.952
  Sep 30 13:55:52.952: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-logs-4100 logs logs-generator logs-generator --tail=1'
  Sep 30 13:55:53.047: INFO: stderr: ""
  Sep 30 13:55:53.047: INFO: stdout: "I0930 13:55:52.893132       1 logs_generator.go:76] 6 GET /api/v1/namespaces/kube-system/pods/f5d 341\n"
  Sep 30 13:55:53.047: INFO: got output "I0930 13:55:52.893132       1 logs_generator.go:76] 6 GET /api/v1/namespaces/kube-system/pods/f5d 341\n"
  STEP: limiting log bytes @ 09/30/23 13:55:53.047
  Sep 30 13:55:53.047: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-logs-4100 logs logs-generator logs-generator --limit-bytes=1'
  Sep 30 13:55:53.129: INFO: stderr: ""
  Sep 30 13:55:53.129: INFO: stdout: "I"
  Sep 30 13:55:53.129: INFO: got output "I"
  STEP: exposing timestamps @ 09/30/23 13:55:53.129
  Sep 30 13:55:53.129: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-logs-4100 logs logs-generator logs-generator --tail=1 --timestamps'
  Sep 30 13:55:53.213: INFO: stderr: ""
  Sep 30 13:55:53.213: INFO: stdout: "2023-09-30T13:55:53.093530285Z I0930 13:55:53.093431       1 logs_generator.go:76] 7 POST /api/v1/namespaces/ns/pods/7k4 372\n"
  Sep 30 13:55:53.213: INFO: got output "2023-09-30T13:55:53.093530285Z I0930 13:55:53.093431       1 logs_generator.go:76] 7 POST /api/v1/namespaces/ns/pods/7k4 372\n"
  STEP: restricting to a time range @ 09/30/23 13:55:53.213
  E0930 13:55:53.731119      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:54.731343      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:55.713: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-logs-4100 logs logs-generator logs-generator --since=1s'
  E0930 13:55:55.732064      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:55.796: INFO: stderr: ""
  Sep 30 13:55:55.796: INFO: stdout: "I0930 13:55:54.893142       1 logs_generator.go:76] 16 GET /api/v1/namespaces/kube-system/pods/k9w 248\nI0930 13:55:55.093521       1 logs_generator.go:76] 17 PUT /api/v1/namespaces/default/pods/tnlv 307\nI0930 13:55:55.293923       1 logs_generator.go:76] 18 POST /api/v1/namespaces/default/pods/d96w 445\nI0930 13:55:55.493154       1 logs_generator.go:76] 19 PUT /api/v1/namespaces/kube-system/pods/67l5 510\nI0930 13:55:55.693522       1 logs_generator.go:76] 20 POST /api/v1/namespaces/kube-system/pods/8mw 254\n"
  Sep 30 13:55:55.796: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-logs-4100 logs logs-generator logs-generator --since=24h'
  Sep 30 13:55:55.879: INFO: stderr: ""
  Sep 30 13:55:55.879: INFO: stdout: "I0930 13:55:51.693087       1 logs_generator.go:76] 0 GET /api/v1/namespaces/ns/pods/nqlq 404\nI0930 13:55:51.893519       1 logs_generator.go:76] 1 GET /api/v1/namespaces/kube-system/pods/f75 346\nI0930 13:55:52.093869       1 logs_generator.go:76] 2 GET /api/v1/namespaces/ns/pods/x87 448\nI0930 13:55:52.293166       1 logs_generator.go:76] 3 POST /api/v1/namespaces/ns/pods/tdj4 452\nI0930 13:55:52.493492       1 logs_generator.go:76] 4 PUT /api/v1/namespaces/default/pods/j5t 366\nI0930 13:55:52.693871       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/ns/pods/f7zh 371\nI0930 13:55:52.893132       1 logs_generator.go:76] 6 GET /api/v1/namespaces/kube-system/pods/f5d 341\nI0930 13:55:53.093431       1 logs_generator.go:76] 7 POST /api/v1/namespaces/ns/pods/7k4 372\nI0930 13:55:53.293783       1 logs_generator.go:76] 8 GET /api/v1/namespaces/ns/pods/phth 470\nI0930 13:55:53.494140       1 logs_generator.go:76] 9 POST /api/v1/namespaces/default/pods/6f9 547\nI0930 13:55:53.693436       1 logs_generator.go:76] 10 POST /api/v1/namespaces/kube-system/pods/6ww 328\nI0930 13:55:53.893768       1 logs_generator.go:76] 11 PUT /api/v1/namespaces/kube-system/pods/8zsm 317\nI0930 13:55:54.094028       1 logs_generator.go:76] 12 GET /api/v1/namespaces/kube-system/pods/6zds 375\nI0930 13:55:54.293162       1 logs_generator.go:76] 13 GET /api/v1/namespaces/ns/pods/g6x 286\nI0930 13:55:54.493508       1 logs_generator.go:76] 14 POST /api/v1/namespaces/ns/pods/qgg 263\nI0930 13:55:54.693866       1 logs_generator.go:76] 15 POST /api/v1/namespaces/ns/pods/mcb7 498\nI0930 13:55:54.893142       1 logs_generator.go:76] 16 GET /api/v1/namespaces/kube-system/pods/k9w 248\nI0930 13:55:55.093521       1 logs_generator.go:76] 17 PUT /api/v1/namespaces/default/pods/tnlv 307\nI0930 13:55:55.293923       1 logs_generator.go:76] 18 POST /api/v1/namespaces/default/pods/d96w 445\nI0930 13:55:55.493154       1 logs_generator.go:76] 19 PUT /api/v1/namespaces/kube-system/pods/67l5 510\nI0930 13:55:55.693522       1 logs_generator.go:76] 20 POST /api/v1/namespaces/kube-system/pods/8mw 254\n"
  Sep 30 13:55:55.879: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1869086199 --namespace=kubectl-logs-4100 delete pod logs-generator'
  E0930 13:55:56.732239      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:55:57.190: INFO: stderr: ""
  Sep 30 13:55:57.190: INFO: stdout: "pod \"logs-generator\" deleted\n"
  Sep 30 13:55:57.191: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-logs-4100" for this suite. @ 09/30/23 13:55:57.195
â€¢ [6.454 seconds]
------------------------------
SS
------------------------------
[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]
test/e2e/apps/deployment.go:105
  STEP: Creating a kubernetes client @ 09/30/23 13:55:57.202
  Sep 30 13:55:57.202: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename deployment @ 09/30/23 13:55:57.203
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:55:57.216
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:55:57.22
  Sep 30 13:55:57.224: INFO: Creating replica set "test-rolling-update-controller" (going to be adopted)
  Sep 30 13:55:57.234: INFO: Pod name sample-pod: Found 0 pods out of 1
  E0930 13:55:57.733114      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:58.733228      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:55:59.733560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:00.733860      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:01.734368      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:56:02.239: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 09/30/23 13:56:02.239
  Sep 30 13:56:02.239: INFO: Creating deployment "test-rolling-update-deployment"
  Sep 30 13:56:02.246: INFO: Ensuring deployment "test-rolling-update-deployment" gets the next revision from the one the adopted replica set "test-rolling-update-controller" has
  Sep 30 13:56:02.254: INFO: new replicaset for deployment "test-rolling-update-deployment" is yet to be created
  E0930 13:56:02.734490      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:03.734791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:56:04.263: INFO: Ensuring status for deployment "test-rolling-update-deployment" is the expected
  Sep 30 13:56:04.267: INFO: Ensuring deployment "test-rolling-update-deployment" has one old replica set (the one it adopted)
  Sep 30 13:56:04.278: INFO: Deployment "test-rolling-update-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7128",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a2d53678-0402-4c94-ad96-9ebafb4a7552",
      ResourceVersion: (string) (len=5) "43680",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831678962,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=10) "sample-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678962,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678963,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=10) "sample-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=10) "sample-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678962,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678962,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678963,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678962,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=82) "ReplicaSet \"test-rolling-update-deployment-7f5c55c64\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Sep 30 13:56:04.283: INFO: New ReplicaSet "test-rolling-update-deployment-7f5c55c64" of Deployment "test-rolling-update-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7128",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6df0a84d-ce44-46ed-8ab7-2a3a1c94ddda",
      ResourceVersion: (string) (len=5) "43669",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831678962,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64",
        (string) (len=4) "name": (string) (len=10) "sample-pod"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "a2d53678-0402-4c94-ad96-9ebafb4a7552",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678962,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 61 32 64 35 33 36  37 38 2d 30 34 30 32 2d  |\"a2d53678-0402-|
              00000120  34 63 39 34 2d 61 64 39  36 2d 39 65 62 61 66 62  |4c94-ad96-9ebafb|
              00000130  34 61 37 35 35 32 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |4a7552\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678963,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:56:04.284: INFO: All old ReplicaSets of Deployment "test-rolling-update-deployment":
  Sep 30 13:56:04.284: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7128",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3ee3cf05-25a8-4434-ba87-a6d61be8da2c",
      ResourceVersion: (string) (len=5) "43679",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831678957,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305832"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "a2d53678-0402-4c94-ad96-9ebafb4a7552",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678957,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=533) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  2c 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |,"f:labels":{"."|
              00000060  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000070  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              00000080  73 70 65 63 22 3a 7b 22  66 3a 73 65 6c 65 63 74  |spec":{"f:select|
              00000090  6f 72 22 3a 7b 7d 2c 22  66 3a 74 65 6d 70 6c 61  |or":{},"f:templa|
              000000a0  74 65 22 3a 7b 22 66 3a  6d 65 74 61 64 61 74 61  |te":{"f:metadata|
              000000b0  22 3a 7b 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |":{"f:labels":{"|
              000000c0  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              000000d0  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 7d 2c 22  |},"f:pod":{}}},"|
              000000e0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000f0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              00000100  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              00000110  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000120  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000130  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000140  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000150  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 74 65  |ources":{},"f:te|
              00000160  72 6d 69 6e 61 74 69 6f  6e 4d 65 73 73 61 67 65  |rminationMessage|
              00000170  50 61 74 68 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |Path":{},"f:term|
              00000180  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 6f  |inationMessagePo|
              00000190  6c 69 63 79 22 3a 7b 7d  7d 7d 2c 22 66 3a 64 6e  |licy":{}}},"f:dn|
              000001a0  73 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 72  |sPolicy":{},"f:r|
              000001b0  65 73 74 61 72 74 50 6f  6c 69 63 79 22 3a 7b 7d  |estartPolicy":{}|
              000001c0  2c 22 66 3a 73 63 68 65  64 75 6c 65 72 4e 61 6d  |,"f:schedulerNam|
              000001d0  65 22 3a 7b 7d 2c 22 66  3a 73 65 63 75 72 69 74  |e":{},"f:securit|
              000001e0  79 43 6f 6e 74 65 78 74  22 3a 7b 7d 2c 22 66 3a  |yContext":{},"f:|
              000001f0  74 65 72 6d 69 6e 61 74  69 6f 6e 47 72 61 63 65  |terminationGrace|
              00000200  50 65 72 69 6f 64 53 65  63 6f 6e 64 73 22 3a 7b  |PeriodSeconds":{|
              00000210  7d 7d 7d 7d 7d                                    |}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678963,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=242) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 66 3a 64 65 70 6c 6f  79 6d 65 6e 74 2e 6b 75  |"f:deployment.ku|
              00000030  62 65 72 6e 65 74 65 73  2e 69 6f 2f 64 65 73 69  |bernetes.io/desi|
              00000040  72 65 64 2d 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |red-replicas":{}|
              00000050  2c 22 66 3a 64 65 70 6c  6f 79 6d 65 6e 74 2e 6b  |,"f:deployment.k|
              00000060  75 62 65 72 6e 65 74 65  73 2e 69 6f 2f 6d 61 78  |ubernetes.io/max|
              00000070  2d 72 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 2c 22  |-replicas":{}},"|
              00000080  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000090  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              000000a0  22 75 69 64 5c 22 3a 5c  22 61 32 64 35 33 36 37  |"uid\":\"a2d5367|
              000000b0  38 2d 30 34 30 32 2d 34  63 39 34 2d 61 64 39 36  |8-0402-4c94-ad96|
              000000c0  2d 39 65 62 61 66 62 34  61 37 35 35 32 5c 22 7d  |-9ebafb4a7552\"}|
              000000d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000000e0  7b 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |{"f:replicas":{}|
              000000f0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678963,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=3) "pod": (string) (len=5) "httpd",
            (string) (len=4) "name": (string) (len=10) "sample-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Sep 30 13:56:04.289: INFO: Pod "test-rolling-update-deployment-7f5c55c64-5g76n" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=46) "test-rolling-update-deployment-7f5c55c64-5g76n",
      GenerateName: (string) (len=41) "test-rolling-update-deployment-7f5c55c64-",
      Namespace: (string) (len=15) "deployment-7128",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "024bd66f-612b-43da-9698-346c2e963395",
      ResourceVersion: (string) (len=5) "43668",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831678962,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64",
        (string) (len=4) "name": (string) (len=10) "sample-pod"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
          UID: (types.UID) (len=36) "6df0a84d-ce44-46ed-8ab7-2a3a1c94ddda",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678962,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 36 64  66 30 61 38 34 64 2d 63  |d\":\"6df0a84d-c|
              00000090  65 34 34 2d 34 36 65 64  2d 38 61 62 37 2d 32 61  |e44-46ed-8ab7-2a|
              000000a0  33 61 31 63 39 34 64 64  64 61 5c 22 7d 22 3a 7b  |3a1c94ddda\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678963,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=520) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 39 32 2e 31 36 38 2e  31 30 2e 39 34 5c 22 7d  |192.168.10.94\"}|
              000001e0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              000001f0  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000200  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6f4w4",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6f4w4",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-31-30",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678962,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678963,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678963,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63831678962,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.31.30",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=13) "192.168.10.94",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "192.168.10.94"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63831678962,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63831678963,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://7786aee641e9774fee229f5f9db9f916b1ab9ebc1c8596bb6f79978cd5e10c02",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Sep 30 13:56:04.290: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-7128" for this suite. @ 09/30/23 13:56:04.294
â€¢ [7.099 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:163
  STEP: Creating a kubernetes client @ 09/30/23 13:56:04.308
  Sep 30 13:56:04.308: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:56:04.309
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:56:04.322
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:56:04.326
  STEP: Creating the pod @ 09/30/23 13:56:04.33
  E0930 13:56:04.735024      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:05.735278      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:06.735543      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:56:06.886: INFO: Successfully updated pod "annotationupdate728f2a7d-448b-410b-8d90-f6d6ce2f2c75"
  E0930 13:56:07.736559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:08.736788      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:56:08.904: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3295" for this suite. @ 09/30/23 13:56:08.907
â€¢ [4.606 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:107
  STEP: Creating a kubernetes client @ 09/30/23 13:56:08.915
  Sep 30 13:56:08.915: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename container-probe @ 09/30/23 13:56:08.916
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:56:08.928
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:56:08.932
  E0930 13:56:09.736838      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:10.736910      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:11.737923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:12.738580      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:13.738661      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:14.738697      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:15.738821      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:16.739265      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:17.739384      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:18.740363      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:19.740472      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:20.740578      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:21.741649      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:22.741755      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:23.742694      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:24.743726      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:25.743836      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:26.743942      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:27.744837      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:28.744921      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:29.745810      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:30.745927      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:31.746018      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:32.746029      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:33.746396      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:34.747183      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:35.747282      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:36.747566      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:37.748094      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:38.748210      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:39.748328      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:40.749404      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:41.750446      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:42.751515      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:43.751737      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:44.751847      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:45.752828      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:46.752946      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:47.753650      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:48.753963      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:49.754054      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:50.754172      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:51.755147      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:52.755244      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:53.755377      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:54.755491      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:55.755598      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:56.756011      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:57.756522      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:58.756576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:56:59.757420      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:00.757544      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:01.757603      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:02.758394      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:03.758595      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:04.759481      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:05.760178      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:06.760296      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:07.761210      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:08.762024      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:57:08.950: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-1223" for this suite. @ 09/30/23 13:57:08.954
â€¢ [60.045 seconds]
------------------------------
S
------------------------------
[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]
test/e2e/network/proxy.go:101
  STEP: Creating a kubernetes client @ 09/30/23 13:57:08.96
  Sep 30 13:57:08.960: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename proxy @ 09/30/23 13:57:08.961
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:57:08.981
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:57:08.985
  STEP: starting an echo server on multiple ports @ 09/30/23 13:57:09.001
  STEP: creating replication controller proxy-service-xp4w9 in namespace proxy-5130 @ 09/30/23 13:57:09.002
  I0930 13:57:09.010080      23 runners.go:197] Created replication controller with name: proxy-service-xp4w9, namespace: proxy-5130, replica count: 1
  E0930 13:57:09.762081      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0930 13:57:10.061579      23 runners.go:197] proxy-service-xp4w9 Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  E0930 13:57:10.763106      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0930 13:57:11.062570      23 runners.go:197] proxy-service-xp4w9 Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Sep 30 13:57:11.066: INFO: setup took 2.077888614s, starting test cases
  STEP: running 16 cases, 20 attempts per case, 320 total attempts @ 09/30/23 13:57:11.067
  Sep 30 13:57:11.072: INFO: (0) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.833967ms)
  Sep 30 13:57:11.073: INFO: (0) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 5.918409ms)
  Sep 30 13:57:11.077: INFO: (0) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 10.490078ms)
  Sep 30 13:57:11.078: INFO: (0) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 11.300069ms)
  Sep 30 13:57:11.078: INFO: (0) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 11.567313ms)
  Sep 30 13:57:11.078: INFO: (0) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 11.536963ms)
  Sep 30 13:57:11.078: INFO: (0) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 11.624834ms)
  Sep 30 13:57:11.078: INFO: (0) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 11.576974ms)
  Sep 30 13:57:11.079: INFO: (0) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 11.751577ms)
  Sep 30 13:57:11.079: INFO: (0) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 12.0391ms)
  Sep 30 13:57:11.079: INFO: (0) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 12.835563ms)
  Sep 30 13:57:11.081: INFO: (0) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 14.630809ms)
  Sep 30 13:57:11.081: INFO: (0) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 14.531129ms)
  Sep 30 13:57:11.081: INFO: (0) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 14.769842ms)
  Sep 30 13:57:11.081: INFO: (0) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 14.756121ms)
  Sep 30 13:57:11.086: INFO: (0) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 19.565973ms)
  Sep 30 13:57:11.091: INFO: (1) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 4.304345ms)
  Sep 30 13:57:11.091: INFO: (1) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 4.819843ms)
  Sep 30 13:57:11.092: INFO: (1) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 5.089596ms)
  Sep 30 13:57:11.093: INFO: (1) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 5.98685ms)
  Sep 30 13:57:11.093: INFO: (1) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 6.104841ms)
  Sep 30 13:57:11.093: INFO: (1) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 6.157142ms)
  Sep 30 13:57:11.093: INFO: (1) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.347325ms)
  Sep 30 13:57:11.093: INFO: (1) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.233113ms)
  Sep 30 13:57:11.093: INFO: (1) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.479657ms)
  Sep 30 13:57:11.094: INFO: (1) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.867433ms)
  Sep 30 13:57:11.094: INFO: (1) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 7.023296ms)
  Sep 30 13:57:11.094: INFO: (1) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 6.991025ms)
  Sep 30 13:57:11.094: INFO: (1) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 7.490892ms)
  Sep 30 13:57:11.094: INFO: (1) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 7.777946ms)
  Sep 30 13:57:11.095: INFO: (1) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.904718ms)
  Sep 30 13:57:11.095: INFO: (1) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 7.964929ms)
  Sep 30 13:57:11.099: INFO: (2) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 4.351236ms)
  Sep 30 13:57:11.099: INFO: (2) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 4.424377ms)
  Sep 30 13:57:11.100: INFO: (2) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 4.694071ms)
  Sep 30 13:57:11.100: INFO: (2) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 5.153157ms)
  Sep 30 13:57:11.100: INFO: (2) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 5.276179ms)
  Sep 30 13:57:11.101: INFO: (2) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.367215ms)
  Sep 30 13:57:11.101: INFO: (2) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.453116ms)
  Sep 30 13:57:11.101: INFO: (2) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 6.372305ms)
  Sep 30 13:57:11.101: INFO: (2) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.415746ms)
  Sep 30 13:57:11.101: INFO: (2) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 6.443227ms)
  Sep 30 13:57:11.102: INFO: (2) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.246468ms)
  Sep 30 13:57:11.102: INFO: (2) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 7.098386ms)
  Sep 30 13:57:11.102: INFO: (2) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 7.429181ms)
  Sep 30 13:57:11.102: INFO: (2) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 7.33829ms)
  Sep 30 13:57:11.103: INFO: (2) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 8.070911ms)
  Sep 30 13:57:11.103: INFO: (2) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 8.062951ms)
  Sep 30 13:57:11.118: INFO: (3) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 15.155728ms)
  Sep 30 13:57:11.119: INFO: (3) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 15.533103ms)
  Sep 30 13:57:11.119: INFO: (3) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 16.129832ms)
  Sep 30 13:57:11.119: INFO: (3) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 16.216083ms)
  Sep 30 13:57:11.119: INFO: (3) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 16.376816ms)
  Sep 30 13:57:11.119: INFO: (3) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 16.146473ms)
  Sep 30 13:57:11.120: INFO: (3) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 16.866323ms)
  Sep 30 13:57:11.120: INFO: (3) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 17.105507ms)
  Sep 30 13:57:11.122: INFO: (3) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 18.871613ms)
  Sep 30 13:57:11.123: INFO: (3) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 19.419372ms)
  Sep 30 13:57:11.124: INFO: (3) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 20.64143ms)
  Sep 30 13:57:11.124: INFO: (3) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 20.636129ms)
  Sep 30 13:57:11.124: INFO: (3) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 21.143987ms)
  Sep 30 13:57:11.124: INFO: (3) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 21.200898ms)
  Sep 30 13:57:11.126: INFO: (3) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 22.426846ms)
  Sep 30 13:57:11.126: INFO: (3) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 22.426997ms)
  Sep 30 13:57:11.132: INFO: (4) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 5.956499ms)
  Sep 30 13:57:11.134: INFO: (4) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 8.128372ms)
  Sep 30 13:57:11.134: INFO: (4) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 7.97191ms)
  Sep 30 13:57:11.134: INFO: (4) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 8.033601ms)
  Sep 30 13:57:11.134: INFO: (4) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 8.105022ms)
  Sep 30 13:57:11.136: INFO: (4) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 10.135462ms)
  Sep 30 13:57:11.137: INFO: (4) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 10.816792ms)
  Sep 30 13:57:11.137: INFO: (4) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 10.777202ms)
  Sep 30 13:57:11.137: INFO: (4) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 11.605624ms)
  Sep 30 13:57:11.138: INFO: (4) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 11.731016ms)
  Sep 30 13:57:11.139: INFO: (4) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 13.662305ms)
  Sep 30 13:57:11.140: INFO: (4) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 13.616504ms)
  Sep 30 13:57:11.140: INFO: (4) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 13.577764ms)
  Sep 30 13:57:11.140: INFO: (4) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 13.865318ms)
  Sep 30 13:57:11.140: INFO: (4) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 14.179133ms)
  Sep 30 13:57:11.141: INFO: (4) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 14.766341ms)
  Sep 30 13:57:11.147: INFO: (5) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.63743ms)
  Sep 30 13:57:11.149: INFO: (5) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 7.723756ms)
  Sep 30 13:57:11.149: INFO: (5) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 7.682696ms)
  Sep 30 13:57:11.149: INFO: (5) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 7.664936ms)
  Sep 30 13:57:11.149: INFO: (5) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 7.9732ms)
  Sep 30 13:57:11.149: INFO: (5) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 8.527288ms)
  Sep 30 13:57:11.149: INFO: (5) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 8.62219ms)
  Sep 30 13:57:11.150: INFO: (5) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 8.932724ms)
  Sep 30 13:57:11.150: INFO: (5) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 8.923964ms)
  Sep 30 13:57:11.150: INFO: (5) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 9.161028ms)
  Sep 30 13:57:11.150: INFO: (5) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 9.065746ms)
  Sep 30 13:57:11.150: INFO: (5) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 9.26644ms)
  Sep 30 13:57:11.150: INFO: (5) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 9.249079ms)
  Sep 30 13:57:11.151: INFO: (5) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 10.234834ms)
  Sep 30 13:57:11.151: INFO: (5) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 10.236723ms)
  Sep 30 13:57:11.152: INFO: (5) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 10.719511ms)
  Sep 30 13:57:11.158: INFO: (6) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 5.851128ms)
  Sep 30 13:57:11.158: INFO: (6) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.00365ms)
  Sep 30 13:57:11.158: INFO: (6) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 6.499898ms)
  Sep 30 13:57:11.158: INFO: (6) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 6.647719ms)
  Sep 30 13:57:11.159: INFO: (6) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 6.923393ms)
  Sep 30 13:57:11.159: INFO: (6) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.988035ms)
  Sep 30 13:57:11.159: INFO: (6) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.131847ms)
  Sep 30 13:57:11.159: INFO: (6) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.988064ms)
  Sep 30 13:57:11.159: INFO: (6) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 7.000426ms)
  Sep 30 13:57:11.159: INFO: (6) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 7.35989ms)
  Sep 30 13:57:11.159: INFO: (6) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 7.33196ms)
  Sep 30 13:57:11.160: INFO: (6) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 8.067921ms)
  Sep 30 13:57:11.160: INFO: (6) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 8.603729ms)
  Sep 30 13:57:11.160: INFO: (6) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 8.561018ms)
  Sep 30 13:57:11.160: INFO: (6) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 8.724791ms)
  Sep 30 13:57:11.161: INFO: (6) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 9.34435ms)
  Sep 30 13:57:11.166: INFO: (7) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 4.865812ms)
  Sep 30 13:57:11.166: INFO: (7) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 4.779592ms)
  Sep 30 13:57:11.167: INFO: (7) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 5.417181ms)
  Sep 30 13:57:11.167: INFO: (7) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 5.920338ms)
  Sep 30 13:57:11.167: INFO: (7) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.01527ms)
  Sep 30 13:57:11.168: INFO: (7) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 6.442847ms)
  Sep 30 13:57:11.168: INFO: (7) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 6.781321ms)
  Sep 30 13:57:11.168: INFO: (7) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 6.903253ms)
  Sep 30 13:57:11.169: INFO: (7) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 7.182988ms)
  Sep 30 13:57:11.169: INFO: (7) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 7.122397ms)
  Sep 30 13:57:11.169: INFO: (7) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 7.202708ms)
  Sep 30 13:57:11.169: INFO: (7) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 7.441461ms)
  Sep 30 13:57:11.169: INFO: (7) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 8.212353ms)
  Sep 30 13:57:11.170: INFO: (7) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 8.281564ms)
  Sep 30 13:57:11.170: INFO: (7) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 8.894734ms)
  Sep 30 13:57:11.171: INFO: (7) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 9.180407ms)
  Sep 30 13:57:11.176: INFO: (8) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.738606ms)
  Sep 30 13:57:11.177: INFO: (8) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.999ms)
  Sep 30 13:57:11.177: INFO: (8) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.097772ms)
  Sep 30 13:57:11.177: INFO: (8) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 6.172722ms)
  Sep 30 13:57:11.178: INFO: (8) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.894584ms)
  Sep 30 13:57:11.178: INFO: (8) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 6.885303ms)
  Sep 30 13:57:11.178: INFO: (8) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 7.129567ms)
  Sep 30 13:57:11.178: INFO: (8) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 7.520433ms)
  Sep 30 13:57:11.178: INFO: (8) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.715786ms)
  Sep 30 13:57:11.178: INFO: (8) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 7.695755ms)
  Sep 30 13:57:11.179: INFO: (8) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 7.98655ms)
  Sep 30 13:57:11.179: INFO: (8) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 7.827837ms)
  Sep 30 13:57:11.179: INFO: (8) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 7.931699ms)
  Sep 30 13:57:11.180: INFO: (8) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 8.754312ms)
  Sep 30 13:57:11.180: INFO: (8) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 9.078136ms)
  Sep 30 13:57:11.180: INFO: (8) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 9.125447ms)
  Sep 30 13:57:11.185: INFO: (9) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 4.603659ms)
  Sep 30 13:57:11.185: INFO: (9) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.441781ms)
  Sep 30 13:57:11.185: INFO: (9) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.563894ms)
  Sep 30 13:57:11.186: INFO: (9) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 5.604205ms)
  Sep 30 13:57:11.186: INFO: (9) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 5.749546ms)
  Sep 30 13:57:11.186: INFO: (9) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 6.241054ms)
  Sep 30 13:57:11.186: INFO: (9) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.226074ms)
  Sep 30 13:57:11.187: INFO: (9) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 7.044856ms)
  Sep 30 13:57:11.187: INFO: (9) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 7.3377ms)
  Sep 30 13:57:11.187: INFO: (9) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 7.483202ms)
  Sep 30 13:57:11.188: INFO: (9) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.567054ms)
  Sep 30 13:57:11.188: INFO: (9) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 8.204083ms)
  Sep 30 13:57:11.188: INFO: (9) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 8.539038ms)
  Sep 30 13:57:11.189: INFO: (9) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 8.754262ms)
  Sep 30 13:57:11.189: INFO: (9) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 9.274579ms)
  Sep 30 13:57:11.190: INFO: (9) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 9.624785ms)
  Sep 30 13:57:11.194: INFO: (10) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 4.514048ms)
  Sep 30 13:57:11.194: INFO: (10) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 4.61176ms)
  Sep 30 13:57:11.195: INFO: (10) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 4.867993ms)
  Sep 30 13:57:11.195: INFO: (10) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 5.33583ms)
  Sep 30 13:57:11.196: INFO: (10) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.529219ms)
  Sep 30 13:57:11.196: INFO: (10) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 6.565439ms)
  Sep 30 13:57:11.196: INFO: (10) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.624069ms)
  Sep 30 13:57:11.196: INFO: (10) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 6.601359ms)
  Sep 30 13:57:11.196: INFO: (10) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.601329ms)
  Sep 30 13:57:11.197: INFO: (10) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 6.952314ms)
  Sep 30 13:57:11.197: INFO: (10) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.916074ms)
  Sep 30 13:57:11.197: INFO: (10) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 7.109137ms)
  Sep 30 13:57:11.197: INFO: (10) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.455622ms)
  Sep 30 13:57:11.197: INFO: (10) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 7.474352ms)
  Sep 30 13:57:11.198: INFO: (10) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 8.389846ms)
  Sep 30 13:57:11.198: INFO: (10) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 8.577949ms)
  Sep 30 13:57:11.204: INFO: (11) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.064216ms)
  Sep 30 13:57:11.204: INFO: (11) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.463622ms)
  Sep 30 13:57:11.204: INFO: (11) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 5.33041ms)
  Sep 30 13:57:11.204: INFO: (11) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 5.286319ms)
  Sep 30 13:57:11.204: INFO: (11) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 5.410891ms)
  Sep 30 13:57:11.204: INFO: (11) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 5.484563ms)
  Sep 30 13:57:11.204: INFO: (11) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 5.770776ms)
  Sep 30 13:57:11.205: INFO: (11) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.271084ms)
  Sep 30 13:57:11.205: INFO: (11) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 6.281544ms)
  Sep 30 13:57:11.206: INFO: (11) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 6.829162ms)
  Sep 30 13:57:11.206: INFO: (11) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 6.872733ms)
  Sep 30 13:57:11.206: INFO: (11) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 7.318029ms)
  Sep 30 13:57:11.206: INFO: (11) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 7.501113ms)
  Sep 30 13:57:11.207: INFO: (11) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 7.919919ms)
  Sep 30 13:57:11.207: INFO: (11) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.902398ms)
  Sep 30 13:57:11.207: INFO: (11) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 8.498438ms)
  Sep 30 13:57:11.213: INFO: (12) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 5.208039ms)
  Sep 30 13:57:11.213: INFO: (12) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 5.264559ms)
  Sep 30 13:57:11.213: INFO: (12) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.33093ms)
  Sep 30 13:57:11.213: INFO: (12) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 5.663565ms)
  Sep 30 13:57:11.213: INFO: (12) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 5.99951ms)
  Sep 30 13:57:11.214: INFO: (12) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 6.268614ms)
  Sep 30 13:57:11.214: INFO: (12) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 6.232594ms)
  Sep 30 13:57:11.214: INFO: (12) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.554379ms)
  Sep 30 13:57:11.214: INFO: (12) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.193143ms)
  Sep 30 13:57:11.215: INFO: (12) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 7.139747ms)
  Sep 30 13:57:11.215: INFO: (12) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 7.576134ms)
  Sep 30 13:57:11.215: INFO: (12) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 7.649995ms)
  Sep 30 13:57:11.216: INFO: (12) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 8.173042ms)
  Sep 30 13:57:11.216: INFO: (12) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 8.229314ms)
  Sep 30 13:57:11.216: INFO: (12) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 8.397926ms)
  Sep 30 13:57:11.217: INFO: (12) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 9.195818ms)
  Sep 30 13:57:11.221: INFO: (13) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 4.767582ms)
  Sep 30 13:57:11.221: INFO: (13) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 4.800642ms)
  Sep 30 13:57:11.221: INFO: (13) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 4.881923ms)
  Sep 30 13:57:11.222: INFO: (13) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 5.655475ms)
  Sep 30 13:57:11.222: INFO: (13) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 5.818758ms)
  Sep 30 13:57:11.222: INFO: (13) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.831947ms)
  Sep 30 13:57:11.223: INFO: (13) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.122972ms)
  Sep 30 13:57:11.223: INFO: (13) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 6.043021ms)
  Sep 30 13:57:11.223: INFO: (13) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.077351ms)
  Sep 30 13:57:11.223: INFO: (13) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.151652ms)
  Sep 30 13:57:11.223: INFO: (13) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 6.692431ms)
  Sep 30 13:57:11.223: INFO: (13) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 6.818702ms)
  Sep 30 13:57:11.224: INFO: (13) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.283389ms)
  Sep 30 13:57:11.224: INFO: (13) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 7.489252ms)
  Sep 30 13:57:11.225: INFO: (13) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 8.323545ms)
  Sep 30 13:57:11.225: INFO: (13) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 8.582379ms)
  Sep 30 13:57:11.231: INFO: (14) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.38762ms)
  Sep 30 13:57:11.231: INFO: (14) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 5.40074ms)
  Sep 30 13:57:11.231: INFO: (14) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 5.788477ms)
  Sep 30 13:57:11.232: INFO: (14) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 5.971669ms)
  Sep 30 13:57:11.232: INFO: (14) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.504757ms)
  Sep 30 13:57:11.232: INFO: (14) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.479287ms)
  Sep 30 13:57:11.232: INFO: (14) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 6.66105ms)
  Sep 30 13:57:11.232: INFO: (14) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 6.459827ms)
  Sep 30 13:57:11.232: INFO: (14) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 6.68325ms)
  Sep 30 13:57:11.232: INFO: (14) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 6.811432ms)
  Sep 30 13:57:11.232: INFO: (14) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.728541ms)
  Sep 30 13:57:11.233: INFO: (14) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 7.734216ms)
  Sep 30 13:57:11.233: INFO: (14) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.610534ms)
  Sep 30 13:57:11.233: INFO: (14) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 7.823747ms)
  Sep 30 13:57:11.234: INFO: (14) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 8.185372ms)
  Sep 30 13:57:11.235: INFO: (14) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 8.870183ms)
  Sep 30 13:57:11.239: INFO: (15) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 4.405997ms)
  Sep 30 13:57:11.239: INFO: (15) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 4.731471ms)
  Sep 30 13:57:11.240: INFO: (15) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.246589ms)
  Sep 30 13:57:11.240: INFO: (15) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 5.174797ms)
  Sep 30 13:57:11.241: INFO: (15) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 5.862538ms)
  Sep 30 13:57:11.241: INFO: (15) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.749066ms)
  Sep 30 13:57:11.241: INFO: (15) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 5.892898ms)
  Sep 30 13:57:11.241: INFO: (15) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.02472ms)
  Sep 30 13:57:11.241: INFO: (15) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 6.345285ms)
  Sep 30 13:57:11.241: INFO: (15) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.285534ms)
  Sep 30 13:57:11.242: INFO: (15) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 6.863513ms)
  Sep 30 13:57:11.242: INFO: (15) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.601943ms)
  Sep 30 13:57:11.243: INFO: (15) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 7.670415ms)
  Sep 30 13:57:11.243: INFO: (15) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 7.807437ms)
  Sep 30 13:57:11.244: INFO: (15) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 8.964734ms)
  Sep 30 13:57:11.244: INFO: (15) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 9.269729ms)
  Sep 30 13:57:11.249: INFO: (16) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 4.523958ms)
  Sep 30 13:57:11.249: INFO: (16) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 4.594359ms)
  Sep 30 13:57:11.249: INFO: (16) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 4.905853ms)
  Sep 30 13:57:11.250: INFO: (16) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 6.061621ms)
  Sep 30 13:57:11.250: INFO: (16) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.006881ms)
  Sep 30 13:57:11.250: INFO: (16) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 6.041821ms)
  Sep 30 13:57:11.250: INFO: (16) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.230064ms)
  Sep 30 13:57:11.251: INFO: (16) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.404356ms)
  Sep 30 13:57:11.251: INFO: (16) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 6.937634ms)
  Sep 30 13:57:11.251: INFO: (16) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 7.198488ms)
  Sep 30 13:57:11.251: INFO: (16) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 7.26169ms)
  Sep 30 13:57:11.252: INFO: (16) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 7.616815ms)
  Sep 30 13:57:11.252: INFO: (16) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 7.928139ms)
  Sep 30 13:57:11.252: INFO: (16) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 8.076001ms)
  Sep 30 13:57:11.253: INFO: (16) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 9.225888ms)
  Sep 30 13:57:11.253: INFO: (16) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 9.29486ms)
  Sep 30 13:57:11.258: INFO: (17) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 4.402006ms)
  Sep 30 13:57:11.258: INFO: (17) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 4.840692ms)
  Sep 30 13:57:11.259: INFO: (17) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 5.475473ms)
  Sep 30 13:57:11.259: INFO: (17) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 5.426052ms)
  Sep 30 13:57:11.259: INFO: (17) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 5.500403ms)
  Sep 30 13:57:11.260: INFO: (17) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 6.160142ms)
  Sep 30 13:57:11.260: INFO: (17) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.123962ms)
  Sep 30 13:57:11.260: INFO: (17) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 6.522108ms)
  Sep 30 13:57:11.260: INFO: (17) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.905994ms)
  Sep 30 13:57:11.261: INFO: (17) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 7.271279ms)
  Sep 30 13:57:11.261: INFO: (17) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 7.834068ms)
  Sep 30 13:57:11.262: INFO: (17) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 8.132412ms)
  Sep 30 13:57:11.262: INFO: (17) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 8.463297ms)
  Sep 30 13:57:11.262: INFO: (17) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 8.472467ms)
  Sep 30 13:57:11.262: INFO: (17) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 8.558059ms)
  Sep 30 13:57:11.262: INFO: (17) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 8.835342ms)
  Sep 30 13:57:11.267: INFO: (18) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 4.293614ms)
  Sep 30 13:57:11.267: INFO: (18) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 4.885243ms)
  Sep 30 13:57:11.268: INFO: (18) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 5.615444ms)
  Sep 30 13:57:11.269: INFO: (18) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 6.086051ms)
  Sep 30 13:57:11.269: INFO: (18) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 6.060971ms)
  Sep 30 13:57:11.269: INFO: (18) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.161602ms)
  Sep 30 13:57:11.269: INFO: (18) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.239074ms)
  Sep 30 13:57:11.269: INFO: (18) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 6.396006ms)
  Sep 30 13:57:11.269: INFO: (18) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.508227ms)
  Sep 30 13:57:11.269: INFO: (18) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 6.586049ms)
  Sep 30 13:57:11.270: INFO: (18) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 7.463172ms)
  Sep 30 13:57:11.270: INFO: (18) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 7.429322ms)
  Sep 30 13:57:11.270: INFO: (18) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 7.912488ms)
  Sep 30 13:57:11.271: INFO: (18) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 7.951969ms)
  Sep 30 13:57:11.271: INFO: (18) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 8.766712ms)
  Sep 30 13:57:11.272: INFO: (18) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 9.013375ms)
  Sep 30 13:57:11.276: INFO: (19) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:443/proxy/tlsrewritem... (200; 4.197502ms)
  Sep 30 13:57:11.276: INFO: (19) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 4.480147ms)
  Sep 30 13:57:11.277: INFO: (19) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 4.69946ms)
  Sep 30 13:57:11.278: INFO: (19) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:462/proxy/: tls qux (200; 5.98736ms)
  Sep 30 13:57:11.278: INFO: (19) /api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/http:proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">... (200; 6.069871ms)
  Sep 30 13:57:11.278: INFO: (19) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:162/proxy/: bar (200; 6.208763ms)
  Sep 30 13:57:11.278: INFO: (19) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn/proxy/rewriteme">test</a> (200; 6.487657ms)
  Sep 30 13:57:11.278: INFO: (19) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/: <a href="/api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:1080/proxy/rewriteme">test<... (200; 6.468397ms)
  Sep 30 13:57:11.278: INFO: (19) /api/v1/namespaces/proxy-5130/pods/proxy-service-xp4w9-q76mn:160/proxy/: foo (200; 6.479997ms)
  Sep 30 13:57:11.278: INFO: (19) /api/v1/namespaces/proxy-5130/pods/https:proxy-service-xp4w9-q76mn:460/proxy/: tls baz (200; 6.437546ms)
  Sep 30 13:57:11.278: INFO: (19) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname1/proxy/: tls baz (200; 6.577198ms)
  Sep 30 13:57:11.279: INFO: (19) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname1/proxy/: foo (200; 7.018735ms)
  Sep 30 13:57:11.279: INFO: (19) /api/v1/namespaces/proxy-5130/services/proxy-service-xp4w9:portname2/proxy/: bar (200; 7.049855ms)
  Sep 30 13:57:11.279: INFO: (19) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname2/proxy/: bar (200; 7.32911ms)
  Sep 30 13:57:11.280: INFO: (19) /api/v1/namespaces/proxy-5130/services/http:proxy-service-xp4w9:portname1/proxy/: foo (200; 8.204803ms)
  Sep 30 13:57:11.280: INFO: (19) /api/v1/namespaces/proxy-5130/services/https:proxy-service-xp4w9:tlsportname2/proxy/: tls qux (200; 8.188252ms)
  Sep 30 13:57:11.280: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController proxy-service-xp4w9 in namespace proxy-5130, will wait for the garbage collector to delete the pods @ 09/30/23 13:57:11.285
  Sep 30 13:57:11.346: INFO: Deleting ReplicationController proxy-service-xp4w9 took: 6.479278ms
  Sep 30 13:57:11.447: INFO: Terminating ReplicationController proxy-service-xp4w9 pods took: 100.641819ms
  E0930 13:57:11.763288      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:12.764180      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "proxy-5130" for this suite. @ 09/30/23 13:57:13.547
â€¢ [4.594 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:347
  STEP: Creating a kubernetes client @ 09/30/23 13:57:13.555
  Sep 30 13:57:13.555: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename security-context-test @ 09/30/23 13:57:13.556
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:57:13.571
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:57:13.575
  E0930 13:57:13.764975      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:14.765106      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:15.765534      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:16.766035      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Sep 30 13:57:17.602: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-2397" for this suite. @ 09/30/23 13:57:17.606
â€¢ [4.059 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Ingress API should support creating Ingress API operations [Conformance]
test/e2e/network/ingress.go:556
  STEP: Creating a kubernetes client @ 09/30/23 13:57:17.615
  Sep 30 13:57:17.615: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename ingress @ 09/30/23 13:57:17.616
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:57:17.63
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:57:17.634
  STEP: getting /apis @ 09/30/23 13:57:17.638
  STEP: getting /apis/networking.k8s.io @ 09/30/23 13:57:17.642
  STEP: getting /apis/networking.k8s.iov1 @ 09/30/23 13:57:17.644
  STEP: creating @ 09/30/23 13:57:17.645
  STEP: getting @ 09/30/23 13:57:17.666
  STEP: listing @ 09/30/23 13:57:17.671
  STEP: watching @ 09/30/23 13:57:17.675
  Sep 30 13:57:17.675: INFO: starting watch
  STEP: cluster-wide listing @ 09/30/23 13:57:17.677
  STEP: cluster-wide watching @ 09/30/23 13:57:17.68
  Sep 30 13:57:17.680: INFO: starting watch
  STEP: patching @ 09/30/23 13:57:17.681
  STEP: updating @ 09/30/23 13:57:17.688
  Sep 30 13:57:17.697: INFO: waiting for watch events with expected annotations
  Sep 30 13:57:17.697: INFO: saw patched and updated annotations
  STEP: patching /status @ 09/30/23 13:57:17.697
  STEP: updating /status @ 09/30/23 13:57:17.708
  STEP: get /status @ 09/30/23 13:57:17.719
  STEP: deleting @ 09/30/23 13:57:17.722
  STEP: deleting a collection @ 09/30/23 13:57:17.737
  Sep 30 13:57:17.752: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingress-72" for this suite. @ 09/30/23 13:57:17.757
â€¢ [0.149 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:57
  STEP: Creating a kubernetes client @ 09/30/23 13:57:17.764
  Sep 30 13:57:17.764: INFO: >>> kubeConfig: /tmp/kubeconfig-1869086199
  STEP: Building a namespace api object, basename projected @ 09/30/23 13:57:17.765
  E0930 13:57:17.766182      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 09/30/23 13:57:17.778
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 09/30/23 13:57:17.782
  STEP: Creating configMap with name projected-configmap-test-volume-e6f54078-dfa1-47f5-b9dc-a6212471e31d @ 09/30/23 13:57:17.786
  STEP: Creating a pod to test consume configMaps @ 09/30/23 13:57:17.79
  E0930 13:57:18.766792      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:19.766853      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:20.767706      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0930 13:57:21.767825      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 09/30/23 13:57:21.813
  Sep 30 13:57:21.817: INFO: Trying to get logs from node ip-172-31-31-30 pod pod-projected-configmaps-8131d1a7-dd83-469e-b6d8-7b7f1ec66994 container agnhost-container: <nil>
  STEP: delete the pod @ 09/30/23 13:57:21.825
  Sep 30 13:57:21.838: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8445" for this suite. @ 09/30/23 13:57:21.843
â€¢ [4.085 seconds]
------------------------------
SSSSSSS
------------------------------
[SynchronizedAfterSuite] 
test/e2e/e2e.go:88
  Sep 30 13:57:21.850: INFO: Running AfterSuite actions on node 1
  Sep 30 13:57:21.850: INFO: Skipping dumping logs from cluster
[SynchronizedAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e suite report
test/e2e/e2e_test.go:157
[ReportAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e JUnit report
test/e2e/framework/test_context.go:585
[ReportAfterSuite] PASSED [0.074 seconds]
------------------------------

Ran 380 of 7387 Specs in 5845.490 seconds
SUCCESS! -- 380 Passed | 0 Failed | 0 Pending | 7007 Skipped
PASS

Ginkgo ran 1 suite in 1h37m25.890106704s
Test Suite Passed
