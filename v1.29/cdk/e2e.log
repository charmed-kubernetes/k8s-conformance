  I0427 12:21:15.596972      19 e2e.go:117] Starting e2e run "55e1d623-ab7b-48bc-8bfa-d55d14f8ee00" on Ginkgo node 1
Running Suite: Kubernetes e2e suite - /usr/local/bin
====================================================
Random Seed: 1714220474 - will randomize all specs

Will run 388 of 7407 specs
------------------------------
[ReportBeforeSuite] 
k8s.io/kubernetes/test/e2e/e2e_test.go:157
[ReportBeforeSuite] PASSED [0.000 seconds]
------------------------------
[SynchronizedBeforeSuite] 
k8s.io/kubernetes/test/e2e/e2e.go:77
  Apr 27 12:21:15.774: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:21:15.775: INFO: Waiting up to 30m0s for all (but 0) nodes to be schedulable
  Apr 27 12:21:15.811: INFO: Waiting up to 5m0s for all daemonsets in namespace 'kube-system' to start
  Apr 27 12:21:15.817: INFO: 5 / 5 pods ready in namespace 'kube-system' in daemonset 'calico-node' (0 seconds elapsed)
  Apr 27 12:21:15.817: INFO: e2e test version: v1.29.4
  Apr 27 12:21:15.819: INFO: kube-apiserver version: v1.29.4
  Apr 27 12:21:15.819: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:21:15.824: INFO: Cluster IP family: ipv4
[SynchronizedBeforeSuite] PASSED [0.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/flowcontrol.go:270
  STEP: Creating a kubernetes client @ 04/27/24 12:21:16.053
  Apr 27 12:21:16.053: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename apf @ 04/27/24 12:21:16.054
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:21:16.076
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:21:16.079
  STEP: getting /apis @ 04/27/24 12:21:16.081
  STEP: getting /apis/flowcontrol.apiserver.k8s.io @ 04/27/24 12:21:16.086
  STEP: getting /apis/flowcontrol.apiserver.k8s.io/v1 @ 04/27/24 12:21:16.087
  STEP: creating @ 04/27/24 12:21:16.088
  STEP: getting @ 04/27/24 12:21:16.107
  STEP: listing @ 04/27/24 12:21:16.114
  STEP: watching @ 04/27/24 12:21:16.121
  Apr 27 12:21:16.121: INFO: starting watch
  STEP: patching @ 04/27/24 12:21:16.123
  STEP: updating @ 04/27/24 12:21:16.128
  Apr 27 12:21:16.139: INFO: waiting for watch events with expected annotations
  STEP: getting /status @ 04/27/24 12:21:16.139
  STEP: patching /status @ 04/27/24 12:21:16.143
  STEP: updating /status @ 04/27/24 12:21:16.149
  STEP: deleting @ 04/27/24 12:21:16.181
  STEP: deleting a collection @ 04/27/24 12:21:16.197
  Apr 27 12:21:16.220: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "apf-125" for this suite. @ 04/27/24 12:21:16.225
• [0.179 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:70
  STEP: Creating a kubernetes client @ 04/27/24 12:21:16.232
  Apr 27 12:21:16.232: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename cronjob @ 04/27/24 12:21:16.233
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:21:16.252
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:21:16.255
  STEP: Creating a cronjob @ 04/27/24 12:21:16.258
  STEP: Ensuring more than one job is running at a time @ 04/27/24 12:21:16.266
  STEP: Ensuring at least two running jobs exists by listing jobs explicitly @ 04/27/24 12:23:00.271
  STEP: Removing cronjob @ 04/27/24 12:23:00.275
  Apr 27 12:23:00.284: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-8684" for this suite. @ 04/27/24 12:23:00.288
• [104.064 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:214
  STEP: Creating a kubernetes client @ 04/27/24 12:23:00.296
  Apr 27 12:23:00.296: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 12:23:00.297
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:23:00.319
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:23:00.323
  STEP: Creating pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769 @ 04/27/24 12:23:00.326
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/27/24 12:23:04.353
  Apr 27 12:23:04.357: INFO: Initial restart count of pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 is 0
  Apr 27 12:23:04.360: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:06.365: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:08.370: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:10.375: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:12.380: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:14.386: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:16.393: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:18.398: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:20.403: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:22.410: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:24.415: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:26.422: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:28.427: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:30.433: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:32.440: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:34.446: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:36.451: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:38.458: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:40.464: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:42.470: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:44.475: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:46.480: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:48.485: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:50.491: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:52.497: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:54.504: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:56.510: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:23:58.516: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:00.521: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:02.528: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:04.533: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:06.539: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:08.545: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:10.551: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:12.558: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:14.564: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:16.569: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:18.575: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:20.580: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:22.586: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:24.592: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:26.597: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:28.603: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:30.609: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:32.614: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:34.620: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:36.627: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:38.633: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:40.639: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:42.645: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:44.651: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:46.656: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:48.663: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:50.668: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:52.674: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:54.680: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:56.686: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:24:58.690: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:00.697: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:02.702: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:04.708: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:06.713: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:08.719: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:10.725: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:12.730: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:14.736: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:16.744: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:18.750: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:20.756: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:22.762: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:24.767: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:26.773: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:28.778: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:30.784: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:32.789: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:34.796: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:36.801: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:38.807: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:40.813: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:42.819: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:44.824: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:46.830: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:48.835: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:50.841: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:52.848: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:54.853: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:56.858: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:25:58.863: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:00.869: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:02.875: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:04.879: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:06.886: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:08.892: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:10.898: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:12.903: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:14.909: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:16.915: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:18.921: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:20.928: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:22.934: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:24.939: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:26.946: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:28.952: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:30.958: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:32.965: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:34.970: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:36.975: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:38.980: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:40.986: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:42.992: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:44.997: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:47.002: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:49.008: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:51.015: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:53.021: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:55.028: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:57.034: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:26:59.039: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:27:01.045: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  Apr 27 12:27:03.052: INFO: Get pod test-webserver-de2dadd9-e459-4452-9a13-a5ee15d4c277 in namespace container-probe-769
  STEP: deleting the pod @ 04/27/24 12:27:05.052
  Apr 27 12:27:05.067: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-769" for this suite. @ 04/27/24 12:27:05.072
• [244.783 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1416
  STEP: Creating a kubernetes client @ 04/27/24 12:27:05.08
  Apr 27 12:27:05.080: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:27:05.08
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:05.098
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:05.101
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-4770 @ 04/27/24 12:27:05.103
  STEP: changing the ExternalName service to type=ClusterIP @ 04/27/24 12:27:05.109
  STEP: creating replication controller externalname-service in namespace services-4770 @ 04/27/24 12:27:05.125
  I0427 12:27:05.132123      19 runners.go:197] Created replication controller with name: externalname-service, namespace: services-4770, replica count: 2
  I0427 12:27:08.183611      19 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 27 12:27:08.184: INFO: Creating new exec pod
  Apr 27 12:27:11.203: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-4770 exec execpodznpzx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Apr 27 12:27:11.327: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Apr 27 12:27:11.327: INFO: stdout: "externalname-service-lnqnv"
  Apr 27 12:27:11.327: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-4770 exec execpodznpzx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.172 80'
  Apr 27 12:27:11.426: INFO: stderr: "+ nc -v -t -w 2 10.152.183.172 80\n+ echo hostName\nConnection to 10.152.183.172 80 port [tcp/http] succeeded!\n"
  Apr 27 12:27:11.426: INFO: stdout: "externalname-service-4b6cn"
  Apr 27 12:27:11.426: INFO: Cleaning up the ExternalName to ClusterIP test service
  Apr 27 12:27:11.444: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4770" for this suite. @ 04/27/24 12:27:11.449
• [6.379 seconds]
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:48
  STEP: Creating a kubernetes client @ 04/27/24 12:27:11.458
  Apr 27 12:27:11.458: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:27:11.459
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:11.479
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:11.482
  STEP: Creating configMap with name projected-configmap-test-volume-3f648447-b499-494a-bc04-23b34586fe80 @ 04/27/24 12:27:11.485
  STEP: Creating a pod to test consume configMaps @ 04/27/24 12:27:11.49
  STEP: Saw pod success @ 04/27/24 12:27:15.519
  Apr 27 12:27:15.523: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-configmaps-779573fe-f6a5-49d5-bd5e-8369d00b53bf container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 12:27:15.541
  Apr 27 12:27:15.561: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2856" for this suite. @ 04/27/24 12:27:15.565
• [4.114 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:191
  STEP: Creating a kubernetes client @ 04/27/24 12:27:15.573
  Apr 27 12:27:15.573: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename watch @ 04/27/24 12:27:15.574
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:15.593
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:15.596
  STEP: creating a watch on configmaps @ 04/27/24 12:27:15.599
  STEP: creating a new configmap @ 04/27/24 12:27:15.601
  STEP: modifying the configmap once @ 04/27/24 12:27:15.606
  STEP: closing the watch once it receives two notifications @ 04/27/24 12:27:15.615
  Apr 27 12:27:15.615: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5377  dce2df84-dd76-4f62-9f0e-ad85c8e6bb37 4880 0 2024-04-27 12:27:15 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-04-27 12:27:15 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 12:27:15.615: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5377  dce2df84-dd76-4f62-9f0e-ad85c8e6bb37 4881 0 2024-04-27 12:27:15 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-04-27 12:27:15 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time, while the watch is closed @ 04/27/24 12:27:15.615
  STEP: creating a new watch on configmaps from the last resource version observed by the first watch @ 04/27/24 12:27:15.625
  STEP: deleting the configmap @ 04/27/24 12:27:15.627
  STEP: Expecting to observe notifications for all changes to the configmap since the first watch closed @ 04/27/24 12:27:15.639
  Apr 27 12:27:15.639: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5377  dce2df84-dd76-4f62-9f0e-ad85c8e6bb37 4882 0 2024-04-27 12:27:15 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-04-27 12:27:15 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 12:27:15.640: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5377  dce2df84-dd76-4f62-9f0e-ad85c8e6bb37 4883 0 2024-04-27 12:27:15 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-04-27 12:27:15 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 12:27:15.640: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-5377" for this suite. @ 04/27/24 12:27:15.645
• [0.080 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:86
  STEP: Creating a kubernetes client @ 04/27/24 12:27:15.654
  Apr 27 12:27:15.654: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:27:15.654
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:15.675
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:15.678
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 12:27:15.681
  STEP: Saw pod success @ 04/27/24 12:27:19.71
  Apr 27 12:27:19.714: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-9b03d8cf-110f-4c9b-bdd4-5b4e23dd01be container client-container: <nil>
  STEP: delete the pod @ 04/27/24 12:27:19.721
  Apr 27 12:27:19.741: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2983" for this suite. @ 04/27/24 12:27:19.744
• [4.097 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount an API token into pods [Conformance] [sig-auth, Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:80
  STEP: Creating a kubernetes client @ 04/27/24 12:27:19.752
  Apr 27 12:27:19.752: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename svcaccounts @ 04/27/24 12:27:19.753
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:19.771
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:19.774
  STEP: reading a file in the container @ 04/27/24 12:27:21.801
  Apr 27 12:27:21.802: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-1357 pod-service-account-e14176f1-f651-4c7d-b3c8-d9f254134293 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/token'
  STEP: reading a file in the container @ 04/27/24 12:27:21.9
  Apr 27 12:27:21.900: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-1357 pod-service-account-e14176f1-f651-4c7d-b3c8-d9f254134293 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
  STEP: reading a file in the container @ 04/27/24 12:27:21.996
  Apr 27 12:27:21.996: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-1357 pod-service-account-e14176f1-f651-4c7d-b3c8-d9f254134293 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/namespace'
  Apr 27 12:27:22.100: INFO: Got root ca configmap in namespace "svcaccounts-1357"
  Apr 27 12:27:22.103: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-1357" for this suite. @ 04/27/24 12:27:22.107
• [2.363 seconds]
------------------------------
S
------------------------------
[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1798
  STEP: Creating a kubernetes client @ 04/27/24 12:27:22.115
  Apr 27 12:27:22.115: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 12:27:22.116
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:22.136
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:22.139
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 04/27/24 12:27:22.142
  Apr 27 12:27:22.142: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-5013 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Apr 27 12:27:22.193: INFO: stderr: ""
  Apr 27 12:27:22.193: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod is running @ 04/27/24 12:27:22.193
  STEP: verifying the pod e2e-test-httpd-pod was created @ 04/27/24 12:27:27.244
  Apr 27 12:27:27.244: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-5013 get pod e2e-test-httpd-pod -o json'
  Apr 27 12:27:27.288: INFO: stderr: ""
  Apr 27 12:27:27.288: INFO: stdout: "{\n    \"apiVersion\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\n        \"creationTimestamp\": \"2024-04-27T12:27:22Z\",\n        \"labels\": {\n            \"run\": \"e2e-test-httpd-pod\"\n        },\n        \"name\": \"e2e-test-httpd-pod\",\n        \"namespace\": \"kubectl-5013\",\n        \"resourceVersion\": \"5035\",\n        \"uid\": \"4f2d7cf8-2abb-4245-ba21-394e99e7367b\"\n    },\n    \"spec\": {\n        \"containers\": [\n            {\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"e2e-test-httpd-pod\",\n                \"resources\": {},\n                \"terminationMessagePath\": \"/dev/termination-log\",\n                \"terminationMessagePolicy\": \"File\",\n                \"volumeMounts\": [\n                    {\n                        \"mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\",\n                        \"name\": \"kube-api-access-v2hx7\",\n                        \"readOnly\": true\n                    }\n                ]\n            }\n        ],\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"enableServiceLinks\": true,\n        \"nodeName\": \"ip-172-31-37-185\",\n        \"preemptionPolicy\": \"PreemptLowerPriority\",\n        \"priority\": 0,\n        \"restartPolicy\": \"Always\",\n        \"schedulerName\": \"default-scheduler\",\n        \"securityContext\": {},\n        \"serviceAccount\": \"default\",\n        \"serviceAccountName\": \"default\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"tolerations\": [\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/not-ready\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            },\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/unreachable\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            }\n        ],\n        \"volumes\": [\n            {\n                \"name\": \"kube-api-access-v2hx7\",\n                \"projected\": {\n                    \"defaultMode\": 420,\n                    \"sources\": [\n                        {\n                            \"serviceAccountToken\": {\n                                \"expirationSeconds\": 3607,\n                                \"path\": \"token\"\n                            }\n                        },\n                        {\n                            \"configMap\": {\n                                \"items\": [\n                                    {\n                                        \"key\": \"ca.crt\",\n                                        \"path\": \"ca.crt\"\n                                    }\n                                ],\n                                \"name\": \"kube-root-ca.crt\"\n                            }\n                        },\n                        {\n                            \"downwardAPI\": {\n                                \"items\": [\n                                    {\n                                        \"fieldRef\": {\n                                            \"apiVersion\": \"v1\",\n                                            \"fieldPath\": \"metadata.namespace\"\n                                        },\n                                        \"path\": \"namespace\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"status\": {\n        \"conditions\": [\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-04-27T12:27:25Z\",\n                \"status\": \"True\",\n                \"type\": \"PodReadyToStartContainers\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-04-27T12:27:22Z\",\n                \"status\": \"True\",\n                \"type\": \"Initialized\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-04-27T12:27:25Z\",\n                \"status\": \"True\",\n                \"type\": \"Ready\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-04-27T12:27:25Z\",\n                \"status\": \"True\",\n                \"type\": \"ContainersReady\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-04-27T12:27:22Z\",\n                \"status\": \"True\",\n                \"type\": \"PodScheduled\"\n            }\n        ],\n        \"containerStatuses\": [\n            {\n                \"containerID\": \"containerd://ee317d5783384198f02aff8bc61de3de0ecc1e3b647f7db787d99732167d461b\",\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imageID\": \"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22\",\n                \"lastState\": {},\n                \"name\": \"e2e-test-httpd-pod\",\n                \"ready\": true,\n                \"restartCount\": 0,\n                \"started\": true,\n                \"state\": {\n                    \"running\": {\n                        \"startedAt\": \"2024-04-27T12:27:25Z\"\n                    }\n                }\n            }\n        ],\n        \"hostIP\": \"172.31.37.185\",\n        \"hostIPs\": [\n            {\n                \"ip\": \"172.31.37.185\"\n            }\n        ],\n        \"phase\": \"Running\",\n        \"podIP\": \"192.168.69.132\",\n        \"podIPs\": [\n            {\n                \"ip\": \"192.168.69.132\"\n            }\n        ],\n        \"qosClass\": \"BestEffort\",\n        \"startTime\": \"2024-04-27T12:27:22Z\"\n    }\n}\n"
  STEP: replace the image in the pod @ 04/27/24 12:27:27.288
  Apr 27 12:27:27.289: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-5013 replace -f -'
  Apr 27 12:27:27.382: INFO: stderr: ""
  Apr 27 12:27:27.382: INFO: stdout: "pod/e2e-test-httpd-pod replaced\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/busybox:1.36.1-1 @ 04/27/24 12:27:27.382
  Apr 27 12:27:27.387: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-5013 delete pods e2e-test-httpd-pod'
  Apr 27 12:27:30.635: INFO: stderr: ""
  Apr 27 12:27:30.635: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Apr 27 12:27:30.635: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5013" for this suite. @ 04/27/24 12:27:30.64
• [8.532 seconds]
------------------------------
SSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/init_container.go:178
  STEP: Creating a kubernetes client @ 04/27/24 12:27:30.648
  Apr 27 12:27:30.648: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename init-container @ 04/27/24 12:27:30.648
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:30.666
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:30.669
  STEP: creating the pod @ 04/27/24 12:27:30.672
  Apr 27 12:27:30.672: INFO: PodSpec: initContainers in spec.initContainers
  Apr 27 12:27:35.422: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-5811" for this suite. @ 04/27/24 12:27:35.426
• [4.786 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:67
  STEP: Creating a kubernetes client @ 04/27/24 12:27:35.434
  Apr 27 12:27:35.434: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:27:35.435
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:35.452
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:35.455
  STEP: Creating projection with secret that has name projected-secret-test-a8a8d134-fb42-4dd2-94a4-04277987fee6 @ 04/27/24 12:27:35.458
  STEP: Creating a pod to test consume secrets @ 04/27/24 12:27:35.463
  STEP: Saw pod success @ 04/27/24 12:27:37.492
  Apr 27 12:27:37.497: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-secrets-5b999411-f4ff-4a79-b6a4-dc947aa5cf26 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 12:27:37.505
  Apr 27 12:27:37.522: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-406" for this suite. @ 04/27/24 12:27:37.527
• [2.100 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:86
  STEP: Creating a kubernetes client @ 04/27/24 12:27:37.535
  Apr 27 12:27:37.535: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/27/24 12:27:37.536
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:37.553
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:37.556
  Apr 27 12:27:37.559: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:27:43.781: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-9823" for this suite. @ 04/27/24 12:27:43.785
• [6.258 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:46
  STEP: Creating a kubernetes client @ 04/27/24 12:27:43.793
  Apr 27 12:27:43.793: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 12:27:43.794
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:43.815
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:43.818
  STEP: Creating a pod to test downward api env vars @ 04/27/24 12:27:43.821
  STEP: Saw pod success @ 04/27/24 12:27:47.852
  Apr 27 12:27:47.855: INFO: Trying to get logs from node ip-172-31-82-63 pod downward-api-7fa89d2c-c45e-498f-be70-8fef64e18384 container dapi-container: <nil>
  STEP: delete the pod @ 04/27/24 12:27:47.864
  Apr 27 12:27:47.883: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-6868" for this suite. @ 04/27/24 12:27:47.888
• [4.101 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:90
  STEP: Creating a kubernetes client @ 04/27/24 12:27:47.895
  Apr 27 12:27:47.895: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 12:27:47.896
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:47.914
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:47.916
  STEP: Creating a pod to test emptydir volume type on tmpfs @ 04/27/24 12:27:47.919
  STEP: Saw pod success @ 04/27/24 12:27:51.942
  Apr 27 12:27:51.947: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-c6221d99-3336-4592-bec7-d06f036cbb4f container test-container: <nil>
  STEP: delete the pod @ 04/27/24 12:27:51.954
  Apr 27 12:27:51.970: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-8911" for this suite. @ 04/27/24 12:27:51.974
• [4.087 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:349
  STEP: Creating a kubernetes client @ 04/27/24 12:27:51.982
  Apr 27 12:27:51.982: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename disruption @ 04/27/24 12:27:51.983
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:27:52.003
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:27:52.006
  STEP: Creating a pdb that targets all three pods in a test replica set @ 04/27/24 12:27:52.01
  STEP: Waiting for the pdb to be processed @ 04/27/24 12:27:52.015
  STEP: First trying to evict a pod which shouldn't be evictable @ 04/27/24 12:27:54.027
  STEP: Waiting for all pods to be running @ 04/27/24 12:27:54.027
  Apr 27 12:27:54.031: INFO: pods: 0 < 3
  STEP: locating a running pod @ 04/27/24 12:27:56.032
  STEP: Updating the pdb to allow a pod to be evicted @ 04/27/24 12:27:56.044
  STEP: Waiting for the pdb to be processed @ 04/27/24 12:27:56.054
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 04/27/24 12:27:58.059
  STEP: Waiting for all pods to be running @ 04/27/24 12:27:58.059
  STEP: Waiting for the pdb to observed all healthy pods @ 04/27/24 12:27:58.064
  STEP: Patching the pdb to disallow a pod to be evicted @ 04/27/24 12:27:58.093
  STEP: Waiting for the pdb to be processed @ 04/27/24 12:27:58.108
  STEP: Waiting for all pods to be running @ 04/27/24 12:28:00.114
  STEP: locating a running pod @ 04/27/24 12:28:00.118
  STEP: Deleting the pdb to allow a pod to be evicted @ 04/27/24 12:28:00.129
  STEP: Waiting for the pdb to be deleted @ 04/27/24 12:28:00.136
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 04/27/24 12:28:00.14
  STEP: Waiting for all pods to be running @ 04/27/24 12:28:00.14
  Apr 27 12:28:00.161: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-9103" for this suite. @ 04/27/24 12:28:00.165
• [8.194 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:132
  STEP: Creating a kubernetes client @ 04/27/24 12:28:00.177
  Apr 27 12:28:00.177: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:28:00.177
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:28:00.197
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:28:00.2
  STEP: Creating the pod @ 04/27/24 12:28:00.203
  Apr 27 12:28:02.754: INFO: Successfully updated pod "labelsupdate2135b047-17e9-4de4-aa18-df9348c248ed"
  Apr 27 12:28:06.780: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5500" for this suite. @ 04/27/24 12:28:06.784
• [6.615 seconds]
------------------------------
S
------------------------------
[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance] [sig-auth, Conformance]
k8s.io/kubernetes/test/e2e/auth/certificates.go:200
  STEP: Creating a kubernetes client @ 04/27/24 12:28:06.792
  Apr 27 12:28:06.792: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename certificates @ 04/27/24 12:28:06.793
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:28:06.813
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:28:06.817
  STEP: getting /apis @ 04/27/24 12:28:07.282
  STEP: getting /apis/certificates.k8s.io @ 04/27/24 12:28:07.287
  STEP: getting /apis/certificates.k8s.io/v1 @ 04/27/24 12:28:07.288
  STEP: creating @ 04/27/24 12:28:07.289
  STEP: getting @ 04/27/24 12:28:07.308
  STEP: listing @ 04/27/24 12:28:07.312
  STEP: watching @ 04/27/24 12:28:07.317
  Apr 27 12:28:07.317: INFO: starting watch
  STEP: patching @ 04/27/24 12:28:07.318
  STEP: updating @ 04/27/24 12:28:07.324
  Apr 27 12:28:07.331: INFO: waiting for watch events with expected annotations
  Apr 27 12:28:07.331: INFO: saw patched and updated annotations
  STEP: getting /approval @ 04/27/24 12:28:07.331
  STEP: patching /approval @ 04/27/24 12:28:07.335
  STEP: updating /approval @ 04/27/24 12:28:07.344
  STEP: getting /status @ 04/27/24 12:28:07.351
  STEP: patching /status @ 04/27/24 12:28:07.354
  STEP: updating /status @ 04/27/24 12:28:07.363
  STEP: deleting @ 04/27/24 12:28:07.37
  STEP: deleting a collection @ 04/27/24 12:28:07.386
  Apr 27 12:28:07.403: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "certificates-3" for this suite. @ 04/27/24 12:28:07.407
• [0.622 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:164
  STEP: Creating a kubernetes client @ 04/27/24 12:28:07.415
  Apr 27 12:28:07.415: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 12:28:07.416
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:28:07.433
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:28:07.436
  STEP: Creating the pod @ 04/27/24 12:28:07.439
  Apr 27 12:28:09.996: INFO: Successfully updated pod "annotationupdate69de8f5c-6607-46a6-8d44-27ee2310dad2"
  Apr 27 12:28:14.028: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3245" for this suite. @ 04/27/24 12:28:14.033
• [6.626 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:130
  STEP: Creating a kubernetes client @ 04/27/24 12:28:14.042
  Apr 27 12:28:14.042: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 12:28:14.042
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:28:14.061
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:28:14.064
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 04/27/24 12:28:14.068
  STEP: Saw pod success @ 04/27/24 12:28:18.093
  Apr 27 12:28:18.097: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-d01eed9a-f70a-4f54-9723-82413dd97144 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 12:28:18.105
  Apr 27 12:28:18.121: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5769" for this suite. @ 04/27/24 12:28:18.126
• [4.092 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:69
  STEP: Creating a kubernetes client @ 04/27/24 12:28:18.134
  Apr 27 12:28:18.134: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/27/24 12:28:18.134
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:28:18.154
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:28:18.157
  Apr 27 12:28:18.160: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: kubectl validation (kubectl create and apply) allows request with known and required properties @ 04/27/24 12:28:19.609
  Apr 27 12:28:19.609: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 --namespace=crd-publish-openapi-7613 create -f -'
  Apr 27 12:28:21.669: INFO: stderr: ""
  Apr 27 12:28:21.669: INFO: stdout: "e2e-test-crd-publish-openapi-2002-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Apr 27 12:28:21.669: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 --namespace=crd-publish-openapi-7613 delete e2e-test-crd-publish-openapi-2002-crds test-foo'
  Apr 27 12:28:21.737: INFO: stderr: ""
  Apr 27 12:28:21.737: INFO: stdout: "e2e-test-crd-publish-openapi-2002-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  Apr 27 12:28:21.737: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 --namespace=crd-publish-openapi-7613 apply -f -'
  Apr 27 12:28:21.796: INFO: stderr: ""
  Apr 27 12:28:21.796: INFO: stdout: "e2e-test-crd-publish-openapi-2002-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Apr 27 12:28:21.796: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 --namespace=crd-publish-openapi-7613 delete e2e-test-crd-publish-openapi-2002-crds test-foo'
  Apr 27 12:28:21.847: INFO: stderr: ""
  Apr 27 12:28:21.847: INFO: stdout: "e2e-test-crd-publish-openapi-2002-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  STEP: kubectl validation (kubectl create and apply) rejects request with value outside defined enum values @ 04/27/24 12:28:21.847
  Apr 27 12:28:21.847: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 --namespace=crd-publish-openapi-7613 create -f -'
  Apr 27 12:28:21.891: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request with unknown properties when disallowed by the schema @ 04/27/24 12:28:21.891
  Apr 27 12:28:21.891: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 --namespace=crd-publish-openapi-7613 create -f -'
  Apr 27 12:28:21.933: INFO: rc: 1
  Apr 27 12:28:21.933: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 --namespace=crd-publish-openapi-7613 apply -f -'
  Apr 27 12:28:21.983: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request without required properties @ 04/27/24 12:28:21.983
  Apr 27 12:28:21.983: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 --namespace=crd-publish-openapi-7613 create -f -'
  Apr 27 12:28:22.025: INFO: rc: 1
  Apr 27 12:28:22.025: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 --namespace=crd-publish-openapi-7613 apply -f -'
  Apr 27 12:28:22.076: INFO: rc: 1
  STEP: kubectl explain works to explain CR properties @ 04/27/24 12:28:22.076
  Apr 27 12:28:22.076: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 explain e2e-test-crd-publish-openapi-2002-crds'
  Apr 27 12:28:22.114: INFO: stderr: ""
  Apr 27 12:28:22.114: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-2002-crd\nVERSION:    v1\n\nDESCRIPTION:\n    Foo CRD for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Foo\n\n  status\t<Object>\n    Status of Foo\n\n\n"
  STEP: kubectl explain works to explain CR properties recursively @ 04/27/24 12:28:22.115
  Apr 27 12:28:22.115: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 explain e2e-test-crd-publish-openapi-2002-crds.metadata'
  Apr 27 12:28:22.156: INFO: stderr: ""
  Apr 27 12:28:22.156: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-2002-crd\nVERSION:    v1\n\nFIELD: metadata <ObjectMeta>\n\nDESCRIPTION:\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n    ObjectMeta is metadata that all persisted resources must have, which\n    includes all objects users must create.\n    \nFIELDS:\n  annotations\t<map[string]string>\n    Annotations is an unstructured key value map stored with a resource that may\n    be set by external tools to store and retrieve arbitrary metadata. They are\n    not queryable and should be preserved when modifying objects. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n\n  creationTimestamp\t<string>\n    CreationTimestamp is a timestamp representing the server time when this\n    object was created. It is not guaranteed to be set in happens-before order\n    across separate operations. Clients may not set this value. It is\n    represented in RFC3339 form and is in UTC.\n    \n    Populated by the system. Read-only. Null for lists. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  deletionGracePeriodSeconds\t<integer>\n    Number of seconds allowed for this object to gracefully terminate before it\n    will be removed from the system. Only set when deletionTimestamp is also\n    set. May only be shortened. Read-only.\n\n  deletionTimestamp\t<string>\n    DeletionTimestamp is RFC 3339 date and time at which this resource will be\n    deleted. This field is set by the server when a graceful deletion is\n    requested by the user, and is not directly settable by a client. The\n    resource is expected to be deleted (no longer visible from resource lists,\n    and not reachable by name) after the time in this field, once the finalizers\n    list is empty. As long as the finalizers list contains items, deletion is\n    blocked. Once the deletionTimestamp is set, this value may not be unset or\n    be set further into the future, although it may be shortened or the resource\n    may be deleted prior to this time. For example, a user may request that a\n    pod is deleted in 30 seconds. The Kubelet will react by sending a graceful\n    termination signal to the containers in the pod. After that 30 seconds, the\n    Kubelet will send a hard termination signal (SIGKILL) to the container and\n    after cleanup, remove the pod from the API. In the presence of network\n    partitions, this object may still exist after this timestamp, until an\n    administrator or automated process can determine the resource is fully\n    terminated. If not set, graceful deletion of the object has not been\n    requested.\n    \n    Populated by the system when a graceful deletion is requested. Read-only.\n    More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  finalizers\t<[]string>\n    Must be empty before the object is deleted from the registry. Each entry is\n    an identifier for the responsible component that will remove the entry from\n    the list. If the deletionTimestamp of the object is non-nil, entries in this\n    list can only be removed. Finalizers may be processed and removed in any\n    order.  Order is NOT enforced because it introduces significant risk of\n    stuck finalizers. finalizers is a shared field, any actor with permission\n    can reorder it. If the finalizer list is processed in order, then this can\n    lead to a situation in which the component responsible for the first\n    finalizer in the list is waiting for a signal (field value, external system,\n    or other) produced by a component responsible for a finalizer later in the\n    list, resulting in a deadlock. Without enforced ordering finalizers are free\n    to order amongst themselves and are not vulnerable to ordering changes in\n    the list.\n\n  generateName\t<string>\n    GenerateName is an optional prefix, used by the server, to generate a unique\n    name ONLY IF the Name field has not been provided. If this field is used,\n    the name returned to the client will be different than the name passed. This\n    value will also be combined with a unique suffix. The provided value has the\n    same validation rules as the Name field, and may be truncated by the length\n    of the suffix required to make the value unique on the server.\n    \n    If this field is specified and the generated name exists, the server will\n    return a 409.\n    \n    Applied only if Name is not specified. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n\n  generation\t<integer>\n    A sequence number representing a specific generation of the desired state.\n    Populated by the system. Read-only.\n\n  labels\t<map[string]string>\n    Map of string keys and values that can be used to organize and categorize\n    (scope and select) objects. May match selectors of replication controllers\n    and services. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n\n  managedFields\t<[]ManagedFieldsEntry>\n    ManagedFields maps workflow-id and version to the set of fields that are\n    managed by that workflow. This is mostly for internal housekeeping, and\n    users typically shouldn't need to set or understand this field. A workflow\n    can be the user's name, a controller's name, or the name of a specific apply\n    path like \"ci-cd\". The set of fields is always in the version that the\n    workflow used when modifying the object.\n\n  name\t<string>\n    Name must be unique within a namespace. Is required when creating resources,\n    although some resources may allow a client to request the generation of an\n    appropriate name automatically. Name is primarily intended for creation\n    idempotence and configuration definition. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n\n  namespace\t<string>\n    Namespace defines the space within which each name must be unique. An empty\n    namespace is equivalent to the \"default\" namespace, but \"default\" is the\n    canonical representation. Not all objects are required to be scoped to a\n    namespace - the value of this field for those objects will be empty.\n    \n    Must be a DNS_LABEL. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n\n  ownerReferences\t<[]OwnerReference>\n    List of objects depended by this object. If ALL objects in the list have\n    been deleted, this object will be garbage collected. If this object is\n    managed by a controller, then an entry in this list will point to this\n    controller, with the controller field set to true. There cannot be more than\n    one managing controller.\n\n  resourceVersion\t<string>\n    An opaque value that represents the internal version of this object that can\n    be used by clients to determine when objects have changed. May be used for\n    optimistic concurrency, change detection, and the watch operation on a\n    resource or set of resources. Clients must treat these values as opaque and\n    passed unmodified back to the server. They may only be valid for a\n    particular resource or set of resources.\n    \n    Populated by the system. Read-only. Value must be treated as opaque by\n    clients and . More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\n  selfLink\t<string>\n    Deprecated: selfLink is a legacy read-only field that is no longer populated\n    by the system.\n\n  uid\t<string>\n    UID is the unique in time and space value for this object. It is typically\n    generated by the server on successful creation of a resource and is not\n    allowed to change on PUT operations.\n    \n    Populated by the system. Read-only. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n\n\n"
  Apr 27 12:28:22.156: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 explain e2e-test-crd-publish-openapi-2002-crds.spec'
  Apr 27 12:28:22.198: INFO: stderr: ""
  Apr 27 12:28:22.198: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-2002-crd\nVERSION:    v1\n\nFIELD: spec <Object>\n\nDESCRIPTION:\n    Specification of Foo\n    \nFIELDS:\n  bars\t<[]Object>\n    List of Bars and their specs.\n\n\n"
  Apr 27 12:28:22.198: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 explain e2e-test-crd-publish-openapi-2002-crds.spec.bars'
  Apr 27 12:28:22.237: INFO: stderr: ""
  Apr 27 12:28:22.237: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-2002-crd\nVERSION:    v1\n\nFIELD: bars <[]Object>\n\nDESCRIPTION:\n    List of Bars and their specs.\n    \nFIELDS:\n  age\t<string>\n    Age of Bar.\n\n  bazs\t<[]string>\n    List of Bazs.\n\n  feeling\t<string>\n    Whether Bar is feeling great.\n\n  name\t<string> -required-\n    Name of Bar.\n\n\n"
  STEP: kubectl explain works to return error when explain is called on property that doesn't exist @ 04/27/24 12:28:22.237
  Apr 27 12:28:22.237: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-7613 explain e2e-test-crd-publish-openapi-2002-crds.spec.bars2'
  Apr 27 12:28:22.277: INFO: rc: 1
  Apr 27 12:28:23.684: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-7613" for this suite. @ 04/27/24 12:28:23.694
• [5.569 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslice.go:356
  STEP: Creating a kubernetes client @ 04/27/24 12:28:23.703
  Apr 27 12:28:23.703: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename endpointslice @ 04/27/24 12:28:23.703
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:28:23.718
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:28:23.721
  STEP: getting /apis @ 04/27/24 12:28:23.724
  STEP: getting /apis/discovery.k8s.io @ 04/27/24 12:28:23.728
  STEP: getting /apis/discovery.k8s.iov1 @ 04/27/24 12:28:23.73
  STEP: creating @ 04/27/24 12:28:23.731
  STEP: getting @ 04/27/24 12:28:23.748
  STEP: listing @ 04/27/24 12:28:23.752
  STEP: watching @ 04/27/24 12:28:23.756
  Apr 27 12:28:23.756: INFO: starting watch
  STEP: cluster-wide listing @ 04/27/24 12:28:23.758
  STEP: cluster-wide watching @ 04/27/24 12:28:23.761
  Apr 27 12:28:23.761: INFO: starting watch
  STEP: patching @ 04/27/24 12:28:23.763
  STEP: updating @ 04/27/24 12:28:23.769
  Apr 27 12:28:23.780: INFO: waiting for watch events with expected annotations
  Apr 27 12:28:23.780: INFO: saw patched and updated annotations
  STEP: deleting @ 04/27/24 12:28:23.78
  STEP: deleting a collection @ 04/27/24 12:28:23.795
  Apr 27 12:28:23.814: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-9068" for this suite. @ 04/27/24 12:28:23.819
• [0.125 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:151
  STEP: Creating a kubernetes client @ 04/27/24 12:28:23.829
  Apr 27 12:28:23.829: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 12:28:23.83
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:28:23.896
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:28:23.899
  STEP: Creating pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458 @ 04/27/24 12:28:23.903
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/27/24 12:28:25.924
  Apr 27 12:28:25.929: INFO: Initial restart count of pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d is 0
  Apr 27 12:28:25.934: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:27.940: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:29.947: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:31.951: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:33.958: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:35.963: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:37.968: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:39.975: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:41.981: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:43.987: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:45.993: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:47.998: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:50.005: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:52.011: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:54.016: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:56.021: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:28:58.028: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:00.034: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:02.040: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:04.046: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:06.052: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:08.057: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:10.063: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:12.068: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:14.074: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:16.080: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:18.086: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:20.092: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:22.098: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:24.105: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:26.110: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:28.117: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:30.123: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:32.130: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:34.136: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:36.142: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:38.148: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:40.153: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:42.159: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:44.166: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:46.171: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:48.177: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:50.184: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:52.190: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:54.196: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:56.202: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:29:58.208: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:00.215: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:02.220: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:04.227: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:06.232: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:08.238: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:10.243: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:12.250: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:14.256: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:16.263: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:18.268: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:20.274: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:22.281: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:24.288: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:26.295: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:28.302: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:30.308: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:32.314: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:34.319: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:36.326: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:38.332: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:40.338: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:42.343: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:44.350: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:46.356: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:48.362: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:50.369: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:52.374: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:54.380: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:56.386: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:30:58.392: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:00.398: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:02.404: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:04.410: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:06.416: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:08.422: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:10.428: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:12.433: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:14.440: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:16.445: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:18.451: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:20.458: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:22.464: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:24.470: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:26.476: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:28.482: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:30.487: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:32.493: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:34.499: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:36.506: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:38.512: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:40.517: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:42.523: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:44.530: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:46.537: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:48.544: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:50.551: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:52.558: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:54.564: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:56.569: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:31:58.575: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:00.580: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:02.586: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:04.593: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:06.598: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:08.604: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:10.610: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:12.615: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:14.622: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:16.628: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:18.634: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:20.640: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:22.647: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  Apr 27 12:32:24.655: INFO: Get pod busybox-7cf025a1-d5b7-4863-8bae-adcf5e8e797d in namespace container-probe-4458
  STEP: deleting the pod @ 04/27/24 12:32:26.656
  Apr 27 12:32:26.678: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-4458" for this suite. @ 04/27/24 12:32:26.682
• [242.861 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance] [sig-scheduling, Serial, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/predicates.go:469
  STEP: Creating a kubernetes client @ 04/27/24 12:32:26.69
  Apr 27 12:32:26.690: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-pred @ 04/27/24 12:32:26.691
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:26.708
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:26.712
  Apr 27 12:32:26.715: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Apr 27 12:32:26.725: INFO: Waiting for terminating namespaces to be deleted...
  Apr 27 12:32:26.729: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-37-185 before test
  Apr 27 12:32:26.735: INFO: nginx-ingress-controller-kubernetes-worker-wjwlq from ingress-nginx-kubernetes-worker started at 2024-04-27 12:15:52 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.735: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 12:32:26.735: INFO: calico-node-qdhx5 from kube-system started at 2024-04-27 12:18:04 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.735: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 12:32:26.735: INFO: sonobuoy-e2e-job-d6fe9ea7c49d40a2 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:32:26.735: INFO: 	Container e2e ready: true, restart count 0
  Apr 27 12:32:26.735: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:32:26.735: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-crp54 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:32:26.735: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:32:26.735: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 27 12:32:26.735: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-6-153 before test
  Apr 27 12:32:26.741: INFO: nginx-ingress-controller-kubernetes-worker-5khsm from ingress-nginx-kubernetes-worker started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.741: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: calico-node-cs4kq from kube-system started at 2024-04-27 12:18:06 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.741: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: coredns-bddfd76d7-p5qdr from kube-system started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.741: INFO: 	Container coredns ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: kube-state-metrics-6f48cdd76-xtvcf from kube-system started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.741: INFO: 	Container kube-state-metrics ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: metrics-server-v0.6.3-69d7fbfdf8-vwtzn from kube-system started at 2024-04-27 12:10:16 +0000 UTC (2 container statuses recorded)
  Apr 27 12:32:26.741: INFO: 	Container metrics-server ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: 	Container metrics-server-nanny ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: dashboard-metrics-scraper-5dd7cb5fc-rfvgw from kubernetes-dashboard started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.741: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: kubernetes-dashboard-7b899cb9d9-d8649 from kubernetes-dashboard started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.741: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-r49rd from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:32:26.741: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 27 12:32:26.741: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-82-63 before test
  Apr 27 12:32:26.747: INFO: nginx-ingress-controller-kubernetes-worker-zs4lv from ingress-nginx-kubernetes-worker started at 2024-04-27 12:18:19 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.747: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 12:32:26.747: INFO: calico-node-mvvng from kube-system started at 2024-04-27 12:18:11 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.747: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 12:32:26.747: INFO: sonobuoy from sonobuoy started at 2024-04-27 12:21:03 +0000 UTC (1 container statuses recorded)
  Apr 27 12:32:26.747: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Apr 27 12:32:26.747: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-l72v9 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:32:26.747: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:32:26.747: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 04/27/24 12:32:26.747
  STEP: Explicitly delete pod here to free the resource it takes. @ 04/27/24 12:32:28.77
  STEP: Trying to apply a random label on the found node. @ 04/27/24 12:32:28.786
  STEP: verifying the node has the label kubernetes.io/e2e-928e79e9-4542-4006-b42c-ae0ef91f4d31 42 @ 04/27/24 12:32:28.796
  STEP: Trying to relaunch the pod, now with labels. @ 04/27/24 12:32:28.8
  STEP: removing the label kubernetes.io/e2e-928e79e9-4542-4006-b42c-ae0ef91f4d31 off the node ip-172-31-82-63 @ 04/27/24 12:32:30.825
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-928e79e9-4542-4006-b42c-ae0ef91f4d31 @ 04/27/24 12:32:30.84
  Apr 27 12:32:30.845: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-7075" for this suite. @ 04/27/24 12:32:30.851
• [4.168 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:185
  STEP: Creating a kubernetes client @ 04/27/24 12:32:30.859
  Apr 27 12:32:30.859: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename deployment @ 04/27/24 12:32:30.86
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:30.875
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:30.879
  STEP: creating a Deployment @ 04/27/24 12:32:30.887
  STEP: waiting for Deployment to be created @ 04/27/24 12:32:30.893
  STEP: waiting for all Replicas to be Ready @ 04/27/24 12:32:30.895
  Apr 27 12:32:30.896: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 27 12:32:30.896: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 27 12:32:30.907: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 27 12:32:30.907: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 27 12:32:30.922: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 27 12:32:30.922: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 27 12:32:30.949: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 27 12:32:30.949: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 27 12:32:31.765: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Apr 27 12:32:31.765: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Apr 27 12:32:32.096: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2 and labels map[test-deployment-static:true]
  STEP: patching the Deployment @ 04/27/24 12:32:32.097
  Apr 27 12:32:32.107: INFO: observed event type ADDED
  STEP: waiting for Replicas to scale @ 04/27/24 12:32:32.107
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 0
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.109: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.118: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.118: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.135: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.135: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.165: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.165: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:32.171: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:32.171: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:33.118: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:33.118: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:33.145: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  STEP: listing Deployments @ 04/27/24 12:32:33.145
  Apr 27 12:32:33.149: INFO: Found test-deployment with labels: map[test-deployment:patched test-deployment-static:true]
  STEP: updating the Deployment @ 04/27/24 12:32:33.149
  Apr 27 12:32:33.159: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  STEP: fetching the DeploymentStatus @ 04/27/24 12:32:33.159
  Apr 27 12:32:33.168: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:33.173: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:33.195: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:33.219: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:33.232: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:33.244: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:34.153: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:34.203: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:34.220: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:34.237: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 27 12:32:37.814: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 3 and labels map[test-deployment:updated test-deployment-static:true]
  STEP: patching the DeploymentStatus @ 04/27/24 12:32:37.83
  STEP: fetching the DeploymentStatus @ 04/27/24 12:32:37.84
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 1
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 2
  Apr 27 12:32:37.847: INFO: observed Deployment test-deployment in namespace deployment-6909 with ReadyReplicas 3
  STEP: deleting the Deployment @ 04/27/24 12:32:37.847
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.859: INFO: observed event type MODIFIED
  Apr 27 12:32:37.860: INFO: observed event type MODIFIED
  Apr 27 12:32:37.860: INFO: observed event type MODIFIED
  Apr 27 12:32:37.865: INFO: Log out all the ReplicaSets if there is no deployment created
  Apr 27 12:32:37.869: INFO: ReplicaSet "test-deployment-64fd565c98":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-64fd565c98",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6909",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8aaf0f98-6945-44f8-8a20-b8144d89fe05",
      ResourceVersion: (string) (len=4) "6501",
      Generation: (int64) 4,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817952,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "eb94fe36-d4de-4135-9ae3-704e21310c7e",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817957,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 65 62 39 34  66 65 33 36 2d 64 34 64  |":\"eb94fe36-d4d|
              00000130  65 2d 34 31 33 35 2d 39  61 65 33 2d 37 30 34 65  |e-4135-9ae3-704e|
              00000140  32 31 33 31 30 63 37 65  5c 22 7d 22 3a 7b 7d 7d  |21310c7e\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817957,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=25) "registry.k8s.io/pause:3.9",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(2),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 4,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Apr 27 12:32:37.875: INFO: pod: "test-deployment-64fd565c98-7tnx9":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-7tnx9",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=15) "deployment-6909",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "eb65ff05-43e3-47d0-a96b-a1443b8ec0e8",
      ResourceVersion: (string) (len=4) "6496",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817952,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817959,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "8aaf0f98-6945-44f8-8a20-b8144d89fe05",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817952,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  38 61 61 66 30 66 39 38  |uid\":\"8aaf0f98|
              000000a0  2d 36 39 34 35 2d 34 34  66 38 2d 38 61 32 30 2d  |-6945-44f8-8a20-|
              000000b0  62 38 31 34 34 64 38 39  66 65 30 35 5c 22 7d 22  |b8144d89fe05\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817953,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 36 39  2e 31 33 37 5c 22 7d 22  |2.168.69.137\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-l4q9v",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-l4q9v",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817953,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817952,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817953,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817953,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817952,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) (len=14) "192.168.69.137",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.69.137"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817952,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849817952,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://193def41362618187ae43057fbc4721b86fe360192a5994e5833224079f89103",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Apr 27 12:32:37.877: INFO: ReplicaSet "test-deployment-79ff746c4":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=25) "test-deployment-79ff746c4",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6909",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8214f6e8-2265-4ec3-8ba2-d9d7af789b11",
      ResourceVersion: (string) (len=4) "6493",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817953,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=22) "test-deployment-static": (string) (len=4) "true",
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "3"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "eb94fe36-d4de-4135-9ae3-704e21310c7e",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817954,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 65 62 39 34  66 65 33 36 2d 64 34 64  |":\"eb94fe36-d4d|
              00000130  65 2d 34 31 33 35 2d 39  61 65 33 2d 37 30 34 65  |e-4135-9ae3-704e|
              00000140  32 31 33 31 30 63 37 65  5c 22 7d 22 3a 7b 7d 7d  |21310c7e\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817957,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 2,
      FullyLabeledReplicas: (int32) 2,
      ReadyReplicas: (int32) 2,
      AvailableReplicas: (int32) 2,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Apr 27 12:32:37.885: INFO: pod: "test-deployment-79ff746c4-cx68l":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-cx68l",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-6909",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "74be03fb-d086-4c6a-8f68-ac38c94448f5",
      ResourceVersion: (string) (len=4) "6426",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817953,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "8214f6e8-2265-4ec3-8ba2-d9d7af789b11",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817953,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  38 32 31 34 66 36 65 38  |uid\":\"8214f6e8|
              000000a0  2d 32 32 36 35 2d 34 65  63 33 2d 38 62 61 32 2d  |-2265-4ec3-8ba2-|
              000000b0  64 39 64 37 61 66 37 38  39 62 31 31 5c 22 7d 22  |d9d7af789b11\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817954,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 36 39  2e 31 33 38 5c 22 7d 22  |2.168.69.138\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-7fwnz",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-7fwnz",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817954,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817953,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817954,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817954,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817953,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) (len=14) "192.168.69.138",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.69.138"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817953,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849817953,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://eb1a4a9b3fcd1aa3e9b008b3d09e9c74566e6129d3a7b2bec232f1c7223698a8",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Apr 27 12:32:37.897: INFO: pod: "test-deployment-79ff746c4-ftnvj":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-ftnvj",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-6909",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cda3b0ce-c7e6-46c7-a3d9-63eea619fcdd",
      ResourceVersion: (string) (len=4) "6492",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817954,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "8214f6e8-2265-4ec3-8ba2-d9d7af789b11",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817954,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  38 32 31 34 66 36 65 38  |uid\":\"8214f6e8|
              000000a0  2d 32 32 36 35 2d 34 65  63 33 2d 38 62 61 32 2d  |-2265-4ec3-8ba2-|
              000000b0  64 39 64 37 61 66 37 38  39 62 31 31 5c 22 7d 22  |d9d7af789b11\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817957,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=664) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 31 37  32 2e 32 31 32 5c 22 7d  |2.168.172.212\"}|
              00000270  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              00000280  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000290  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-t989g",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-t989g",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817957,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817954,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817957,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817957,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817954,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) (len=15) "192.168.172.212",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.172.212"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817954,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849817957,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://3e1202cc5cfdc5acbc08cc85582d08bb1030ee18a4b4d4db22bbaf27f4c60ecf",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Apr 27 12:32:37.903: INFO: ReplicaSet "test-deployment-7fcc79b8c7":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-7fcc79b8c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6909",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d4e2ae82-b091-484b-8f67-cb48a1695fed",
      ResourceVersion: (string) (len=4) "6373",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849817950,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "7fcc79b8c7",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "eb94fe36-d4de-4135-9ae3-704e21310c7e",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817953,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 65 62 39 34  66 65 33 36 2d 64 34 64  |":\"eb94fe36-d4d|
              00000130  65 2d 34 31 33 35 2d 39  61 65 33 2d 37 30 34 65  |e-4135-9ae3-704e|
              00000140  32 31 33 31 30 63 37 65  5c 22 7d 22 3a 7b 7d 7d  |21310c7e\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849817953,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "7fcc79b8c7",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "7fcc79b8c7",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Apr 27 12:32:37.910: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-6909" for this suite. @ 04/27/24 12:32:37.915
• [7.065 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/discovery.go:126
  STEP: Creating a kubernetes client @ 04/27/24 12:32:37.924
  Apr 27 12:32:37.924: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename discovery @ 04/27/24 12:32:37.926
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:37.944
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:37.949
  STEP: Setting up server cert @ 04/27/24 12:32:37.954
  Apr 27 12:32:38.357: INFO: Checking APIGroup: apiregistration.k8s.io
  Apr 27 12:32:38.358: INFO: PreferredVersion.GroupVersion: apiregistration.k8s.io/v1
  Apr 27 12:32:38.358: INFO: Versions found [{apiregistration.k8s.io/v1 v1}]
  Apr 27 12:32:38.358: INFO: apiregistration.k8s.io/v1 matches apiregistration.k8s.io/v1
  Apr 27 12:32:38.358: INFO: Checking APIGroup: apps
  Apr 27 12:32:38.360: INFO: PreferredVersion.GroupVersion: apps/v1
  Apr 27 12:32:38.360: INFO: Versions found [{apps/v1 v1}]
  Apr 27 12:32:38.360: INFO: apps/v1 matches apps/v1
  Apr 27 12:32:38.360: INFO: Checking APIGroup: events.k8s.io
  Apr 27 12:32:38.362: INFO: PreferredVersion.GroupVersion: events.k8s.io/v1
  Apr 27 12:32:38.362: INFO: Versions found [{events.k8s.io/v1 v1}]
  Apr 27 12:32:38.362: INFO: events.k8s.io/v1 matches events.k8s.io/v1
  Apr 27 12:32:38.362: INFO: Checking APIGroup: authentication.k8s.io
  Apr 27 12:32:38.363: INFO: PreferredVersion.GroupVersion: authentication.k8s.io/v1
  Apr 27 12:32:38.363: INFO: Versions found [{authentication.k8s.io/v1 v1}]
  Apr 27 12:32:38.363: INFO: authentication.k8s.io/v1 matches authentication.k8s.io/v1
  Apr 27 12:32:38.363: INFO: Checking APIGroup: authorization.k8s.io
  Apr 27 12:32:38.365: INFO: PreferredVersion.GroupVersion: authorization.k8s.io/v1
  Apr 27 12:32:38.365: INFO: Versions found [{authorization.k8s.io/v1 v1}]
  Apr 27 12:32:38.365: INFO: authorization.k8s.io/v1 matches authorization.k8s.io/v1
  Apr 27 12:32:38.365: INFO: Checking APIGroup: autoscaling
  Apr 27 12:32:38.366: INFO: PreferredVersion.GroupVersion: autoscaling/v2
  Apr 27 12:32:38.366: INFO: Versions found [{autoscaling/v2 v2} {autoscaling/v1 v1}]
  Apr 27 12:32:38.366: INFO: autoscaling/v2 matches autoscaling/v2
  Apr 27 12:32:38.366: INFO: Checking APIGroup: batch
  Apr 27 12:32:38.368: INFO: PreferredVersion.GroupVersion: batch/v1
  Apr 27 12:32:38.368: INFO: Versions found [{batch/v1 v1}]
  Apr 27 12:32:38.368: INFO: batch/v1 matches batch/v1
  Apr 27 12:32:38.368: INFO: Checking APIGroup: certificates.k8s.io
  Apr 27 12:32:38.369: INFO: PreferredVersion.GroupVersion: certificates.k8s.io/v1
  Apr 27 12:32:38.369: INFO: Versions found [{certificates.k8s.io/v1 v1}]
  Apr 27 12:32:38.369: INFO: certificates.k8s.io/v1 matches certificates.k8s.io/v1
  Apr 27 12:32:38.369: INFO: Checking APIGroup: networking.k8s.io
  Apr 27 12:32:38.370: INFO: PreferredVersion.GroupVersion: networking.k8s.io/v1
  Apr 27 12:32:38.370: INFO: Versions found [{networking.k8s.io/v1 v1}]
  Apr 27 12:32:38.370: INFO: networking.k8s.io/v1 matches networking.k8s.io/v1
  Apr 27 12:32:38.370: INFO: Checking APIGroup: policy
  Apr 27 12:32:38.372: INFO: PreferredVersion.GroupVersion: policy/v1
  Apr 27 12:32:38.372: INFO: Versions found [{policy/v1 v1}]
  Apr 27 12:32:38.372: INFO: policy/v1 matches policy/v1
  Apr 27 12:32:38.372: INFO: Checking APIGroup: rbac.authorization.k8s.io
  Apr 27 12:32:38.373: INFO: PreferredVersion.GroupVersion: rbac.authorization.k8s.io/v1
  Apr 27 12:32:38.373: INFO: Versions found [{rbac.authorization.k8s.io/v1 v1}]
  Apr 27 12:32:38.373: INFO: rbac.authorization.k8s.io/v1 matches rbac.authorization.k8s.io/v1
  Apr 27 12:32:38.373: INFO: Checking APIGroup: storage.k8s.io
  Apr 27 12:32:38.374: INFO: PreferredVersion.GroupVersion: storage.k8s.io/v1
  Apr 27 12:32:38.374: INFO: Versions found [{storage.k8s.io/v1 v1}]
  Apr 27 12:32:38.374: INFO: storage.k8s.io/v1 matches storage.k8s.io/v1
  Apr 27 12:32:38.374: INFO: Checking APIGroup: admissionregistration.k8s.io
  Apr 27 12:32:38.376: INFO: PreferredVersion.GroupVersion: admissionregistration.k8s.io/v1
  Apr 27 12:32:38.376: INFO: Versions found [{admissionregistration.k8s.io/v1 v1}]
  Apr 27 12:32:38.376: INFO: admissionregistration.k8s.io/v1 matches admissionregistration.k8s.io/v1
  Apr 27 12:32:38.376: INFO: Checking APIGroup: apiextensions.k8s.io
  Apr 27 12:32:38.377: INFO: PreferredVersion.GroupVersion: apiextensions.k8s.io/v1
  Apr 27 12:32:38.377: INFO: Versions found [{apiextensions.k8s.io/v1 v1}]
  Apr 27 12:32:38.377: INFO: apiextensions.k8s.io/v1 matches apiextensions.k8s.io/v1
  Apr 27 12:32:38.377: INFO: Checking APIGroup: scheduling.k8s.io
  Apr 27 12:32:38.378: INFO: PreferredVersion.GroupVersion: scheduling.k8s.io/v1
  Apr 27 12:32:38.378: INFO: Versions found [{scheduling.k8s.io/v1 v1}]
  Apr 27 12:32:38.378: INFO: scheduling.k8s.io/v1 matches scheduling.k8s.io/v1
  Apr 27 12:32:38.378: INFO: Checking APIGroup: coordination.k8s.io
  Apr 27 12:32:38.380: INFO: PreferredVersion.GroupVersion: coordination.k8s.io/v1
  Apr 27 12:32:38.380: INFO: Versions found [{coordination.k8s.io/v1 v1}]
  Apr 27 12:32:38.380: INFO: coordination.k8s.io/v1 matches coordination.k8s.io/v1
  Apr 27 12:32:38.380: INFO: Checking APIGroup: node.k8s.io
  Apr 27 12:32:38.381: INFO: PreferredVersion.GroupVersion: node.k8s.io/v1
  Apr 27 12:32:38.381: INFO: Versions found [{node.k8s.io/v1 v1}]
  Apr 27 12:32:38.381: INFO: node.k8s.io/v1 matches node.k8s.io/v1
  Apr 27 12:32:38.381: INFO: Checking APIGroup: discovery.k8s.io
  Apr 27 12:32:38.383: INFO: PreferredVersion.GroupVersion: discovery.k8s.io/v1
  Apr 27 12:32:38.383: INFO: Versions found [{discovery.k8s.io/v1 v1}]
  Apr 27 12:32:38.383: INFO: discovery.k8s.io/v1 matches discovery.k8s.io/v1
  Apr 27 12:32:38.383: INFO: Checking APIGroup: flowcontrol.apiserver.k8s.io
  Apr 27 12:32:38.384: INFO: PreferredVersion.GroupVersion: flowcontrol.apiserver.k8s.io/v1
  Apr 27 12:32:38.384: INFO: Versions found [{flowcontrol.apiserver.k8s.io/v1 v1} {flowcontrol.apiserver.k8s.io/v1beta3 v1beta3}]
  Apr 27 12:32:38.384: INFO: flowcontrol.apiserver.k8s.io/v1 matches flowcontrol.apiserver.k8s.io/v1
  Apr 27 12:32:38.384: INFO: Checking APIGroup: metrics.k8s.io
  Apr 27 12:32:38.385: INFO: PreferredVersion.GroupVersion: metrics.k8s.io/v1beta1
  Apr 27 12:32:38.385: INFO: Versions found [{metrics.k8s.io/v1beta1 v1beta1}]
  Apr 27 12:32:38.385: INFO: metrics.k8s.io/v1beta1 matches metrics.k8s.io/v1beta1
  Apr 27 12:32:38.385: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-3221" for this suite. @ 04/27/24 12:32:38.392
• [0.477 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl label should update the label on a resource [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1632
  STEP: Creating a kubernetes client @ 04/27/24 12:32:38.401
  Apr 27 12:32:38.401: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 12:32:38.401
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:38.417
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:38.421
  STEP: creating the pod @ 04/27/24 12:32:38.425
  Apr 27 12:32:38.425: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-2144 create -f -'
  Apr 27 12:32:38.517: INFO: stderr: ""
  Apr 27 12:32:38.517: INFO: stdout: "pod/pause created\n"
  STEP: adding the label testing-label with value testing-label-value to a pod @ 04/27/24 12:32:40.53
  Apr 27 12:32:40.530: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-2144 label pods pause testing-label=testing-label-value'
  Apr 27 12:32:40.584: INFO: stderr: ""
  Apr 27 12:32:40.584: INFO: stdout: "pod/pause labeled\n"
  STEP: verifying the pod has the label testing-label with the value testing-label-value @ 04/27/24 12:32:40.584
  Apr 27 12:32:40.584: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-2144 get pod pause -L testing-label'
  Apr 27 12:32:40.629: INFO: stderr: ""
  Apr 27 12:32:40.629: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    testing-label-value\n"
  STEP: removing the label testing-label of a pod @ 04/27/24 12:32:40.629
  Apr 27 12:32:40.629: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-2144 label pods pause testing-label-'
  Apr 27 12:32:40.682: INFO: stderr: ""
  Apr 27 12:32:40.682: INFO: stdout: "pod/pause unlabeled\n"
  STEP: verifying the pod doesn't have the label testing-label @ 04/27/24 12:32:40.682
  Apr 27 12:32:40.682: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-2144 get pod pause -L testing-label'
  Apr 27 12:32:40.729: INFO: stderr: ""
  Apr 27 12:32:40.729: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    \n"
  STEP: using delete to clean up resources @ 04/27/24 12:32:40.729
  Apr 27 12:32:40.729: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-2144 delete --grace-period=0 --force -f -'
  Apr 27 12:32:40.788: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 27 12:32:40.788: INFO: stdout: "pod \"pause\" force deleted\n"
  Apr 27 12:32:40.788: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-2144 get rc,svc -l name=pause --no-headers'
  Apr 27 12:32:40.840: INFO: stderr: "No resources found in kubectl-2144 namespace.\n"
  Apr 27 12:32:40.840: INFO: stdout: ""
  Apr 27 12:32:40.840: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-2144 get pods -l name=pause -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Apr 27 12:32:40.885: INFO: stderr: ""
  Apr 27 12:32:40.885: INFO: stdout: ""
  Apr 27 12:32:40.885: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2144" for this suite. @ 04/27/24 12:32:40.891
• [2.499 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance] [sig-api-machinery, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:305
  STEP: Creating a kubernetes client @ 04/27/24 12:32:40.9
  Apr 27 12:32:40.900: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename namespaces @ 04/27/24 12:32:40.901
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:40.917
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:40.921
  STEP: Read namespace status @ 04/27/24 12:32:40.924
  Apr 27 12:32:40.929: INFO: Status: v1.NamespaceStatus{Phase:"Active", Conditions:[]v1.NamespaceCondition(nil)}
  STEP: Patch namespace status @ 04/27/24 12:32:40.929
  Apr 27 12:32:40.937: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusPatch", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Patched by an e2e test"}
  STEP: Update namespace status @ 04/27/24 12:32:40.937
  Apr 27 12:32:40.948: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Updated by an e2e test"}
  Apr 27 12:32:40.948: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-2802" for this suite. @ 04/27/24 12:32:40.952
• [0.060 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/containers.go:61
  STEP: Creating a kubernetes client @ 04/27/24 12:32:40.96
  Apr 27 12:32:40.960: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename containers @ 04/27/24 12:32:40.961
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:40.979
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:40.983
  STEP: Creating a pod to test override arguments @ 04/27/24 12:32:40.986
  STEP: Saw pod success @ 04/27/24 12:32:45.012
  Apr 27 12:32:45.016: INFO: Trying to get logs from node ip-172-31-82-63 pod client-containers-a88f3b71-e2e2-4eb8-8de1-a90e610bc90c container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 12:32:45.033
  Apr 27 12:32:45.054: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-6296" for this suite. @ 04/27/24 12:32:45.059
• [4.107 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1455
  STEP: Creating a kubernetes client @ 04/27/24 12:32:45.068
  Apr 27 12:32:45.068: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:32:45.069
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:45.086
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:45.089
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-1843 @ 04/27/24 12:32:45.092
  STEP: changing the ExternalName service to type=NodePort @ 04/27/24 12:32:45.098
  STEP: creating replication controller externalname-service in namespace services-1843 @ 04/27/24 12:32:45.122
  I0427 12:32:45.132684      19 runners.go:197] Created replication controller with name: externalname-service, namespace: services-1843, replica count: 2
  I0427 12:32:48.183975      19 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 27 12:32:48.184: INFO: Creating new exec pod
  Apr 27 12:32:51.210: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-1843 exec execpod5m5xw -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Apr 27 12:32:51.313: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Apr 27 12:32:51.313: INFO: stdout: "externalname-service-9k4bx"
  Apr 27 12:32:51.313: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-1843 exec execpod5m5xw -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.194 80'
  Apr 27 12:32:51.413: INFO: stderr: "+ nc -v -t -w 2 10.152.183.194 80\nConnection to 10.152.183.194 80 port [tcp/http] succeeded!\n+ echo hostName\n"
  Apr 27 12:32:51.413: INFO: stdout: "externalname-service-9k4bx"
  Apr 27 12:32:51.413: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-1843 exec execpod5m5xw -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.37.185 31239'
  Apr 27 12:32:51.510: INFO: stderr: "+ nc -v -t -w 2 172.31.37.185 31239\n+ echo hostName\nConnection to 172.31.37.185 31239 port [tcp/*] succeeded!\n"
  Apr 27 12:32:51.510: INFO: stdout: "externalname-service-lvvwp"
  Apr 27 12:32:51.510: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-1843 exec execpod5m5xw -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.6.153 31239'
  Apr 27 12:32:51.613: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.6.153 31239\nConnection to 172.31.6.153 31239 port [tcp/*] succeeded!\n"
  Apr 27 12:32:51.613: INFO: stdout: "externalname-service-lvvwp"
  Apr 27 12:32:51.613: INFO: Cleaning up the ExternalName to NodePort test service
  Apr 27 12:32:51.640: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1843" for this suite. @ 04/27/24 12:32:51.644
• [6.585 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Pods should be updated [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:345
  STEP: Creating a kubernetes client @ 04/27/24 12:32:51.653
  Apr 27 12:32:51.653: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 12:32:51.654
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:51.67
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:51.675
  STEP: creating the pod @ 04/27/24 12:32:51.678
  STEP: submitting the pod to kubernetes @ 04/27/24 12:32:51.678
  STEP: verifying the pod is in kubernetes @ 04/27/24 12:32:53.703
  STEP: updating the pod @ 04/27/24 12:32:53.707
  Apr 27 12:32:54.223: INFO: Successfully updated pod "pod-update-5850ee52-8eda-41a2-90d8-198186802885"
  STEP: verifying the updated pod is in kubernetes @ 04/27/24 12:32:54.227
  Apr 27 12:32:54.231: INFO: Pod update OK
  Apr 27 12:32:54.231: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7063" for this suite. @ 04/27/24 12:32:54.235
• [2.591 seconds]
------------------------------
SSS
------------------------------
[sig-node] Lease lease API should be available [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/lease.go:73
  STEP: Creating a kubernetes client @ 04/27/24 12:32:54.244
  Apr 27 12:32:54.244: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename lease-test @ 04/27/24 12:32:54.244
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:54.259
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:54.263
  Apr 27 12:32:54.335: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "lease-test-3952" for this suite. @ 04/27/24 12:32:54.339
• [0.104 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:250
  STEP: Creating a kubernetes client @ 04/27/24 12:32:54.348
  Apr 27 12:32:54.348: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 12:32:54.349
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:54.365
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:54.369
  STEP: Setting up server cert @ 04/27/24 12:32:54.398
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 12:32:54.598
  STEP: Deploying the webhook pod @ 04/27/24 12:32:54.609
  STEP: Wait for the deployment to be ready @ 04/27/24 12:32:54.623
  Apr 27 12:32:54.635: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 12:32:56.65
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 12:32:56.672
  Apr 27 12:32:57.673: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating configmap webhook via the AdmissionRegistration API @ 04/27/24 12:32:57.683
  STEP: create a configmap that should be updated by the webhook @ 04/27/24 12:32:57.701
  Apr 27 12:32:57.774: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3606" for this suite. @ 04/27/24 12:32:57.78
  STEP: Destroying namespace "webhook-markers-8905" for this suite. @ 04/27/24 12:32:57.787
• [3.447 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1764
  STEP: Creating a kubernetes client @ 04/27/24 12:32:57.796
  Apr 27 12:32:57.796: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 12:32:57.796
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:57.812
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:57.817
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 04/27/24 12:32:57.821
  Apr 27 12:32:57.821: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3827 run e2e-test-httpd-pod --restart=Never --pod-running-timeout=2m0s --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4'
  Apr 27 12:32:57.875: INFO: stderr: ""
  Apr 27 12:32:57.875: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod was created @ 04/27/24 12:32:57.875
  Apr 27 12:32:57.881: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3827 delete pods e2e-test-httpd-pod'
  Apr 27 12:32:59.175: INFO: stderr: ""
  Apr 27 12:32:59.175: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Apr 27 12:32:59.175: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3827" for this suite. @ 04/27/24 12:32:59.181
• [1.393 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:480
  STEP: Creating a kubernetes client @ 04/27/24 12:32:59.189
  Apr 27 12:32:59.189: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename gc @ 04/27/24 12:32:59.19
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:32:59.204
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:32:59.209
  STEP: create the deployment @ 04/27/24 12:32:59.212
  W0427 12:32:59.219719      19 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 04/27/24 12:32:59.219
  STEP: delete the deployment @ 04/27/24 12:32:59.724
  STEP: wait for all rs to be garbage collected @ 04/27/24 12:32:59.733
  STEP: expected 0 rs, got 1 rs @ 04/27/24 12:32:59.737
  STEP: expected 0 pods, got 2 pods @ 04/27/24 12:32:59.746
  STEP: Gathering metrics @ 04/27/24 12:33:00.245
  W0427 12:33:00.251602      19 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Apr 27 12:33:00.251: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 27 12:33:00.251: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-3192" for this suite. @ 04/27/24 12:33:00.256
• [1.075 seconds]
------------------------------
SSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance] [sig-apps, Slow, Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:641
  STEP: Creating a kubernetes client @ 04/27/24 12:33:00.264
  Apr 27 12:33:00.264: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename statefulset @ 04/27/24 12:33:00.265
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:33:00.283
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:33:00.286
  STEP: Creating service test in namespace statefulset-4407 @ 04/27/24 12:33:00.29
  STEP: Initializing watcher for selector baz=blah,foo=bar @ 04/27/24 12:33:00.296
  STEP: Creating stateful set ss in namespace statefulset-4407 @ 04/27/24 12:33:00.301
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-4407 @ 04/27/24 12:33:00.311
  Apr 27 12:33:00.314: INFO: Found 0 stateful pods, waiting for 1
  Apr 27 12:33:10.319: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will halt with unhealthy stateful pod @ 04/27/24 12:33:10.319
  Apr 27 12:33:10.323: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-4407 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 12:33:10.427: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 12:33:10.427: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 12:33:10.427: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 27 12:33:10.432: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Apr 27 12:33:20.434: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Apr 27 12:33:20.435: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Apr 27 12:33:20.469: INFO: Verifying statefulset ss doesn't scale past 1 for another 9.999999651s
  Apr 27 12:33:21.475: INFO: Verifying statefulset ss doesn't scale past 1 for another 8.984530627s
  Apr 27 12:33:22.480: INFO: Verifying statefulset ss doesn't scale past 1 for another 7.978611821s
  Apr 27 12:33:23.487: INFO: Verifying statefulset ss doesn't scale past 1 for another 6.972427112s
  Apr 27 12:33:24.492: INFO: Verifying statefulset ss doesn't scale past 1 for another 5.966035213s
  Apr 27 12:33:25.499: INFO: Verifying statefulset ss doesn't scale past 1 for another 4.961058694s
  Apr 27 12:33:26.504: INFO: Verifying statefulset ss doesn't scale past 1 for another 3.954632942s
  Apr 27 12:33:27.510: INFO: Verifying statefulset ss doesn't scale past 1 for another 2.948466445s
  Apr 27 12:33:28.515: INFO: Verifying statefulset ss doesn't scale past 1 for another 1.943235825s
  Apr 27 12:33:29.520: INFO: Verifying statefulset ss doesn't scale past 1 for another 938.413886ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-4407 @ 04/27/24 12:33:30.521
  Apr 27 12:33:30.527: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-4407 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 27 12:33:30.620: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 27 12:33:30.620: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 27 12:33:30.620: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 27 12:33:30.626: INFO: Found 1 stateful pods, waiting for 3
  Apr 27 12:33:40.627: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 12:33:40.627: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 12:33:40.627: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Verifying that stateful set ss was scaled up in order @ 04/27/24 12:33:40.627
  STEP: Scale down will halt with unhealthy stateful pod @ 04/27/24 12:33:40.627
  Apr 27 12:33:40.637: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-4407 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 12:33:40.740: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 12:33:40.740: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 12:33:40.740: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 27 12:33:40.740: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-4407 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 12:33:40.845: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 12:33:40.846: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 12:33:40.846: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 27 12:33:40.846: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-4407 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 12:33:40.950: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 12:33:40.951: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 12:33:40.951: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 27 12:33:40.951: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Apr 27 12:33:40.956: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  Apr 27 12:33:50.962: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Apr 27 12:33:50.962: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Apr 27 12:33:50.962: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Apr 27 12:33:50.978: INFO: Verifying statefulset ss doesn't scale past 3 for another 9.999999774s
  Apr 27 12:33:51.984: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.993489663s
  Apr 27 12:33:52.991: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.987074363s
  Apr 27 12:33:53.997: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.981281557s
  Apr 27 12:33:55.002: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.974800207s
  Apr 27 12:33:56.009: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.96872808s
  Apr 27 12:33:57.014: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.962988985s
  Apr 27 12:33:58.019: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.958157769s
  Apr 27 12:33:59.024: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.952699665s
  Apr 27 12:34:00.031: INFO: Verifying statefulset ss doesn't scale past 3 for another 947.01177ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-4407 @ 04/27/24 12:34:01.032
  Apr 27 12:34:01.037: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-4407 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 27 12:34:01.173: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 27 12:34:01.173: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 27 12:34:01.173: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 27 12:34:01.173: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-4407 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 27 12:34:01.294: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 27 12:34:01.294: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 27 12:34:01.294: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 27 12:34:01.294: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-4407 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 27 12:34:01.391: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 27 12:34:01.392: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 27 12:34:01.392: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 27 12:34:01.392: INFO: Scaling statefulset ss to 0
  STEP: Verifying that stateful set ss was scaled down in reverse order @ 04/27/24 12:34:11.41
  Apr 27 12:34:11.410: INFO: Deleting all statefulset in ns statefulset-4407
  Apr 27 12:34:11.415: INFO: Scaling statefulset ss to 0
  Apr 27 12:34:11.429: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 27 12:34:11.432: INFO: Deleting statefulset ss
  Apr 27 12:34:11.449: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-4407" for this suite. @ 04/27/24 12:34:11.453
• [71.196 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_conversion_webhook.go:142
  STEP: Creating a kubernetes client @ 04/27/24 12:34:11.462
  Apr 27 12:34:11.462: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-webhook @ 04/27/24 12:34:11.462
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:11.48
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:11.484
  STEP: Setting up server cert @ 04/27/24 12:34:11.488
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 04/27/24 12:34:11.663
  STEP: Deploying the custom resource conversion webhook pod @ 04/27/24 12:34:11.673
  STEP: Wait for the deployment to be ready @ 04/27/24 12:34:11.686
  Apr 27 12:34:11.695: INFO: deployment "sample-crd-conversion-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 12:34:13.71
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 12:34:13.721
  Apr 27 12:34:14.722: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Apr 27 12:34:14.733: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Creating a v1 custom resource @ 04/27/24 12:34:17.299
  STEP: v2 custom resource should be converted @ 04/27/24 12:34:17.306
  Apr 27 12:34:17.879: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-5641" for this suite. @ 04/27/24 12:34:17.883
• [6.433 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance] [sig-scheduling, Serial, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/predicates.go:334
  STEP: Creating a kubernetes client @ 04/27/24 12:34:17.895
  Apr 27 12:34:17.895: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-pred @ 04/27/24 12:34:17.896
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:17.914
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:17.917
  Apr 27 12:34:17.921: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Apr 27 12:34:17.930: INFO: Waiting for terminating namespaces to be deleted...
  Apr 27 12:34:17.934: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-37-185 before test
  Apr 27 12:34:17.940: INFO: nginx-ingress-controller-kubernetes-worker-wjwlq from ingress-nginx-kubernetes-worker started at 2024-04-27 12:15:52 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.940: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 12:34:17.940: INFO: calico-node-qdhx5 from kube-system started at 2024-04-27 12:18:04 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.940: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 12:34:17.940: INFO: sonobuoy-e2e-job-d6fe9ea7c49d40a2 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:34:17.940: INFO: 	Container e2e ready: true, restart count 0
  Apr 27 12:34:17.940: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:34:17.940: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-crp54 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:34:17.940: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:34:17.940: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 27 12:34:17.940: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-6-153 before test
  Apr 27 12:34:17.947: INFO: nginx-ingress-controller-kubernetes-worker-5khsm from ingress-nginx-kubernetes-worker started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.947: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 12:34:17.947: INFO: calico-node-cs4kq from kube-system started at 2024-04-27 12:18:06 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.947: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 12:34:17.947: INFO: coredns-bddfd76d7-p5qdr from kube-system started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.947: INFO: 	Container coredns ready: true, restart count 0
  Apr 27 12:34:17.947: INFO: kube-state-metrics-6f48cdd76-xtvcf from kube-system started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.947: INFO: 	Container kube-state-metrics ready: true, restart count 0
  Apr 27 12:34:17.948: INFO: metrics-server-v0.6.3-69d7fbfdf8-vwtzn from kube-system started at 2024-04-27 12:10:16 +0000 UTC (2 container statuses recorded)
  Apr 27 12:34:17.948: INFO: 	Container metrics-server ready: true, restart count 0
  Apr 27 12:34:17.948: INFO: 	Container metrics-server-nanny ready: true, restart count 0
  Apr 27 12:34:17.948: INFO: dashboard-metrics-scraper-5dd7cb5fc-rfvgw from kubernetes-dashboard started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.948: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Apr 27 12:34:17.948: INFO: kubernetes-dashboard-7b899cb9d9-d8649 from kubernetes-dashboard started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.948: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Apr 27 12:34:17.948: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-r49rd from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:34:17.948: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:34:17.948: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 27 12:34:17.948: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-82-63 before test
  Apr 27 12:34:17.953: INFO: nginx-ingress-controller-kubernetes-worker-zs4lv from ingress-nginx-kubernetes-worker started at 2024-04-27 12:18:19 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.953: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 12:34:17.953: INFO: calico-node-mvvng from kube-system started at 2024-04-27 12:18:11 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.953: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 12:34:17.953: INFO: sonobuoy from sonobuoy started at 2024-04-27 12:21:03 +0000 UTC (1 container statuses recorded)
  Apr 27 12:34:17.953: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Apr 27 12:34:17.953: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-l72v9 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:34:17.953: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:34:17.953: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: verifying the node has the label node ip-172-31-37-185 @ 04/27/24 12:34:17.993
  STEP: verifying the node has the label node ip-172-31-6-153 @ 04/27/24 12:34:18.019
  STEP: verifying the node has the label node ip-172-31-82-63 @ 04/27/24 12:34:18.037
  Apr 27 12:34:18.055: INFO: Pod nginx-ingress-controller-kubernetes-worker-5khsm requesting resource cpu=0m on Node ip-172-31-6-153
  Apr 27 12:34:18.055: INFO: Pod nginx-ingress-controller-kubernetes-worker-wjwlq requesting resource cpu=0m on Node ip-172-31-37-185
  Apr 27 12:34:18.055: INFO: Pod nginx-ingress-controller-kubernetes-worker-zs4lv requesting resource cpu=0m on Node ip-172-31-82-63
  Apr 27 12:34:18.055: INFO: Pod calico-node-cs4kq requesting resource cpu=250m on Node ip-172-31-6-153
  Apr 27 12:34:18.055: INFO: Pod calico-node-mvvng requesting resource cpu=250m on Node ip-172-31-82-63
  Apr 27 12:34:18.055: INFO: Pod calico-node-qdhx5 requesting resource cpu=250m on Node ip-172-31-37-185
  Apr 27 12:34:18.055: INFO: Pod coredns-bddfd76d7-p5qdr requesting resource cpu=100m on Node ip-172-31-6-153
  Apr 27 12:34:18.055: INFO: Pod kube-state-metrics-6f48cdd76-xtvcf requesting resource cpu=0m on Node ip-172-31-6-153
  Apr 27 12:34:18.055: INFO: Pod metrics-server-v0.6.3-69d7fbfdf8-vwtzn requesting resource cpu=5m on Node ip-172-31-6-153
  Apr 27 12:34:18.055: INFO: Pod dashboard-metrics-scraper-5dd7cb5fc-rfvgw requesting resource cpu=0m on Node ip-172-31-6-153
  Apr 27 12:34:18.055: INFO: Pod kubernetes-dashboard-7b899cb9d9-d8649 requesting resource cpu=0m on Node ip-172-31-6-153
  Apr 27 12:34:18.055: INFO: Pod sonobuoy requesting resource cpu=0m on Node ip-172-31-82-63
  Apr 27 12:34:18.055: INFO: Pod sonobuoy-e2e-job-d6fe9ea7c49d40a2 requesting resource cpu=0m on Node ip-172-31-37-185
  Apr 27 12:34:18.055: INFO: Pod sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-crp54 requesting resource cpu=0m on Node ip-172-31-37-185
  Apr 27 12:34:18.055: INFO: Pod sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-l72v9 requesting resource cpu=0m on Node ip-172-31-82-63
  Apr 27 12:34:18.055: INFO: Pod sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-r49rd requesting resource cpu=0m on Node ip-172-31-6-153
  STEP: Starting Pods to consume most of the cluster CPU. @ 04/27/24 12:34:18.055
  Apr 27 12:34:18.055: INFO: Creating a pod which consumes cpu=1225m on Node ip-172-31-37-185
  Apr 27 12:34:18.064: INFO: Creating a pod which consumes cpu=1151m on Node ip-172-31-6-153
  Apr 27 12:34:18.074: INFO: Creating a pod which consumes cpu=1225m on Node ip-172-31-82-63
  STEP: Creating another pod that requires unavailable amount of CPU. @ 04/27/24 12:34:20.105
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-239801f0-0011-46b4-891e-853a716fd3e9.17ca2326e1dc5027], Reason = [Scheduled], Message = [Successfully assigned sched-pred-6938/filler-pod-239801f0-0011-46b4-891e-853a716fd3e9 to ip-172-31-37-185] @ 04/27/24 12:34:20.109
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-239801f0-0011-46b4-891e-853a716fd3e9.17ca232700078547], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-239801f0-0011-46b4-891e-853a716fd3e9.17ca23270118c4f3], Reason = [Created], Message = [Created container filler-pod-239801f0-0011-46b4-891e-853a716fd3e9] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-239801f0-0011-46b4-891e-853a716fd3e9.17ca2327041a81ea], Reason = [Started], Message = [Started container filler-pod-239801f0-0011-46b4-891e-853a716fd3e9] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-5954d3f1-4f3a-43a5-8a32-f76f7cf48f69.17ca2326e2e30bd0], Reason = [Scheduled], Message = [Successfully assigned sched-pred-6938/filler-pod-5954d3f1-4f3a-43a5-8a32-f76f7cf48f69 to ip-172-31-82-63] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-5954d3f1-4f3a-43a5-8a32-f76f7cf48f69.17ca232702bd9b71], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-5954d3f1-4f3a-43a5-8a32-f76f7cf48f69.17ca232703a0989d], Reason = [Created], Message = [Created container filler-pod-5954d3f1-4f3a-43a5-8a32-f76f7cf48f69] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-5954d3f1-4f3a-43a5-8a32-f76f7cf48f69.17ca2327072716f5], Reason = [Started], Message = [Started container filler-pod-5954d3f1-4f3a-43a5-8a32-f76f7cf48f69] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-9a8ef75a-16fc-4c5e-a2a1-18221016f948.17ca2326e28f8eda], Reason = [Scheduled], Message = [Successfully assigned sched-pred-6938/filler-pod-9a8ef75a-16fc-4c5e-a2a1-18221016f948 to ip-172-31-6-153] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-9a8ef75a-16fc-4c5e-a2a1-18221016f948.17ca23270212c0f4], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-9a8ef75a-16fc-4c5e-a2a1-18221016f948.17ca2327032e6505], Reason = [Created], Message = [Created container filler-pod-9a8ef75a-16fc-4c5e-a2a1-18221016f948] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-9a8ef75a-16fc-4c5e-a2a1-18221016f948.17ca23270616c800], Reason = [Started], Message = [Started container filler-pod-9a8ef75a-16fc-4c5e-a2a1-18221016f948] @ 04/27/24 12:34:20.11
  STEP: Considering event: 
  Type = [Warning], Name = [additional-pod.17ca23275bc2a5d0], Reason = [FailedScheduling], Message = [0/5 nodes are available: 2 node(s) had untolerated taint {node-role.kubernetes.io/control-plane: }, 3 Insufficient cpu. preemption: 0/5 nodes are available: 2 Preemption is not helpful for scheduling, 3 No preemption victims found for incoming pod.] @ 04/27/24 12:34:20.126
  STEP: removing the label node off the node ip-172-31-37-185 @ 04/27/24 12:34:21.124
  STEP: verifying the node doesn't have the label node @ 04/27/24 12:34:21.137
  STEP: removing the label node off the node ip-172-31-6-153 @ 04/27/24 12:34:21.141
  STEP: verifying the node doesn't have the label node @ 04/27/24 12:34:21.158
  STEP: removing the label node off the node ip-172-31-82-63 @ 04/27/24 12:34:21.162
  STEP: verifying the node doesn't have the label node @ 04/27/24 12:34:21.177
  Apr 27 12:34:21.182: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-6938" for this suite. @ 04/27/24 12:34:21.19
• [3.304 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] Ingress API should support creating Ingress API operations [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/ingress.go:558
  STEP: Creating a kubernetes client @ 04/27/24 12:34:21.199
  Apr 27 12:34:21.199: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename ingress @ 04/27/24 12:34:21.199
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:21.216
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:21.219
  STEP: getting /apis @ 04/27/24 12:34:21.223
  STEP: getting /apis/networking.k8s.io @ 04/27/24 12:34:21.227
  STEP: getting /apis/networking.k8s.iov1 @ 04/27/24 12:34:21.228
  STEP: creating @ 04/27/24 12:34:21.23
  STEP: getting @ 04/27/24 12:34:21.248
  STEP: listing @ 04/27/24 12:34:21.252
  STEP: watching @ 04/27/24 12:34:21.258
  Apr 27 12:34:21.258: INFO: starting watch
  STEP: cluster-wide listing @ 04/27/24 12:34:21.259
  STEP: cluster-wide watching @ 04/27/24 12:34:21.263
  Apr 27 12:34:21.264: INFO: starting watch
  STEP: patching @ 04/27/24 12:34:21.265
  STEP: updating @ 04/27/24 12:34:21.271
  Apr 27 12:34:21.283: INFO: waiting for watch events with expected annotations
  Apr 27 12:34:21.283: INFO: saw patched and updated annotations
  STEP: patching /status @ 04/27/24 12:34:21.283
  STEP: updating /status @ 04/27/24 12:34:21.291
  STEP: get /status @ 04/27/24 12:34:21.303
  STEP: deleting @ 04/27/24 12:34:21.307
  STEP: deleting a collection @ 04/27/24 12:34:21.325
  Apr 27 12:34:21.347: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingress-2441" for this suite. @ 04/27/24 12:34:21.351
• [0.160 seconds]
------------------------------
SSSS
------------------------------
[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:191
  STEP: Creating a kubernetes client @ 04/27/24 12:34:21.359
  Apr 27 12:34:21.359: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename dns @ 04/27/24 12:34:21.36
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:21.376
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:21.38
  STEP: Creating a test headless service @ 04/27/24 12:34:21.384
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-1574 A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-1574;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-1574 A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-1574;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-1574.svc A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-1574.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-1574.svc A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-1574.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-1574.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-1574.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-1574.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-1574.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-1574.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-1574.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-1574.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-1574.svc;check="$$(dig +notcp +noall +answer +search 228.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.228_udp@PTR;check="$$(dig +tcp +noall +answer +search 228.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.228_tcp@PTR;sleep 1; done
   @ 04/27/24 12:34:21.409
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-1574 A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-1574;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-1574 A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-1574;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-1574.svc A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-1574.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-1574.svc A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-1574.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-1574.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-1574.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-1574.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-1574.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-1574.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-1574.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-1574.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-1574.svc;check="$$(dig +notcp +noall +answer +search 228.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.228_udp@PTR;check="$$(dig +tcp +noall +answer +search 228.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.228_tcp@PTR;sleep 1; done
   @ 04/27/24 12:34:21.409
  STEP: creating a pod to probe DNS @ 04/27/24 12:34:21.409
  STEP: submitting the pod to kubernetes @ 04/27/24 12:34:21.409
  STEP: retrieving the pod @ 04/27/24 12:34:27.448
  STEP: looking for the results for each expected name from probers @ 04/27/24 12:34:27.453
  Apr 27 12:34:27.577: INFO: DNS probes using dns-1574/dns-test-43f041fd-b4ef-4f11-9d24-b36e6971cf31 succeeded

  STEP: deleting the pod @ 04/27/24 12:34:27.577
  STEP: deleting the test service @ 04/27/24 12:34:27.596
  STEP: deleting the test headless service @ 04/27/24 12:34:27.622
  Apr 27 12:34:27.639: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-1574" for this suite. @ 04/27/24 12:34:27.644
• [6.292 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet_etc_hosts.go:64
  STEP: Creating a kubernetes client @ 04/27/24 12:34:27.652
  Apr 27 12:34:27.652: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename e2e-kubelet-etc-hosts @ 04/27/24 12:34:27.652
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:27.672
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:27.676
  STEP: Setting up the test @ 04/27/24 12:34:27.681
  STEP: Creating hostNetwork=false pod @ 04/27/24 12:34:27.681
  STEP: Creating hostNetwork=true pod @ 04/27/24 12:34:29.713
  STEP: Running the test @ 04/27/24 12:34:31.739
  STEP: Verifying /etc/hosts of container is kubelet-managed for pod with hostNetwork=false @ 04/27/24 12:34:31.739
  Apr 27 12:34:31.739: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:31.739: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:31.740: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:31.740: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Apr 27 12:34:31.793: INFO: Exec stderr: ""
  Apr 27 12:34:31.793: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:31.793: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:31.793: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:31.793: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Apr 27 12:34:31.848: INFO: Exec stderr: ""
  Apr 27 12:34:31.849: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:31.849: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:31.849: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:31.849: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Apr 27 12:34:31.900: INFO: Exec stderr: ""
  Apr 27 12:34:31.900: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:31.901: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:31.901: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:31.901: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Apr 27 12:34:31.952: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts of container is not kubelet-managed since container specifies /etc/hosts mount @ 04/27/24 12:34:31.952
  Apr 27 12:34:31.952: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:31.952: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:31.953: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:31.953: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Apr 27 12:34:32.000: INFO: Exec stderr: ""
  Apr 27 12:34:32.000: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:32.000: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:32.001: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:32.001: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Apr 27 12:34:32.052: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts content of container is not kubelet-managed for pod with hostNetwork=true @ 04/27/24 12:34:32.052
  Apr 27 12:34:32.052: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:32.052: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:32.052: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:32.052: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Apr 27 12:34:32.099: INFO: Exec stderr: ""
  Apr 27 12:34:32.099: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:32.099: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:32.099: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:32.099: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Apr 27 12:34:32.147: INFO: Exec stderr: ""
  Apr 27 12:34:32.147: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:32.147: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:32.147: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:32.147: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Apr 27 12:34:32.206: INFO: Exec stderr: ""
  Apr 27 12:34:32.207: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-3124 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:34:32.207: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:34:32.207: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:34:32.207: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-3124/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Apr 27 12:34:32.255: INFO: Exec stderr: ""
  Apr 27 12:34:32.255: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "e2e-kubelet-etc-hosts-3124" for this suite. @ 04/27/24 12:34:32.261
• [4.619 seconds]
------------------------------
SS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:57
  STEP: Creating a kubernetes client @ 04/27/24 12:34:32.271
  Apr 27 12:34:32.271: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename runtimeclass @ 04/27/24 12:34:32.272
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:32.286
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:32.289
  Apr 27 12:34:32.305: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-7763" for this suite. @ 04/27/24 12:34:32.309
• [0.046 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance] [sig-api-machinery, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:245
  STEP: Creating a kubernetes client @ 04/27/24 12:34:32.318
  Apr 27 12:34:32.318: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename namespaces @ 04/27/24 12:34:32.318
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:32.334
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:32.339
  STEP: Creating a test namespace @ 04/27/24 12:34:32.342
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:32.359
  STEP: Creating a pod in the namespace @ 04/27/24 12:34:32.362
  STEP: Waiting for the pod to have running status @ 04/27/24 12:34:32.372
  STEP: Deleting the namespace @ 04/27/24 12:34:34.382
  STEP: Waiting for the namespace to be removed. @ 04/27/24 12:34:34.39
  STEP: Recreating the namespace @ 04/27/24 12:34:45.395
  STEP: Verifying there are no pods in the namespace @ 04/27/24 12:34:45.413
  Apr 27 12:34:45.420: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-2075" for this suite. @ 04/27/24 12:34:45.425
  STEP: Destroying namespace "nsdeletetest-9026" for this suite. @ 04/27/24 12:34:45.432
  Apr 27 12:34:45.437: INFO: Namespace nsdeletetest-9026 was already deleted
  STEP: Destroying namespace "nsdeletetest-5312" for this suite. @ 04/27/24 12:34:45.437
• [13.127 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:948
  STEP: Creating a kubernetes client @ 04/27/24 12:34:45.445
  Apr 27 12:34:45.445: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 12:34:45.446
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:45.462
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:45.467
  STEP: Creating a ResourceQuota @ 04/27/24 12:34:45.47
  STEP: Getting a ResourceQuota @ 04/27/24 12:34:45.477
  STEP: Listing all ResourceQuotas with LabelSelector @ 04/27/24 12:34:45.482
  STEP: Patching the ResourceQuota @ 04/27/24 12:34:45.485
  STEP: Deleting a Collection of ResourceQuotas @ 04/27/24 12:34:45.492
  STEP: Verifying the deleted ResourceQuota @ 04/27/24 12:34:45.508
  Apr 27 12:34:45.512: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8091" for this suite. @ 04/27/24 12:34:45.516
• [0.079 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:453
  STEP: Creating a kubernetes client @ 04/27/24 12:34:45.525
  Apr 27 12:34:45.525: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 12:34:45.525
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:45.547
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:45.551
  STEP: Counting existing ResourceQuota @ 04/27/24 12:34:45.554
  STEP: Creating a ResourceQuota @ 04/27/24 12:34:50.559
  STEP: Ensuring resource quota status is calculated @ 04/27/24 12:34:50.566
  STEP: Creating a ReplicaSet @ 04/27/24 12:34:52.573
  STEP: Ensuring resource quota status captures replicaset creation @ 04/27/24 12:34:52.587
  STEP: Deleting a ReplicaSet @ 04/27/24 12:34:54.592
  STEP: Ensuring resource quota status released usage @ 04/27/24 12:34:54.601
  Apr 27 12:34:56.607: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2434" for this suite. @ 04/27/24 12:34:56.612
• [11.095 seconds]
------------------------------
SSS
------------------------------
[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:425
  STEP: Creating a kubernetes client @ 04/27/24 12:34:56.62
  Apr 27 12:34:56.620: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replication-controller @ 04/27/24 12:34:56.621
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:56.641
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:56.644
  STEP: Creating ReplicationController "e2e-rc-bjwvc" @ 04/27/24 12:34:56.647
  Apr 27 12:34:56.654: INFO: Get Replication Controller "e2e-rc-bjwvc" to confirm replicas
  Apr 27 12:34:57.655: INFO: Get Replication Controller "e2e-rc-bjwvc" to confirm replicas
  Apr 27 12:34:57.660: INFO: Found 1 replicas for "e2e-rc-bjwvc" replication controller
  STEP: Getting scale subresource for ReplicationController "e2e-rc-bjwvc" @ 04/27/24 12:34:57.66
  STEP: Updating a scale subresource @ 04/27/24 12:34:57.664
  STEP: Verifying replicas where modified for replication controller "e2e-rc-bjwvc" @ 04/27/24 12:34:57.671
  Apr 27 12:34:57.671: INFO: Get Replication Controller "e2e-rc-bjwvc" to confirm replicas
  Apr 27 12:34:58.671: INFO: Get Replication Controller "e2e-rc-bjwvc" to confirm replicas
  Apr 27 12:34:58.677: INFO: Found 2 replicas for "e2e-rc-bjwvc" replication controller
  Apr 27 12:34:58.677: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-2593" for this suite. @ 04/27/24 12:34:58.682
• [2.071 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:236
  STEP: Creating a kubernetes client @ 04/27/24 12:34:58.691
  Apr 27 12:34:58.691: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/27/24 12:34:58.692
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:34:58.71
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:34:58.714
  Apr 27 12:34:58.718: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 04/27/24 12:35:00.026
  Apr 27 12:35:00.026: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9273 --namespace=crd-publish-openapi-9273 create -f -'
  Apr 27 12:35:00.098: INFO: stderr: ""
  Apr 27 12:35:00.098: INFO: stdout: "e2e-test-crd-publish-openapi-61-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Apr 27 12:35:00.098: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9273 --namespace=crd-publish-openapi-9273 delete e2e-test-crd-publish-openapi-61-crds test-cr'
  Apr 27 12:35:00.149: INFO: stderr: ""
  Apr 27 12:35:00.149: INFO: stdout: "e2e-test-crd-publish-openapi-61-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  Apr 27 12:35:00.149: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9273 --namespace=crd-publish-openapi-9273 apply -f -'
  Apr 27 12:35:00.207: INFO: stderr: ""
  Apr 27 12:35:00.207: INFO: stdout: "e2e-test-crd-publish-openapi-61-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Apr 27 12:35:00.208: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9273 --namespace=crd-publish-openapi-9273 delete e2e-test-crd-publish-openapi-61-crds test-cr'
  Apr 27 12:35:00.271: INFO: stderr: ""
  Apr 27 12:35:00.271: INFO: stdout: "e2e-test-crd-publish-openapi-61-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 04/27/24 12:35:00.271
  Apr 27 12:35:00.271: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9273 explain e2e-test-crd-publish-openapi-61-crds'
  Apr 27 12:35:00.311: INFO: stderr: ""
  Apr 27 12:35:00.311: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-in-nested.example.com\nKIND:       e2e-test-crd-publish-openapi-61-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties in nested field for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  Apr 27 12:35:01.558: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-9273" for this suite. @ 04/27/24 12:35:01.567
• [2.885 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:170
  STEP: Creating a kubernetes client @ 04/27/24 12:35:01.577
  Apr 27 12:35:01.577: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 12:35:01.578
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:01.594
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:01.598
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 04/27/24 12:35:01.602
  STEP: Saw pod success @ 04/27/24 12:35:05.63
  Apr 27 12:35:05.634: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-717e72bd-c594-43d5-b67b-517801bc411e container test-container: <nil>
  STEP: delete the pod @ 04/27/24 12:35:05.648
  Apr 27 12:35:05.669: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-58" for this suite. @ 04/27/24 12:35:05.674
• [4.107 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should be able to create a functioning NodePort service [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1280
  STEP: Creating a kubernetes client @ 04/27/24 12:35:05.685
  Apr 27 12:35:05.685: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:35:05.685
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:05.698
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:05.702
  STEP: creating service nodeport-test with type=NodePort in namespace services-5270 @ 04/27/24 12:35:05.706
  STEP: creating replication controller nodeport-test in namespace services-5270 @ 04/27/24 12:35:05.724
  I0427 12:35:05.734704      19 runners.go:197] Created replication controller with name: nodeport-test, namespace: services-5270, replica count: 2
  I0427 12:35:08.785854      19 runners.go:197] nodeport-test Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 27 12:35:08.785: INFO: Creating new exec pod
  Apr 27 12:35:11.808: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-5270 exec execpodb2kmq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Apr 27 12:35:11.920: INFO: stderr: "+ nc -v -t -w 2 nodeport-test 80\n+ echo hostName\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Apr 27 12:35:11.920: INFO: stdout: "nodeport-test-mjl47"
  Apr 27 12:35:11.920: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-5270 exec execpodb2kmq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.244 80'
  Apr 27 12:35:12.016: INFO: stderr: "+ nc -v -t -w 2 10.152.183.244 80\nConnection to 10.152.183.244 80 port [tcp/http] succeeded!\n+ echo hostName\n"
  Apr 27 12:35:12.017: INFO: stdout: ""
  Apr 27 12:35:12.921: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-5270 exec execpodb2kmq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.244 80'
  Apr 27 12:35:13.016: INFO: stderr: "+ nc -v -t -w 2 10.152.183.244 80\n+ echo hostName\nConnection to 10.152.183.244 80 port [tcp/http] succeeded!\n"
  Apr 27 12:35:13.016: INFO: stdout: ""
  Apr 27 12:35:13.920: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-5270 exec execpodb2kmq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.244 80'
  Apr 27 12:35:14.013: INFO: stderr: "+ nc -v -t -w 2 10.152.183.244 80\nConnection to 10.152.183.244 80 port [tcp/http] succeeded!\n+ echo hostName\n"
  Apr 27 12:35:14.013: INFO: stdout: ""
  Apr 27 12:35:14.921: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-5270 exec execpodb2kmq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.244 80'
  Apr 27 12:35:15.022: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.244 80\nConnection to 10.152.183.244 80 port [tcp/http] succeeded!\n"
  Apr 27 12:35:15.022: INFO: stdout: "nodeport-test-mjl47"
  Apr 27 12:35:15.022: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-5270 exec execpodb2kmq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.6.153 32402'
  Apr 27 12:35:15.121: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.6.153 32402\nConnection to 172.31.6.153 32402 port [tcp/*] succeeded!\n"
  Apr 27 12:35:15.121: INFO: stdout: "nodeport-test-rf4xh"
  Apr 27 12:35:15.121: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-5270 exec execpodb2kmq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.37.185 32402'
  Apr 27 12:35:15.230: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.37.185 32402\nConnection to 172.31.37.185 32402 port [tcp/*] succeeded!\n"
  Apr 27 12:35:15.230: INFO: stdout: "nodeport-test-mjl47"
  Apr 27 12:35:15.230: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-5270" for this suite. @ 04/27/24 12:35:15.236
• [9.559 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/csi_inline.go:50
  STEP: Creating a kubernetes client @ 04/27/24 12:35:15.244
  Apr 27 12:35:15.244: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename csiinlinevolumes @ 04/27/24 12:35:15.245
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:15.262
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:15.265
  STEP: creating @ 04/27/24 12:35:15.268
  STEP: getting @ 04/27/24 12:35:15.289
  STEP: listing in namespace @ 04/27/24 12:35:15.293
  STEP: patching @ 04/27/24 12:35:15.297
  STEP: deleting @ 04/27/24 12:35:15.313
  Apr 27 12:35:15.327: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-6380" for this suite. @ 04/27/24 12:35:15.331
• [0.095 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:194
  STEP: Creating a kubernetes client @ 04/27/24 12:35:15.339
  Apr 27 12:35:15.339: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/27/24 12:35:15.34
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:15.355
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:15.359
  Apr 27 12:35:15.365: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 04/27/24 12:35:16.713
  Apr 27 12:35:16.713: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9283 --namespace=crd-publish-openapi-9283 create -f -'
  Apr 27 12:35:18.788: INFO: stderr: ""
  Apr 27 12:35:18.788: INFO: stdout: "e2e-test-crd-publish-openapi-5086-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Apr 27 12:35:18.788: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9283 --namespace=crd-publish-openapi-9283 delete e2e-test-crd-publish-openapi-5086-crds test-cr'
  Apr 27 12:35:18.841: INFO: stderr: ""
  Apr 27 12:35:18.841: INFO: stdout: "e2e-test-crd-publish-openapi-5086-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  Apr 27 12:35:18.841: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9283 --namespace=crd-publish-openapi-9283 apply -f -'
  Apr 27 12:35:18.896: INFO: stderr: ""
  Apr 27 12:35:18.896: INFO: stdout: "e2e-test-crd-publish-openapi-5086-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Apr 27 12:35:18.896: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9283 --namespace=crd-publish-openapi-9283 delete e2e-test-crd-publish-openapi-5086-crds test-cr'
  Apr 27 12:35:18.957: INFO: stderr: ""
  Apr 27 12:35:18.957: INFO: stdout: "e2e-test-crd-publish-openapi-5086-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 04/27/24 12:35:18.957
  Apr 27 12:35:18.957: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-9283 explain e2e-test-crd-publish-openapi-5086-crds'
  Apr 27 12:35:18.999: INFO: stderr: ""
  Apr 27 12:35:18.999: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-at-root.example.com\nKIND:       e2e-test-crd-publish-openapi-5086-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties at root for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  Apr 27 12:35:20.225: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-9283" for this suite. @ 04/27/24 12:35:20.238
• [4.908 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for pods for Hostname [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:244
  STEP: Creating a kubernetes client @ 04/27/24 12:35:20.248
  Apr 27 12:35:20.248: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename dns @ 04/27/24 12:35:20.248
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:20.266
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:20.269
  STEP: Creating a test headless service @ 04/27/24 12:35:20.272
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-2443.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-2.dns-test-service-2.dns-2443.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/wheezy_hosts@dns-querier-2;sleep 1; done
   @ 04/27/24 12:35:20.277
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-2443.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-2.dns-test-service-2.dns-2443.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/jessie_hosts@dns-querier-2;sleep 1; done
   @ 04/27/24 12:35:20.277
  STEP: creating a pod to probe DNS @ 04/27/24 12:35:20.277
  STEP: submitting the pod to kubernetes @ 04/27/24 12:35:20.277
  STEP: retrieving the pod @ 04/27/24 12:35:22.3
  STEP: looking for the results for each expected name from probers @ 04/27/24 12:35:22.304
  Apr 27 12:35:22.322: INFO: DNS probes using dns-2443/dns-test-94ed2a47-520c-4a9d-b6c8-33d40a464e2a succeeded

  STEP: deleting the pod @ 04/27/24 12:35:22.323
  STEP: deleting the test headless service @ 04/27/24 12:35:22.335
  Apr 27 12:35:22.350: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-2443" for this suite. @ 04/27/24 12:35:22.355
• [2.114 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:75
  STEP: Creating a kubernetes client @ 04/27/24 12:35:22.362
  Apr 27 12:35:22.362: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 12:35:22.363
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:22.38
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:22.384
  STEP: Creating configMap with name configmap-test-volume-3f1d0004-5a99-4a2e-9c0c-ec188cc3150d @ 04/27/24 12:35:22.387
  STEP: Creating a pod to test consume configMaps @ 04/27/24 12:35:22.392
  STEP: Saw pod success @ 04/27/24 12:35:24.411
  Apr 27 12:35:24.416: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-configmaps-a490e0c3-a406-4c86-89fb-6f9892db4708 container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 12:35:24.428
  Apr 27 12:35:24.444: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1093" for this suite. @ 04/27/24 12:35:24.448
• [2.092 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance] [sig-api-machinery, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:372
  STEP: Creating a kubernetes client @ 04/27/24 12:35:24.455
  Apr 27 12:35:24.455: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename namespaces @ 04/27/24 12:35:24.456
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:24.473
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:24.476
  STEP: Updating Namespace "namespaces-9812" @ 04/27/24 12:35:24.479
  Apr 27 12:35:24.490: INFO: Namespace "namespaces-9812" now has labels, map[string]string{"e2e-framework":"namespaces", "e2e-run":"55e1d623-ab7b-48bc-8bfa-d55d14f8ee00", "kubernetes.io/metadata.name":"namespaces-9812", "namespaces-9812":"updated", "pod-security.kubernetes.io/audit":"baseline", "pod-security.kubernetes.io/enforce":"baseline", "pod-security.kubernetes.io/warn":"baseline"}
  Apr 27 12:35:24.490: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-9812" for this suite. @ 04/27/24 12:35:24.495
• [0.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance] [sig-node, NodeConformance, Environment:NotInUserNS, Conformance]
k8s.io/kubernetes/test/e2e/common/node/sysctl.go:79
  STEP: Creating a kubernetes client @ 04/27/24 12:35:24.507
  Apr 27 12:35:24.507: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sysctl @ 04/27/24 12:35:24.508
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:24.529
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:24.532
  STEP: Creating a pod with the kernel.shm_rmid_forced sysctl @ 04/27/24 12:35:24.536
  STEP: Watching for error events or started pod @ 04/27/24 12:35:24.547
  STEP: Waiting for pod completion @ 04/27/24 12:35:26.553
  STEP: Checking that the pod succeeded @ 04/27/24 12:35:28.568
  STEP: Getting logs from the pod @ 04/27/24 12:35:28.568
  STEP: Checking that the sysctl is actually updated @ 04/27/24 12:35:28.575
  Apr 27 12:35:28.575: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-925" for this suite. @ 04/27/24 12:35:28.58
• [4.080 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:59
  STEP: Creating a kubernetes client @ 04/27/24 12:35:28.587
  Apr 27 12:35:28.587: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/27/24 12:35:28.587
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:28.607
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:28.61
  Apr 27 12:35:28.613: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:35:29.640: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-5175" for this suite. @ 04/27/24 12:35:29.645
• [1.066 seconds]
------------------------------
SS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/network/networking.go:85
  STEP: Creating a kubernetes client @ 04/27/24 12:35:29.653
  Apr 27 12:35:29.653: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pod-network-test @ 04/27/24 12:35:29.654
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:29.677
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:29.68
  STEP: Performing setup for networking test in namespace pod-network-test-8720 @ 04/27/24 12:35:29.683
  STEP: creating a selector @ 04/27/24 12:35:29.683
  STEP: Creating the service pods in kubernetes @ 04/27/24 12:35:29.683
  Apr 27 12:35:29.683: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 04/27/24 12:35:51.801
  Apr 27 12:35:53.820: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Apr 27 12:35:53.820: INFO: Breadth first check of 192.168.69.147 on host 172.31.37.185...
  Apr 27 12:35:53.824: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.172.232:9080/dial?request=hostname&protocol=http&host=192.168.69.147&port=8083&tries=1'] Namespace:pod-network-test-8720 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:35:53.824: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:35:53.824: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:35:53.824: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-8720/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.172.232%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D192.168.69.147%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 27 12:35:53.876: INFO: Waiting for responses: map[]
  Apr 27 12:35:53.876: INFO: reached 192.168.69.147 after 0/1 tries
  Apr 27 12:35:53.876: INFO: Breadth first check of 192.168.96.137 on host 172.31.6.153...
  Apr 27 12:35:53.880: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.172.232:9080/dial?request=hostname&protocol=http&host=192.168.96.137&port=8083&tries=1'] Namespace:pod-network-test-8720 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:35:53.880: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:35:53.881: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:35:53.881: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-8720/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.172.232%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D192.168.96.137%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 27 12:35:53.939: INFO: Waiting for responses: map[]
  Apr 27 12:35:53.939: INFO: reached 192.168.96.137 after 0/1 tries
  Apr 27 12:35:53.939: INFO: Breadth first check of 192.168.172.231 on host 172.31.82.63...
  Apr 27 12:35:53.944: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.172.232:9080/dial?request=hostname&protocol=http&host=192.168.172.231&port=8083&tries=1'] Namespace:pod-network-test-8720 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:35:53.944: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:35:53.945: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:35:53.945: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-8720/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.172.232%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D192.168.172.231%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 27 12:35:54.002: INFO: Waiting for responses: map[]
  Apr 27 12:35:54.002: INFO: reached 192.168.172.231 after 0/1 tries
  Apr 27 12:35:54.002: INFO: Going to retry 0 out of 3 pods....
  Apr 27 12:35:54.002: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-8720" for this suite. @ 04/27/24 12:35:54.008
• [24.363 seconds]
------------------------------
SSS
------------------------------
[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:572
  STEP: Creating a kubernetes client @ 04/27/24 12:35:54.017
  Apr 27 12:35:54.017: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename job @ 04/27/24 12:35:54.017
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:35:54.037
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:35:54.04
  STEP: Creating a job @ 04/27/24 12:35:54.043
  STEP: Ensuring job reaches completions @ 04/27/24 12:35:54.049
  Apr 27 12:36:04.055: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-2364" for this suite. @ 04/27/24 12:36:04.06
• [10.051 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:59
  STEP: Creating a kubernetes client @ 04/27/24 12:36:04.068
  Apr 27 12:36:04.068: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename subpath @ 04/27/24 12:36:04.069
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:36:04.087
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:36:04.09
  STEP: Setting up data @ 04/27/24 12:36:04.093
  STEP: Creating pod pod-subpath-test-secret-sqsg @ 04/27/24 12:36:04.103
  STEP: Creating a pod to test atomic-volume-subpath @ 04/27/24 12:36:04.103
  STEP: Saw pod success @ 04/27/24 12:36:28.187
  Apr 27 12:36:28.192: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-subpath-test-secret-sqsg container test-container-subpath-secret-sqsg: <nil>
  STEP: delete the pod @ 04/27/24 12:36:28.2
  STEP: Deleting pod pod-subpath-test-secret-sqsg @ 04/27/24 12:36:28.216
  Apr 27 12:36:28.216: INFO: Deleting pod "pod-subpath-test-secret-sqsg" in namespace "subpath-6654"
  Apr 27 12:36:28.220: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-6654" for this suite. @ 04/27/24 12:36:28.224
• [24.166 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:808
  STEP: Creating a kubernetes client @ 04/27/24 12:36:28.234
  Apr 27 12:36:28.234: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 12:36:28.235
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:36:28.257
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:36:28.259
  STEP: Creating a ResourceQuota with best effort scope @ 04/27/24 12:36:28.262
  STEP: Ensuring ResourceQuota status is calculated @ 04/27/24 12:36:28.267
  STEP: Creating a ResourceQuota with not best effort scope @ 04/27/24 12:36:30.272
  STEP: Ensuring ResourceQuota status is calculated @ 04/27/24 12:36:30.278
  STEP: Creating a best-effort pod @ 04/27/24 12:36:32.284
  STEP: Ensuring resource quota with best effort scope captures the pod usage @ 04/27/24 12:36:32.297
  STEP: Ensuring resource quota with not best effort ignored the pod usage @ 04/27/24 12:36:34.303
  STEP: Deleting the pod @ 04/27/24 12:36:36.308
  STEP: Ensuring resource quota status released the pod usage @ 04/27/24 12:36:36.33
  STEP: Creating a not best-effort pod @ 04/27/24 12:36:38.335
  STEP: Ensuring resource quota with not best effort scope captures the pod usage @ 04/27/24 12:36:38.348
  STEP: Ensuring resource quota with best effort scope ignored the pod usage @ 04/27/24 12:36:40.353
  STEP: Deleting the pod @ 04/27/24 12:36:42.358
  STEP: Ensuring resource quota status released the pod usage @ 04/27/24 12:36:42.375
  Apr 27 12:36:44.380: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-9380" for this suite. @ 04/27/24 12:36:44.385
• [16.159 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:350
  STEP: Creating a kubernetes client @ 04/27/24 12:36:44.393
  Apr 27 12:36:44.393: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename field-validation @ 04/27/24 12:36:44.394
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:36:44.414
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:36:44.417
  Apr 27 12:36:44.420: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  W0427 12:36:44.421562      19 field_validation.go:423] props: &JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{spec: {  <nil>  object   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[cronSpec:{  <nil>  string   nil <nil> false <nil> false <nil> <nil> ^(\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}$ <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} foo:{  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} ports:{  <nil>  array   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] &JSONSchemaPropsOrArray{Schema:&JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[containerPort protocol],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{containerPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostIP: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},name: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},protocol: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},},JSONSchemas:[]JSONSchemaProps{},} [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [containerPort protocol] 0xc00064bb10 <nil> []}] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},}
  W0427 12:36:46.961934      19 warnings.go:70] unknown field "alpha"
  W0427 12:36:46.961968      19 warnings.go:70] unknown field "beta"
  W0427 12:36:46.961974      19 warnings.go:70] unknown field "delta"
  W0427 12:36:46.961976      19 warnings.go:70] unknown field "epsilon"
  W0427 12:36:46.961979      19 warnings.go:70] unknown field "gamma"
  Apr 27 12:36:47.510: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-5720" for this suite. @ 04/27/24 12:36:47.515
• [3.130 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:58
  STEP: Creating a kubernetes client @ 04/27/24 12:36:47.523
  Apr 27 12:36:47.523: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:36:47.524
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:36:47.543
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:36:47.546
  STEP: Creating configMap with name projected-configmap-test-volume-9b6bafc2-007a-4c0d-b291-579d68a0a430 @ 04/27/24 12:36:47.55
  STEP: Creating a pod to test consume configMaps @ 04/27/24 12:36:47.554
  STEP: Saw pod success @ 04/27/24 12:36:49.573
  Apr 27 12:36:49.577: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-configmaps-4a633715-699c-400d-91a4-9c3046d40641 container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 12:36:49.586
  Apr 27 12:36:49.605: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8410" for this suite. @ 04/27/24 12:36:49.609
• [2.092 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:120
  STEP: Creating a kubernetes client @ 04/27/24 12:36:49.617
  Apr 27 12:36:49.617: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 12:36:49.618
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:36:49.636
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:36:49.639
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 04/27/24 12:36:49.642
  STEP: Saw pod success @ 04/27/24 12:36:51.662
  Apr 27 12:36:51.666: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-35ca11b7-b158-48cf-9a10-1f6942c95338 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 12:36:51.674
  Apr 27 12:36:51.693: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2008" for this suite. @ 04/27/24 12:36:51.698
• [2.089 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:309
  STEP: Creating a kubernetes client @ 04/27/24 12:36:51.706
  Apr 27 12:36:51.706: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/27/24 12:36:51.707
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:36:51.726
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:36:51.729
  STEP: CRs in the same group but different versions (one multiversion CRD) show up in OpenAPI documentation @ 04/27/24 12:36:51.732
  Apr 27 12:36:51.732: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: CRs in the same group but different versions (two CRDs) show up in OpenAPI documentation @ 04/27/24 12:36:56.85
  Apr 27 12:36:56.851: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:36:58.196: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:37:03.400: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6960" for this suite. @ 04/27/24 12:37:03.408
• [11.709 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:445
  STEP: Creating a kubernetes client @ 04/27/24 12:37:03.416
  Apr 27 12:37:03.416: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 12:37:03.416
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:37:03.434
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:37:03.437
  STEP: Saw pod success @ 04/27/24 12:37:09.498
  Apr 27 12:37:09.502: INFO: Trying to get logs from node ip-172-31-82-63 pod client-envvars-ccfb4318-ed52-4567-96e6-bf504e385ab5 container env3cont: <nil>
  STEP: delete the pod @ 04/27/24 12:37:09.509
  Apr 27 12:37:09.525: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-4909" for this suite. @ 04/27/24 12:37:09.529
• [6.120 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:86
  STEP: Creating a kubernetes client @ 04/27/24 12:37:09.536
  Apr 27 12:37:09.536: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replication-controller @ 04/27/24 12:37:09.537
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:37:09.555
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:37:09.559
  Apr 27 12:37:09.562: INFO: Creating quota "condition-test" that allows only two pods to run in the current namespace
  STEP: Creating rc "condition-test" that asks for more than the allowed pod quota @ 04/27/24 12:37:10.577
  STEP: Checking rc "condition-test" has the desired failure condition set @ 04/27/24 12:37:10.584
  STEP: Scaling down rc "condition-test" to satisfy pod quota @ 04/27/24 12:37:11.593
  Apr 27 12:37:11.604: INFO: Updating replication controller "condition-test"
  STEP: Checking rc "condition-test" has no failure condition set @ 04/27/24 12:37:11.604
  Apr 27 12:37:12.616: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-4343" for this suite. @ 04/27/24 12:37:12.62
• [3.093 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance] [sig-api-machinery, Slow, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/chunking.go:144
  STEP: Creating a kubernetes client @ 04/27/24 12:37:12.629
  Apr 27 12:37:12.629: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename chunking @ 04/27/24 12:37:12.63
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:37:12.648
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:37:12.652
  STEP: creating a large number of resources @ 04/27/24 12:37:12.656
  STEP: retrieving the first page @ 04/27/24 12:37:30.338
  Apr 27 12:37:30.385: INFO: Retrieved 40/40 results with rv 9762 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0
  STEP: retrieving the second page until the token expires @ 04/27/24 12:37:30.385
  Apr 27 12:37:50.392: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:38:10.394: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:38:30.393: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:38:50.395: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:39:10.394: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:39:30.391: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:39:50.391: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:40:10.391: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:40:30.392: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:40:50.393: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:41:10.392: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:41:30.394: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:41:50.390: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:42:10.394: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:42:30.393: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:42:50.395: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:43:10.393: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:43:30.394: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:43:50.394: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:44:10.394: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:44:30.394: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6OTc2Miwic3RhcnQiOiJ0ZW1wbGF0ZS0wMDM5XHUwMDAwIn0 has not expired yet
  Apr 27 12:44:50.395: INFO: got error The provided continue parameter is too old to display a consistent list result. You can start a new list without the continue parameter, or use the continue token in this response to retrieve the remainder of the results. Continuing with the provided token results in an inconsistent list - objects that were created, modified, or deleted between the time the first chunk was returned and now may show up in the list.
  Apr 27 12:44:50.395: INFO: Retrieved inconsistent continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6LTEsInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9
  STEP: retrieving the second page again with the token received with the error message @ 04/27/24 12:44:50.395
  STEP: retrieving all remaining pages @ 04/27/24 12:44:50.399
  Apr 27 12:44:50.404: INFO: Retrieved 40/40 results with rv 10598 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA1OTgsInN0YXJ0IjoidGVtcGxhdGUtMDExOVx1MDAwMCJ9
  Apr 27 12:44:50.409: INFO: Retrieved 40/40 results with rv 10598 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA1OTgsInN0YXJ0IjoidGVtcGxhdGUtMDE1OVx1MDAwMCJ9
  Apr 27 12:44:50.413: INFO: Retrieved 40/40 results with rv 10598 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA1OTgsInN0YXJ0IjoidGVtcGxhdGUtMDE5OVx1MDAwMCJ9
  Apr 27 12:44:50.418: INFO: Retrieved 40/40 results with rv 10598 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA1OTgsInN0YXJ0IjoidGVtcGxhdGUtMDIzOVx1MDAwMCJ9
  Apr 27 12:44:50.423: INFO: Retrieved 40/40 results with rv 10598 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA1OTgsInN0YXJ0IjoidGVtcGxhdGUtMDI3OVx1MDAwMCJ9
  Apr 27 12:44:50.428: INFO: Retrieved 40/40 results with rv 10598 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA1OTgsInN0YXJ0IjoidGVtcGxhdGUtMDMxOVx1MDAwMCJ9
  Apr 27 12:44:50.433: INFO: Retrieved 40/40 results with rv 10598 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA1OTgsInN0YXJ0IjoidGVtcGxhdGUtMDM1OVx1MDAwMCJ9
  Apr 27 12:44:50.437: INFO: Retrieved 40/40 results with rv 10598 and continue 
  Apr 27 12:44:50.437: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "chunking-2408" for this suite. @ 04/27/24 12:44:50.441
• [457.822 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:56
  STEP: Creating a kubernetes client @ 04/27/24 12:44:50.451
  Apr 27 12:44:50.451: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:44:50.451
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:44:50.47
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:44:50.473
  STEP: Creating projection with secret that has name projected-secret-test-bc07f64a-7ede-4f90-a306-17377effbbdb @ 04/27/24 12:44:50.476
  STEP: Creating a pod to test consume secrets @ 04/27/24 12:44:50.481
  STEP: Saw pod success @ 04/27/24 12:44:54.511
  Apr 27 12:44:54.515: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-secrets-4e04dd1b-cf29-44e4-9e3f-41527cb379d1 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 12:44:54.532
  Apr 27 12:44:54.548: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2215" for this suite. @ 04/27/24 12:44:54.553
• [4.110 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:215
  STEP: Creating a kubernetes client @ 04/27/24 12:44:54.561
  Apr 27 12:44:54.561: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:44:54.562
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:44:54.579
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:44:54.582
  STEP: Creating secret with name s-test-opt-del-2d2ed75a-b19c-4013-9989-3cea11ca2af4 @ 04/27/24 12:44:54.592
  STEP: Creating secret with name s-test-opt-upd-7f376c50-3ef7-4702-9983-e9e7a5b8e455 @ 04/27/24 12:44:54.597
  STEP: Creating the pod @ 04/27/24 12:44:54.602
  STEP: Deleting secret s-test-opt-del-2d2ed75a-b19c-4013-9989-3cea11ca2af4 @ 04/27/24 12:44:56.648
  STEP: Updating secret s-test-opt-upd-7f376c50-3ef7-4702-9983-e9e7a5b8e455 @ 04/27/24 12:44:56.657
  STEP: Creating secret with name s-test-opt-create-ce6cb22d-a409-405f-84c1-8bc107de26e7 @ 04/27/24 12:44:56.664
  STEP: waiting to observe update in volume @ 04/27/24 12:44:56.669
  Apr 27 12:45:00.710: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8019" for this suite. @ 04/27/24 12:45:00.714
• [6.163 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/node/pods.go:163
  STEP: Creating a kubernetes client @ 04/27/24 12:45:00.724
  Apr 27 12:45:00.724: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 12:45:00.725
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:45:00.744
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:45:00.747
  STEP: creating the pod @ 04/27/24 12:45:00.75
  STEP: submitting the pod to kubernetes @ 04/27/24 12:45:00.75
  STEP: verifying QOS class is set on the pod @ 04/27/24 12:45:00.759
  Apr 27 12:45:00.766: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-8444" for this suite. @ 04/27/24 12:45:00.772
• [0.054 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1533
  STEP: Creating a kubernetes client @ 04/27/24 12:45:00.779
  Apr 27 12:45:00.779: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:45:00.779
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:45:00.8
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:45:00.803
  STEP: creating a service nodeport-service with the type=NodePort in namespace services-4262 @ 04/27/24 12:45:00.806
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 04/27/24 12:45:00.821
  STEP: creating service externalsvc in namespace services-4262 @ 04/27/24 12:45:00.821
  STEP: creating replication controller externalsvc in namespace services-4262 @ 04/27/24 12:45:00.835
  I0427 12:45:00.844842      19 runners.go:197] Created replication controller with name: externalsvc, namespace: services-4262, replica count: 2
  I0427 12:45:03.896594      19 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the NodePort service to type=ExternalName @ 04/27/24 12:45:03.902
  Apr 27 12:45:03.925: INFO: Creating new exec pod
  Apr 27 12:45:05.944: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-4262 exec execpodjqwdk -- /bin/sh -x -c nslookup nodeport-service.services-4262.svc.cluster.local'
  Apr 27 12:45:06.064: INFO: stderr: "+ nslookup nodeport-service.services-4262.svc.cluster.local\n"
  Apr 27 12:45:06.064: INFO: stdout: "Server:\t\t10.152.183.117\nAddress:\t10.152.183.117#53\n\nnodeport-service.services-4262.svc.cluster.local\tcanonical name = externalsvc.services-4262.svc.cluster.local.\nName:\texternalsvc.services-4262.svc.cluster.local\nAddress: 10.152.183.120\n\n"
  STEP: deleting ReplicationController externalsvc in namespace services-4262, will wait for the garbage collector to delete the pods @ 04/27/24 12:45:06.064
  Apr 27 12:45:06.127: INFO: Deleting ReplicationController externalsvc took: 8.533652ms
  Apr 27 12:45:06.227: INFO: Terminating ReplicationController externalsvc pods took: 100.356786ms
  Apr 27 12:45:09.446: INFO: Cleaning up the NodePort to ExternalName test service
  Apr 27 12:45:09.459: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4262" for this suite. @ 04/27/24 12:45:09.463
• [8.691 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:695
  STEP: Creating a kubernetes client @ 04/27/24 12:45:09.47
  Apr 27 12:45:09.470: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 12:45:09.47
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:45:09.489
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:45:09.492
  STEP: Creating a ResourceQuota with terminating scope @ 04/27/24 12:45:09.495
  STEP: Ensuring ResourceQuota status is calculated @ 04/27/24 12:45:09.501
  STEP: Creating a ResourceQuota with not terminating scope @ 04/27/24 12:45:11.506
  STEP: Ensuring ResourceQuota status is calculated @ 04/27/24 12:45:11.512
  STEP: Creating a long running pod @ 04/27/24 12:45:13.517
  STEP: Ensuring resource quota with not terminating scope captures the pod usage @ 04/27/24 12:45:13.533
  STEP: Ensuring resource quota with terminating scope ignored the pod usage @ 04/27/24 12:45:15.539
  STEP: Deleting the pod @ 04/27/24 12:45:17.546
  STEP: Ensuring resource quota status released the pod usage @ 04/27/24 12:45:17.559
  STEP: Creating a terminating pod @ 04/27/24 12:45:19.564
  STEP: Ensuring resource quota with terminating scope captures the pod usage @ 04/27/24 12:45:19.577
  STEP: Ensuring resource quota with not terminating scope ignored the pod usage @ 04/27/24 12:45:21.584
  STEP: Deleting the pod @ 04/27/24 12:45:23.59
  STEP: Ensuring resource quota status released the pod usage @ 04/27/24 12:45:23.616
  Apr 27 12:45:25.622: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-5994" for this suite. @ 04/27/24 12:45:25.627
• [16.165 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:106
  STEP: Creating a kubernetes client @ 04/27/24 12:45:25.635
  Apr 27 12:45:25.635: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename runtimeclass @ 04/27/24 12:45:25.636
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:45:25.659
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:45:25.662
  Apr 27 12:45:25.705: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-3680" for this suite. @ 04/27/24 12:45:25.709
• [0.084 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:176
  STEP: Creating a kubernetes client @ 04/27/24 12:45:25.719
  Apr 27 12:45:25.719: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 12:45:25.72
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:45:25.737
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:45:25.74
  STEP: Creating configMap with name configmap-test-upd-9a2c0af2-25d3-431c-afd3-5b6c845dbd3a @ 04/27/24 12:45:25.747
  STEP: Creating the pod @ 04/27/24 12:45:25.752
  STEP: Waiting for pod with text data @ 04/27/24 12:45:27.774
  STEP: Waiting for pod with binary data @ 04/27/24 12:45:27.782
  Apr 27 12:45:27.789: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8869" for this suite. @ 04/27/24 12:45:27.794
• [2.085 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/configmap.go:170
  STEP: Creating a kubernetes client @ 04/27/24 12:45:27.804
  Apr 27 12:45:27.804: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 12:45:27.805
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:45:27.824
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:45:27.827
  STEP: creating a ConfigMap @ 04/27/24 12:45:27.831
  STEP: fetching the ConfigMap @ 04/27/24 12:45:27.836
  STEP: patching the ConfigMap @ 04/27/24 12:45:27.839
  STEP: listing all ConfigMaps in all namespaces with a label selector @ 04/27/24 12:45:27.845
  STEP: deleting the ConfigMap by collection with a label selector @ 04/27/24 12:45:27.849
  STEP: listing all ConfigMaps in test namespace @ 04/27/24 12:45:27.858
  Apr 27 12:45:27.861: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5205" for this suite. @ 04/27/24 12:45:27.866
• [0.069 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:153
  STEP: Creating a kubernetes client @ 04/27/24 12:45:27.873
  Apr 27 12:45:27.873: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/27/24 12:45:27.874
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:45:27.893
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:45:27.896
  Apr 27 12:45:27.899: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 04/27/24 12:45:29.141
  Apr 27 12:45:29.141: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-5479 --namespace=crd-publish-openapi-5479 create -f -'
  Apr 27 12:45:29.210: INFO: stderr: ""
  Apr 27 12:45:29.210: INFO: stdout: "e2e-test-crd-publish-openapi-1580-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Apr 27 12:45:29.210: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-5479 --namespace=crd-publish-openapi-5479 delete e2e-test-crd-publish-openapi-1580-crds test-cr'
  Apr 27 12:45:29.273: INFO: stderr: ""
  Apr 27 12:45:29.273: INFO: stdout: "e2e-test-crd-publish-openapi-1580-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  Apr 27 12:45:29.273: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-5479 --namespace=crd-publish-openapi-5479 apply -f -'
  Apr 27 12:45:29.329: INFO: stderr: ""
  Apr 27 12:45:29.329: INFO: stdout: "e2e-test-crd-publish-openapi-1580-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Apr 27 12:45:29.329: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-5479 --namespace=crd-publish-openapi-5479 delete e2e-test-crd-publish-openapi-1580-crds test-cr'
  Apr 27 12:45:29.379: INFO: stderr: ""
  Apr 27 12:45:29.379: INFO: stdout: "e2e-test-crd-publish-openapi-1580-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR without validation schema @ 04/27/24 12:45:29.379
  Apr 27 12:45:29.379: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=crd-publish-openapi-5479 explain e2e-test-crd-publish-openapi-1580-crds'
  Apr 27 12:45:29.420: INFO: stderr: ""
  Apr 27 12:45:29.420: INFO: stdout: "GROUP:      crd-publish-openapi-test-empty.example.com\nKIND:       e2e-test-crd-publish-openapi-1580-crd\nVERSION:    v1\n\nDESCRIPTION:\n    <empty>\nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n\n"
  Apr 27 12:45:30.689: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-5479" for this suite. @ 04/27/24 12:45:30.698
• [2.836 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:110
  STEP: Creating a kubernetes client @ 04/27/24 12:45:30.71
  Apr 27 12:45:30.710: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 12:45:30.711
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:45:30.729
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:45:30.733
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 04/27/24 12:45:30.737
  STEP: Saw pod success @ 04/27/24 12:45:34.765
  Apr 27 12:45:34.769: INFO: Trying to get logs from node ip-172-31-37-185 pod pod-05a0203e-6e5a-43a7-a02b-e94539283ecd container test-container: <nil>
  STEP: delete the pod @ 04/27/24 12:45:34.79
  Apr 27 12:45:34.807: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9099" for this suite. @ 04/27/24 12:45:34.811
• [4.111 seconds]
------------------------------
SSS
------------------------------
[sig-network] Services should serve endpoints on same port and different protocols [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:3649
  STEP: Creating a kubernetes client @ 04/27/24 12:45:34.821
  Apr 27 12:45:34.821: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:45:34.821
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:45:34.835
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:45:34.838
  STEP: creating service multiprotocol-test in namespace services-3015 @ 04/27/24 12:45:34.842
  STEP: creating pod pod1 in namespace services-3015 @ 04/27/24 12:45:34.853
  STEP: Creating pod pod1 in namespace services-3015 @ 04/27/24 12:45:34.853
  STEP: waiting up to 3m0s for service multiprotocol-test in namespace services-3015 to expose endpoints map[pod1:[{tcp-port 0 80 TCP } {udp-port 0 80 UDP }]] @ 04/27/24 12:45:36.882
  Apr 27 12:45:36.896: INFO: successfully validated that service multiprotocol-test in namespace services-3015 exposes endpoints map[pod1:[{tcp-port 0 80 TCP } {udp-port 0 80 UDP }]]
  STEP: Checking if the Service forwards traffic to the TCP and UDP port @ 04/27/24 12:45:36.896
  Apr 27 12:45:36.896: INFO: Creating new exec pod
  Apr 27 12:45:38.913: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.246 80'
  Apr 27 12:45:39.017: INFO: stderr: "+ nc -v -t -w 2 10.152.183.246 80\nConnection to 10.152.183.246 80 port [tcp/http] succeeded!\n+ echo hostName\n"
  Apr 27 12:45:39.017: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 12:45:39.017: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.152.183.246 80'
  Apr 27 12:45:43.113: INFO: stderr: "+ nc -v -u -w 2 10.152.183.246 80\n+ echo hostName\nConnection to 10.152.183.246 80 port [udp/*] succeeded!\n"
  Apr 27 12:45:43.113: INFO: stdout: "pod1"
  STEP: Checking if the Service forwards traffic to TCP only @ 04/27/24 12:45:43.113
  Apr 27 12:45:43.127: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.246 80'
  Apr 27 12:45:43.220: INFO: stderr: "+ nc -v -t -w 2 10.152.183.246 80\nConnection to 10.152.183.246 80 port [tcp/http] succeeded!\n+ echo hostName\n"
  Apr 27 12:45:43.220: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 12:45:43.220: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.152.183.246 80'
  Apr 27 12:45:47.314: INFO: stderr: "+ nc -v -u -w 2 10.152.183.246 80\n+ echo hostName\nConnection to 10.152.183.246 80 port [udp/*] succeeded!\n"
  Apr 27 12:45:47.314: INFO: stdout: ""
  Apr 27 12:45:47.314: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.152.183.246 80'
  Apr 27 12:45:51.405: INFO: stderr: "+ nc -v -u -w 2 10.152.183.246 80\n+ echo hostName\nConnection to 10.152.183.246 80 port [udp/*] succeeded!\n"
  Apr 27 12:45:51.405: INFO: stdout: ""
  STEP: Checking if the Service forwards traffic to UDP only @ 04/27/24 12:45:51.405
  Apr 27 12:45:51.420: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.152.183.246 80'
  Apr 27 12:45:55.518: INFO: stderr: "+ nc -v -u -w 2 10.152.183.246 80\n+ echo hostName\nConnection to 10.152.183.246 80 port [udp/*] succeeded!\n"
  Apr 27 12:45:55.518: INFO: stdout: "pod1"
  Apr 27 12:45:55.518: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.246 80'
  Apr 27 12:45:57.618: INFO: rc: 1
  Apr 27 12:45:57.618: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.246 80:
  Command stdout:

  stderr:
  + nc -v -t -w 2 10.152.183.246 80
  + echo hostName
  nc: connect to 10.152.183.246 port 80 (tcp) timed out: Operation in progress
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  Apr 27 12:45:57.618: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.246 80'
  Apr 27 12:45:59.722: INFO: rc: 1
  Apr 27 12:45:59.722: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.246 80:
  Command stdout:

  stderr:
  + nc -v -t -w 2 10.152.183.246 80
  + echo hostName
  nc: connect to 10.152.183.246 port 80 (tcp) timed out: Operation in progress
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  Apr 27 12:45:59.722: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.246 80'
  Apr 27 12:46:01.822: INFO: rc: 1
  Apr 27 12:46:01.822: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-3015 exec execpodczl5q -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.246 80:
  Command stdout:

  stderr:
  + nc -v -t -w 2 10.152.183.246 80
  + echo hostName
  nc: connect to 10.152.183.246 port 80 (tcp) timed out: Operation in progress
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  Apr 27 12:46:01.822: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-3015" for this suite. @ 04/27/24 12:46:01.828
• [27.016 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:639
  STEP: Creating a kubernetes client @ 04/27/24 12:46:01.837
  Apr 27 12:46:01.837: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename gc @ 04/27/24 12:46:01.837
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:46:01.852
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:46:01.856
  STEP: create the rc @ 04/27/24 12:46:01.864
  W0427 12:46:01.869671      19 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 04/27/24 12:46:07.878
  STEP: wait for the rc to be deleted @ 04/27/24 12:46:07.892
  Apr 27 12:46:08.906: INFO: 80 pods remaining
  Apr 27 12:46:08.906: INFO: 80 pods has nil DeletionTimestamp
  Apr 27 12:46:08.906: INFO: 
  Apr 27 12:46:09.909: INFO: 71 pods remaining
  Apr 27 12:46:09.909: INFO: 70 pods has nil DeletionTimestamp
  Apr 27 12:46:09.909: INFO: 
  Apr 27 12:46:10.904: INFO: 60 pods remaining
  Apr 27 12:46:10.904: INFO: 60 pods has nil DeletionTimestamp
  Apr 27 12:46:10.904: INFO: 
  Apr 27 12:46:11.908: INFO: 40 pods remaining
  Apr 27 12:46:11.908: INFO: 40 pods has nil DeletionTimestamp
  Apr 27 12:46:11.908: INFO: 
  Apr 27 12:46:12.909: INFO: 31 pods remaining
  Apr 27 12:46:12.909: INFO: 30 pods has nil DeletionTimestamp
  Apr 27 12:46:12.909: INFO: 
  Apr 27 12:46:13.902: INFO: 20 pods remaining
  Apr 27 12:46:13.902: INFO: 20 pods has nil DeletionTimestamp
  Apr 27 12:46:13.902: INFO: 
  STEP: Gathering metrics @ 04/27/24 12:46:14.924
  W0427 12:46:14.938240      19 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Apr 27 12:46:14.943: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 27 12:46:14.944: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-918" for this suite. @ 04/27/24 12:46:14.952
• [13.130 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:200
  STEP: Creating a kubernetes client @ 04/27/24 12:46:14.968
  Apr 27 12:46:14.968: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 12:46:14.969
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:46:14.999
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:46:15.004
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 04/27/24 12:46:15.02
  STEP: Saw pod success @ 04/27/24 12:46:19.053
  Apr 27 12:46:19.057: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-e600f584-7ebd-45e6-a4c9-30e2be850f2a container test-container: <nil>
  STEP: delete the pod @ 04/27/24 12:46:19.071
  Apr 27 12:46:19.091: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9143" for this suite. @ 04/27/24 12:46:19.095
• [4.135 seconds]
------------------------------
S
------------------------------
[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:47
  STEP: Creating a kubernetes client @ 04/27/24 12:46:19.103
  Apr 27 12:46:19.103: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 12:46:19.104
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:46:19.121
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:46:19.124
  STEP: Creating secret with name secret-test-cdb82f49-ea4f-49e9-9de8-394574a06689 @ 04/27/24 12:46:19.128
  STEP: Creating a pod to test consume secrets @ 04/27/24 12:46:19.133
  STEP: Saw pod success @ 04/27/24 12:46:23.159
  Apr 27 12:46:23.167: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-secrets-56a9dac0-b5ad-4ce6-8f39-2b4c2953fbf7 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 12:46:23.175
  Apr 27 12:46:23.197: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6959" for this suite. @ 04/27/24 12:46:23.202
• [4.107 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:141
  STEP: Creating a kubernetes client @ 04/27/24 12:46:23.21
  Apr 27 12:46:23.210: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename disruption @ 04/27/24 12:46:23.211
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:46:23.226
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:46:23.231
  STEP: Waiting for the pdb to be processed @ 04/27/24 12:46:23.24
  STEP: Waiting for all pods to be running @ 04/27/24 12:46:25.272
  Apr 27 12:46:25.282: INFO: running pods: 0 < 3
  Apr 27 12:46:27.282: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-850" for this suite. @ 04/27/24 12:46:27.287
• [4.087 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:161
  STEP: Creating a kubernetes client @ 04/27/24 12:46:27.297
  Apr 27 12:46:27.297: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename cronjob @ 04/27/24 12:46:27.298
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:46:27.314
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:46:27.319
  STEP: Creating a ReplaceConcurrent cronjob @ 04/27/24 12:46:27.322
  STEP: Ensuring a job is scheduled @ 04/27/24 12:46:27.329
  STEP: Ensuring exactly one is scheduled @ 04/27/24 12:47:01.335
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 04/27/24 12:47:01.339
  STEP: Ensuring the job is replaced with a new one @ 04/27/24 12:47:01.344
  STEP: Removing cronjob @ 04/27/24 12:48:01.35
  Apr 27 12:48:01.358: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-6497" for this suite. @ 04/27/24 12:48:01.363
• [94.075 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:237
  STEP: Creating a kubernetes client @ 04/27/24 12:48:01.373
  Apr 27 12:48:01.373: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:48:01.373
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:48:01.396
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:48:01.4
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 12:48:01.403
  STEP: Saw pod success @ 04/27/24 12:48:05.432
  Apr 27 12:48:05.437: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-67651e90-483a-43ec-a957-d4e7979000b9 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 12:48:05.45
  Apr 27 12:48:05.473: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6942" for this suite. @ 04/27/24 12:48:05.477
• [4.112 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:125
  STEP: Creating a kubernetes client @ 04/27/24 12:48:05.485
  Apr 27 12:48:05.485: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 12:48:05.486
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:48:05.504
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:48:05.508
  STEP: Creating configMap with name configmap-test-upd-f0203ff9-db4d-40bc-81d9-bf6ac39e4af7 @ 04/27/24 12:48:05.522
  STEP: Creating the pod @ 04/27/24 12:48:05.528
  STEP: Updating configmap configmap-test-upd-f0203ff9-db4d-40bc-81d9-bf6ac39e4af7 @ 04/27/24 12:48:07.563
  STEP: waiting to observe update in volume @ 04/27/24 12:48:07.571
  Apr 27 12:49:11.893: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6078" for this suite. @ 04/27/24 12:49:11.898
• [66.422 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:276
  STEP: Creating a kubernetes client @ 04/27/24 12:49:11.908
  Apr 27 12:49:11.908: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/27/24 12:49:11.908
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:49:11.925
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:49:11.929
  STEP: CRs in different groups (two CRDs) show up in OpenAPI documentation @ 04/27/24 12:49:11.933
  Apr 27 12:49:11.933: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:49:13.283: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:49:18.367: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-3072" for this suite. @ 04/27/24 12:49:18.376
• [6.479 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/security_context.go:530
  STEP: Creating a kubernetes client @ 04/27/24 12:49:18.387
  Apr 27 12:49:18.387: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename security-context-test @ 04/27/24 12:49:18.388
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:49:18.405
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:49:18.408
  Apr 27 12:49:22.448: INFO: Got logs for pod "busybox-privileged-false-1f2e4eb5-3c33-4af8-bd3c-393cd59a8c85": "ip: RTNETLINK answers: Operation not permitted\n"
  Apr 27 12:49:22.448: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-4175" for this suite. @ 04/27/24 12:49:22.453
• [4.074 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:117
  STEP: Creating a kubernetes client @ 04/27/24 12:49:22.462
  Apr 27 12:49:22.462: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename dns @ 04/27/24 12:49:22.463
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:49:22.478
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:49:22.481
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-3634.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-1.dns-test-service.dns-3634.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/wheezy_hosts@dns-querier-1;sleep 1; done
   @ 04/27/24 12:49:22.485
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-3634.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-1.dns-test-service.dns-3634.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/jessie_hosts@dns-querier-1;sleep 1; done
   @ 04/27/24 12:49:22.485
  STEP: creating a pod to probe /etc/hosts @ 04/27/24 12:49:22.485
  STEP: submitting the pod to kubernetes @ 04/27/24 12:49:22.485
  STEP: retrieving the pod @ 04/27/24 12:49:24.506
  STEP: looking for the results for each expected name from probers @ 04/27/24 12:49:24.51
  Apr 27 12:49:24.530: INFO: DNS probes using dns-3634/dns-test-b785a5a8-d6f0-4ab7-8ec5-9e90f7026090 succeeded

  STEP: deleting the pod @ 04/27/24 12:49:24.531
  Apr 27 12:49:24.546: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-3634" for this suite. @ 04/27/24 12:49:24.551
• [2.097 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:70
  STEP: Creating a kubernetes client @ 04/27/24 12:49:24.559
  Apr 27 12:49:24.559: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 12:49:24.56
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:49:24.576
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:49:24.58
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 12:49:24.584
  STEP: Saw pod success @ 04/27/24 12:49:28.613
  Apr 27 12:49:28.619: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-1eeda4b2-6d2e-4080-bf55-bc0e86148e50 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 12:49:28.627
  Apr 27 12:49:28.643: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7138" for this suite. @ 04/27/24 12:49:28.648
• [4.096 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance] [sig-scheduling, Serial, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/predicates.go:446
  STEP: Creating a kubernetes client @ 04/27/24 12:49:28.656
  Apr 27 12:49:28.656: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-pred @ 04/27/24 12:49:28.656
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:49:28.673
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:49:28.676
  Apr 27 12:49:28.680: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Apr 27 12:49:28.690: INFO: Waiting for terminating namespaces to be deleted...
  Apr 27 12:49:28.693: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-37-185 before test
  Apr 27 12:49:28.702: INFO: nginx-ingress-controller-kubernetes-worker-wjwlq from ingress-nginx-kubernetes-worker started at 2024-04-27 12:15:52 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.702: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 12:49:28.702: INFO: calico-node-qdhx5 from kube-system started at 2024-04-27 12:18:04 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.702: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 12:49:28.702: INFO: sonobuoy-e2e-job-d6fe9ea7c49d40a2 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:49:28.702: INFO: 	Container e2e ready: true, restart count 0
  Apr 27 12:49:28.702: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:49:28.702: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-crp54 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:49:28.702: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:49:28.702: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 27 12:49:28.702: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-6-153 before test
  Apr 27 12:49:28.707: INFO: nginx-ingress-controller-kubernetes-worker-5khsm from ingress-nginx-kubernetes-worker started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.707: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: calico-node-cs4kq from kube-system started at 2024-04-27 12:18:06 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.707: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: coredns-bddfd76d7-p5qdr from kube-system started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.707: INFO: 	Container coredns ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: kube-state-metrics-6f48cdd76-xtvcf from kube-system started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.707: INFO: 	Container kube-state-metrics ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: metrics-server-v0.6.3-69d7fbfdf8-vwtzn from kube-system started at 2024-04-27 12:10:16 +0000 UTC (2 container statuses recorded)
  Apr 27 12:49:28.707: INFO: 	Container metrics-server ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: 	Container metrics-server-nanny ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: dashboard-metrics-scraper-5dd7cb5fc-rfvgw from kubernetes-dashboard started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.707: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: kubernetes-dashboard-7b899cb9d9-d8649 from kubernetes-dashboard started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.707: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-r49rd from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:49:28.707: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 27 12:49:28.707: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-82-63 before test
  Apr 27 12:49:28.712: INFO: nginx-ingress-controller-kubernetes-worker-zs4lv from ingress-nginx-kubernetes-worker started at 2024-04-27 12:18:19 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.712: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 12:49:28.712: INFO: calico-node-mvvng from kube-system started at 2024-04-27 12:18:11 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.712: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 12:49:28.712: INFO: sonobuoy from sonobuoy started at 2024-04-27 12:21:03 +0000 UTC (1 container statuses recorded)
  Apr 27 12:49:28.712: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Apr 27 12:49:28.712: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-l72v9 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 12:49:28.712: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 12:49:28.712: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to schedule Pod with nonempty NodeSelector. @ 04/27/24 12:49:28.712
  STEP: Considering event: 
  Type = [Warning], Name = [restricted-pod.17ca23fae987e7ba], Reason = [FailedScheduling], Message = [0/5 nodes are available: 2 node(s) had untolerated taint {node-role.kubernetes.io/control-plane: }, 3 node(s) didn't match Pod's node affinity/selector. preemption: 0/5 nodes are available: 5 Preemption is not helpful for scheduling.] @ 04/27/24 12:49:28.741
  Apr 27 12:49:29.740: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-362" for this suite. @ 04/27/24 12:49:29.745
• [1.099 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance] [sig-instrumentation, Conformance]
k8s.io/kubernetes/test/e2e/instrumentation/events.go:98
  STEP: Creating a kubernetes client @ 04/27/24 12:49:29.755
  Apr 27 12:49:29.755: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename events @ 04/27/24 12:49:29.756
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:49:29.773
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:49:29.776
  STEP: creating a test event @ 04/27/24 12:49:29.78
  STEP: listing events in all namespaces @ 04/27/24 12:49:29.785
  STEP: listing events in test namespace @ 04/27/24 12:49:29.797
  STEP: listing events with field selection filtering on source @ 04/27/24 12:49:29.801
  STEP: listing events with field selection filtering on reportingController @ 04/27/24 12:49:29.805
  STEP: getting the test event @ 04/27/24 12:49:29.809
  STEP: patching the test event @ 04/27/24 12:49:29.812
  STEP: getting the test event @ 04/27/24 12:49:29.823
  STEP: updating the test event @ 04/27/24 12:49:29.827
  STEP: getting the test event @ 04/27/24 12:49:29.835
  STEP: deleting the test event @ 04/27/24 12:49:29.84
  STEP: listing events in all namespaces @ 04/27/24 12:49:29.849
  STEP: listing events in test namespace @ 04/27/24 12:49:29.863
  Apr 27 12:49:29.868: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-9271" for this suite. @ 04/27/24 12:49:29.872
• [0.126 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:71
  STEP: Creating a kubernetes client @ 04/27/24 12:49:29.882
  Apr 27 12:49:29.882: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 12:49:29.882
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:49:29.895
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:49:29.899
  Apr 27 12:49:51.988: INFO: Container started at 2024-04-27 12:49:30 +0000 UTC, pod became ready at 2024-04-27 12:49:50 +0000 UTC
  Apr 27 12:49:51.988: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-9665" for this suite. @ 04/27/24 12:49:51.992
• [22.119 seconds]
------------------------------
S
------------------------------
[sig-cli] Kubectl client Update Demo should scale a replication controller [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:357
  STEP: Creating a kubernetes client @ 04/27/24 12:49:52.001
  Apr 27 12:49:52.001: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 12:49:52.002
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:49:52.021
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:49:52.024
  STEP: creating a replication controller @ 04/27/24 12:49:52.028
  Apr 27 12:49:52.028: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 create -f -'
  Apr 27 12:49:52.110: INFO: stderr: ""
  Apr 27 12:49:52.110: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 04/27/24 12:49:52.11
  Apr 27 12:49:52.110: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 27 12:49:52.157: INFO: stderr: ""
  Apr 27 12:49:52.158: INFO: stdout: "update-demo-nautilus-jc962 update-demo-nautilus-ww6g8 "
  Apr 27 12:49:52.158: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-jc962 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 12:49:52.200: INFO: stderr: ""
  Apr 27 12:49:52.200: INFO: stdout: ""
  Apr 27 12:49:52.200: INFO: update-demo-nautilus-jc962 is created but not running
  Apr 27 12:49:57.201: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 27 12:49:57.246: INFO: stderr: ""
  Apr 27 12:49:57.246: INFO: stdout: "update-demo-nautilus-jc962 update-demo-nautilus-ww6g8 "
  Apr 27 12:49:57.246: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-jc962 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 12:49:57.291: INFO: stderr: ""
  Apr 27 12:49:57.291: INFO: stdout: "true"
  Apr 27 12:49:57.291: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-jc962 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 27 12:49:57.335: INFO: stderr: ""
  Apr 27 12:49:57.335: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 27 12:49:57.335: INFO: validating pod update-demo-nautilus-jc962
  Apr 27 12:49:57.341: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 27 12:49:57.341: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 27 12:49:57.341: INFO: update-demo-nautilus-jc962 is verified up and running
  Apr 27 12:49:57.341: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-ww6g8 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 12:49:57.385: INFO: stderr: ""
  Apr 27 12:49:57.385: INFO: stdout: "true"
  Apr 27 12:49:57.385: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-ww6g8 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 27 12:49:57.429: INFO: stderr: ""
  Apr 27 12:49:57.429: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 27 12:49:57.429: INFO: validating pod update-demo-nautilus-ww6g8
  Apr 27 12:49:57.439: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 27 12:49:57.439: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 27 12:49:57.439: INFO: update-demo-nautilus-ww6g8 is verified up and running
  STEP: scaling down the replication controller @ 04/27/24 12:49:57.439
  Apr 27 12:49:57.440: INFO: scanned /root for discovery docs: <nil>
  Apr 27 12:49:57.440: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 scale rc update-demo-nautilus --replicas=1 --timeout=5m'
  Apr 27 12:49:58.502: INFO: stderr: ""
  Apr 27 12:49:58.502: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 04/27/24 12:49:58.502
  Apr 27 12:49:58.502: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 27 12:49:58.548: INFO: stderr: ""
  Apr 27 12:49:58.548: INFO: stdout: "update-demo-nautilus-jc962 update-demo-nautilus-ww6g8 "
  STEP: Replicas for name=update-demo: expected=1 actual=2 @ 04/27/24 12:49:58.548
  Apr 27 12:50:03.548: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 27 12:50:03.595: INFO: stderr: ""
  Apr 27 12:50:03.595: INFO: stdout: "update-demo-nautilus-ww6g8 "
  Apr 27 12:50:03.595: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-ww6g8 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 12:50:03.638: INFO: stderr: ""
  Apr 27 12:50:03.638: INFO: stdout: "true"
  Apr 27 12:50:03.638: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-ww6g8 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 27 12:50:03.681: INFO: stderr: ""
  Apr 27 12:50:03.681: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 27 12:50:03.681: INFO: validating pod update-demo-nautilus-ww6g8
  Apr 27 12:50:03.687: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 27 12:50:03.687: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 27 12:50:03.687: INFO: update-demo-nautilus-ww6g8 is verified up and running
  STEP: scaling up the replication controller @ 04/27/24 12:50:03.687
  Apr 27 12:50:03.688: INFO: scanned /root for discovery docs: <nil>
  Apr 27 12:50:03.688: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 scale rc update-demo-nautilus --replicas=2 --timeout=5m'
  Apr 27 12:50:04.753: INFO: stderr: ""
  Apr 27 12:50:04.753: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 04/27/24 12:50:04.753
  Apr 27 12:50:04.753: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 27 12:50:04.806: INFO: stderr: ""
  Apr 27 12:50:04.806: INFO: stdout: "update-demo-nautilus-8dk4b update-demo-nautilus-ww6g8 "
  Apr 27 12:50:04.806: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-8dk4b -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 12:50:04.850: INFO: stderr: ""
  Apr 27 12:50:04.850: INFO: stdout: ""
  Apr 27 12:50:04.850: INFO: update-demo-nautilus-8dk4b is created but not running
  Apr 27 12:50:09.854: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 27 12:50:09.910: INFO: stderr: ""
  Apr 27 12:50:09.910: INFO: stdout: "update-demo-nautilus-8dk4b update-demo-nautilus-ww6g8 "
  Apr 27 12:50:09.910: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-8dk4b -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 12:50:09.952: INFO: stderr: ""
  Apr 27 12:50:09.953: INFO: stdout: "true"
  Apr 27 12:50:09.953: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-8dk4b -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 27 12:50:09.994: INFO: stderr: ""
  Apr 27 12:50:09.994: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 27 12:50:09.994: INFO: validating pod update-demo-nautilus-8dk4b
  Apr 27 12:50:10.001: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 27 12:50:10.001: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 27 12:50:10.001: INFO: update-demo-nautilus-8dk4b is verified up and running
  Apr 27 12:50:10.001: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-ww6g8 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 12:50:10.044: INFO: stderr: ""
  Apr 27 12:50:10.044: INFO: stdout: "true"
  Apr 27 12:50:10.044: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods update-demo-nautilus-ww6g8 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 27 12:50:10.087: INFO: stderr: ""
  Apr 27 12:50:10.087: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 27 12:50:10.087: INFO: validating pod update-demo-nautilus-ww6g8
  Apr 27 12:50:10.092: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 27 12:50:10.092: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 27 12:50:10.092: INFO: update-demo-nautilus-ww6g8 is verified up and running
  STEP: using delete to clean up resources @ 04/27/24 12:50:10.092
  Apr 27 12:50:10.092: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 delete --grace-period=0 --force -f -'
  Apr 27 12:50:10.141: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 27 12:50:10.141: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Apr 27 12:50:10.141: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get rc,svc -l name=update-demo --no-headers'
  Apr 27 12:50:10.200: INFO: stderr: "No resources found in kubectl-4305 namespace.\n"
  Apr 27 12:50:10.200: INFO: stdout: ""
  Apr 27 12:50:10.200: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4305 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Apr 27 12:50:10.248: INFO: stderr: ""
  Apr 27 12:50:10.248: INFO: stdout: ""
  Apr 27 12:50:10.248: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4305" for this suite. @ 04/27/24 12:50:10.253
• [18.263 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:424
  STEP: Creating a kubernetes client @ 04/27/24 12:50:10.265
  Apr 27 12:50:10.265: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 12:50:10.266
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:10.283
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:10.286
  STEP: Creating configMap with name configmap-test-volume-536181ce-0ce5-488c-bc0a-c36db6a4e66d @ 04/27/24 12:50:10.29
  STEP: Creating a pod to test consume configMaps @ 04/27/24 12:50:10.295
  STEP: Saw pod success @ 04/27/24 12:50:12.318
  Apr 27 12:50:12.322: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-configmaps-3f965d85-4044-4fea-ac55-690fb1e1b39f container configmap-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 12:50:12.335
  Apr 27 12:50:12.354: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6589" for this suite. @ 04/27/24 12:50:12.359
• [2.102 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should delete a collection of pod templates [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/podtemplates.go:123
  STEP: Creating a kubernetes client @ 04/27/24 12:50:12.367
  Apr 27 12:50:12.367: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename podtemplate @ 04/27/24 12:50:12.367
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:12.386
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:12.391
  STEP: Create set of pod templates @ 04/27/24 12:50:12.395
  Apr 27 12:50:12.403: INFO: created test-podtemplate-1
  Apr 27 12:50:12.409: INFO: created test-podtemplate-2
  Apr 27 12:50:12.414: INFO: created test-podtemplate-3
  STEP: get a list of pod templates with a label in the current namespace @ 04/27/24 12:50:12.414
  STEP: delete collection of pod templates @ 04/27/24 12:50:12.418
  Apr 27 12:50:12.418: INFO: requesting DeleteCollection of pod templates
  STEP: check that the list of pod templates matches the requested quantity @ 04/27/24 12:50:12.44
  Apr 27 12:50:12.440: INFO: requesting list of pod templates to confirm quantity
  Apr 27 12:50:12.444: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-9986" for this suite. @ 04/27/24 12:50:12.448
• [0.091 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:315
  STEP: Creating a kubernetes client @ 04/27/24 12:50:12.458
  Apr 27 12:50:12.458: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 12:50:12.459
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:12.476
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:12.48
  STEP: Setting up server cert @ 04/27/24 12:50:12.507
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 12:50:12.757
  STEP: Deploying the webhook pod @ 04/27/24 12:50:12.769
  STEP: Wait for the deployment to be ready @ 04/27/24 12:50:12.783
  Apr 27 12:50:12.796: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 12:50:14.811
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 12:50:14.822
  Apr 27 12:50:15.823: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Apr 27 12:50:15.833: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-8624-crds.webhook.example.com via the AdmissionRegistration API @ 04/27/24 12:50:16.346
  STEP: Creating a custom resource while v1 is storage version @ 04/27/24 12:50:16.361
  STEP: Patching Custom Resource Definition to set v2 as storage @ 04/27/24 12:50:18.391
  STEP: Patching the custom resource while v2 is storage version @ 04/27/24 12:50:18.41
  Apr 27 12:50:19.010: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8495" for this suite. @ 04/27/24 12:50:19.015
  STEP: Destroying namespace "webhook-markers-4895" for this suite. @ 04/27/24 12:50:19.023
• [6.572 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance] [sig-api-machinery, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:400
  STEP: Creating a kubernetes client @ 04/27/24 12:50:19.03
  Apr 27 12:50:19.030: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename namespaces @ 04/27/24 12:50:19.031
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:19.047
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:19.051
  STEP: Creating namespace "e2e-ns-b5gqr" @ 04/27/24 12:50:19.055
  Apr 27 12:50:19.074: INFO: Namespace "e2e-ns-b5gqr-284" has []v1.FinalizerName{"kubernetes"}
  STEP: Adding e2e finalizer to namespace "e2e-ns-b5gqr-284" @ 04/27/24 12:50:19.074
  Apr 27 12:50:19.085: INFO: Namespace "e2e-ns-b5gqr-284" has []v1.FinalizerName{"kubernetes", "e2e.example.com/fakeFinalizer"}
  STEP: Removing e2e finalizer from namespace "e2e-ns-b5gqr-284" @ 04/27/24 12:50:19.085
  Apr 27 12:50:19.095: INFO: Namespace "e2e-ns-b5gqr-284" has []v1.FinalizerName{"kubernetes"}
  Apr 27 12:50:19.095: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-1102" for this suite. @ 04/27/24 12:50:19.099
  STEP: Destroying namespace "e2e-ns-b5gqr-284" for this suite. @ 04/27/24 12:50:19.107
• [0.085 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/hostport.go:63
  STEP: Creating a kubernetes client @ 04/27/24 12:50:19.116
  Apr 27 12:50:19.116: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename hostport @ 04/27/24 12:50:19.116
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:19.132
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:19.136
  STEP: Trying to create a pod(pod1) with hostport 54323 and hostIP 127.0.0.1 and expect scheduled @ 04/27/24 12:50:19.146
  STEP: Trying to create another pod(pod2) with hostport 54323 but hostIP 172.31.37.185 on the node which pod1 resides and expect scheduled @ 04/27/24 12:50:21.165
  STEP: Trying to create a third pod(pod3) with hostport 54323, hostIP 172.31.37.185 but use UDP protocol on the node which pod2 resides @ 04/27/24 12:50:33.216
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 127.0.0.1, port: 54323 @ 04/27/24 12:50:37.254
  Apr 27 12:50:37.254: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 --interface 172.31.37.185 http://127.0.0.1:54323/hostname] Namespace:hostport-2483 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:50:37.254: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:50:37.254: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:50:37.254: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-2483/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+--interface+172.31.37.185+http%3A%2F%2F127.0.0.1%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 172.31.37.185, port: 54323 @ 04/27/24 12:50:37.312
  Apr 27 12:50:37.312: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 http://172.31.37.185:54323/hostname] Namespace:hostport-2483 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:50:37.312: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:50:37.312: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:50:37.312: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-2483/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+http%3A%2F%2F172.31.37.185%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 172.31.37.185, port: 54323 UDP @ 04/27/24 12:50:37.367
  Apr 27 12:50:37.367: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostname | nc -u -w 5 172.31.37.185 54323] Namespace:hostport-2483 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:50:37.367: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:50:37.367: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:50:37.368: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-2483/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostname+%7C+nc+-u+-w+5+172.31.37.185+54323&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  Apr 27 12:50:42.424: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "hostport-2483" for this suite. @ 04/27/24 12:50:42.43
• [23.324 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/proxy.go:101
  STEP: Creating a kubernetes client @ 04/27/24 12:50:42.441
  Apr 27 12:50:42.441: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename proxy @ 04/27/24 12:50:42.441
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:42.457
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:42.462
  STEP: starting an echo server on multiple ports @ 04/27/24 12:50:42.476
  STEP: creating replication controller proxy-service-8k27w in namespace proxy-1983 @ 04/27/24 12:50:42.476
  I0427 12:50:42.489775      19 runners.go:197] Created replication controller with name: proxy-service-8k27w, namespace: proxy-1983, replica count: 1
  I0427 12:50:43.541674      19 runners.go:197] proxy-service-8k27w Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0427 12:50:44.542689      19 runners.go:197] proxy-service-8k27w Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 27 12:50:44.548: INFO: setup took 2.082562991s, starting test cases
  STEP: running 16 cases, 20 attempts per case, 320 total attempts @ 04/27/24 12:50:44.548
  Apr 27 12:50:44.555: INFO: (0) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 6.773876ms)
  Apr 27 12:50:44.555: INFO: (0) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.978331ms)
  Apr 27 12:50:44.556: INFO: (0) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 8.193487ms)
  Apr 27 12:50:44.556: INFO: (0) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 8.252195ms)
  Apr 27 12:50:44.556: INFO: (0) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 8.209699ms)
  Apr 27 12:50:44.557: INFO: (0) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 8.772809ms)
  Apr 27 12:50:44.557: INFO: (0) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 8.951321ms)
  Apr 27 12:50:44.558: INFO: (0) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 10.171825ms)
  Apr 27 12:50:44.559: INFO: (0) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 10.544496ms)
  Apr 27 12:50:44.559: INFO: (0) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 10.846164ms)
  Apr 27 12:50:44.560: INFO: (0) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 11.683485ms)
  Apr 27 12:50:44.560: INFO: (0) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 11.809833ms)
  Apr 27 12:50:44.560: INFO: (0) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 11.90986ms)
  Apr 27 12:50:44.560: INFO: (0) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 11.848919ms)
  Apr 27 12:50:44.560: INFO: (0) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 11.890521ms)
  Apr 27 12:50:44.560: INFO: (0) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 12.148851ms)
  Apr 27 12:50:44.564: INFO: (1) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 3.871138ms)
  Apr 27 12:50:44.565: INFO: (1) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 4.862604ms)
  Apr 27 12:50:44.565: INFO: (1) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 5.12867ms)
  Apr 27 12:50:44.566: INFO: (1) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 5.218838ms)
  Apr 27 12:50:44.567: INFO: (1) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.202773ms)
  Apr 27 12:50:44.567: INFO: (1) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 6.252624ms)
  Apr 27 12:50:44.567: INFO: (1) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.596343ms)
  Apr 27 12:50:44.567: INFO: (1) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 7.077612ms)
  Apr 27 12:50:44.568: INFO: (1) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 7.350275ms)
  Apr 27 12:50:44.568: INFO: (1) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 7.672793ms)
  Apr 27 12:50:44.568: INFO: (1) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 8.07515ms)
  Apr 27 12:50:44.569: INFO: (1) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 8.286817ms)
  Apr 27 12:50:44.569: INFO: (1) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.303809ms)
  Apr 27 12:50:44.570: INFO: (1) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 9.05552ms)
  Apr 27 12:50:44.570: INFO: (1) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.545677ms)
  Apr 27 12:50:44.571: INFO: (1) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 10.209943ms)
  Apr 27 12:50:44.576: INFO: (2) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 5.359208ms)
  Apr 27 12:50:44.577: INFO: (2) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.149848ms)
  Apr 27 12:50:44.577: INFO: (2) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 6.68135ms)
  Apr 27 12:50:44.577: INFO: (2) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 6.786899ms)
  Apr 27 12:50:44.578: INFO: (2) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 7.490217ms)
  Apr 27 12:50:44.579: INFO: (2) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 8.299391ms)
  Apr 27 12:50:44.579: INFO: (2) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 8.10829ms)
  Apr 27 12:50:44.579: INFO: (2) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 8.329121ms)
  Apr 27 12:50:44.580: INFO: (2) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 8.847145ms)
  Apr 27 12:50:44.580: INFO: (2) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.067595ms)
  Apr 27 12:50:44.580: INFO: (2) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 9.035487ms)
  Apr 27 12:50:44.580: INFO: (2) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 9.322585ms)
  Apr 27 12:50:44.580: INFO: (2) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 9.287469ms)
  Apr 27 12:50:44.580: INFO: (2) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 9.358504ms)
  Apr 27 12:50:44.581: INFO: (2) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 10.214974ms)
  Apr 27 12:50:44.581: INFO: (2) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 10.148846ms)
  Apr 27 12:50:44.585: INFO: (3) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 4.094966ms)
  Apr 27 12:50:44.585: INFO: (3) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 4.20552ms)
  Apr 27 12:50:44.586: INFO: (3) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 4.781357ms)
  Apr 27 12:50:44.587: INFO: (3) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 5.362547ms)
  Apr 27 12:50:44.588: INFO: (3) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 6.25693ms)
  Apr 27 12:50:44.588: INFO: (3) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 6.926993ms)
  Apr 27 12:50:44.588: INFO: (3) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 6.870061ms)
  Apr 27 12:50:44.588: INFO: (3) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 6.956839ms)
  Apr 27 12:50:44.589: INFO: (3) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 7.504501ms)
  Apr 27 12:50:44.589: INFO: (3) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 7.684643ms)
  Apr 27 12:50:44.589: INFO: (3) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 7.945152ms)
  Apr 27 12:50:44.589: INFO: (3) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 8.125242ms)
  Apr 27 12:50:44.590: INFO: (3) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.246828ms)
  Apr 27 12:50:44.590: INFO: (3) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 8.304354ms)
  Apr 27 12:50:44.591: INFO: (3) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 9.881164ms)
  Apr 27 12:50:44.591: INFO: (3) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 9.915852ms)
  Apr 27 12:50:44.596: INFO: (4) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 4.076592ms)
  Apr 27 12:50:44.597: INFO: (4) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 5.594942ms)
  Apr 27 12:50:44.598: INFO: (4) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.692786ms)
  Apr 27 12:50:44.598: INFO: (4) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 6.637143ms)
  Apr 27 12:50:44.598: INFO: (4) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.55088ms)
  Apr 27 12:50:44.599: INFO: (4) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 7.427888ms)
  Apr 27 12:50:44.599: INFO: (4) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 7.574111ms)
  Apr 27 12:50:44.599: INFO: (4) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 7.63283ms)
  Apr 27 12:50:44.599: INFO: (4) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 7.874831ms)
  Apr 27 12:50:44.599: INFO: (4) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 7.750062ms)
  Apr 27 12:50:44.600: INFO: (4) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.298624ms)
  Apr 27 12:50:44.600: INFO: (4) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 8.622851ms)
  Apr 27 12:50:44.600: INFO: (4) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 8.702143ms)
  Apr 27 12:50:44.600: INFO: (4) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 8.950242ms)
  Apr 27 12:50:44.601: INFO: (4) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 9.23064ms)
  Apr 27 12:50:44.601: INFO: (4) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.238145ms)
  Apr 27 12:50:44.606: INFO: (5) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 4.694353ms)
  Apr 27 12:50:44.606: INFO: (5) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 4.579427ms)
  Apr 27 12:50:44.606: INFO: (5) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 4.568443ms)
  Apr 27 12:50:44.606: INFO: (5) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 4.970798ms)
  Apr 27 12:50:44.607: INFO: (5) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 5.937817ms)
  Apr 27 12:50:44.607: INFO: (5) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.05906ms)
  Apr 27 12:50:44.607: INFO: (5) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.154964ms)
  Apr 27 12:50:44.608: INFO: (5) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 6.696475ms)
  Apr 27 12:50:44.608: INFO: (5) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 6.760407ms)
  Apr 27 12:50:44.608: INFO: (5) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 7.035424ms)
  Apr 27 12:50:44.609: INFO: (5) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 7.597777ms)
  Apr 27 12:50:44.609: INFO: (5) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 8.098917ms)
  Apr 27 12:50:44.609: INFO: (5) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 8.007517ms)
  Apr 27 12:50:44.610: INFO: (5) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 9.082638ms)
  Apr 27 12:50:44.611: INFO: (5) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.532418ms)
  Apr 27 12:50:44.611: INFO: (5) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 9.541802ms)
  Apr 27 12:50:44.615: INFO: (6) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 4.173344ms)
  Apr 27 12:50:44.615: INFO: (6) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 4.388429ms)
  Apr 27 12:50:44.617: INFO: (6) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 6.186345ms)
  Apr 27 12:50:44.618: INFO: (6) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 6.49536ms)
  Apr 27 12:50:44.618: INFO: (6) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 6.560689ms)
  Apr 27 12:50:44.618: INFO: (6) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.62343ms)
  Apr 27 12:50:44.618: INFO: (6) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 6.540786ms)
  Apr 27 12:50:44.618: INFO: (6) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.590269ms)
  Apr 27 12:50:44.618: INFO: (6) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.64014ms)
  Apr 27 12:50:44.618: INFO: (6) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.711832ms)
  Apr 27 12:50:44.618: INFO: (6) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 7.079657ms)
  Apr 27 12:50:44.619: INFO: (6) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 7.922075ms)
  Apr 27 12:50:44.619: INFO: (6) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 7.812306ms)
  Apr 27 12:50:44.619: INFO: (6) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 8.247167ms)
  Apr 27 12:50:44.620: INFO: (6) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 9.123032ms)
  Apr 27 12:50:44.620: INFO: (6) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 9.377582ms)
  Apr 27 12:50:44.624: INFO: (7) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 3.851231ms)
  Apr 27 12:50:44.625: INFO: (7) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 4.173206ms)
  Apr 27 12:50:44.626: INFO: (7) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 5.453871ms)
  Apr 27 12:50:44.627: INFO: (7) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 6.060127ms)
  Apr 27 12:50:44.627: INFO: (7) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 6.359058ms)
  Apr 27 12:50:44.627: INFO: (7) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 6.256497ms)
  Apr 27 12:50:44.628: INFO: (7) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 7.044875ms)
  Apr 27 12:50:44.628: INFO: (7) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 7.641836ms)
  Apr 27 12:50:44.628: INFO: (7) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 7.606426ms)
  Apr 27 12:50:44.628: INFO: (7) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 7.615191ms)
  Apr 27 12:50:44.629: INFO: (7) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 8.129928ms)
  Apr 27 12:50:44.629: INFO: (7) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.542843ms)
  Apr 27 12:50:44.630: INFO: (7) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 8.940913ms)
  Apr 27 12:50:44.630: INFO: (7) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 9.395812ms)
  Apr 27 12:50:44.630: INFO: (7) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.512564ms)
  Apr 27 12:50:44.630: INFO: (7) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 9.538463ms)
  Apr 27 12:50:44.636: INFO: (8) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 5.598939ms)
  Apr 27 12:50:44.637: INFO: (8) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.430839ms)
  Apr 27 12:50:44.637: INFO: (8) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 6.554785ms)
  Apr 27 12:50:44.637: INFO: (8) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 6.852798ms)
  Apr 27 12:50:44.638: INFO: (8) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 6.991486ms)
  Apr 27 12:50:44.638: INFO: (8) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 6.9447ms)
  Apr 27 12:50:44.638: INFO: (8) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 7.378738ms)
  Apr 27 12:50:44.638: INFO: (8) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 7.469945ms)
  Apr 27 12:50:44.638: INFO: (8) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 7.92407ms)
  Apr 27 12:50:44.639: INFO: (8) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 8.563066ms)
  Apr 27 12:50:44.639: INFO: (8) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.485983ms)
  Apr 27 12:50:44.639: INFO: (8) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 8.698356ms)
  Apr 27 12:50:44.640: INFO: (8) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.130494ms)
  Apr 27 12:50:44.640: INFO: (8) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 9.125426ms)
  Apr 27 12:50:44.640: INFO: (8) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 9.251026ms)
  Apr 27 12:50:44.640: INFO: (8) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 9.683739ms)
  Apr 27 12:50:44.644: INFO: (9) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 3.807904ms)
  Apr 27 12:50:44.646: INFO: (9) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 5.758205ms)
  Apr 27 12:50:44.647: INFO: (9) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 5.930196ms)
  Apr 27 12:50:44.647: INFO: (9) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.071099ms)
  Apr 27 12:50:44.647: INFO: (9) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.179966ms)
  Apr 27 12:50:44.647: INFO: (9) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.375766ms)
  Apr 27 12:50:44.647: INFO: (9) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 6.506735ms)
  Apr 27 12:50:44.648: INFO: (9) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 7.679386ms)
  Apr 27 12:50:44.648: INFO: (9) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 7.52618ms)
  Apr 27 12:50:44.649: INFO: (9) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 7.930262ms)
  Apr 27 12:50:44.649: INFO: (9) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 8.170346ms)
  Apr 27 12:50:44.649: INFO: (9) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 8.474721ms)
  Apr 27 12:50:44.649: INFO: (9) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 8.122467ms)
  Apr 27 12:50:44.650: INFO: (9) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 9.043572ms)
  Apr 27 12:50:44.650: INFO: (9) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.63656ms)
  Apr 27 12:50:44.651: INFO: (9) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 10.593747ms)
  Apr 27 12:50:44.655: INFO: (10) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 4.226025ms)
  Apr 27 12:50:44.658: INFO: (10) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.400218ms)
  Apr 27 12:50:44.658: INFO: (10) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 6.707322ms)
  Apr 27 12:50:44.658: INFO: (10) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 6.788929ms)
  Apr 27 12:50:44.658: INFO: (10) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 7.153969ms)
  Apr 27 12:50:44.659: INFO: (10) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 7.560783ms)
  Apr 27 12:50:44.659: INFO: (10) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 7.714874ms)
  Apr 27 12:50:44.659: INFO: (10) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 7.903256ms)
  Apr 27 12:50:44.659: INFO: (10) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 8.211525ms)
  Apr 27 12:50:44.660: INFO: (10) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 8.382369ms)
  Apr 27 12:50:44.660: INFO: (10) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 8.651369ms)
  Apr 27 12:50:44.660: INFO: (10) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 8.855501ms)
  Apr 27 12:50:44.660: INFO: (10) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 8.846261ms)
  Apr 27 12:50:44.660: INFO: (10) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 9.198506ms)
  Apr 27 12:50:44.660: INFO: (10) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 9.068423ms)
  Apr 27 12:50:44.661: INFO: (10) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.684283ms)
  Apr 27 12:50:44.665: INFO: (11) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 4.063104ms)
  Apr 27 12:50:44.667: INFO: (11) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 5.536956ms)
  Apr 27 12:50:44.668: INFO: (11) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 6.758296ms)
  Apr 27 12:50:44.668: INFO: (11) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 7.100466ms)
  Apr 27 12:50:44.668: INFO: (11) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 7.086264ms)
  Apr 27 12:50:44.669: INFO: (11) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 7.316382ms)
  Apr 27 12:50:44.669: INFO: (11) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 7.650371ms)
  Apr 27 12:50:44.669: INFO: (11) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 7.680373ms)
  Apr 27 12:50:44.669: INFO: (11) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 7.766162ms)
  Apr 27 12:50:44.669: INFO: (11) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 7.731593ms)
  Apr 27 12:50:44.669: INFO: (11) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 8.005029ms)
  Apr 27 12:50:44.670: INFO: (11) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 8.233929ms)
  Apr 27 12:50:44.670: INFO: (11) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.598824ms)
  Apr 27 12:50:44.670: INFO: (11) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 8.77184ms)
  Apr 27 12:50:44.670: INFO: (11) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 8.974012ms)
  Apr 27 12:50:44.671: INFO: (11) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 9.474185ms)
  Apr 27 12:50:44.676: INFO: (12) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 5.000348ms)
  Apr 27 12:50:44.677: INFO: (12) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 5.90419ms)
  Apr 27 12:50:44.678: INFO: (12) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.809148ms)
  Apr 27 12:50:44.678: INFO: (12) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 7.072333ms)
  Apr 27 12:50:44.678: INFO: (12) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 7.1686ms)
  Apr 27 12:50:44.678: INFO: (12) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 7.118151ms)
  Apr 27 12:50:44.679: INFO: (12) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 7.823607ms)
  Apr 27 12:50:44.679: INFO: (12) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 8.338299ms)
  Apr 27 12:50:44.680: INFO: (12) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 8.421259ms)
  Apr 27 12:50:44.680: INFO: (12) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 8.701368ms)
  Apr 27 12:50:44.680: INFO: (12) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 8.561326ms)
  Apr 27 12:50:44.680: INFO: (12) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 8.846538ms)
  Apr 27 12:50:44.680: INFO: (12) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 8.763891ms)
  Apr 27 12:50:44.680: INFO: (12) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 8.727531ms)
  Apr 27 12:50:44.680: INFO: (12) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 9.067082ms)
  Apr 27 12:50:44.681: INFO: (12) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 10.253419ms)
  Apr 27 12:50:44.685: INFO: (13) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 3.817433ms)
  Apr 27 12:50:44.686: INFO: (13) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 4.327631ms)
  Apr 27 12:50:44.686: INFO: (13) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 4.64178ms)
  Apr 27 12:50:44.687: INFO: (13) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 5.656174ms)
  Apr 27 12:50:44.687: INFO: (13) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 5.634422ms)
  Apr 27 12:50:44.688: INFO: (13) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 6.722249ms)
  Apr 27 12:50:44.688: INFO: (13) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 7.092047ms)
  Apr 27 12:50:44.689: INFO: (13) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 7.179719ms)
  Apr 27 12:50:44.689: INFO: (13) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 7.131652ms)
  Apr 27 12:50:44.689: INFO: (13) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 7.344448ms)
  Apr 27 12:50:44.689: INFO: (13) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 7.500326ms)
  Apr 27 12:50:44.689: INFO: (13) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 7.711145ms)
  Apr 27 12:50:44.690: INFO: (13) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 8.364675ms)
  Apr 27 12:50:44.690: INFO: (13) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 8.646881ms)
  Apr 27 12:50:44.690: INFO: (13) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 8.926781ms)
  Apr 27 12:50:44.691: INFO: (13) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 9.60735ms)
  Apr 27 12:50:44.695: INFO: (14) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 4.144709ms)
  Apr 27 12:50:44.696: INFO: (14) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 4.598713ms)
  Apr 27 12:50:44.696: INFO: (14) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 4.664362ms)
  Apr 27 12:50:44.697: INFO: (14) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 5.88129ms)
  Apr 27 12:50:44.697: INFO: (14) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 5.860954ms)
  Apr 27 12:50:44.697: INFO: (14) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 5.781996ms)
  Apr 27 12:50:44.698: INFO: (14) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.242867ms)
  Apr 27 12:50:44.698: INFO: (14) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 6.227926ms)
  Apr 27 12:50:44.699: INFO: (14) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 7.203261ms)
  Apr 27 12:50:44.699: INFO: (14) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 7.538419ms)
  Apr 27 12:50:44.699: INFO: (14) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 7.686305ms)
  Apr 27 12:50:44.699: INFO: (14) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 8.081586ms)
  Apr 27 12:50:44.700: INFO: (14) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 8.065729ms)
  Apr 27 12:50:44.700: INFO: (14) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 8.339895ms)
  Apr 27 12:50:44.700: INFO: (14) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.717929ms)
  Apr 27 12:50:44.700: INFO: (14) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 8.830776ms)
  Apr 27 12:50:44.706: INFO: (15) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 5.098617ms)
  Apr 27 12:50:44.706: INFO: (15) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 5.822161ms)
  Apr 27 12:50:44.707: INFO: (15) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.552689ms)
  Apr 27 12:50:44.708: INFO: (15) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 6.931278ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 8.598466ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 8.905159ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 8.669887ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 8.694515ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.687112ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 8.616645ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 8.893989ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 8.928276ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 8.942063ms)
  Apr 27 12:50:44.709: INFO: (15) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 8.918496ms)
  Apr 27 12:50:44.710: INFO: (15) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 8.923953ms)
  Apr 27 12:50:44.710: INFO: (15) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 9.353605ms)
  Apr 27 12:50:44.714: INFO: (16) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 4.134697ms)
  Apr 27 12:50:44.714: INFO: (16) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 4.402525ms)
  Apr 27 12:50:44.715: INFO: (16) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 5.167457ms)
  Apr 27 12:50:44.715: INFO: (16) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 5.08456ms)
  Apr 27 12:50:44.716: INFO: (16) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 6.092703ms)
  Apr 27 12:50:44.716: INFO: (16) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.106071ms)
  Apr 27 12:50:44.717: INFO: (16) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 6.703058ms)
  Apr 27 12:50:44.717: INFO: (16) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 7.336909ms)
  Apr 27 12:50:44.717: INFO: (16) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 7.242249ms)
  Apr 27 12:50:44.718: INFO: (16) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 7.534965ms)
  Apr 27 12:50:44.718: INFO: (16) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 8.231666ms)
  Apr 27 12:50:44.718: INFO: (16) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.289839ms)
  Apr 27 12:50:44.719: INFO: (16) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 8.733922ms)
  Apr 27 12:50:44.719: INFO: (16) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 9.135411ms)
  Apr 27 12:50:44.719: INFO: (16) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 9.040005ms)
  Apr 27 12:50:44.720: INFO: (16) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.95961ms)
  Apr 27 12:50:44.725: INFO: (17) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 4.436295ms)
  Apr 27 12:50:44.725: INFO: (17) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 4.767473ms)
  Apr 27 12:50:44.725: INFO: (17) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 4.920613ms)
  Apr 27 12:50:44.727: INFO: (17) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 6.263078ms)
  Apr 27 12:50:44.727: INFO: (17) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 6.608208ms)
  Apr 27 12:50:44.727: INFO: (17) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 6.745729ms)
  Apr 27 12:50:44.728: INFO: (17) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 7.35761ms)
  Apr 27 12:50:44.728: INFO: (17) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 7.24267ms)
  Apr 27 12:50:44.728: INFO: (17) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 7.391072ms)
  Apr 27 12:50:44.728: INFO: (17) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 7.521835ms)
  Apr 27 12:50:44.729: INFO: (17) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 8.447319ms)
  Apr 27 12:50:44.729: INFO: (17) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 8.391877ms)
  Apr 27 12:50:44.729: INFO: (17) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 8.539699ms)
  Apr 27 12:50:44.729: INFO: (17) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 8.952853ms)
  Apr 27 12:50:44.730: INFO: (17) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 9.87134ms)
  Apr 27 12:50:44.730: INFO: (17) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 9.96903ms)
  Apr 27 12:50:44.735: INFO: (18) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 4.716596ms)
  Apr 27 12:50:44.736: INFO: (18) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 5.369939ms)
  Apr 27 12:50:44.736: INFO: (18) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 5.472129ms)
  Apr 27 12:50:44.736: INFO: (18) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 5.902059ms)
  Apr 27 12:50:44.737: INFO: (18) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.844299ms)
  Apr 27 12:50:44.738: INFO: (18) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 7.133695ms)
  Apr 27 12:50:44.738: INFO: (18) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 7.487853ms)
  Apr 27 12:50:44.738: INFO: (18) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 7.448658ms)
  Apr 27 12:50:44.738: INFO: (18) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 7.432251ms)
  Apr 27 12:50:44.738: INFO: (18) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 7.460785ms)
  Apr 27 12:50:44.738: INFO: (18) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 7.561568ms)
  Apr 27 12:50:44.739: INFO: (18) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 8.591896ms)
  Apr 27 12:50:44.740: INFO: (18) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 9.311933ms)
  Apr 27 12:50:44.740: INFO: (18) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 9.27261ms)
  Apr 27 12:50:44.740: INFO: (18) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 9.624307ms)
  Apr 27 12:50:44.740: INFO: (18) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.602593ms)
  Apr 27 12:50:44.744: INFO: (19) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:443/proxy/tlsrewritem... (200; 3.901777ms)
  Apr 27 12:50:44.746: INFO: (19) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 5.129156ms)
  Apr 27 12:50:44.746: INFO: (19) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd/proxy/rewriteme">test</a> (200; 5.560758ms)
  Apr 27 12:50:44.747: INFO: (19) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:460/proxy/: tls baz (200; 6.316179ms)
  Apr 27 12:50:44.747: INFO: (19) /api/v1/namespaces/proxy-1983/pods/https:proxy-service-8k27w-d2mdd:462/proxy/: tls qux (200; 6.269864ms)
  Apr 27 12:50:44.747: INFO: (19) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 6.770308ms)
  Apr 27 12:50:44.748: INFO: (19) /api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/http:proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">... (200; 7.862371ms)
  Apr 27 12:50:44.749: INFO: (19) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:162/proxy/: bar (200; 7.904082ms)
  Apr 27 12:50:44.749: INFO: (19) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/: <a href="/api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:1080/proxy/rewriteme">test<... (200; 7.942735ms)
  Apr 27 12:50:44.749: INFO: (19) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname2/proxy/: tls qux (200; 8.206505ms)
  Apr 27 12:50:44.749: INFO: (19) /api/v1/namespaces/proxy-1983/pods/proxy-service-8k27w-d2mdd:160/proxy/: foo (200; 8.254795ms)
  Apr 27 12:50:44.749: INFO: (19) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname2/proxy/: bar (200; 8.456784ms)
  Apr 27 12:50:44.749: INFO: (19) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname1/proxy/: foo (200; 9.100534ms)
  Apr 27 12:50:44.750: INFO: (19) /api/v1/namespaces/proxy-1983/services/https:proxy-service-8k27w:tlsportname1/proxy/: tls baz (200; 9.001802ms)
  Apr 27 12:50:44.750: INFO: (19) /api/v1/namespaces/proxy-1983/services/http:proxy-service-8k27w:portname2/proxy/: bar (200; 9.489952ms)
  Apr 27 12:50:44.750: INFO: (19) /api/v1/namespaces/proxy-1983/services/proxy-service-8k27w:portname1/proxy/: foo (200; 9.82398ms)
  STEP: deleting ReplicationController proxy-service-8k27w in namespace proxy-1983, will wait for the garbage collector to delete the pods @ 04/27/24 12:50:44.751
  Apr 27 12:50:44.815: INFO: Deleting ReplicationController proxy-service-8k27w took: 9.671415ms
  Apr 27 12:50:44.916: INFO: Terminating ReplicationController proxy-service-8k27w pods took: 100.844999ms
  Apr 27 12:50:47.117: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-1983" for this suite. @ 04/27/24 12:50:47.122
• [4.691 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/security_context.go:611
  STEP: Creating a kubernetes client @ 04/27/24 12:50:47.132
  Apr 27 12:50:47.132: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename security-context-test @ 04/27/24 12:50:47.133
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:47.148
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:47.152
  Apr 27 12:50:51.191: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-4555" for this suite. @ 04/27/24 12:50:51.196
• [4.073 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should delete a collection of pods [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:846
  STEP: Creating a kubernetes client @ 04/27/24 12:50:51.206
  Apr 27 12:50:51.206: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 12:50:51.206
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:51.224
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:51.228
  STEP: Create set of pods @ 04/27/24 12:50:51.232
  Apr 27 12:50:51.250: INFO: created test-pod-1
  Apr 27 12:50:51.257: INFO: created test-pod-2
  Apr 27 12:50:51.269: INFO: created test-pod-3
  STEP: waiting for all 3 pods to be running @ 04/27/24 12:50:51.269
  STEP: waiting for all pods to be deleted @ 04/27/24 12:50:53.322
  Apr 27 12:50:53.333: INFO: Pod quantity 3 is different from expected quantity 0
  Apr 27 12:50:54.328: INFO: Pod quantity 1 is different from expected quantity 0
  Apr 27 12:50:55.328: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-2717" for this suite. @ 04/27/24 12:50:55.332
• [4.136 seconds]
------------------------------
SS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Slow] [Conformance] [sig-node, Slow, Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:155
  STEP: Creating a kubernetes client @ 04/27/24 12:50:55.341
  Apr 27 12:50:55.341: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename var-expansion @ 04/27/24 12:50:55.342
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:55.359
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:55.363
  Apr 27 12:50:57.388: INFO: Deleting pod "var-expansion-78f42bcf-920c-4a43-bb6c-cda66749415c" in namespace "var-expansion-6364"
  Apr 27 12:50:57.397: INFO: Wait up to 5m0s for pod "var-expansion-78f42bcf-920c-4a43-bb6c-cda66749415c" to be fully deleted
  Apr 27 12:50:59.406: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-6364" for this suite. @ 04/27/24 12:50:59.411
• [4.079 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/ephemeral_containers.go:51
  STEP: Creating a kubernetes client @ 04/27/24 12:50:59.42
  Apr 27 12:50:59.420: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 04/27/24 12:50:59.421
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:50:59.437
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:50:59.441
  STEP: creating a target pod @ 04/27/24 12:50:59.444
  STEP: adding an ephemeral container @ 04/27/24 12:51:01.469
  STEP: checking pod container endpoints @ 04/27/24 12:51:03.499
  Apr 27 12:51:03.499: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-2365 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:51:03.499: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:51:03.499: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:51:03.499: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/ephemeral-containers-test-2365/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Apr 27 12:51:03.549: INFO: Exec stderr: ""
  Apr 27 12:51:03.557: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-2365" for this suite. @ 04/27/24 12:51:03.563
• [4.151 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/init_container.go:256
  STEP: Creating a kubernetes client @ 04/27/24 12:51:03.571
  Apr 27 12:51:03.571: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename init-container @ 04/27/24 12:51:03.572
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:51:03.589
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:51:03.593
  STEP: creating the pod @ 04/27/24 12:51:03.596
  Apr 27 12:51:03.596: INFO: PodSpec: initContainers in spec.initContainers
  Apr 27 12:51:06.868: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-5037" for this suite. @ 04/27/24 12:51:06.873
• [3.310 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:163
  STEP: Creating a kubernetes client @ 04/27/24 12:51:06.882
  Apr 27 12:51:06.882: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 12:51:06.883
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:51:06.903
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:51:06.906
  STEP: Discovering how many secrets are in namespace by default @ 04/27/24 12:51:06.91
  STEP: Counting existing ResourceQuota @ 04/27/24 12:51:11.916
  STEP: Creating a ResourceQuota @ 04/27/24 12:51:16.921
  STEP: Ensuring resource quota status is calculated @ 04/27/24 12:51:16.929
  STEP: Creating a Secret @ 04/27/24 12:51:18.935
  STEP: Ensuring resource quota status captures secret creation @ 04/27/24 12:51:18.948
  STEP: Deleting a secret @ 04/27/24 12:51:20.954
  STEP: Ensuring resource quota status released usage @ 04/27/24 12:51:20.963
  Apr 27 12:51:22.968: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2493" for this suite. @ 04/27/24 12:51:22.973
• [16.101 seconds]
------------------------------
SSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance] [sig-scheduling, Serial, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/preemption.go:624
  STEP: Creating a kubernetes client @ 04/27/24 12:51:22.983
  Apr 27 12:51:22.983: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-preemption @ 04/27/24 12:51:22.984
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:51:23.001
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:51:23.005
  Apr 27 12:51:23.025: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 27 12:52:23.030: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 04/27/24 12:52:23.035
  Apr 27 12:52:23.035: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-preemption-path @ 04/27/24 12:52:23.035
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:52:23.054
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:52:23.057
  STEP: Finding an available node @ 04/27/24 12:52:23.061
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 04/27/24 12:52:23.061
  STEP: Explicitly delete pod here to free the resource it takes. @ 04/27/24 12:52:25.091
  Apr 27 12:52:25.105: INFO: found a healthy node: ip-172-31-82-63
  Apr 27 12:52:31.179: INFO: pods created so far: [1 1 1]
  Apr 27 12:52:31.179: INFO: length of pods created so far: 3
  Apr 27 12:52:33.192: INFO: pods created so far: [2 2 1]
  Apr 27 12:52:40.272: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-974" for this suite. @ 04/27/24 12:52:40.277
  Apr 27 12:52:40.285: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-2957" for this suite. @ 04/27/24 12:52:40.289
• [77.315 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] DNS should provide DNS for ExternalName services [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:329
  STEP: Creating a kubernetes client @ 04/27/24 12:52:40.298
  Apr 27 12:52:40.298: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename dns @ 04/27/24 12:52:40.299
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:52:40.315
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:52:40.319
  STEP: Creating a test externalName service @ 04/27/24 12:52:40.322
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4506.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-4506.svc.cluster.local; sleep 1; done
   @ 04/27/24 12:52:40.327
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4506.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-4506.svc.cluster.local; sleep 1; done
   @ 04/27/24 12:52:40.328
  STEP: creating a pod to probe DNS @ 04/27/24 12:52:40.328
  STEP: submitting the pod to kubernetes @ 04/27/24 12:52:40.328
  STEP: retrieving the pod @ 04/27/24 12:52:46.36
  STEP: looking for the results for each expected name from probers @ 04/27/24 12:52:46.364
  Apr 27 12:52:46.376: INFO: DNS probes using dns-test-45673da9-9041-4b88-ada3-4fe4118c99c8 succeeded

  STEP: changing the externalName to bar.example.com @ 04/27/24 12:52:46.376
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4506.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-4506.svc.cluster.local; sleep 1; done
   @ 04/27/24 12:52:46.387
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4506.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-4506.svc.cluster.local; sleep 1; done
   @ 04/27/24 12:52:46.387
  STEP: creating a second pod to probe DNS @ 04/27/24 12:52:46.387
  STEP: submitting the pod to kubernetes @ 04/27/24 12:52:46.387
  STEP: retrieving the pod @ 04/27/24 12:52:48.407
  STEP: looking for the results for each expected name from probers @ 04/27/24 12:52:48.411
  Apr 27 12:52:48.417: INFO: File wheezy_udp@dns-test-service-3.dns-4506.svc.cluster.local from pod  dns-4506/dns-test-1103dbb7-188e-4a4f-aa93-a32061303d5e contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 27 12:52:48.423: INFO: File jessie_udp@dns-test-service-3.dns-4506.svc.cluster.local from pod  dns-4506/dns-test-1103dbb7-188e-4a4f-aa93-a32061303d5e contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 27 12:52:48.423: INFO: Lookups using dns-4506/dns-test-1103dbb7-188e-4a4f-aa93-a32061303d5e failed for: [wheezy_udp@dns-test-service-3.dns-4506.svc.cluster.local jessie_udp@dns-test-service-3.dns-4506.svc.cluster.local]

  Apr 27 12:52:48.435: INFO: Pod client logs for webserver: 
  Apr 27 12:52:48.445: INFO: Pod client logs for querier: 
  Apr 27 12:52:48.454: INFO: Pod client logs for jessie-querier: 
  Apr 27 12:52:53.426: INFO: DNS probes using dns-test-1103dbb7-188e-4a4f-aa93-a32061303d5e succeeded

  STEP: changing the service to type=ClusterIP @ 04/27/24 12:52:53.426
  W0427 12:52:53.442717      19 warnings.go:70] spec.externalName is ignored when spec.type is not "ExternalName"
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4506.svc.cluster.local A > /results/wheezy_udp@dns-test-service-3.dns-4506.svc.cluster.local; sleep 1; done
   @ 04/27/24 12:52:53.442
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4506.svc.cluster.local A > /results/jessie_udp@dns-test-service-3.dns-4506.svc.cluster.local; sleep 1; done
   @ 04/27/24 12:52:53.442
  STEP: creating a third pod to probe DNS @ 04/27/24 12:52:53.442
  STEP: submitting the pod to kubernetes @ 04/27/24 12:52:53.446
  STEP: retrieving the pod @ 04/27/24 12:52:55.47
  STEP: looking for the results for each expected name from probers @ 04/27/24 12:52:55.474
  Apr 27 12:52:55.485: INFO: DNS probes using dns-test-69cb1522-cfb5-4741-a183-9d9d93ff4166 succeeded

  STEP: deleting the pod @ 04/27/24 12:52:55.485
  STEP: deleting the pod @ 04/27/24 12:52:55.501
  STEP: deleting the pod @ 04/27/24 12:52:55.519
  STEP: deleting the test externalName service @ 04/27/24 12:52:55.538
  Apr 27 12:52:55.561: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-4506" for this suite. @ 04/27/24 12:52:55.566
• [15.275 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:166
  STEP: Creating a kubernetes client @ 04/27/24 12:52:55.574
  Apr 27 12:52:55.574: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replicaset @ 04/27/24 12:52:55.575
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:52:55.59
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:52:55.597
  STEP: Create a ReplicaSet @ 04/27/24 12:52:55.601
  STEP: Verify that the required pods have come up @ 04/27/24 12:52:55.608
  Apr 27 12:52:55.611: INFO: Pod name sample-pod: Found 0 pods out of 3
  Apr 27 12:53:00.617: INFO: Pod name sample-pod: Found 3 pods out of 3
  STEP: ensuring each pod is running @ 04/27/24 12:53:00.617
  Apr 27 12:53:00.621: INFO: Replica Status: {Replicas:3 FullyLabeledReplicas:3 ReadyReplicas:3 AvailableReplicas:3 ObservedGeneration:1 Conditions:[]}
  STEP: Listing all ReplicaSets @ 04/27/24 12:53:00.621
  STEP: DeleteCollection of the ReplicaSets @ 04/27/24 12:53:00.627
  STEP: After DeleteCollection verify that ReplicaSets have been deleted @ 04/27/24 12:53:00.64
  Apr 27 12:53:00.645: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-7581" for this suite. @ 04/27/24 12:53:00.649
• [5.088 seconds]
------------------------------
SS
------------------------------
[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:175
  STEP: Creating a kubernetes client @ 04/27/24 12:53:00.662
  Apr 27 12:53:00.663: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:53:00.663
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:53:00.686
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:53:00.692
  STEP: Creating configMap with name cm-test-opt-del-84c59d4e-430a-4c50-8d23-83c9c342f23c @ 04/27/24 12:53:00.704
  STEP: Creating configMap with name cm-test-opt-upd-b90550b8-007c-4b5c-b750-52afee44442d @ 04/27/24 12:53:00.709
  STEP: Creating the pod @ 04/27/24 12:53:00.716
  STEP: Deleting configmap cm-test-opt-del-84c59d4e-430a-4c50-8d23-83c9c342f23c @ 04/27/24 12:53:02.772
  STEP: Updating configmap cm-test-opt-upd-b90550b8-007c-4b5c-b750-52afee44442d @ 04/27/24 12:53:02.779
  STEP: Creating configMap with name cm-test-opt-create-984ddc10-4d44-4f75-9447-2ba01b6d1c91 @ 04/27/24 12:53:02.785
  STEP: waiting to observe update in volume @ 04/27/24 12:53:02.79
  Apr 27 12:53:06.832: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-818" for this suite. @ 04/27/24 12:53:06.836
• [6.182 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_conversion_webhook.go:177
  STEP: Creating a kubernetes client @ 04/27/24 12:53:06.844
  Apr 27 12:53:06.844: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-webhook @ 04/27/24 12:53:06.845
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:53:06.862
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:53:06.865
  STEP: Setting up server cert @ 04/27/24 12:53:06.869
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 04/27/24 12:53:07.128
  STEP: Deploying the custom resource conversion webhook pod @ 04/27/24 12:53:07.138
  STEP: Wait for the deployment to be ready @ 04/27/24 12:53:07.153
  Apr 27 12:53:07.165: INFO: deployment "sample-crd-conversion-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 12:53:09.179
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 12:53:09.192
  Apr 27 12:53:10.192: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Apr 27 12:53:10.203: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Creating a v1 custom resource @ 04/27/24 12:53:12.765
  STEP: Create a v2 custom resource @ 04/27/24 12:53:12.785
  STEP: List CRs in v1 @ 04/27/24 12:53:12.815
  STEP: List CRs in v2 @ 04/27/24 12:53:12.821
  Apr 27 12:53:13.393: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-2194" for this suite. @ 04/27/24 12:53:13.4
• [6.564 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should complete a service status lifecycle [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:3338
  STEP: Creating a kubernetes client @ 04/27/24 12:53:13.409
  Apr 27 12:53:13.409: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:53:13.41
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:53:13.425
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:53:13.428
  STEP: creating a Service @ 04/27/24 12:53:13.436
  STEP: watching for the Service to be added @ 04/27/24 12:53:13.452
  Apr 27 12:53:13.454: INFO: Found Service test-service-szgzm in namespace services-4208 with labels: map[test-service-static:true] & ports [{http TCP <nil> 80 {0 80 } 30832}]
  Apr 27 12:53:13.454: INFO: Service test-service-szgzm created
  STEP: Getting /status @ 04/27/24 12:53:13.454
  Apr 27 12:53:13.458: INFO: Service test-service-szgzm has LoadBalancer: {[]}
  STEP: patching the ServiceStatus @ 04/27/24 12:53:13.458
  STEP: watching for the Service to be patched @ 04/27/24 12:53:13.465
  Apr 27 12:53:13.467: INFO: observed Service test-service-szgzm in namespace services-4208 with annotations: map[] & LoadBalancer: {[]}
  Apr 27 12:53:13.467: INFO: Found Service test-service-szgzm in namespace services-4208 with annotations: map[patchedstatus:true] & LoadBalancer: {[{203.0.113.1  <nil> []}]}
  Apr 27 12:53:13.467: INFO: Service test-service-szgzm has service status patched
  STEP: updating the ServiceStatus @ 04/27/24 12:53:13.467
  Apr 27 12:53:13.479: INFO: updatedStatus.Conditions: []v1.Condition{v1.Condition{Type:"StatusUpdate", Status:"True", ObservedGeneration:0, LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Service to be updated @ 04/27/24 12:53:13.479
  Apr 27 12:53:13.480: INFO: Observed Service test-service-szgzm in namespace services-4208 with annotations: map[] & Conditions: {[]}
  Apr 27 12:53:13.480: INFO: Observed event: &Service{ObjectMeta:{test-service-szgzm  services-4208  9b274e65-0cef-42d6-a674-d993bf3a1997 16654 0 2024-04-27 12:53:13 +0000 UTC <nil> <nil> map[test-service-static:true] map[patchedstatus:true] [] [] [{e2e.test Update v1 2024-04-27 12:53:13 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:test-service-static":{}}},"f:spec":{"f:allocateLoadBalancerNodePorts":{},"f:externalTrafficPolicy":{},"f:internalTrafficPolicy":{},"f:loadBalancerClass":{},"f:ports":{".":{},"k:{\"port\":80,\"protocol\":\"TCP\"}":{".":{},"f:name":{},"f:port":{},"f:protocol":{},"f:targetPort":{}}},"f:sessionAffinity":{},"f:type":{}}} } {e2e.test Update v1 2024-04-27 12:53:13 +0000 UTC FieldsV1 {"f:metadata":{"f:annotations":{".":{},"f:patchedstatus":{}}},"f:status":{"f:loadBalancer":{"f:ingress":{}}}} status}]},Spec:ServiceSpec{Ports:[]ServicePort{ServicePort{Name:http,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:30832,AppProtocol:nil,},},Selector:map[string]string{},ClusterIP:10.152.183.176,Type:LoadBalancer,ExternalIPs:[],SessionAffinity:None,LoadBalancerIP:,LoadBalancerSourceRanges:[],ExternalName:,ExternalTrafficPolicy:Cluster,HealthCheckNodePort:0,PublishNotReadyAddresses:false,SessionAffinityConfig:nil,IPFamilyPolicy:*SingleStack,ClusterIPs:[10.152.183.176],IPFamilies:[IPv4],AllocateLoadBalancerNodePorts:*true,LoadBalancerClass:*example.com/internal-vip,InternalTrafficPolicy:*Cluster,},Status:ServiceStatus{LoadBalancer:LoadBalancerStatus{Ingress:[]LoadBalancerIngress{LoadBalancerIngress{IP:203.0.113.1,Hostname:,IPMode:nil,Ports:[]PortStatus{},},},},Conditions:[]Condition{},},}
  Apr 27 12:53:13.481: INFO: Found Service test-service-szgzm in namespace services-4208 with annotations: map[patchedstatus:true] & Conditions: [{StatusUpdate True 0 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Apr 27 12:53:13.481: INFO: Service test-service-szgzm has service status updated
  STEP: patching the service @ 04/27/24 12:53:13.481
  STEP: watching for the Service to be patched @ 04/27/24 12:53:13.491
  Apr 27 12:53:13.493: INFO: observed Service test-service-szgzm in namespace services-4208 with labels: map[test-service-static:true]
  Apr 27 12:53:13.493: INFO: observed Service test-service-szgzm in namespace services-4208 with labels: map[test-service-static:true]
  Apr 27 12:53:13.493: INFO: observed Service test-service-szgzm in namespace services-4208 with labels: map[test-service-static:true]
  Apr 27 12:53:13.493: INFO: Found Service test-service-szgzm in namespace services-4208 with labels: map[test-service:patched test-service-static:true]
  Apr 27 12:53:13.493: INFO: Service test-service-szgzm patched
  STEP: deleting the service @ 04/27/24 12:53:13.493
  STEP: watching for the Service to be deleted @ 04/27/24 12:53:13.517
  Apr 27 12:53:13.519: INFO: Observed event: ADDED
  Apr 27 12:53:13.519: INFO: Observed event: MODIFIED
  Apr 27 12:53:13.519: INFO: Observed event: MODIFIED
  Apr 27 12:53:13.519: INFO: Observed event: MODIFIED
  Apr 27 12:53:13.519: INFO: Found Service test-service-szgzm in namespace services-4208 with labels: map[test-service:patched test-service-static:true] & annotations: map[patchedstatus:true]
  Apr 27 12:53:13.519: INFO: Service test-service-szgzm deleted
  Apr 27 12:53:13.520: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4208" for this suite. @ 04/27/24 12:53:13.524
• [0.124 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] Deployment should validate Deployment Status endpoints [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:489
  STEP: Creating a kubernetes client @ 04/27/24 12:53:13.533
  Apr 27 12:53:13.533: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename deployment @ 04/27/24 12:53:13.534
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:53:13.553
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:53:13.559
  STEP: creating a Deployment @ 04/27/24 12:53:13.573
  Apr 27 12:53:13.573: INFO: Creating simple deployment test-deployment-h2v5t
  Apr 27 12:53:13.595: INFO: deployment "test-deployment-h2v5t" doesn't have the required revision set
  STEP: Getting /status @ 04/27/24 12:53:15.615
  Apr 27 12:53:15.619: INFO: Deployment test-deployment-h2v5t has Conditions: [{Available True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:14 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.} {Progressing True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:13 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-h2v5t-5d576bd769" has successfully progressed.}]
  STEP: updating Deployment Status @ 04/27/24 12:53:15.619
  Apr 27 12:53:15.632: INFO: updatedStatus.Conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 12, 53, 14, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 12, 53, 14, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 12, 53, 14, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 12, 53, 13, 0, time.Local), Reason:"NewReplicaSetAvailable", Message:"ReplicaSet \"test-deployment-h2v5t-5d576bd769\" has successfully progressed."}, v1.DeploymentCondition{Type:"StatusUpdate", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Deployment status to be updated @ 04/27/24 12:53:15.632
  Apr 27 12:53:15.634: INFO: Observed &Deployment event: ADDED
  Apr 27 12:53:15.634: INFO: Observed Deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-h2v5t-5d576bd769"}
  Apr 27 12:53:15.634: INFO: Observed &Deployment event: MODIFIED
  Apr 27 12:53:15.634: INFO: Observed Deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-h2v5t-5d576bd769"}
  Apr 27 12:53:15.634: INFO: Observed Deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Apr 27 12:53:15.635: INFO: Observed &Deployment event: MODIFIED
  Apr 27 12:53:15.635: INFO: Observed Deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Apr 27 12:53:15.635: INFO: Observed Deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-h2v5t-5d576bd769" is progressing.}
  Apr 27 12:53:15.635: INFO: Observed &Deployment event: MODIFIED
  Apr 27 12:53:15.635: INFO: Observed Deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:14 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Apr 27 12:53:15.635: INFO: Observed Deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:13 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-h2v5t-5d576bd769" has successfully progressed.}
  Apr 27 12:53:15.635: INFO: Observed &Deployment event: MODIFIED
  Apr 27 12:53:15.635: INFO: Observed Deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:14 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Apr 27 12:53:15.635: INFO: Observed Deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:13 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-h2v5t-5d576bd769" has successfully progressed.}
  Apr 27 12:53:15.635: INFO: Found Deployment test-deployment-h2v5t in namespace deployment-3614 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 27 12:53:15.635: INFO: Deployment test-deployment-h2v5t has an updated status
  STEP: patching the Statefulset Status @ 04/27/24 12:53:15.635
  Apr 27 12:53:15.635: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Apr 27 12:53:15.642: INFO: Patched status conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"StatusPatched", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Deployment status to be patched @ 04/27/24 12:53:15.642
  Apr 27 12:53:15.644: INFO: Observed &Deployment event: ADDED
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-h2v5t-5d576bd769"}
  Apr 27 12:53:15.644: INFO: Observed &Deployment event: MODIFIED
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-h2v5t-5d576bd769"}
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Apr 27 12:53:15.644: INFO: Observed &Deployment event: MODIFIED
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:13 +0000 UTC 2024-04-27 12:53:13 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-h2v5t-5d576bd769" is progressing.}
  Apr 27 12:53:15.644: INFO: Observed &Deployment event: MODIFIED
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:14 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:13 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-h2v5t-5d576bd769" has successfully progressed.}
  Apr 27 12:53:15.644: INFO: Observed &Deployment event: MODIFIED
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:14 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-27 12:53:14 +0000 UTC 2024-04-27 12:53:13 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-h2v5t-5d576bd769" has successfully progressed.}
  Apr 27 12:53:15.644: INFO: Observed deployment test-deployment-h2v5t in namespace deployment-3614 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 27 12:53:15.645: INFO: Observed &Deployment event: MODIFIED
  Apr 27 12:53:15.645: INFO: Found deployment test-deployment-h2v5t in namespace deployment-3614 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC  }
  Apr 27 12:53:15.645: INFO: Deployment test-deployment-h2v5t has a patched status
  Apr 27 12:53:15.650: INFO: Deployment "test-deployment-h2v5t":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=21) "test-deployment-h2v5t",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3614",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1c4d7f98-b902-4895-8b76-48acca92ecac",
      ResourceVersion: (string) (len=5) "16697",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849819193,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819193,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=657) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              00000030  6e 61 6d 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |name":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  70 72 6f 67 72 65 73 73  |ec":{"f:progress|
              00000050  44 65 61 64 6c 69 6e 65  53 65 63 6f 6e 64 73 22  |DeadlineSeconds"|
              00000060  3a 7b 7d 2c 22 66 3a 72  65 70 6c 69 63 61 73 22  |:{},"f:replicas"|
              00000070  3a 7b 7d 2c 22 66 3a 72  65 76 69 73 69 6f 6e 48  |:{},"f:revisionH|
              00000080  69 73 74 6f 72 79 4c 69  6d 69 74 22 3a 7b 7d 2c  |istoryLimit":{},|
              00000090  22 66 3a 73 65 6c 65 63  74 6f 72 22 3a 7b 7d 2c  |"f:selector":{},|
              000000a0  22 66 3a 73 74 72 61 74  65 67 79 22 3a 7b 22 66  |"f:strategy":{"f|
              000000b0  3a 72 6f 6c 6c 69 6e 67  55 70 64 61 74 65 22 3a  |:rollingUpdate":|
              000000c0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6d 61 78 53 75  |{".":{},"f:maxSu|
              000000d0  72 67 65 22 3a 7b 7d 2c  22 66 3a 6d 61 78 55 6e  |rge":{},"f:maxUn|
              000000e0  61 76 61 69 6c 61 62 6c  65 22 3a 7b 7d 7d 2c 22  |available":{}},"|
              000000f0  66 3a 74 79 70 65 22 3a  7b 7d 7d 2c 22 66 3a 74  |f:type":{}},"f:t|
              00000100  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000110  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              00000120  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 65 32  |s":{".":{},"f:e2|
              00000130  65 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |e":{},"f:name":{|
              00000140  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              00000150  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000160  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              00000170  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              00000180  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000190  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              000001a0  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              000001b0  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              000001c0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000001d0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000001e0  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000210  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000220  69 63 79 22 3a 7b 7d 2c  22 66 3a 72 65 73 74 61  |icy":{},"f:resta|
              00000230  72 74 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |rtPolicy":{},"f:|
              00000240  73 63 68 65 64 75 6c 65  72 4e 61 6d 65 22 3a 7b  |schedulerName":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 47  72 61 63 65 50 65 72 69  |inationGracePeri|
              00000280  6f 64 53 65 63 6f 6e 64  73 22 3a 7b 7d 7d 7d 7d  |odSeconds":{}}}}|
              00000290  7d                                                |}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819195,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=147) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 53 74 61 74  |{\"type\":\"Stat|
              00000030  75 73 50 61 74 63 68 65  64 5c 22 7d 22 3a 7b 22  |usPatched\"}":{"|
              00000040  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |.":{},"f:lastTra|
              00000050  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000060  22 66 3a 6c 61 73 74 55  70 64 61 74 65 54 69 6d  |"f:lastUpdateTim|
              00000070  65 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |e":{},"f:status"|
              00000080  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000090  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819195,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=373) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 50 72 6f  |:{\"type\":\"Pro|
              000000a0  67 72 65 73 73 69 6e 67  5c 22 7d 22 3a 7b 22 2e  |gressing\"}":{".|
              000000b0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000000c0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000000d0  66 3a 6c 61 73 74 55 70  64 61 74 65 54 69 6d 65  |f:lastUpdateTime|
              000000e0  22 3a 7b 7d 2c 22 66 3a  6d 65 73 73 61 67 65 22  |":{},"f:message"|
              000000f0  3a 7b 7d 2c 22 66 3a 72  65 61 73 6f 6e 22 3a 7b  |:{},"f:reason":{|
              00000100  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              00000110  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              00000120  3a 6f 62 73 65 72 76 65  64 47 65 6e 65 72 61 74  |:observedGenerat|
              00000130  69 6f 6e 22 3a 7b 7d 2c  22 66 3a 72 65 61 64 79  |ion":{},"f:ready|
              00000140  52 65 70 6c 69 63 61 73  22 3a 7b 7d 2c 22 66 3a  |Replicas":{},"f:|
              00000150  72 65 70 6c 69 63 61 73  22 3a 7b 7d 2c 22 66 3a  |replicas":{},"f:|
              00000160  75 70 64 61 74 65 64 52  65 70 6c 69 63 61 73 22  |updatedReplicas"|
              00000170  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=3) "e2e": (string) (len=7) "testing"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=13) "StatusPatched",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819195,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819195,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "FoundNewReplicaSet",
          Message: (string) (len=56) "Found new replica set \"test-deployment-h2v5t-5d576bd769\""
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 27 12:53:15.657: INFO: New ReplicaSet "test-deployment-h2v5t-5d576bd769" of Deployment "test-deployment-h2v5t":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-h2v5t-5d576bd769",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3614",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b5d4d555-0976-44bb-bfdb-148466cf15ae",
      ResourceVersion: (string) (len=5) "16691",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849819193,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=21) "test-deployment-h2v5t",
          UID: (types.UID) (len=36) "1c4d7f98-b902-4895-8b76-48acca92ecac",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819193,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=803) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              000000d0  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 70 6f 64 2d  |name":{},"f:pod-|
              000000e0  74 65 6d 70 6c 61 74 65  2d 68 61 73 68 22 3a 7b  |template-hash":{|
              000000f0  7d 7d 2c 22 66 3a 6f 77  6e 65 72 52 65 66 65 72  |}},"f:ownerRefer|
              00000100  65 6e 63 65 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |ences":{".":{},"|
              00000110  6b 3a 7b 5c 22 75 69 64  5c 22 3a 5c 22 31 63 34  |k:{\"uid\":\"1c4|
              00000120  64 37 66 39 38 2d 62 39  30 32 2d 34 38 39 35 2d  |d7f98-b902-4895-|
              00000130  38 62 37 36 2d 34 38 61  63 63 61 39 32 65 63 61  |8b76-48acca92eca|
              00000140  63 5c 22 7d 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |c\"}":{}}},"f:sp|
              00000150  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000160  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000180  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000190  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              000001a0  3a 7b 7d 2c 22 66 3a 65  32 65 22 3a 7b 7d 2c 22  |:{},"f:e2e":{},"|
              000001b0  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 70 6f  |f:name":{},"f:po|
              000001c0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001d0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000001e0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000001f0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              00000200  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              00000210  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000220  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000230  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000240  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000280  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000290  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              000002a0  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              000002b0  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              000002c0  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              000002d0  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000002e0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000002f0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              00000300  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              00000310  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              00000320  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819194,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=3) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=3) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769",
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 12:53:15.665: INFO: Pod "test-deployment-h2v5t-5d576bd769-mnrsf" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=38) "test-deployment-h2v5t-5d576bd769-mnrsf",
      GenerateName: (string) (len=33) "test-deployment-h2v5t-5d576bd769-",
      Namespace: (string) (len=15) "deployment-3614",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "641c0f72-0cc1-4242-b3b2-076edd4e080b",
      ResourceVersion: (string) (len=5) "16690",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849819193,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=32) "test-deployment-h2v5t-5d576bd769",
          UID: (types.UID) (len=36) "b5d4d555-0976-44bb-bfdb-148466cf15ae",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819193,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=548) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 65 32 65 22 3a 7b 7d  |.":{},"f:e2e":{}|
              00000040  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000050  70 6f 64 2d 74 65 6d 70  6c 61 74 65 2d 68 61 73  |pod-template-has|
              00000060  68 22 3a 7b 7d 7d 2c 22  66 3a 6f 77 6e 65 72 52  |h":{}},"f:ownerR|
              00000070  65 66 65 72 65 6e 63 65  73 22 3a 7b 22 2e 22 3a  |eferences":{".":|
              00000080  7b 7d 2c 22 6b 3a 7b 5c  22 75 69 64 5c 22 3a 5c  |{},"k:{\"uid\":\|
              00000090  22 62 35 64 34 64 35 35  35 2d 30 39 37 36 2d 34  |"b5d4d555-0976-4|
              000000a0  34 62 62 2d 62 66 64 62  2d 31 34 38 34 36 36 63  |4bb-bfdb-148466c|
              000000b0  66 31 35 61 65 5c 22 7d  22 3a 7b 7d 7d 7d 2c 22  |f15ae\"}":{}}},"|
              000000c0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000d0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              000000e0  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              000000f0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000100  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000110  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000120  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000130  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 73 65  |ources":{},"f:se|
              00000140  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000150  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000160  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000170  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000180  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000190  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              000001a0  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              000001b0  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              000001c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000200  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000210  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000220  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819194,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=664) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 31 37  32 2e 32 35 34 5c 22 7d  |2.168.172.254\"}|
              00000270  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              00000280  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000290  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-kkhqk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-kkhqk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819194,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819193,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819194,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819194,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819193,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) (len=15) "192.168.172.254",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.172.254"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849819193,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849819194,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://5349210fdcc537c0fdba61d0bc350ac8ea858814f4379845c28abae23687d8d4",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 12:53:15.667: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-3614" for this suite. @ 04/27/24 12:53:15.671
• [2.146 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance] [sig-apps, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:836
  STEP: Creating a kubernetes client @ 04/27/24 12:53:15.68
  Apr 27 12:53:15.680: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename daemonsets @ 04/27/24 12:53:15.681
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:53:15.698
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:53:15.702
  STEP: Creating simple DaemonSet "daemon-set" @ 04/27/24 12:53:15.727
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/27/24 12:53:15.734
  Apr 27 12:53:15.740: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 12:53:15.740: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 12:53:15.745: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 12:53:15.745: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 12:53:16.740: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 12:53:16.741: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 12:53:16.746: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 27 12:53:16.746: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 12:53:17.740: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 12:53:17.741: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 12:53:17.745: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Apr 27 12:53:17.745: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: listing all DaemonSets @ 04/27/24 12:53:17.75
  STEP: DeleteCollection of the DaemonSets @ 04/27/24 12:53:17.755
  STEP: Verify that ReplicaSets have been deleted @ 04/27/24 12:53:17.765
  Apr 27 12:53:17.782: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"16759"},"items":null}

  Apr 27 12:53:17.789: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"16759"},"items":[{"metadata":{"name":"daemon-set-jp6dq","generateName":"daemon-set-","namespace":"daemonsets-422","uid":"603504c2-d1c3-4aa8-9aee-33cab83c56f4","resourceVersion":"16758","creationTimestamp":"2024-04-27T12:53:15Z","deletionTimestamp":"2024-04-27T12:53:47Z","deletionGracePeriodSeconds":30,"labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"bcca4409-af28-4a41-a047-2f971395a868","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2024-04-27T12:53:15Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"bcca4409-af28-4a41-a047-2f971395a868\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-04-27T12:53:17Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"192.168.172.204\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-xmvj7","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-xmvj7","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"ip-172-31-82-63","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["ip-172-31-82-63"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:17Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:15Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:17Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:17Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:15Z"}],"hostIP":"172.31.82.63","hostIPs":[{"ip":"172.31.82.63"}],"podIP":"192.168.172.204","podIPs":[{"ip":"192.168.172.204"}],"startTime":"2024-04-27T12:53:15Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2024-04-27T12:53:16Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://4b535b22b50be56b8df096600e305045b7a92882f6e2b1868ad68217342be0c7","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-nrszd","generateName":"daemon-set-","namespace":"daemonsets-422","uid":"df3b29be-f5f8-4c92-9270-0d48a89c6b20","resourceVersion":"16757","creationTimestamp":"2024-04-27T12:53:15Z","deletionTimestamp":"2024-04-27T12:53:47Z","deletionGracePeriodSeconds":30,"labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"bcca4409-af28-4a41-a047-2f971395a868","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2024-04-27T12:53:15Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"bcca4409-af28-4a41-a047-2f971395a868\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-04-27T12:53:17Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"192.168.69.137\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-jvjv4","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-jvjv4","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"ip-172-31-37-185","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["ip-172-31-37-185"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:17Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:15Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:17Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:17Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:15Z"}],"hostIP":"172.31.37.185","hostIPs":[{"ip":"172.31.37.185"}],"podIP":"192.168.69.137","podIPs":[{"ip":"192.168.69.137"}],"startTime":"2024-04-27T12:53:15Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2024-04-27T12:53:16Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://73760c30bda8bf86bd05feb873c72dcf87996d8bcb99bed1d3f0cedb5bbb5cd0","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-zvlfx","generateName":"daemon-set-","namespace":"daemonsets-422","uid":"6917519d-cb17-4bf4-a6d7-c1eb99e56b7e","resourceVersion":"16745","creationTimestamp":"2024-04-27T12:53:15Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"bcca4409-af28-4a41-a047-2f971395a868","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2024-04-27T12:53:15Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"bcca4409-af28-4a41-a047-2f971395a868\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-04-27T12:53:16Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"192.168.96.172\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-rvt4w","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-rvt4w","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"ip-172-31-6-153","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["ip-172-31-6-153"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:16Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:15Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:16Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:16Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-27T12:53:15Z"}],"hostIP":"172.31.6.153","hostIPs":[{"ip":"172.31.6.153"}],"podIP":"192.168.96.172","podIPs":[{"ip":"192.168.96.172"}],"startTime":"2024-04-27T12:53:15Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2024-04-27T12:53:16Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://b2fcee178d1fd1fb749befe0cbf6706054409df213d495129264878c7e2c223a","started":true}],"qosClass":"BestEffort"}}]}

  Apr 27 12:53:17.808: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-422" for this suite. @ 04/27/24 12:53:17.812
• [2.140 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] server version should find the server version [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/server_version.go:41
  STEP: Creating a kubernetes client @ 04/27/24 12:53:17.82
  Apr 27 12:53:17.820: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename server-version @ 04/27/24 12:53:17.821
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:53:17.837
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:53:17.84
  STEP: Request ServerVersion @ 04/27/24 12:53:17.844
  STEP: Confirm major version @ 04/27/24 12:53:17.846
  Apr 27 12:53:17.846: INFO: Major version: 1
  STEP: Confirm minor version @ 04/27/24 12:53:17.846
  Apr 27 12:53:17.846: INFO: cleanMinorVersion: 29
  Apr 27 12:53:17.846: INFO: Minor version: 29
  Apr 27 12:53:17.846: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "server-version-7645" for this suite. @ 04/27/24 12:53:17.85
• [0.037 seconds]
------------------------------
SSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance] [sig-scheduling, Serial, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/preemption.go:224
  STEP: Creating a kubernetes client @ 04/27/24 12:53:17.858
  Apr 27 12:53:17.858: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-preemption @ 04/27/24 12:53:17.858
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:53:17.874
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:53:17.88
  Apr 27 12:53:17.900: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 27 12:54:17.907: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 04/27/24 12:54:17.912
  Apr 27 12:54:17.939: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Apr 27 12:54:17.947: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Apr 27 12:54:17.965: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Apr 27 12:54:17.975: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  Apr 27 12:54:18.000: INFO: Created pod: pod2-0-sched-preemption-medium-priority
  Apr 27 12:54:18.015: INFO: Created pod: pod2-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 04/27/24 12:54:18.015
  STEP: Run a critical pod that use same resources as that of a lower priority pod @ 04/27/24 12:54:20.051
  Apr 27 12:54:24.171: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-3982" for this suite. @ 04/27/24 12:54:24.175
• [66.325 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:47
  STEP: Creating a kubernetes client @ 04/27/24 12:54:24.183
  Apr 27 12:54:24.183: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename var-expansion @ 04/27/24 12:54:24.184
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:54:24.201
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:54:24.205
  STEP: Creating a pod to test env composition @ 04/27/24 12:54:24.209
  STEP: Saw pod success @ 04/27/24 12:54:28.239
  Apr 27 12:54:28.243: INFO: Trying to get logs from node ip-172-31-82-63 pod var-expansion-02d3accc-bf7b-456d-95d5-1765e53d4c11 container dapi-container: <nil>
  STEP: delete the pod @ 04/27/24 12:54:28.251
  Apr 27 12:54:28.270: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-796" for this suite. @ 04/27/24 12:54:28.275
• [4.100 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance] [sig-architecture, Conformance]
k8s.io/kubernetes/test/e2e/architecture/conformance.go:39
  STEP: Creating a kubernetes client @ 04/27/24 12:54:28.284
  Apr 27 12:54:28.284: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename conformance-tests @ 04/27/24 12:54:28.284
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:54:28.304
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:54:28.308
  STEP: Getting node addresses @ 04/27/24 12:54:28.311
  Apr 27 12:54:28.312: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  Apr 27 12:54:28.319: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "conformance-tests-1445" for this suite. @ 04/27/24 12:54:28.324
• [0.049 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:1015
  STEP: Creating a kubernetes client @ 04/27/24 12:54:28.333
  Apr 27 12:54:28.333: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 12:54:28.334
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:54:28.35
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:54:28.354
  STEP: Creating resourceQuota "e2e-rq-status-c7n75" @ 04/27/24 12:54:28.361
  Apr 27 12:54:28.370: INFO: Resource quota "e2e-rq-status-c7n75" reports spec: hard cpu limit of 500m
  Apr 27 12:54:28.370: INFO: Resource quota "e2e-rq-status-c7n75" reports spec: hard memory limit of 500Mi
  STEP: Updating resourceQuota "e2e-rq-status-c7n75" /status @ 04/27/24 12:54:28.37
  STEP: Confirm /status for "e2e-rq-status-c7n75" resourceQuota via watch @ 04/27/24 12:54:28.38
  Apr 27 12:54:28.381: INFO: observed resourceQuota "e2e-rq-status-c7n75" in namespace "resourcequota-626" with hard status: v1.ResourceList(nil)
  Apr 27 12:54:28.381: INFO: Found resourceQuota "e2e-rq-status-c7n75" in namespace "resourcequota-626" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Apr 27 12:54:28.381: INFO: ResourceQuota "e2e-rq-status-c7n75" /status was updated
  STEP: Patching hard spec values for cpu & memory @ 04/27/24 12:54:28.386
  Apr 27 12:54:28.392: INFO: Resource quota "e2e-rq-status-c7n75" reports spec: hard cpu limit of 1
  Apr 27 12:54:28.392: INFO: Resource quota "e2e-rq-status-c7n75" reports spec: hard memory limit of 1Gi
  STEP: Patching "e2e-rq-status-c7n75" /status @ 04/27/24 12:54:28.392
  STEP: Confirm /status for "e2e-rq-status-c7n75" resourceQuota via watch @ 04/27/24 12:54:28.398
  Apr 27 12:54:28.400: INFO: observed resourceQuota "e2e-rq-status-c7n75" in namespace "resourcequota-626" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Apr 27 12:54:28.400: INFO: Found resourceQuota "e2e-rq-status-c7n75" in namespace "resourcequota-626" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}
  Apr 27 12:54:28.400: INFO: ResourceQuota "e2e-rq-status-c7n75" /status was patched
  STEP: Get "e2e-rq-status-c7n75" /status @ 04/27/24 12:54:28.4
  Apr 27 12:54:28.404: INFO: Resourcequota "e2e-rq-status-c7n75" reports status: hard cpu of 1
  Apr 27 12:54:28.404: INFO: Resourcequota "e2e-rq-status-c7n75" reports status: hard memory of 1Gi
  STEP: Repatching "e2e-rq-status-c7n75" /status before checking Spec is unchanged @ 04/27/24 12:54:28.408
  Apr 27 12:54:28.418: INFO: Resourcequota "e2e-rq-status-c7n75" reports status: hard cpu of 2
  Apr 27 12:54:28.418: INFO: Resourcequota "e2e-rq-status-c7n75" reports status: hard memory of 2Gi
  Apr 27 12:54:28.420: INFO: observed resourceQuota "e2e-rq-status-c7n75" in namespace "resourcequota-626" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}
  Apr 27 12:54:28.420: INFO: Found resourceQuota "e2e-rq-status-c7n75" in namespace "resourcequota-626" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}
  Apr 27 12:54:28.424: INFO: ResourceQuota "e2e-rq-status-c7n75" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-c7n75", GenerateName:"", Namespace:"resourcequota-626", SelfLink:"", UID:"87e57876-3596-4b1a-ad00-4eb285cf8137", ResourceVersion:"17141", Generation:0, CreationTimestamp:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-c7n75"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000962ee8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000962f18), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000962f60), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  Apr 27 12:54:33.425: INFO: ResourceQuota "e2e-rq-status-c7n75" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-c7n75", GenerateName:"", Namespace:"resourcequota-626", SelfLink:"", UID:"87e57876-3596-4b1a-ad00-4eb285cf8137", ResourceVersion:"17141", Generation:0, CreationTimestamp:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-c7n75"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000963200), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000963230), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000963260), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  Apr 27 12:54:38.427: INFO: ResourceQuota "e2e-rq-status-c7n75" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-c7n75", GenerateName:"", Namespace:"resourcequota-626", SelfLink:"", UID:"87e57876-3596-4b1a-ad00-4eb285cf8137", ResourceVersion:"17141", Generation:0, CreationTimestamp:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-c7n75"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000963530), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000963590), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0009635d8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  Apr 27 12:54:43.427: INFO: ResourceQuota "e2e-rq-status-c7n75" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-c7n75", GenerateName:"", Namespace:"resourcequota-626", SelfLink:"", UID:"87e57876-3596-4b1a-ad00-4eb285cf8137", ResourceVersion:"17141", Generation:0, CreationTimestamp:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-c7n75"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0009637a0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0009637d0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000963848), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  Apr 27 12:54:48.427: INFO: ResourceQuota "e2e-rq-status-c7n75" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-c7n75", GenerateName:"", Namespace:"resourcequota-626", SelfLink:"", UID:"87e57876-3596-4b1a-ad00-4eb285cf8137", ResourceVersion:"17141", Generation:0, CreationTimestamp:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-c7n75"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000ea3368), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000ea33c8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 12, 54, 28, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000ea3428), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  Apr 27 12:54:53.427: INFO: ResourceQuota "e2e-rq-status-c7n75" Spec was unchanged and /status reset
  Apr 27 12:54:53.427: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-626" for this suite. @ 04/27/24 12:54:53.432
• [25.107 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:195
  STEP: Creating a kubernetes client @ 04/27/24 12:54:53.441
  Apr 27 12:54:53.441: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:54:53.441
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:54:53.461
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:54:53.464
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 12:54:53.468
  STEP: Saw pod success @ 04/27/24 12:54:57.504
  Apr 27 12:54:57.509: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-e19ff9d0-7184-4fc7-8d7c-f67c556f8c85 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 12:54:57.516
  Apr 27 12:54:57.537: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7299" for this suite. @ 04/27/24 12:54:57.541
• [4.109 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:902
  STEP: Creating a kubernetes client @ 04/27/24 12:54:57.55
  Apr 27 12:54:57.550: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename statefulset @ 04/27/24 12:54:57.55
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:54:57.568
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:54:57.571
  STEP: Creating service test in namespace statefulset-9322 @ 04/27/24 12:54:57.575
  STEP: Creating statefulset ss in namespace statefulset-9322 @ 04/27/24 12:54:57.581
  Apr 27 12:54:57.592: INFO: Found 0 stateful pods, waiting for 1
  Apr 27 12:55:07.594: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: getting scale subresource @ 04/27/24 12:55:07.604
  STEP: updating a scale subresource @ 04/27/24 12:55:07.608
  STEP: verifying the statefulset Spec.Replicas was modified @ 04/27/24 12:55:07.615
  STEP: Patch a scale subresource @ 04/27/24 12:55:07.619
  STEP: verifying the statefulset Spec.Replicas was modified @ 04/27/24 12:55:07.629
  Apr 27 12:55:07.635: INFO: Deleting all statefulset in ns statefulset-9322
  Apr 27 12:55:07.640: INFO: Scaling statefulset ss to 0
  Apr 27 12:55:17.658: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 27 12:55:17.662: INFO: Deleting statefulset ss
  Apr 27 12:55:17.678: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-9322" for this suite. @ 04/27/24 12:55:17.683
• [20.142 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] IngressClass API should support creating IngressClass API operations [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/ingressclass.go:268
  STEP: Creating a kubernetes client @ 04/27/24 12:55:17.692
  Apr 27 12:55:17.692: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename ingressclass @ 04/27/24 12:55:17.693
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:55:17.709
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:55:17.714
  STEP: getting /apis @ 04/27/24 12:55:17.718
  STEP: getting /apis/networking.k8s.io @ 04/27/24 12:55:17.722
  STEP: getting /apis/networking.k8s.iov1 @ 04/27/24 12:55:17.723
  STEP: creating @ 04/27/24 12:55:17.724
  STEP: getting @ 04/27/24 12:55:17.742
  STEP: listing @ 04/27/24 12:55:17.746
  STEP: watching @ 04/27/24 12:55:17.75
  Apr 27 12:55:17.750: INFO: starting watch
  STEP: patching @ 04/27/24 12:55:17.752
  STEP: updating @ 04/27/24 12:55:17.757
  Apr 27 12:55:17.763: INFO: waiting for watch events with expected annotations
  Apr 27 12:55:17.763: INFO: saw patched and updated annotations
  STEP: deleting @ 04/27/24 12:55:17.764
  STEP: deleting a collection @ 04/27/24 12:55:17.778
  Apr 27 12:55:17.797: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingressclass-184" for this suite. @ 04/27/24 12:55:17.801
• [0.117 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:79
  STEP: Creating a kubernetes client @ 04/27/24 12:55:17.81
  Apr 27 12:55:17.810: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 12:55:17.811
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:55:17.829
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:55:17.832
  STEP: Creating secret with name secret-test-map-d9372561-76b4-4db4-a092-9fe6052fbe16 @ 04/27/24 12:55:17.838
  STEP: Creating a pod to test consume secrets @ 04/27/24 12:55:17.843
  STEP: Saw pod success @ 04/27/24 12:55:19.865
  Apr 27 12:55:19.869: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-secrets-15fc9247-5655-4a13-9baf-bf3ba4f6c742 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 12:55:19.881
  Apr 27 12:55:19.901: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-1089" for this suite. @ 04/27/24 12:55:19.905
• [2.103 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:177
  STEP: Creating a kubernetes client @ 04/27/24 12:55:19.914
  Apr 27 12:55:19.914: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replicaset @ 04/27/24 12:55:19.915
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:55:19.932
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:55:19.936
  STEP: Create a Replicaset @ 04/27/24 12:55:19.944
  STEP: Verify that the required pods have come up. @ 04/27/24 12:55:19.949
  Apr 27 12:55:19.953: INFO: Pod name sample-pod: Found 0 pods out of 1
  Apr 27 12:55:24.960: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/27/24 12:55:24.96
  STEP: Getting /status @ 04/27/24 12:55:24.96
  Apr 27 12:55:24.964: INFO: Replicaset test-rs has Conditions: []
  STEP: updating the Replicaset Status @ 04/27/24 12:55:24.964
  Apr 27 12:55:24.975: INFO: updatedStatus.Conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the ReplicaSet status to be updated @ 04/27/24 12:55:24.975
  Apr 27 12:55:24.976: INFO: Observed &ReplicaSet event: ADDED
  Apr 27 12:55:24.977: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 27 12:55:24.977: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 27 12:55:24.977: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 27 12:55:24.977: INFO: Found replicaset test-rs in namespace replicaset-6380 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Apr 27 12:55:24.977: INFO: Replicaset test-rs has an updated status
  STEP: patching the Replicaset Status @ 04/27/24 12:55:24.977
  Apr 27 12:55:24.977: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Apr 27 12:55:24.983: INFO: Patched status conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Replicaset status to be patched @ 04/27/24 12:55:24.983
  Apr 27 12:55:24.985: INFO: Observed &ReplicaSet event: ADDED
  Apr 27 12:55:24.985: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 27 12:55:24.985: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 27 12:55:24.985: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 27 12:55:24.985: INFO: Observed replicaset test-rs in namespace replicaset-6380 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 27 12:55:24.985: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 27 12:55:24.985: INFO: Found replicaset test-rs in namespace replicaset-6380 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }
  Apr 27 12:55:24.985: INFO: Replicaset test-rs has a patched status
  Apr 27 12:55:24.986: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-6380" for this suite. @ 04/27/24 12:55:24.99
• [5.084 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:380
  STEP: Creating a kubernetes client @ 04/27/24 12:55:24.998
  Apr 27 12:55:24.998: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename gc @ 04/27/24 12:55:24.999
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:55:25.015
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:55:25.02
  STEP: create the rc @ 04/27/24 12:55:25.034
  W0427 12:55:25.042945      19 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 04/27/24 12:55:31.048
  STEP: wait for the rc to be deleted @ 04/27/24 12:55:31.059
  STEP: wait for 30 seconds to see if the garbage collector mistakenly deletes the pods @ 04/27/24 12:55:36.064
  STEP: Gathering metrics @ 04/27/24 12:56:06.074
  W0427 12:56:06.080187      19 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Apr 27 12:56:06.080: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 27 12:56:06.080: INFO: Deleting pod "simpletest.rc-2vgdw" in namespace "gc-4857"
  Apr 27 12:56:06.093: INFO: Deleting pod "simpletest.rc-488rj" in namespace "gc-4857"
  Apr 27 12:56:06.106: INFO: Deleting pod "simpletest.rc-4l8x7" in namespace "gc-4857"
  Apr 27 12:56:06.118: INFO: Deleting pod "simpletest.rc-4mqjn" in namespace "gc-4857"
  Apr 27 12:56:06.134: INFO: Deleting pod "simpletest.rc-4tbbt" in namespace "gc-4857"
  Apr 27 12:56:06.150: INFO: Deleting pod "simpletest.rc-4w2jk" in namespace "gc-4857"
  Apr 27 12:56:06.167: INFO: Deleting pod "simpletest.rc-4wjjk" in namespace "gc-4857"
  Apr 27 12:56:06.178: INFO: Deleting pod "simpletest.rc-4xrbx" in namespace "gc-4857"
  Apr 27 12:56:06.193: INFO: Deleting pod "simpletest.rc-55t27" in namespace "gc-4857"
  Apr 27 12:56:06.207: INFO: Deleting pod "simpletest.rc-56422" in namespace "gc-4857"
  Apr 27 12:56:06.218: INFO: Deleting pod "simpletest.rc-5ctgm" in namespace "gc-4857"
  Apr 27 12:56:06.231: INFO: Deleting pod "simpletest.rc-665sb" in namespace "gc-4857"
  Apr 27 12:56:06.249: INFO: Deleting pod "simpletest.rc-667ff" in namespace "gc-4857"
  Apr 27 12:56:06.265: INFO: Deleting pod "simpletest.rc-6qqvk" in namespace "gc-4857"
  Apr 27 12:56:06.279: INFO: Deleting pod "simpletest.rc-6r6p5" in namespace "gc-4857"
  Apr 27 12:56:06.296: INFO: Deleting pod "simpletest.rc-6wpjf" in namespace "gc-4857"
  Apr 27 12:56:06.310: INFO: Deleting pod "simpletest.rc-6xfdj" in namespace "gc-4857"
  Apr 27 12:56:06.327: INFO: Deleting pod "simpletest.rc-72vls" in namespace "gc-4857"
  Apr 27 12:56:06.345: INFO: Deleting pod "simpletest.rc-77w9z" in namespace "gc-4857"
  Apr 27 12:56:06.365: INFO: Deleting pod "simpletest.rc-79frd" in namespace "gc-4857"
  Apr 27 12:56:06.380: INFO: Deleting pod "simpletest.rc-7bv26" in namespace "gc-4857"
  Apr 27 12:56:06.393: INFO: Deleting pod "simpletest.rc-7r54m" in namespace "gc-4857"
  Apr 27 12:56:06.405: INFO: Deleting pod "simpletest.rc-7sl4g" in namespace "gc-4857"
  Apr 27 12:56:06.422: INFO: Deleting pod "simpletest.rc-84dkk" in namespace "gc-4857"
  Apr 27 12:56:06.459: INFO: Deleting pod "simpletest.rc-8h7hf" in namespace "gc-4857"
  Apr 27 12:56:06.473: INFO: Deleting pod "simpletest.rc-8kp87" in namespace "gc-4857"
  Apr 27 12:56:06.503: INFO: Deleting pod "simpletest.rc-95jck" in namespace "gc-4857"
  Apr 27 12:56:06.520: INFO: Deleting pod "simpletest.rc-96gp7" in namespace "gc-4857"
  Apr 27 12:56:06.552: INFO: Deleting pod "simpletest.rc-9chxn" in namespace "gc-4857"
  Apr 27 12:56:06.571: INFO: Deleting pod "simpletest.rc-9mn2g" in namespace "gc-4857"
  Apr 27 12:56:06.593: INFO: Deleting pod "simpletest.rc-9q965" in namespace "gc-4857"
  Apr 27 12:56:06.627: INFO: Deleting pod "simpletest.rc-b2cs8" in namespace "gc-4857"
  Apr 27 12:56:06.642: INFO: Deleting pod "simpletest.rc-b8xzg" in namespace "gc-4857"
  Apr 27 12:56:06.658: INFO: Deleting pod "simpletest.rc-bkst4" in namespace "gc-4857"
  Apr 27 12:56:06.696: INFO: Deleting pod "simpletest.rc-brl4l" in namespace "gc-4857"
  Apr 27 12:56:06.720: INFO: Deleting pod "simpletest.rc-bv64m" in namespace "gc-4857"
  Apr 27 12:56:06.743: INFO: Deleting pod "simpletest.rc-c7hqq" in namespace "gc-4857"
  Apr 27 12:56:06.757: INFO: Deleting pod "simpletest.rc-c86jp" in namespace "gc-4857"
  Apr 27 12:56:06.770: INFO: Deleting pod "simpletest.rc-cdsbg" in namespace "gc-4857"
  Apr 27 12:56:06.788: INFO: Deleting pod "simpletest.rc-cgwbr" in namespace "gc-4857"
  Apr 27 12:56:06.802: INFO: Deleting pod "simpletest.rc-cj6gt" in namespace "gc-4857"
  Apr 27 12:56:06.818: INFO: Deleting pod "simpletest.rc-cwsvs" in namespace "gc-4857"
  Apr 27 12:56:06.849: INFO: Deleting pod "simpletest.rc-dj4z5" in namespace "gc-4857"
  Apr 27 12:56:06.866: INFO: Deleting pod "simpletest.rc-dlzfq" in namespace "gc-4857"
  Apr 27 12:56:06.886: INFO: Deleting pod "simpletest.rc-dn6m9" in namespace "gc-4857"
  Apr 27 12:56:06.901: INFO: Deleting pod "simpletest.rc-f7nm4" in namespace "gc-4857"
  Apr 27 12:56:06.916: INFO: Deleting pod "simpletest.rc-fvnct" in namespace "gc-4857"
  Apr 27 12:56:06.929: INFO: Deleting pod "simpletest.rc-fw2sh" in namespace "gc-4857"
  Apr 27 12:56:06.948: INFO: Deleting pod "simpletest.rc-gw7x9" in namespace "gc-4857"
  Apr 27 12:56:06.964: INFO: Deleting pod "simpletest.rc-hkjbh" in namespace "gc-4857"
  Apr 27 12:56:06.998: INFO: Deleting pod "simpletest.rc-hlwhb" in namespace "gc-4857"
  Apr 27 12:56:07.014: INFO: Deleting pod "simpletest.rc-hsmvn" in namespace "gc-4857"
  Apr 27 12:56:07.030: INFO: Deleting pod "simpletest.rc-jlqf9" in namespace "gc-4857"
  Apr 27 12:56:07.047: INFO: Deleting pod "simpletest.rc-jrv9b" in namespace "gc-4857"
  Apr 27 12:56:07.064: INFO: Deleting pod "simpletest.rc-jw827" in namespace "gc-4857"
  Apr 27 12:56:07.083: INFO: Deleting pod "simpletest.rc-k5j8f" in namespace "gc-4857"
  Apr 27 12:56:07.098: INFO: Deleting pod "simpletest.rc-kl2gw" in namespace "gc-4857"
  Apr 27 12:56:07.119: INFO: Deleting pod "simpletest.rc-lhs25" in namespace "gc-4857"
  Apr 27 12:56:07.136: INFO: Deleting pod "simpletest.rc-lr9db" in namespace "gc-4857"
  Apr 27 12:56:07.159: INFO: Deleting pod "simpletest.rc-m2wdc" in namespace "gc-4857"
  Apr 27 12:56:07.180: INFO: Deleting pod "simpletest.rc-m4pfc" in namespace "gc-4857"
  Apr 27 12:56:07.199: INFO: Deleting pod "simpletest.rc-mhbhv" in namespace "gc-4857"
  Apr 27 12:56:07.214: INFO: Deleting pod "simpletest.rc-mpvdb" in namespace "gc-4857"
  Apr 27 12:56:07.243: INFO: Deleting pod "simpletest.rc-n4scw" in namespace "gc-4857"
  Apr 27 12:56:07.259: INFO: Deleting pod "simpletest.rc-n4xmk" in namespace "gc-4857"
  Apr 27 12:56:07.275: INFO: Deleting pod "simpletest.rc-nbjtf" in namespace "gc-4857"
  Apr 27 12:56:07.293: INFO: Deleting pod "simpletest.rc-nkl2x" in namespace "gc-4857"
  Apr 27 12:56:07.308: INFO: Deleting pod "simpletest.rc-np4lz" in namespace "gc-4857"
  Apr 27 12:56:07.325: INFO: Deleting pod "simpletest.rc-np5j5" in namespace "gc-4857"
  Apr 27 12:56:07.343: INFO: Deleting pod "simpletest.rc-nw86n" in namespace "gc-4857"
  Apr 27 12:56:07.362: INFO: Deleting pod "simpletest.rc-pcf2j" in namespace "gc-4857"
  Apr 27 12:56:07.375: INFO: Deleting pod "simpletest.rc-pkfp7" in namespace "gc-4857"
  Apr 27 12:56:07.392: INFO: Deleting pod "simpletest.rc-pnjpj" in namespace "gc-4857"
  Apr 27 12:56:07.411: INFO: Deleting pod "simpletest.rc-pnxqq" in namespace "gc-4857"
  Apr 27 12:56:07.434: INFO: Deleting pod "simpletest.rc-q6ckx" in namespace "gc-4857"
  Apr 27 12:56:07.450: INFO: Deleting pod "simpletest.rc-qqkst" in namespace "gc-4857"
  Apr 27 12:56:07.481: INFO: Deleting pod "simpletest.rc-qxwpx" in namespace "gc-4857"
  Apr 27 12:56:07.546: INFO: Deleting pod "simpletest.rc-rfrgs" in namespace "gc-4857"
  Apr 27 12:56:07.582: INFO: Deleting pod "simpletest.rc-rmdht" in namespace "gc-4857"
  Apr 27 12:56:07.650: INFO: Deleting pod "simpletest.rc-rpfng" in namespace "gc-4857"
  Apr 27 12:56:07.687: INFO: Deleting pod "simpletest.rc-rrqrl" in namespace "gc-4857"
  Apr 27 12:56:07.731: INFO: Deleting pod "simpletest.rc-scwxr" in namespace "gc-4857"
  Apr 27 12:56:07.784: INFO: Deleting pod "simpletest.rc-sd9j2" in namespace "gc-4857"
  Apr 27 12:56:07.831: INFO: Deleting pod "simpletest.rc-tjxn6" in namespace "gc-4857"
  Apr 27 12:56:07.881: INFO: Deleting pod "simpletest.rc-tl8pk" in namespace "gc-4857"
  Apr 27 12:56:07.936: INFO: Deleting pod "simpletest.rc-tn5pk" in namespace "gc-4857"
  Apr 27 12:56:07.983: INFO: Deleting pod "simpletest.rc-tnmtz" in namespace "gc-4857"
  Apr 27 12:56:08.052: INFO: Deleting pod "simpletest.rc-twfq2" in namespace "gc-4857"
  Apr 27 12:56:08.081: INFO: Deleting pod "simpletest.rc-vphbc" in namespace "gc-4857"
  Apr 27 12:56:08.132: INFO: Deleting pod "simpletest.rc-vvcfg" in namespace "gc-4857"
  Apr 27 12:56:08.181: INFO: Deleting pod "simpletest.rc-w9wpt" in namespace "gc-4857"
  Apr 27 12:56:08.231: INFO: Deleting pod "simpletest.rc-wfhbs" in namespace "gc-4857"
  Apr 27 12:56:08.283: INFO: Deleting pod "simpletest.rc-wmdcc" in namespace "gc-4857"
  Apr 27 12:56:08.329: INFO: Deleting pod "simpletest.rc-wwjv6" in namespace "gc-4857"
  Apr 27 12:56:08.377: INFO: Deleting pod "simpletest.rc-x8jsj" in namespace "gc-4857"
  Apr 27 12:56:08.435: INFO: Deleting pod "simpletest.rc-xknf9" in namespace "gc-4857"
  Apr 27 12:56:08.484: INFO: Deleting pod "simpletest.rc-xx65j" in namespace "gc-4857"
  Apr 27 12:56:08.537: INFO: Deleting pod "simpletest.rc-zhqg4" in namespace "gc-4857"
  Apr 27 12:56:08.601: INFO: Deleting pod "simpletest.rc-zqbpp" in namespace "gc-4857"
  Apr 27 12:56:08.632: INFO: Deleting pod "simpletest.rc-zwcfl" in namespace "gc-4857"
  Apr 27 12:56:08.682: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-4857" for this suite. @ 04/27/24 12:56:08.722
• [43.781 seconds]
------------------------------
S
------------------------------
[sig-instrumentation] Events should manage the lifecycle of an event [Conformance] [sig-instrumentation, Conformance]
k8s.io/kubernetes/test/e2e/instrumentation/core_events.go:58
  STEP: Creating a kubernetes client @ 04/27/24 12:56:08.78
  Apr 27 12:56:08.780: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename events @ 04/27/24 12:56:08.789
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:08.825
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:08.828
  STEP: creating a test event @ 04/27/24 12:56:08.832
  STEP: listing all events in all namespaces @ 04/27/24 12:56:08.84
  STEP: patching the test event @ 04/27/24 12:56:08.861
  STEP: fetching the test event @ 04/27/24 12:56:08.868
  STEP: updating the test event @ 04/27/24 12:56:08.872
  STEP: getting the test event @ 04/27/24 12:56:08.883
  STEP: deleting the test event @ 04/27/24 12:56:08.888
  STEP: listing all events in all namespaces @ 04/27/24 12:56:08.903
  Apr 27 12:56:08.954: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-4873" for this suite. @ 04/27/24 12:56:08.959
• [0.201 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] Service endpoints latency should not be very high [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service_latency.go:59
  STEP: Creating a kubernetes client @ 04/27/24 12:56:08.98
  Apr 27 12:56:08.981: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename svc-latency @ 04/27/24 12:56:08.981
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:09.02
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:09.023
  Apr 27 12:56:09.026: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: creating replication controller svc-latency-rc in namespace svc-latency-232 @ 04/27/24 12:56:09.027
  I0427 12:56:09.034030      19 runners.go:197] Created replication controller with name: svc-latency-rc, namespace: svc-latency-232, replica count: 1
  I0427 12:56:10.094588      19 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0427 12:56:11.095638      19 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0427 12:56:12.095754      19 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0427 12:56:13.096505      19 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 27 12:56:13.216: INFO: Created: latency-svc-gtlxg
  Apr 27 12:56:13.224: INFO: Got endpoints: latency-svc-gtlxg [26.87817ms]
  Apr 27 12:56:13.235: INFO: Created: latency-svc-9lxhp
  Apr 27 12:56:13.242: INFO: Got endpoints: latency-svc-9lxhp [17.691228ms]
  Apr 27 12:56:13.247: INFO: Created: latency-svc-fcs7p
  Apr 27 12:56:13.253: INFO: Got endpoints: latency-svc-fcs7p [29.166308ms]
  Apr 27 12:56:13.255: INFO: Created: latency-svc-fv4h6
  Apr 27 12:56:13.264: INFO: Created: latency-svc-wxwcg
  Apr 27 12:56:13.265: INFO: Got endpoints: latency-svc-fv4h6 [40.977196ms]
  Apr 27 12:56:13.273: INFO: Created: latency-svc-szz5d
  Apr 27 12:56:13.276: INFO: Got endpoints: latency-svc-wxwcg [51.908587ms]
  Apr 27 12:56:13.279: INFO: Got endpoints: latency-svc-szz5d [54.898166ms]
  Apr 27 12:56:13.282: INFO: Created: latency-svc-4gh9h
  Apr 27 12:56:13.292: INFO: Created: latency-svc-8rb6x
  Apr 27 12:56:13.292: INFO: Got endpoints: latency-svc-4gh9h [68.098978ms]
  Apr 27 12:56:13.299: INFO: Got endpoints: latency-svc-8rb6x [75.3425ms]
  Apr 27 12:56:13.302: INFO: Created: latency-svc-fswt9
  Apr 27 12:56:13.310: INFO: Got endpoints: latency-svc-fswt9 [85.486123ms]
  Apr 27 12:56:13.311: INFO: Created: latency-svc-f78s2
  Apr 27 12:56:13.316: INFO: Created: latency-svc-qkrvt
  Apr 27 12:56:13.318: INFO: Got endpoints: latency-svc-f78s2 [93.689893ms]
  Apr 27 12:56:13.324: INFO: Got endpoints: latency-svc-qkrvt [99.409217ms]
  Apr 27 12:56:13.327: INFO: Created: latency-svc-7xpwn
  Apr 27 12:56:13.334: INFO: Got endpoints: latency-svc-7xpwn [109.562361ms]
  Apr 27 12:56:13.335: INFO: Created: latency-svc-z57pm
  Apr 27 12:56:13.344: INFO: Got endpoints: latency-svc-z57pm [119.334042ms]
  Apr 27 12:56:13.346: INFO: Created: latency-svc-7bkjf
  Apr 27 12:56:13.351: INFO: Got endpoints: latency-svc-7bkjf [126.545932ms]
  Apr 27 12:56:13.356: INFO: Created: latency-svc-whbsg
  Apr 27 12:56:13.361: INFO: Got endpoints: latency-svc-whbsg [136.28886ms]
  Apr 27 12:56:13.365: INFO: Created: latency-svc-5xb2l
  Apr 27 12:56:13.371: INFO: Got endpoints: latency-svc-5xb2l [146.723818ms]
  Apr 27 12:56:13.373: INFO: Created: latency-svc-vwpkf
  Apr 27 12:56:13.379: INFO: Got endpoints: latency-svc-vwpkf [136.973678ms]
  Apr 27 12:56:13.381: INFO: Created: latency-svc-jclsj
  Apr 27 12:56:13.387: INFO: Got endpoints: latency-svc-jclsj [134.202983ms]
  Apr 27 12:56:13.391: INFO: Created: latency-svc-d7w4z
  Apr 27 12:56:13.396: INFO: Got endpoints: latency-svc-d7w4z [130.686787ms]
  Apr 27 12:56:13.398: INFO: Created: latency-svc-n8qz7
  Apr 27 12:56:13.405: INFO: Got endpoints: latency-svc-n8qz7 [128.705262ms]
  Apr 27 12:56:13.409: INFO: Created: latency-svc-sv9vv
  Apr 27 12:56:13.414: INFO: Got endpoints: latency-svc-sv9vv [135.440872ms]
  Apr 27 12:56:13.414: INFO: Created: latency-svc-jq65q
  Apr 27 12:56:13.422: INFO: Got endpoints: latency-svc-jq65q [129.489623ms]
  Apr 27 12:56:13.427: INFO: Created: latency-svc-tzlxt
  Apr 27 12:56:13.431: INFO: Got endpoints: latency-svc-tzlxt [131.282658ms]
  Apr 27 12:56:13.437: INFO: Created: latency-svc-s4nqs
  Apr 27 12:56:13.442: INFO: Created: latency-svc-gqdfm
  Apr 27 12:56:13.444: INFO: Got endpoints: latency-svc-s4nqs [134.722089ms]
  Apr 27 12:56:13.449: INFO: Got endpoints: latency-svc-gqdfm [130.822331ms]
  Apr 27 12:56:13.451: INFO: Created: latency-svc-77xd2
  Apr 27 12:56:13.457: INFO: Got endpoints: latency-svc-77xd2 [133.171123ms]
  Apr 27 12:56:13.464: INFO: Created: latency-svc-w74d4
  Apr 27 12:56:13.472: INFO: Got endpoints: latency-svc-w74d4 [137.681387ms]
  Apr 27 12:56:13.473: INFO: Created: latency-svc-flkvm
  Apr 27 12:56:13.478: INFO: Got endpoints: latency-svc-flkvm [134.513026ms]
  Apr 27 12:56:13.483: INFO: Created: latency-svc-r6z56
  Apr 27 12:56:13.490: INFO: Got endpoints: latency-svc-r6z56 [139.001838ms]
  Apr 27 12:56:13.493: INFO: Created: latency-svc-bnhmj
  Apr 27 12:56:13.500: INFO: Got endpoints: latency-svc-bnhmj [139.484611ms]
  Apr 27 12:56:13.501: INFO: Created: latency-svc-xm2sd
  Apr 27 12:56:13.508: INFO: Created: latency-svc-hwx5r
  Apr 27 12:56:13.511: INFO: Got endpoints: latency-svc-xm2sd [139.875289ms]
  Apr 27 12:56:13.513: INFO: Got endpoints: latency-svc-hwx5r [134.651076ms]
  Apr 27 12:56:13.519: INFO: Created: latency-svc-vgsfz
  Apr 27 12:56:13.531: INFO: Got endpoints: latency-svc-vgsfz [143.184072ms]
  Apr 27 12:56:13.611: INFO: Created: latency-svc-h4ftx
  Apr 27 12:56:13.617: INFO: Created: latency-svc-x5pcv
  Apr 27 12:56:13.618: INFO: Created: latency-svc-v88j7
  Apr 27 12:56:13.618: INFO: Created: latency-svc-ndl7t
  Apr 27 12:56:13.620: INFO: Created: latency-svc-7gtc6
  Apr 27 12:56:13.621: INFO: Created: latency-svc-g7v6p
  Apr 27 12:56:13.623: INFO: Created: latency-svc-mdkqx
  Apr 27 12:56:13.623: INFO: Created: latency-svc-ffkjm
  Apr 27 12:56:13.623: INFO: Created: latency-svc-jds84
  Apr 27 12:56:13.624: INFO: Created: latency-svc-j5c8k
  Apr 27 12:56:13.625: INFO: Got endpoints: latency-svc-h4ftx [180.983456ms]
  Apr 27 12:56:13.627: INFO: Created: latency-svc-kvtwp
  Apr 27 12:56:13.631: INFO: Created: latency-svc-92mfp
  Apr 27 12:56:13.632: INFO: Created: latency-svc-8tsh6
  Apr 27 12:56:13.633: INFO: Created: latency-svc-zgjxk
  Apr 27 12:56:13.633: INFO: Created: latency-svc-7jw9t
  Apr 27 12:56:13.636: INFO: Got endpoints: latency-svc-7jw9t [205.162232ms]
  Apr 27 12:56:13.642: INFO: Got endpoints: latency-svc-ndl7t [111.450517ms]
  Apr 27 12:56:13.647: INFO: Got endpoints: latency-svc-ffkjm [250.740002ms]
  Apr 27 12:56:13.647: INFO: Got endpoints: latency-svc-v88j7 [232.145284ms]
  Apr 27 12:56:13.652: INFO: Created: latency-svc-jf98m
  Apr 27 12:56:13.657: INFO: Created: latency-svc-27vwz
  Apr 27 12:56:13.664: INFO: Created: latency-svc-lz5lt
  Apr 27 12:56:13.671: INFO: Got endpoints: latency-svc-x5pcv [159.870707ms]
  Apr 27 12:56:13.674: INFO: Created: latency-svc-lm7hm
  Apr 27 12:56:13.681: INFO: Created: latency-svc-s72qq
  Apr 27 12:56:13.691: INFO: Created: latency-svc-dcd88
  Apr 27 12:56:13.720: INFO: Got endpoints: latency-svc-92mfp [219.978807ms]
  Apr 27 12:56:13.734: INFO: Created: latency-svc-njfx8
  Apr 27 12:56:13.772: INFO: Got endpoints: latency-svc-mdkqx [258.92131ms]
  Apr 27 12:56:13.784: INFO: Created: latency-svc-t97mr
  Apr 27 12:56:13.822: INFO: Got endpoints: latency-svc-g7v6p [417.400024ms]
  Apr 27 12:56:13.835: INFO: Created: latency-svc-cx4gh
  Apr 27 12:56:13.873: INFO: Got endpoints: latency-svc-jds84 [416.36127ms]
  Apr 27 12:56:13.885: INFO: Created: latency-svc-jv7mf
  Apr 27 12:56:13.921: INFO: Got endpoints: latency-svc-8tsh6 [442.377574ms]
  Apr 27 12:56:13.934: INFO: Created: latency-svc-p9x9w
  Apr 27 12:56:13.973: INFO: Got endpoints: latency-svc-kvtwp [551.361044ms]
  Apr 27 12:56:13.986: INFO: Created: latency-svc-4sk82
  Apr 27 12:56:14.022: INFO: Got endpoints: latency-svc-zgjxk [573.404618ms]
  Apr 27 12:56:14.035: INFO: Created: latency-svc-hvv5s
  Apr 27 12:56:14.073: INFO: Got endpoints: latency-svc-7gtc6 [601.134663ms]
  Apr 27 12:56:14.085: INFO: Created: latency-svc-qfr8s
  Apr 27 12:56:14.121: INFO: Got endpoints: latency-svc-j5c8k [631.283966ms]
  Apr 27 12:56:14.136: INFO: Created: latency-svc-9zchz
  Apr 27 12:56:14.172: INFO: Got endpoints: latency-svc-jf98m [546.214887ms]
  Apr 27 12:56:14.185: INFO: Created: latency-svc-2wk5z
  Apr 27 12:56:14.222: INFO: Got endpoints: latency-svc-27vwz [586.290261ms]
  Apr 27 12:56:14.241: INFO: Created: latency-svc-qhbqr
  Apr 27 12:56:14.272: INFO: Got endpoints: latency-svc-lz5lt [629.993807ms]
  Apr 27 12:56:14.287: INFO: Created: latency-svc-52ndb
  Apr 27 12:56:14.322: INFO: Got endpoints: latency-svc-lm7hm [675.569857ms]
  Apr 27 12:56:14.333: INFO: Created: latency-svc-pgzv7
  Apr 27 12:56:14.372: INFO: Got endpoints: latency-svc-s72qq [725.228521ms]
  Apr 27 12:56:14.384: INFO: Created: latency-svc-7c2vm
  Apr 27 12:56:14.421: INFO: Got endpoints: latency-svc-dcd88 [749.57088ms]
  Apr 27 12:56:14.435: INFO: Created: latency-svc-2pmbt
  Apr 27 12:56:14.473: INFO: Got endpoints: latency-svc-njfx8 [752.640324ms]
  Apr 27 12:56:14.484: INFO: Created: latency-svc-dj4nv
  Apr 27 12:56:14.524: INFO: Got endpoints: latency-svc-t97mr [751.152471ms]
  Apr 27 12:56:14.538: INFO: Created: latency-svc-48dxd
  Apr 27 12:56:14.571: INFO: Got endpoints: latency-svc-cx4gh [749.119719ms]
  Apr 27 12:56:14.582: INFO: Created: latency-svc-7vd5q
  Apr 27 12:56:14.621: INFO: Got endpoints: latency-svc-jv7mf [748.007025ms]
  Apr 27 12:56:14.637: INFO: Created: latency-svc-9rdkt
  Apr 27 12:56:14.673: INFO: Got endpoints: latency-svc-p9x9w [751.862826ms]
  Apr 27 12:56:14.684: INFO: Created: latency-svc-x2kwd
  Apr 27 12:56:14.723: INFO: Got endpoints: latency-svc-4sk82 [750.316547ms]
  Apr 27 12:56:14.734: INFO: Created: latency-svc-nzh8b
  Apr 27 12:56:14.773: INFO: Got endpoints: latency-svc-hvv5s [750.652254ms]
  Apr 27 12:56:14.784: INFO: Created: latency-svc-vkvtn
  Apr 27 12:56:14.820: INFO: Got endpoints: latency-svc-qfr8s [747.390429ms]
  Apr 27 12:56:14.834: INFO: Created: latency-svc-nzd4n
  Apr 27 12:56:14.872: INFO: Got endpoints: latency-svc-9zchz [750.390901ms]
  Apr 27 12:56:14.884: INFO: Created: latency-svc-crj7w
  Apr 27 12:56:14.922: INFO: Got endpoints: latency-svc-2wk5z [750.172503ms]
  Apr 27 12:56:14.934: INFO: Created: latency-svc-pwkb4
  Apr 27 12:56:14.973: INFO: Got endpoints: latency-svc-qhbqr [750.23844ms]
  Apr 27 12:56:14.985: INFO: Created: latency-svc-m9mz5
  Apr 27 12:56:15.021: INFO: Got endpoints: latency-svc-52ndb [749.107632ms]
  Apr 27 12:56:15.034: INFO: Created: latency-svc-dpvwq
  Apr 27 12:56:15.071: INFO: Got endpoints: latency-svc-pgzv7 [748.277384ms]
  Apr 27 12:56:15.085: INFO: Created: latency-svc-wjgrk
  Apr 27 12:56:15.124: INFO: Got endpoints: latency-svc-7c2vm [752.016869ms]
  Apr 27 12:56:15.137: INFO: Created: latency-svc-ft9zt
  Apr 27 12:56:15.173: INFO: Got endpoints: latency-svc-2pmbt [752.047008ms]
  Apr 27 12:56:15.185: INFO: Created: latency-svc-zglcs
  Apr 27 12:56:15.221: INFO: Got endpoints: latency-svc-dj4nv [747.902686ms]
  Apr 27 12:56:15.235: INFO: Created: latency-svc-dpth5
  Apr 27 12:56:15.274: INFO: Got endpoints: latency-svc-48dxd [750.159893ms]
  Apr 27 12:56:15.288: INFO: Created: latency-svc-f8cdv
  Apr 27 12:56:15.325: INFO: Got endpoints: latency-svc-7vd5q [753.189872ms]
  Apr 27 12:56:15.336: INFO: Created: latency-svc-b65wr
  Apr 27 12:56:15.371: INFO: Got endpoints: latency-svc-9rdkt [749.305071ms]
  Apr 27 12:56:15.386: INFO: Created: latency-svc-2w9cm
  Apr 27 12:56:15.420: INFO: Got endpoints: latency-svc-x2kwd [747.223076ms]
  Apr 27 12:56:15.436: INFO: Created: latency-svc-79nfq
  Apr 27 12:56:15.473: INFO: Got endpoints: latency-svc-nzh8b [749.624054ms]
  Apr 27 12:56:15.486: INFO: Created: latency-svc-4bhpd
  Apr 27 12:56:15.520: INFO: Got endpoints: latency-svc-vkvtn [747.379533ms]
  Apr 27 12:56:15.540: INFO: Created: latency-svc-x6rft
  Apr 27 12:56:15.570: INFO: Got endpoints: latency-svc-nzd4n [749.854798ms]
  Apr 27 12:56:15.585: INFO: Created: latency-svc-fn4hq
  Apr 27 12:56:15.624: INFO: Got endpoints: latency-svc-crj7w [752.451008ms]
  Apr 27 12:56:15.637: INFO: Created: latency-svc-q2tm7
  Apr 27 12:56:15.673: INFO: Got endpoints: latency-svc-pwkb4 [750.79443ms]
  Apr 27 12:56:15.685: INFO: Created: latency-svc-sbs7f
  Apr 27 12:56:15.722: INFO: Got endpoints: latency-svc-m9mz5 [748.812006ms]
  Apr 27 12:56:15.733: INFO: Created: latency-svc-dlt25
  Apr 27 12:56:15.772: INFO: Got endpoints: latency-svc-dpvwq [750.018366ms]
  Apr 27 12:56:15.789: INFO: Created: latency-svc-62gxk
  Apr 27 12:56:15.822: INFO: Got endpoints: latency-svc-wjgrk [751.597184ms]
  Apr 27 12:56:15.835: INFO: Created: latency-svc-q6d9x
  Apr 27 12:56:15.872: INFO: Got endpoints: latency-svc-ft9zt [748.03889ms]
  Apr 27 12:56:15.883: INFO: Created: latency-svc-rmn5k
  Apr 27 12:56:15.921: INFO: Got endpoints: latency-svc-zglcs [748.581241ms]
  Apr 27 12:56:15.934: INFO: Created: latency-svc-pnlhk
  Apr 27 12:56:15.970: INFO: Got endpoints: latency-svc-dpth5 [749.003163ms]
  Apr 27 12:56:15.985: INFO: Created: latency-svc-n8m2x
  Apr 27 12:56:16.021: INFO: Got endpoints: latency-svc-f8cdv [746.774717ms]
  Apr 27 12:56:16.033: INFO: Created: latency-svc-jt7ng
  Apr 27 12:56:16.073: INFO: Got endpoints: latency-svc-b65wr [747.830961ms]
  Apr 27 12:56:16.087: INFO: Created: latency-svc-hjxlb
  Apr 27 12:56:16.120: INFO: Got endpoints: latency-svc-2w9cm [749.58846ms]
  Apr 27 12:56:16.133: INFO: Created: latency-svc-jq6g6
  Apr 27 12:56:16.170: INFO: Got endpoints: latency-svc-79nfq [749.904987ms]
  Apr 27 12:56:16.185: INFO: Created: latency-svc-sm4k5
  Apr 27 12:56:16.223: INFO: Got endpoints: latency-svc-4bhpd [749.55269ms]
  Apr 27 12:56:16.236: INFO: Created: latency-svc-r7hd7
  Apr 27 12:56:16.273: INFO: Got endpoints: latency-svc-x6rft [752.4809ms]
  Apr 27 12:56:16.285: INFO: Created: latency-svc-dtzk2
  Apr 27 12:56:16.321: INFO: Got endpoints: latency-svc-fn4hq [750.958442ms]
  Apr 27 12:56:16.334: INFO: Created: latency-svc-xglk4
  Apr 27 12:56:16.369: INFO: Got endpoints: latency-svc-q2tm7 [744.889171ms]
  Apr 27 12:56:16.382: INFO: Created: latency-svc-b2bb8
  Apr 27 12:56:16.425: INFO: Got endpoints: latency-svc-sbs7f [751.952595ms]
  Apr 27 12:56:16.439: INFO: Created: latency-svc-6k6g2
  Apr 27 12:56:16.473: INFO: Got endpoints: latency-svc-dlt25 [751.391841ms]
  Apr 27 12:56:16.486: INFO: Created: latency-svc-tshzw
  Apr 27 12:56:16.528: INFO: Got endpoints: latency-svc-62gxk [756.110369ms]
  Apr 27 12:56:16.545: INFO: Created: latency-svc-8pcqw
  Apr 27 12:56:16.573: INFO: Got endpoints: latency-svc-q6d9x [750.81757ms]
  Apr 27 12:56:16.589: INFO: Created: latency-svc-s6gr4
  Apr 27 12:56:16.621: INFO: Got endpoints: latency-svc-rmn5k [748.104604ms]
  Apr 27 12:56:16.636: INFO: Created: latency-svc-4wjv4
  Apr 27 12:56:16.672: INFO: Got endpoints: latency-svc-pnlhk [751.043911ms]
  Apr 27 12:56:16.684: INFO: Created: latency-svc-slc85
  Apr 27 12:56:16.723: INFO: Got endpoints: latency-svc-n8m2x [752.741237ms]
  Apr 27 12:56:16.734: INFO: Created: latency-svc-wjtlw
  Apr 27 12:56:16.774: INFO: Got endpoints: latency-svc-jt7ng [752.756506ms]
  Apr 27 12:56:16.786: INFO: Created: latency-svc-qjgsk
  Apr 27 12:56:16.822: INFO: Got endpoints: latency-svc-hjxlb [749.11922ms]
  Apr 27 12:56:16.835: INFO: Created: latency-svc-fmnkd
  Apr 27 12:56:16.871: INFO: Got endpoints: latency-svc-jq6g6 [751.100152ms]
  Apr 27 12:56:16.884: INFO: Created: latency-svc-b9p7h
  Apr 27 12:56:16.932: INFO: Got endpoints: latency-svc-sm4k5 [761.72377ms]
  Apr 27 12:56:16.949: INFO: Created: latency-svc-hbxb6
  Apr 27 12:56:16.973: INFO: Got endpoints: latency-svc-r7hd7 [750.150343ms]
  Apr 27 12:56:16.984: INFO: Created: latency-svc-5sshn
  Apr 27 12:56:17.020: INFO: Got endpoints: latency-svc-dtzk2 [747.694653ms]
  Apr 27 12:56:17.034: INFO: Created: latency-svc-482kg
  Apr 27 12:56:17.071: INFO: Got endpoints: latency-svc-xglk4 [749.5708ms]
  Apr 27 12:56:17.085: INFO: Created: latency-svc-m65hk
  Apr 27 12:56:17.124: INFO: Got endpoints: latency-svc-b2bb8 [754.258311ms]
  Apr 27 12:56:17.135: INFO: Created: latency-svc-dj9tj
  Apr 27 12:56:17.171: INFO: Got endpoints: latency-svc-6k6g2 [746.49523ms]
  Apr 27 12:56:17.183: INFO: Created: latency-svc-4ml64
  Apr 27 12:56:17.224: INFO: Got endpoints: latency-svc-tshzw [750.770516ms]
  Apr 27 12:56:17.238: INFO: Created: latency-svc-dk4w6
  Apr 27 12:56:17.271: INFO: Got endpoints: latency-svc-8pcqw [743.040608ms]
  Apr 27 12:56:17.286: INFO: Created: latency-svc-bv4f7
  Apr 27 12:56:17.321: INFO: Got endpoints: latency-svc-s6gr4 [748.039029ms]
  Apr 27 12:56:17.335: INFO: Created: latency-svc-xddzm
  Apr 27 12:56:17.372: INFO: Got endpoints: latency-svc-4wjv4 [751.791181ms]
  Apr 27 12:56:17.386: INFO: Created: latency-svc-5jd87
  Apr 27 12:56:17.427: INFO: Got endpoints: latency-svc-slc85 [754.050766ms]
  Apr 27 12:56:17.439: INFO: Created: latency-svc-6sjjp
  Apr 27 12:56:17.474: INFO: Got endpoints: latency-svc-wjtlw [751.064248ms]
  Apr 27 12:56:17.489: INFO: Created: latency-svc-4wjjh
  Apr 27 12:56:17.520: INFO: Got endpoints: latency-svc-qjgsk [746.719047ms]
  Apr 27 12:56:17.534: INFO: Created: latency-svc-7j4rc
  Apr 27 12:56:17.572: INFO: Got endpoints: latency-svc-fmnkd [749.845602ms]
  Apr 27 12:56:17.583: INFO: Created: latency-svc-52lng
  Apr 27 12:56:17.621: INFO: Got endpoints: latency-svc-b9p7h [749.731643ms]
  Apr 27 12:56:17.634: INFO: Created: latency-svc-z89ts
  Apr 27 12:56:17.670: INFO: Got endpoints: latency-svc-hbxb6 [738.029731ms]
  Apr 27 12:56:17.685: INFO: Created: latency-svc-6xt9q
  Apr 27 12:56:17.723: INFO: Got endpoints: latency-svc-5sshn [749.447924ms]
  Apr 27 12:56:17.738: INFO: Created: latency-svc-kpqgd
  Apr 27 12:56:17.773: INFO: Got endpoints: latency-svc-482kg [752.094182ms]
  Apr 27 12:56:17.786: INFO: Created: latency-svc-h2qm7
  Apr 27 12:56:17.821: INFO: Got endpoints: latency-svc-m65hk [750.37081ms]
  Apr 27 12:56:17.834: INFO: Created: latency-svc-nvpg7
  Apr 27 12:56:17.872: INFO: Got endpoints: latency-svc-dj9tj [748.133063ms]
  Apr 27 12:56:17.886: INFO: Created: latency-svc-lpwpm
  Apr 27 12:56:17.923: INFO: Got endpoints: latency-svc-4ml64 [751.825676ms]
  Apr 27 12:56:17.935: INFO: Created: latency-svc-7gbsb
  Apr 27 12:56:17.974: INFO: Got endpoints: latency-svc-dk4w6 [749.291022ms]
  Apr 27 12:56:18.007: INFO: Created: latency-svc-hbgv2
  Apr 27 12:56:18.057: INFO: Got endpoints: latency-svc-bv4f7 [786.295368ms]
  Apr 27 12:56:18.071: INFO: Created: latency-svc-6brlg
  Apr 27 12:56:18.072: INFO: Got endpoints: latency-svc-xddzm [750.940041ms]
  Apr 27 12:56:18.084: INFO: Created: latency-svc-422sq
  Apr 27 12:56:18.120: INFO: Got endpoints: latency-svc-5jd87 [747.431576ms]
  Apr 27 12:56:18.142: INFO: Created: latency-svc-7kx5h
  Apr 27 12:56:18.175: INFO: Got endpoints: latency-svc-6sjjp [747.960199ms]
  Apr 27 12:56:18.187: INFO: Created: latency-svc-bj8f7
  Apr 27 12:56:18.222: INFO: Got endpoints: latency-svc-4wjjh [747.591747ms]
  Apr 27 12:56:18.237: INFO: Created: latency-svc-q9ngw
  Apr 27 12:56:18.274: INFO: Got endpoints: latency-svc-7j4rc [753.520502ms]
  Apr 27 12:56:18.290: INFO: Created: latency-svc-ngjlm
  Apr 27 12:56:18.322: INFO: Got endpoints: latency-svc-52lng [749.905006ms]
  Apr 27 12:56:18.334: INFO: Created: latency-svc-5fjdh
  Apr 27 12:56:18.373: INFO: Got endpoints: latency-svc-z89ts [752.246654ms]
  Apr 27 12:56:18.384: INFO: Created: latency-svc-bkgrt
  Apr 27 12:56:18.424: INFO: Got endpoints: latency-svc-6xt9q [754.022357ms]
  Apr 27 12:56:18.437: INFO: Created: latency-svc-gwvcx
  Apr 27 12:56:18.473: INFO: Got endpoints: latency-svc-kpqgd [750.528304ms]
  Apr 27 12:56:18.485: INFO: Created: latency-svc-wnjpd
  Apr 27 12:56:18.521: INFO: Got endpoints: latency-svc-h2qm7 [748.020169ms]
  Apr 27 12:56:18.533: INFO: Created: latency-svc-59kml
  Apr 27 12:56:18.572: INFO: Got endpoints: latency-svc-nvpg7 [750.975247ms]
  Apr 27 12:56:18.584: INFO: Created: latency-svc-6pmkl
  Apr 27 12:56:18.622: INFO: Got endpoints: latency-svc-lpwpm [750.615058ms]
  Apr 27 12:56:18.635: INFO: Created: latency-svc-pg4bg
  Apr 27 12:56:18.680: INFO: Got endpoints: latency-svc-7gbsb [756.870814ms]
  Apr 27 12:56:18.691: INFO: Created: latency-svc-h5c6s
  Apr 27 12:56:18.723: INFO: Got endpoints: latency-svc-hbgv2 [749.213545ms]
  Apr 27 12:56:18.737: INFO: Created: latency-svc-vftrv
  Apr 27 12:56:18.770: INFO: Got endpoints: latency-svc-6brlg [713.115707ms]
  Apr 27 12:56:18.782: INFO: Created: latency-svc-t77sx
  Apr 27 12:56:18.822: INFO: Got endpoints: latency-svc-422sq [749.925367ms]
  Apr 27 12:56:18.833: INFO: Created: latency-svc-mdnng
  Apr 27 12:56:18.880: INFO: Got endpoints: latency-svc-7kx5h [759.261925ms]
  Apr 27 12:56:18.891: INFO: Created: latency-svc-dg8nd
  Apr 27 12:56:18.924: INFO: Got endpoints: latency-svc-bj8f7 [748.943959ms]
  Apr 27 12:56:18.936: INFO: Created: latency-svc-8tvg8
  Apr 27 12:56:18.971: INFO: Got endpoints: latency-svc-q9ngw [749.058052ms]
  Apr 27 12:56:18.983: INFO: Created: latency-svc-x6lcc
  Apr 27 12:56:19.021: INFO: Got endpoints: latency-svc-ngjlm [746.626259ms]
  Apr 27 12:56:19.034: INFO: Created: latency-svc-9vsdm
  Apr 27 12:56:19.095: INFO: Got endpoints: latency-svc-5fjdh [773.738544ms]
  Apr 27 12:56:19.116: INFO: Created: latency-svc-8877l
  Apr 27 12:56:19.122: INFO: Got endpoints: latency-svc-bkgrt [748.885755ms]
  Apr 27 12:56:19.133: INFO: Created: latency-svc-mfhkh
  Apr 27 12:56:19.178: INFO: Got endpoints: latency-svc-gwvcx [754.487215ms]
  Apr 27 12:56:19.191: INFO: Created: latency-svc-bq5lt
  Apr 27 12:56:19.221: INFO: Got endpoints: latency-svc-wnjpd [747.906794ms]
  Apr 27 12:56:19.235: INFO: Created: latency-svc-bkk2q
  Apr 27 12:56:19.273: INFO: Got endpoints: latency-svc-59kml [751.746191ms]
  Apr 27 12:56:19.283: INFO: Created: latency-svc-flshb
  Apr 27 12:56:19.324: INFO: Got endpoints: latency-svc-6pmkl [751.756957ms]
  Apr 27 12:56:19.339: INFO: Created: latency-svc-vbg6n
  Apr 27 12:56:19.373: INFO: Got endpoints: latency-svc-pg4bg [750.424716ms]
  Apr 27 12:56:19.384: INFO: Created: latency-svc-dtnn5
  Apr 27 12:56:19.424: INFO: Got endpoints: latency-svc-h5c6s [743.710938ms]
  Apr 27 12:56:19.438: INFO: Created: latency-svc-5gq5v
  Apr 27 12:56:19.471: INFO: Got endpoints: latency-svc-vftrv [748.036574ms]
  Apr 27 12:56:19.484: INFO: Created: latency-svc-96xzl
  Apr 27 12:56:19.520: INFO: Got endpoints: latency-svc-t77sx [749.762514ms]
  Apr 27 12:56:19.534: INFO: Created: latency-svc-d8qgb
  Apr 27 12:56:19.573: INFO: Got endpoints: latency-svc-mdnng [750.255748ms]
  Apr 27 12:56:19.584: INFO: Created: latency-svc-8tls2
  Apr 27 12:56:19.621: INFO: Got endpoints: latency-svc-dg8nd [741.538025ms]
  Apr 27 12:56:19.633: INFO: Created: latency-svc-4rmms
  Apr 27 12:56:19.672: INFO: Got endpoints: latency-svc-8tvg8 [748.566852ms]
  Apr 27 12:56:19.685: INFO: Created: latency-svc-z2mnk
  Apr 27 12:56:19.720: INFO: Got endpoints: latency-svc-x6lcc [749.339378ms]
  Apr 27 12:56:19.734: INFO: Created: latency-svc-x4s2w
  Apr 27 12:56:19.772: INFO: Got endpoints: latency-svc-9vsdm [750.800243ms]
  Apr 27 12:56:19.785: INFO: Created: latency-svc-qdrjp
  Apr 27 12:56:19.821: INFO: Got endpoints: latency-svc-8877l [725.239711ms]
  Apr 27 12:56:19.832: INFO: Created: latency-svc-64wdw
  Apr 27 12:56:19.875: INFO: Got endpoints: latency-svc-mfhkh [752.919959ms]
  Apr 27 12:56:19.886: INFO: Created: latency-svc-cjbc8
  Apr 27 12:56:19.923: INFO: Got endpoints: latency-svc-bq5lt [744.135002ms]
  Apr 27 12:56:19.935: INFO: Created: latency-svc-sh4h6
  Apr 27 12:56:19.971: INFO: Got endpoints: latency-svc-bkk2q [750.109044ms]
  Apr 27 12:56:19.985: INFO: Created: latency-svc-6hnh5
  Apr 27 12:56:20.020: INFO: Got endpoints: latency-svc-flshb [747.509354ms]
  Apr 27 12:56:20.032: INFO: Created: latency-svc-r5qkn
  Apr 27 12:56:20.074: INFO: Got endpoints: latency-svc-vbg6n [749.741049ms]
  Apr 27 12:56:20.085: INFO: Created: latency-svc-2hbs4
  Apr 27 12:56:20.131: INFO: Got endpoints: latency-svc-dtnn5 [757.84882ms]
  Apr 27 12:56:20.144: INFO: Created: latency-svc-wj8s7
  Apr 27 12:56:20.172: INFO: Got endpoints: latency-svc-5gq5v [748.047733ms]
  Apr 27 12:56:20.182: INFO: Created: latency-svc-9nhm2
  Apr 27 12:56:20.221: INFO: Got endpoints: latency-svc-96xzl [749.679141ms]
  Apr 27 12:56:20.237: INFO: Created: latency-svc-m5fw7
  Apr 27 12:56:20.272: INFO: Got endpoints: latency-svc-d8qgb [751.940727ms]
  Apr 27 12:56:20.285: INFO: Created: latency-svc-pr825
  Apr 27 12:56:20.324: INFO: Got endpoints: latency-svc-8tls2 [751.016744ms]
  Apr 27 12:56:20.335: INFO: Created: latency-svc-gc7zv
  Apr 27 12:56:20.372: INFO: Got endpoints: latency-svc-4rmms [750.550285ms]
  Apr 27 12:56:20.383: INFO: Created: latency-svc-7kn99
  Apr 27 12:56:20.422: INFO: Got endpoints: latency-svc-z2mnk [749.551897ms]
  Apr 27 12:56:20.436: INFO: Created: latency-svc-5r8sx
  Apr 27 12:56:20.472: INFO: Got endpoints: latency-svc-x4s2w [751.36941ms]
  Apr 27 12:56:20.484: INFO: Created: latency-svc-wwc62
  Apr 27 12:56:20.522: INFO: Got endpoints: latency-svc-qdrjp [750.156647ms]
  Apr 27 12:56:20.534: INFO: Created: latency-svc-lnr97
  Apr 27 12:56:20.573: INFO: Got endpoints: latency-svc-64wdw [751.930799ms]
  Apr 27 12:56:20.584: INFO: Created: latency-svc-56sgh
  Apr 27 12:56:20.622: INFO: Got endpoints: latency-svc-cjbc8 [746.430412ms]
  Apr 27 12:56:20.633: INFO: Created: latency-svc-cj4hl
  Apr 27 12:56:20.674: INFO: Got endpoints: latency-svc-sh4h6 [751.265319ms]
  Apr 27 12:56:20.685: INFO: Created: latency-svc-jd5lv
  Apr 27 12:56:20.724: INFO: Got endpoints: latency-svc-6hnh5 [752.575385ms]
  Apr 27 12:56:20.737: INFO: Created: latency-svc-w4tmv
  Apr 27 12:56:20.770: INFO: Got endpoints: latency-svc-r5qkn [750.116929ms]
  Apr 27 12:56:20.785: INFO: Created: latency-svc-w6gc2
  Apr 27 12:56:20.821: INFO: Got endpoints: latency-svc-2hbs4 [746.806469ms]
  Apr 27 12:56:20.834: INFO: Created: latency-svc-rgmdw
  Apr 27 12:56:20.873: INFO: Got endpoints: latency-svc-wj8s7 [741.711682ms]
  Apr 27 12:56:20.885: INFO: Created: latency-svc-d9x4b
  Apr 27 12:56:20.924: INFO: Got endpoints: latency-svc-9nhm2 [751.618062ms]
  Apr 27 12:56:20.935: INFO: Created: latency-svc-fk28r
  Apr 27 12:56:20.972: INFO: Got endpoints: latency-svc-m5fw7 [750.827805ms]
  Apr 27 12:56:20.982: INFO: Created: latency-svc-pr2nw
  Apr 27 12:56:21.021: INFO: Got endpoints: latency-svc-pr825 [748.294914ms]
  Apr 27 12:56:21.035: INFO: Created: latency-svc-fthw8
  Apr 27 12:56:21.072: INFO: Got endpoints: latency-svc-gc7zv [748.199025ms]
  Apr 27 12:56:21.123: INFO: Got endpoints: latency-svc-7kn99 [750.593263ms]
  Apr 27 12:56:21.171: INFO: Got endpoints: latency-svc-5r8sx [749.54771ms]
  Apr 27 12:56:21.224: INFO: Got endpoints: latency-svc-wwc62 [751.549501ms]
  Apr 27 12:56:21.273: INFO: Got endpoints: latency-svc-lnr97 [750.83073ms]
  Apr 27 12:56:21.324: INFO: Got endpoints: latency-svc-56sgh [750.890182ms]
  Apr 27 12:56:21.371: INFO: Got endpoints: latency-svc-cj4hl [748.89254ms]
  Apr 27 12:56:21.424: INFO: Got endpoints: latency-svc-jd5lv [750.52006ms]
  Apr 27 12:56:21.471: INFO: Got endpoints: latency-svc-w4tmv [746.771857ms]
  Apr 27 12:56:21.523: INFO: Got endpoints: latency-svc-w6gc2 [752.593811ms]
  Apr 27 12:56:21.571: INFO: Got endpoints: latency-svc-rgmdw [750.241092ms]
  Apr 27 12:56:21.623: INFO: Got endpoints: latency-svc-d9x4b [749.764281ms]
  Apr 27 12:56:21.671: INFO: Got endpoints: latency-svc-fk28r [746.725685ms]
  Apr 27 12:56:21.724: INFO: Got endpoints: latency-svc-pr2nw [752.742722ms]
  Apr 27 12:56:21.771: INFO: Got endpoints: latency-svc-fthw8 [749.820313ms]
  Apr 27 12:56:21.771: INFO: Latencies: [17.691228ms 29.166308ms 40.977196ms 51.908587ms 54.898166ms 68.098978ms 75.3425ms 85.486123ms 93.689893ms 99.409217ms 109.562361ms 111.450517ms 119.334042ms 126.545932ms 128.705262ms 129.489623ms 130.686787ms 130.822331ms 131.282658ms 133.171123ms 134.202983ms 134.513026ms 134.651076ms 134.722089ms 135.440872ms 136.28886ms 136.973678ms 137.681387ms 139.001838ms 139.484611ms 139.875289ms 143.184072ms 146.723818ms 159.870707ms 180.983456ms 205.162232ms 219.978807ms 232.145284ms 250.740002ms 258.92131ms 416.36127ms 417.400024ms 442.377574ms 546.214887ms 551.361044ms 573.404618ms 586.290261ms 601.134663ms 629.993807ms 631.283966ms 675.569857ms 713.115707ms 725.228521ms 725.239711ms 738.029731ms 741.538025ms 741.711682ms 743.040608ms 743.710938ms 744.135002ms 744.889171ms 746.430412ms 746.49523ms 746.626259ms 746.719047ms 746.725685ms 746.771857ms 746.774717ms 746.806469ms 747.223076ms 747.379533ms 747.390429ms 747.431576ms 747.509354ms 747.591747ms 747.694653ms 747.830961ms 747.902686ms 747.906794ms 747.960199ms 748.007025ms 748.020169ms 748.036574ms 748.03889ms 748.039029ms 748.047733ms 748.104604ms 748.133063ms 748.199025ms 748.277384ms 748.294914ms 748.566852ms 748.581241ms 748.812006ms 748.885755ms 748.89254ms 748.943959ms 749.003163ms 749.058052ms 749.107632ms 749.11922ms 749.119719ms 749.213545ms 749.291022ms 749.305071ms 749.339378ms 749.447924ms 749.54771ms 749.551897ms 749.55269ms 749.5708ms 749.57088ms 749.58846ms 749.624054ms 749.679141ms 749.731643ms 749.741049ms 749.762514ms 749.764281ms 749.820313ms 749.845602ms 749.854798ms 749.904987ms 749.905006ms 749.925367ms 750.018366ms 750.109044ms 750.116929ms 750.150343ms 750.156647ms 750.159893ms 750.172503ms 750.23844ms 750.241092ms 750.255748ms 750.316547ms 750.37081ms 750.390901ms 750.424716ms 750.52006ms 750.528304ms 750.550285ms 750.593263ms 750.615058ms 750.652254ms 750.770516ms 750.79443ms 750.800243ms 750.81757ms 750.827805ms 750.83073ms 750.890182ms 750.940041ms 750.958442ms 750.975247ms 751.016744ms 751.043911ms 751.064248ms 751.100152ms 751.152471ms 751.265319ms 751.36941ms 751.391841ms 751.549501ms 751.597184ms 751.618062ms 751.746191ms 751.756957ms 751.791181ms 751.825676ms 751.862826ms 751.930799ms 751.940727ms 751.952595ms 752.016869ms 752.047008ms 752.094182ms 752.246654ms 752.451008ms 752.4809ms 752.575385ms 752.593811ms 752.640324ms 752.741237ms 752.742722ms 752.756506ms 752.919959ms 753.189872ms 753.520502ms 754.022357ms 754.050766ms 754.258311ms 754.487215ms 756.110369ms 756.870814ms 757.84882ms 759.261925ms 761.72377ms 773.738544ms 786.295368ms]
  Apr 27 12:56:21.771: INFO: 50 %ile: 749.11922ms
  Apr 27 12:56:21.771: INFO: 90 %ile: 752.575385ms
  Apr 27 12:56:21.771: INFO: 99 %ile: 773.738544ms
  Apr 27 12:56:21.771: INFO: Total sample count: 200
  Apr 27 12:56:21.771: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svc-latency-232" for this suite. @ 04/27/24 12:56:21.777
• [12.806 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1538
  STEP: Creating a kubernetes client @ 04/27/24 12:56:21.787
  Apr 27 12:56:21.787: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 12:56:21.787
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:21.802
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:21.806
  STEP: creating Agnhost RC @ 04/27/24 12:56:21.81
  Apr 27 12:56:21.810: INFO: namespace kubectl-8294
  Apr 27 12:56:21.810: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-8294 create -f -'
  Apr 27 12:56:21.899: INFO: stderr: ""
  Apr 27 12:56:21.899: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 04/27/24 12:56:21.899
  Apr 27 12:56:22.905: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 27 12:56:22.905: INFO: Found 1 / 1
  Apr 27 12:56:22.905: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Apr 27 12:56:22.910: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 27 12:56:22.910: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Apr 27 12:56:22.910: INFO: wait on agnhost-primary startup in kubectl-8294 
  Apr 27 12:56:22.910: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-8294 logs agnhost-primary-qqnjx agnhost-primary'
  Apr 27 12:56:22.973: INFO: stderr: ""
  Apr 27 12:56:22.973: INFO: stdout: "Paused\n"
  STEP: exposing RC @ 04/27/24 12:56:22.973
  Apr 27 12:56:22.973: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-8294 expose rc agnhost-primary --name=rm2 --port=1234 --target-port=6379'
  Apr 27 12:56:23.030: INFO: stderr: ""
  Apr 27 12:56:23.030: INFO: stdout: "service/rm2 exposed\n"
  Apr 27 12:56:23.038: INFO: Service rm2 in namespace kubectl-8294 found.
  STEP: exposing service @ 04/27/24 12:56:25.048
  Apr 27 12:56:25.048: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-8294 expose service rm2 --name=rm3 --port=2345 --target-port=6379'
  Apr 27 12:56:25.108: INFO: stderr: ""
  Apr 27 12:56:25.108: INFO: stdout: "service/rm3 exposed\n"
  Apr 27 12:56:25.117: INFO: Service rm3 in namespace kubectl-8294 found.
  Apr 27 12:56:27.127: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-8294" for this suite. @ 04/27/24 12:56:27.132
• [5.355 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:357
  STEP: Creating a kubernetes client @ 04/27/24 12:56:27.142
  Apr 27 12:56:27.142: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/27/24 12:56:27.142
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:27.161
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:27.164
  STEP: CRs in the same group and version but different kinds (two CRDs) show up in OpenAPI documentation @ 04/27/24 12:56:27.168
  Apr 27 12:56:27.168: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:56:28.573: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:56:33.756: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-1856" for this suite. @ 04/27/24 12:56:33.764
• [6.630 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/discovery.go:172
  STEP: Creating a kubernetes client @ 04/27/24 12:56:33.772
  Apr 27 12:56:33.772: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename discovery @ 04/27/24 12:56:33.773
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:33.792
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:33.795
  STEP: Setting up server cert @ 04/27/24 12:56:33.799
  STEP: Requesting APIResourceList from "/api/v1" @ 04/27/24 12:56:34.018
  STEP: Requesting APIResourceList from "/apis/admissionregistration.k8s.io/v1" @ 04/27/24 12:56:34.02
  STEP: Requesting APIResourceList from "/apis/apiextensions.k8s.io/v1" @ 04/27/24 12:56:34.022
  STEP: Requesting APIResourceList from "/apis/apiregistration.k8s.io/v1" @ 04/27/24 12:56:34.023
  STEP: Requesting APIResourceList from "/apis/apps/v1" @ 04/27/24 12:56:34.024
  STEP: Requesting APIResourceList from "/apis/authentication.k8s.io/v1" @ 04/27/24 12:56:34.025
  STEP: Requesting APIResourceList from "/apis/authorization.k8s.io/v1" @ 04/27/24 12:56:34.027
  STEP: Requesting APIResourceList from "/apis/autoscaling/v1" @ 04/27/24 12:56:34.028
  STEP: Requesting APIResourceList from "/apis/autoscaling/v2" @ 04/27/24 12:56:34.029
  STEP: Requesting APIResourceList from "/apis/batch/v1" @ 04/27/24 12:56:34.03
  STEP: Requesting APIResourceList from "/apis/certificates.k8s.io/v1" @ 04/27/24 12:56:34.032
  STEP: Requesting APIResourceList from "/apis/coordination.k8s.io/v1" @ 04/27/24 12:56:34.033
  STEP: Requesting APIResourceList from "/apis/discovery.k8s.io/v1" @ 04/27/24 12:56:34.035
  STEP: Requesting APIResourceList from "/apis/events.k8s.io/v1" @ 04/27/24 12:56:34.036
  STEP: Requesting APIResourceList from "/apis/networking.k8s.io/v1" @ 04/27/24 12:56:34.037
  STEP: Requesting APIResourceList from "/apis/node.k8s.io/v1" @ 04/27/24 12:56:34.038
  STEP: Requesting APIResourceList from "/apis/policy/v1" @ 04/27/24 12:56:34.04
  STEP: Requesting APIResourceList from "/apis/scheduling.k8s.io/v1" @ 04/27/24 12:56:34.041
  STEP: Requesting APIResourceList from "/apis/storage.k8s.io/v1" @ 04/27/24 12:56:34.042
  Apr 27 12:56:34.043: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-8212" for this suite. @ 04/27/24 12:56:34.048
• [0.285 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:110
  STEP: Creating a kubernetes client @ 04/27/24 12:56:34.057
  Apr 27 12:56:34.057: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:56:34.058
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:34.077
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:34.08
  STEP: Creating configMap with name projected-configmap-test-volume-map-7870a09a-0dbe-4e37-b53b-ce26be785a52 @ 04/27/24 12:56:34.083
  STEP: Creating a pod to test consume configMaps @ 04/27/24 12:56:34.088
  STEP: Saw pod success @ 04/27/24 12:56:38.114
  Apr 27 12:56:38.118: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-configmaps-5524c2c1-34a5-4199-9fc3-9d01d0b823a5 container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 12:56:38.13
  Apr 27 12:56:38.152: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9262" for this suite. @ 04/27/24 12:56:38.156
• [4.107 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/secrets.go:96
  STEP: Creating a kubernetes client @ 04/27/24 12:56:38.164
  Apr 27 12:56:38.164: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 12:56:38.165
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:38.184
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:38.187
  STEP: creating secret secrets-6863/secret-test-b458da66-b116-4e93-89ab-e442bc984be4 @ 04/27/24 12:56:38.19
  STEP: Creating a pod to test consume secrets @ 04/27/24 12:56:38.195
  STEP: Saw pod success @ 04/27/24 12:56:42.22
  Apr 27 12:56:42.224: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-configmaps-7c6dde9f-e6e3-4449-9bb5-c7755700d4c4 container env-test: <nil>
  STEP: delete the pod @ 04/27/24 12:56:42.232
  Apr 27 12:56:42.253: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6863" for this suite. @ 04/27/24 12:56:42.258
• [4.101 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:221
  STEP: Creating a kubernetes client @ 04/27/24 12:56:42.266
  Apr 27 12:56:42.266: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 12:56:42.266
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:42.285
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:42.288
  STEP: Setting up server cert @ 04/27/24 12:56:42.317
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 12:56:42.429
  STEP: Deploying the webhook pod @ 04/27/24 12:56:42.439
  STEP: Wait for the deployment to be ready @ 04/27/24 12:56:42.452
  Apr 27 12:56:42.461: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 12:56:44.475
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 12:56:44.486
  Apr 27 12:56:45.486: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Apr 27 12:56:45.496: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Registering the custom resource webhook via the AdmissionRegistration API @ 04/27/24 12:56:46.008
  STEP: Creating a custom resource that should be denied by the webhook @ 04/27/24 12:56:46.024
  STEP: Creating a custom resource whose deletion would be denied by the webhook @ 04/27/24 12:56:48.042
  STEP: Updating the custom resource with disallowed data should be denied @ 04/27/24 12:56:48.049
  STEP: Deleting the custom resource should be denied @ 04/27/24 12:56:48.059
  STEP: Remove the offending key and value from the custom resource data @ 04/27/24 12:56:48.067
  STEP: Deleting the updated custom resource should be successful @ 04/27/24 12:56:48.079
  Apr 27 12:56:48.650: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3429" for this suite. @ 04/27/24 12:56:48.655
  STEP: Destroying namespace "webhook-markers-987" for this suite. @ 04/27/24 12:56:48.663
• [6.404 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:2214
  STEP: Creating a kubernetes client @ 04/27/24 12:56:48.67
  Apr 27 12:56:48.670: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:56:48.671
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:48.693
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:48.696
  STEP: creating service in namespace services-2097 @ 04/27/24 12:56:48.699
  STEP: creating service affinity-nodeport in namespace services-2097 @ 04/27/24 12:56:48.699
  STEP: creating replication controller affinity-nodeport in namespace services-2097 @ 04/27/24 12:56:48.715
  I0427 12:56:48.723057      19 runners.go:197] Created replication controller with name: affinity-nodeport, namespace: services-2097, replica count: 3
  I0427 12:56:51.773311      19 runners.go:197] affinity-nodeport Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 27 12:56:51.787: INFO: Creating new exec pod
  Apr 27 12:56:54.809: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2097 exec execpod-affinitywcnhq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport 80'
  Apr 27 12:56:54.915: INFO: stderr: "+ nc -v -t -w 2 affinity-nodeport 80\n+ echo hostName\nConnection to affinity-nodeport 80 port [tcp/http] succeeded!\n"
  Apr 27 12:56:54.915: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 12:56:54.915: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2097 exec execpod-affinitywcnhq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.158 80'
  Apr 27 12:56:55.010: INFO: stderr: "+ nc -v -t -w 2 10.152.183.158 80\n+ echo hostName\nConnection to 10.152.183.158 80 port [tcp/http] succeeded!\n"
  Apr 27 12:56:55.010: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 12:56:55.010: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2097 exec execpod-affinitywcnhq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.6.153 31921'
  Apr 27 12:56:55.115: INFO: stderr: "+ nc -v -t -w 2 172.31.6.153 31921\n+ echo hostName\nConnection to 172.31.6.153 31921 port [tcp/*] succeeded!\n"
  Apr 27 12:56:55.115: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 12:56:55.115: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2097 exec execpod-affinitywcnhq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.82.63 31921'
  Apr 27 12:56:55.214: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.31.82.63 31921\nConnection to 172.31.82.63 31921 port [tcp/*] succeeded!\n"
  Apr 27 12:56:55.214: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 12:56:55.214: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2097 exec execpod-affinitywcnhq -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://172.31.37.185:31921/ ; done'
  Apr 27 12:56:55.383: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31921/\n"
  Apr 27 12:56:55.383: INFO: stdout: "\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8\naffinity-nodeport-6gqj8"
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Received response from host: affinity-nodeport-6gqj8
  Apr 27 12:56:55.383: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport in namespace services-2097, will wait for the garbage collector to delete the pods @ 04/27/24 12:56:55.397
  Apr 27 12:56:55.461: INFO: Deleting ReplicationController affinity-nodeport took: 8.752063ms
  Apr 27 12:56:55.561: INFO: Terminating ReplicationController affinity-nodeport pods took: 100.45657ms
  Apr 27 12:56:58.685: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2097" for this suite. @ 04/27/24 12:56:58.689
• [10.026 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events API should delete a collection of events [Conformance] [sig-instrumentation, Conformance]
k8s.io/kubernetes/test/e2e/instrumentation/events.go:207
  STEP: Creating a kubernetes client @ 04/27/24 12:56:58.697
  Apr 27 12:56:58.697: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename events @ 04/27/24 12:56:58.698
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:58.715
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:58.719
  STEP: Create set of events @ 04/27/24 12:56:58.724
  STEP: get a list of Events with a label in the current namespace @ 04/27/24 12:56:58.744
  STEP: delete a list of events @ 04/27/24 12:56:58.748
  Apr 27 12:56:58.748: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 04/27/24 12:56:58.773
  Apr 27 12:56:58.777: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-8243" for this suite. @ 04/27/24 12:56:58.781
• [0.091 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:2177
  STEP: Creating a kubernetes client @ 04/27/24 12:56:58.788
  Apr 27 12:56:58.789: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:56:58.789
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:56:58.81
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:56:58.812
  STEP: creating service in namespace services-2324 @ 04/27/24 12:56:58.816
  STEP: creating service affinity-clusterip in namespace services-2324 @ 04/27/24 12:56:58.816
  STEP: creating replication controller affinity-clusterip in namespace services-2324 @ 04/27/24 12:56:58.829
  I0427 12:56:58.835976      19 runners.go:197] Created replication controller with name: affinity-clusterip, namespace: services-2324, replica count: 3
  I0427 12:57:01.886544      19 runners.go:197] affinity-clusterip Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 27 12:57:01.895: INFO: Creating new exec pod
  Apr 27 12:57:04.916: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2324 exec execpod-affinitym2kbq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip 80'
  Apr 27 12:57:05.010: INFO: stderr: "+ nc -v -t -w 2 affinity-clusterip 80\n+ echo hostName\nConnection to affinity-clusterip 80 port [tcp/http] succeeded!\n"
  Apr 27 12:57:05.010: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 12:57:05.011: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2324 exec execpod-affinitym2kbq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.138 80'
  Apr 27 12:57:05.105: INFO: stderr: "+ nc -v -t -w 2 10.152.183.138 80\n+ echo hostName\nConnection to 10.152.183.138 80 port [tcp/http] succeeded!\n"
  Apr 27 12:57:05.105: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 12:57:05.106: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2324 exec execpod-affinitym2kbq -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.138:80/ ; done'
  Apr 27 12:57:05.258: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.138:80/\n"
  Apr 27 12:57:05.258: INFO: stdout: "\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk\naffinity-clusterip-kvpdk"
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Received response from host: affinity-clusterip-kvpdk
  Apr 27 12:57:05.258: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip in namespace services-2324, will wait for the garbage collector to delete the pods @ 04/27/24 12:57:05.274
  Apr 27 12:57:05.337: INFO: Deleting ReplicationController affinity-clusterip took: 8.598479ms
  Apr 27 12:57:05.438: INFO: Terminating ReplicationController affinity-clusterip pods took: 100.823372ms
  Apr 27 12:57:08.462: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2324" for this suite. @ 04/27/24 12:57:08.467
• [9.686 seconds]
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:285
  STEP: Creating a kubernetes client @ 04/27/24 12:57:08.475
  Apr 27 12:57:08.475: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 12:57:08.475
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:57:08.493
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:57:08.496
  STEP: Setting up server cert @ 04/27/24 12:57:08.522
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 12:57:08.732
  STEP: Deploying the webhook pod @ 04/27/24 12:57:08.739
  STEP: Wait for the deployment to be ready @ 04/27/24 12:57:08.753
  Apr 27 12:57:08.762: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 12:57:10.776
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 12:57:10.787
  Apr 27 12:57:11.787: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Apr 27 12:57:11.796: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-5406-crds.webhook.example.com via the AdmissionRegistration API @ 04/27/24 12:57:12.307
  STEP: Creating a custom resource that should be mutated by the webhook @ 04/27/24 12:57:12.32
  Apr 27 12:57:14.917: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4552" for this suite. @ 04/27/24 12:57:14.922
  STEP: Destroying namespace "webhook-markers-8809" for this suite. @ 04/27/24 12:57:14.93
• [6.462 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:498
  STEP: Creating a kubernetes client @ 04/27/24 12:57:14.938
  Apr 27 12:57:14.938: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 12:57:14.939
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:57:14.957
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:57:14.961
  STEP: Setting up server cert @ 04/27/24 12:57:14.988
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 12:57:15.372
  STEP: Deploying the webhook pod @ 04/27/24 12:57:15.382
  STEP: Wait for the deployment to be ready @ 04/27/24 12:57:15.397
  Apr 27 12:57:15.409: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 12:57:17.424
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 12:57:17.435
  Apr 27 12:57:18.435: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a mutating webhook configuration @ 04/27/24 12:57:18.444
  STEP: Updating a mutating webhook configuration's rules to not include the create operation @ 04/27/24 12:57:18.468
  STEP: Creating a configMap that should not be mutated @ 04/27/24 12:57:18.475
  STEP: Patching a mutating webhook configuration's rules to include the create operation @ 04/27/24 12:57:18.486
  STEP: Creating a configMap that should be mutated @ 04/27/24 12:57:18.493
  Apr 27 12:57:18.558: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8438" for this suite. @ 04/27/24 12:57:18.566
  STEP: Destroying namespace "webhook-markers-6501" for this suite. @ 04/27/24 12:57:18.574
• [3.651 seconds]
------------------------------
S
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:100
  STEP: Creating a kubernetes client @ 04/27/24 12:57:18.589
  Apr 27 12:57:18.589: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 12:57:18.589
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:57:18.612
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:57:18.615
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 04/27/24 12:57:18.618
  STEP: Saw pod success @ 04/27/24 12:57:20.639
  Apr 27 12:57:20.642: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-0b193a47-7601-4348-bd80-8af40c333462 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 12:57:20.65
  Apr 27 12:57:20.669: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-7017" for this suite. @ 04/27/24 12:57:20.673
• [2.092 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:539
  STEP: Creating a kubernetes client @ 04/27/24 12:57:20.681
  Apr 27 12:57:20.681: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename gc @ 04/27/24 12:57:20.681
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:57:20.701
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:57:20.704
  STEP: create the deployment @ 04/27/24 12:57:20.707
  W0427 12:57:20.713097      19 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 04/27/24 12:57:20.713
  STEP: delete the deployment @ 04/27/24 12:57:21.222
  STEP: wait for deployment deletion to see if the garbage collector mistakenly deletes the rs @ 04/27/24 12:57:21.232
  STEP: Gathering metrics @ 04/27/24 12:57:21.753
  W0427 12:57:21.759691      19 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Apr 27 12:57:21.759: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 27 12:57:21.759: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-8207" for this suite. @ 04/27/24 12:57:21.764
• [1.091 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:1031
  STEP: Creating a kubernetes client @ 04/27/24 12:57:21.772
  Apr 27 12:57:21.772: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename statefulset @ 04/27/24 12:57:21.773
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:57:21.793
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:57:21.796
  STEP: Creating service test in namespace statefulset-6300 @ 04/27/24 12:57:21.799
  STEP: Creating statefulset ss in namespace statefulset-6300 @ 04/27/24 12:57:21.811
  Apr 27 12:57:21.827: INFO: Found 0 stateful pods, waiting for 1
  Apr 27 12:57:31.826: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Patch Statefulset to include a label @ 04/27/24 12:57:31.834
  STEP: Getting /status @ 04/27/24 12:57:31.842
  Apr 27 12:57:31.846: INFO: StatefulSet ss has Conditions: []v1.StatefulSetCondition(nil)
  STEP: updating the StatefulSet Status @ 04/27/24 12:57:31.846
  Apr 27 12:57:31.858: INFO: updatedStatus.Conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the statefulset status to be updated @ 04/27/24 12:57:31.858
  Apr 27 12:57:31.860: INFO: Observed &StatefulSet event: ADDED
  Apr 27 12:57:31.860: INFO: Found Statefulset ss in namespace statefulset-6300 with labels: map[e2e:testing] annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 27 12:57:31.860: INFO: Statefulset ss has an updated status
  STEP: patching the Statefulset Status @ 04/27/24 12:57:31.86
  Apr 27 12:57:31.860: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Apr 27 12:57:31.867: INFO: Patched status conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Statefulset status to be patched @ 04/27/24 12:57:31.867
  Apr 27 12:57:31.869: INFO: Observed &StatefulSet event: ADDED
  Apr 27 12:57:31.869: INFO: Observed Statefulset ss in namespace statefulset-6300 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 27 12:57:31.869: INFO: Observed &StatefulSet event: MODIFIED
  Apr 27 12:57:31.869: INFO: Deleting all statefulset in ns statefulset-6300
  Apr 27 12:57:31.872: INFO: Scaling statefulset ss to 0
  Apr 27 12:57:41.891: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 27 12:57:41.895: INFO: Deleting statefulset ss
  Apr 27 12:57:41.910: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-6300" for this suite. @ 04/27/24 12:57:41.915
• [20.150 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1493
  STEP: Creating a kubernetes client @ 04/27/24 12:57:41.923
  Apr 27 12:57:41.923: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:57:41.923
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:57:41.94
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:57:41.943
  STEP: creating a service clusterip-service with the type=ClusterIP in namespace services-4562 @ 04/27/24 12:57:41.946
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 04/27/24 12:57:41.959
  STEP: creating service externalsvc in namespace services-4562 @ 04/27/24 12:57:41.959
  STEP: creating replication controller externalsvc in namespace services-4562 @ 04/27/24 12:57:41.971
  I0427 12:57:41.980346      19 runners.go:197] Created replication controller with name: externalsvc, namespace: services-4562, replica count: 2
  I0427 12:57:45.030884      19 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the ClusterIP service to type=ExternalName @ 04/27/24 12:57:45.036
  Apr 27 12:57:45.053: INFO: Creating new exec pod
  Apr 27 12:57:47.074: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-4562 exec execpodfvc2v -- /bin/sh -x -c nslookup clusterip-service.services-4562.svc.cluster.local'
  Apr 27 12:57:47.189: INFO: stderr: "+ nslookup clusterip-service.services-4562.svc.cluster.local\n"
  Apr 27 12:57:47.189: INFO: stdout: "Server:\t\t10.152.183.117\nAddress:\t10.152.183.117#53\n\nclusterip-service.services-4562.svc.cluster.local\tcanonical name = externalsvc.services-4562.svc.cluster.local.\nName:\texternalsvc.services-4562.svc.cluster.local\nAddress: 10.152.183.36\n\n"
  STEP: deleting ReplicationController externalsvc in namespace services-4562, will wait for the garbage collector to delete the pods @ 04/27/24 12:57:47.189
  Apr 27 12:57:47.251: INFO: Deleting ReplicationController externalsvc took: 7.511578ms
  Apr 27 12:57:47.351: INFO: Terminating ReplicationController externalsvc pods took: 100.50471ms
  Apr 27 12:57:50.571: INFO: Cleaning up the ClusterIP to ExternalName test service
  Apr 27 12:57:50.583: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4562" for this suite. @ 04/27/24 12:57:50.587
• [8.675 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:103
  STEP: Creating a kubernetes client @ 04/27/24 12:57:50.598
  Apr 27 12:57:50.598: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 12:57:50.599
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:57:50.616
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:57:50.619
  STEP: Counting existing ResourceQuota @ 04/27/24 12:57:50.622
  STEP: Creating a ResourceQuota @ 04/27/24 12:57:55.627
  STEP: Ensuring resource quota status is calculated @ 04/27/24 12:57:55.632
  STEP: Creating a Service @ 04/27/24 12:57:57.638
  STEP: Creating a NodePort Service @ 04/27/24 12:57:57.657
  STEP: Not allowing a LoadBalancer Service with NodePort to be created that exceeds remaining quota @ 04/27/24 12:57:57.681
  STEP: Ensuring resource quota status captures service creation @ 04/27/24 12:57:57.706
  STEP: Deleting Services @ 04/27/24 12:57:59.712
  STEP: Ensuring resource quota status released usage @ 04/27/24 12:57:59.75
  Apr 27 12:58:01.756: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-7071" for this suite. @ 04/27/24 12:58:01.761
• [11.171 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:147
  STEP: Creating a kubernetes client @ 04/27/24 12:58:01.77
  Apr 27 12:58:01.770: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubelet-test @ 04/27/24 12:58:01.771
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:58:01.79
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:58:01.793
  STEP: Waiting for pod completion @ 04/27/24 12:58:01.805
  Apr 27 12:58:03.824: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-2222" for this suite. @ 04/27/24 12:58:03.829
• [2.066 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:183
  STEP: Creating a kubernetes client @ 04/27/24 12:58:03.836
  Apr 27 12:58:03.836: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubelet-test @ 04/27/24 12:58:03.837
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:58:03.856
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:58:03.859
  Apr 27 12:58:05.895: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-6779" for this suite. @ 04/27/24 12:58:05.9
• [2.071 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Services should test the lifecycle of an Endpoint [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:3154
  STEP: Creating a kubernetes client @ 04/27/24 12:58:05.908
  Apr 27 12:58:05.908: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 12:58:05.908
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:58:05.926
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:58:05.929
  STEP: creating an Endpoint @ 04/27/24 12:58:05.936
  STEP: waiting for available Endpoint @ 04/27/24 12:58:05.941
  STEP: listing all Endpoints @ 04/27/24 12:58:05.942
  STEP: updating the Endpoint @ 04/27/24 12:58:05.946
  STEP: fetching the Endpoint @ 04/27/24 12:58:05.953
  STEP: patching the Endpoint @ 04/27/24 12:58:05.957
  STEP: fetching the Endpoint @ 04/27/24 12:58:05.965
  STEP: deleting the Endpoint by Collection @ 04/27/24 12:58:05.968
  STEP: waiting for Endpoint deletion @ 04/27/24 12:58:05.978
  STEP: fetching the Endpoint @ 04/27/24 12:58:05.979
  Apr 27 12:58:05.983: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1347" for this suite. @ 04/27/24 12:58:05.986
• [0.086 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:220
  STEP: Creating a kubernetes client @ 04/27/24 12:58:05.994
  Apr 27 12:58:05.994: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 12:58:05.995
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:58:06.015
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:58:06.018
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 04/27/24 12:58:06.021
  STEP: Saw pod success @ 04/27/24 12:58:10.047
  Apr 27 12:58:10.052: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-130c0cba-0280-4d5e-809a-f38c3465345d container test-container: <nil>
  STEP: delete the pod @ 04/27/24 12:58:10.06
  Apr 27 12:58:10.080: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2253" for this suite. @ 04/27/24 12:58:10.084
• [4.097 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:99
  STEP: Creating a kubernetes client @ 04/27/24 12:58:10.092
  Apr 27 12:58:10.092: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 12:58:10.092
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:58:10.112
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:58:10.115
  STEP: Creating secret with name secret-test-6847c1de-8ecb-4686-b9a5-775bab017b49 @ 04/27/24 12:58:10.14
  STEP: Creating a pod to test consume secrets @ 04/27/24 12:58:10.146
  STEP: Saw pod success @ 04/27/24 12:58:14.171
  Apr 27 12:58:14.176: INFO: Trying to get logs from node ip-172-31-37-185 pod pod-secrets-df6a4ffa-fa7e-44d6-8d7a-7a3b4193ce85 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 12:58:14.19
  Apr 27 12:58:14.206: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-1558" for this suite. @ 04/27/24 12:58:14.212
  STEP: Destroying namespace "secret-namespace-3546" for this suite. @ 04/27/24 12:58:14.22
• [4.135 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:251
  STEP: Creating a kubernetes client @ 04/27/24 12:58:14.227
  Apr 27 12:58:14.227: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 12:58:14.227
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:58:14.246
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:58:14.248
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 12:58:14.251
  STEP: Saw pod success @ 04/27/24 12:58:18.275
  Apr 27 12:58:18.280: INFO: Trying to get logs from node ip-172-31-37-185 pod downwardapi-volume-12509137-1b2a-4969-b3ea-9bd824e81064 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 12:58:18.288
  Apr 27 12:58:18.304: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3808" for this suite. @ 04/27/24 12:58:18.308
• [4.089 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/configmap.go:94
  STEP: Creating a kubernetes client @ 04/27/24 12:58:18.316
  Apr 27 12:58:18.316: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 12:58:18.316
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:58:18.337
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:58:18.34
  STEP: Creating configMap configmap-942/configmap-test-a885c0e6-85e3-4a67-9d5d-2467d3257fcf @ 04/27/24 12:58:18.343
  STEP: Creating a pod to test consume configMaps @ 04/27/24 12:58:18.348
  STEP: Saw pod success @ 04/27/24 12:58:22.376
  Apr 27 12:58:22.380: INFO: Trying to get logs from node ip-172-31-37-185 pod pod-configmaps-57e970bd-ec90-4e44-a411-8a9d49e2ca1a container env-test: <nil>
  STEP: delete the pod @ 04/27/24 12:58:22.389
  Apr 27 12:58:22.408: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-942" for this suite. @ 04/27/24 12:58:22.413
• [4.104 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/ephemeral_containers.go:98
  STEP: Creating a kubernetes client @ 04/27/24 12:58:22.42
  Apr 27 12:58:22.420: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 04/27/24 12:58:22.421
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:58:22.44
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:58:22.443
  STEP: creating a target pod @ 04/27/24 12:58:22.446
  STEP: adding an ephemeral container @ 04/27/24 12:58:24.475
  STEP: checking pod container endpoints @ 04/27/24 12:58:26.494
  Apr 27 12:58:26.494: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-33 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 12:58:26.494: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 12:58:26.495: INFO: ExecWithOptions: Clientset creation
  Apr 27 12:58:26.495: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/ephemeral-containers-test-33/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Apr 27 12:58:26.546: INFO: Exec stderr: ""
  STEP: checking pod "ephemeral-containers-target-pod" has only one ephemeralcontainer @ 04/27/24 12:58:26.555
  STEP: adding another ephemeralcontainer to pod "ephemeral-containers-target-pod" @ 04/27/24 12:58:26.56
  STEP: checking pod "ephemeral-containers-target-pod" has only two ephemeralcontainers @ 04/27/24 12:58:26.572
  Apr 27 12:58:26.577: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-33" for this suite. @ 04/27/24 12:58:26.582
• [4.169 seconds]
------------------------------
SS
------------------------------
[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance] [sig-node, Serial, Disruptive, Conformance]
k8s.io/kubernetes/test/e2e/node/taints.go:290
  STEP: Creating a kubernetes client @ 04/27/24 12:58:26.589
  Apr 27 12:58:26.589: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename taint-single-pod @ 04/27/24 12:58:26.59
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 12:58:26.606
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 12:58:26.609
  Apr 27 12:58:26.612: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 27 12:59:26.612: INFO: Waiting for terminating namespaces to be deleted...
  Apr 27 12:59:26.618: INFO: Starting informer...
  STEP: Starting pod... @ 04/27/24 12:59:26.618
  Apr 27 12:59:26.835: INFO: Pod is running on ip-172-31-82-63. Tainting Node
  STEP: Trying to apply a taint on the Node @ 04/27/24 12:59:26.835
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 04/27/24 12:59:26.846
  STEP: Waiting short time to make sure Pod is queued for deletion @ 04/27/24 12:59:26.85
  Apr 27 12:59:26.850: INFO: Pod wasn't evicted. Proceeding
  Apr 27 12:59:26.850: INFO: Removing taint from Node
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 04/27/24 12:59:26.861
  STEP: Waiting some time to make sure that toleration time passed. @ 04/27/24 12:59:26.869
  Apr 27 13:00:41.869: INFO: Pod wasn't evicted. Test successful
  Apr 27 13:00:41.869: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-single-pod-8186" for this suite. @ 04/27/24 13:00:41.875
• [135.294 seconds]
------------------------------
[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:219
  STEP: Creating a kubernetes client @ 04/27/24 13:00:41.883
  Apr 27 13:00:41.883: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:00:41.884
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:00:41.903
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:00:41.905
  STEP: Creating a pod to test downward api env vars @ 04/27/24 13:00:41.908
  STEP: Saw pod success @ 04/27/24 13:00:45.935
  Apr 27 13:00:45.939: INFO: Trying to get logs from node ip-172-31-82-63 pod downward-api-ef080052-f6f5-4885-9b74-aae01081e567 container dapi-container: <nil>
  STEP: delete the pod @ 04/27/24 13:00:45.957
  Apr 27 13:00:45.976: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1237" for this suite. @ 04/27/24 13:00:45.981
• [4.105 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:100
  STEP: Creating a kubernetes client @ 04/27/24 13:00:45.989
  Apr 27 13:00:45.989: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:00:45.989
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:00:46.009
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:00:46.012
  STEP: Creating configMap with name projected-configmap-test-volume-map-58852841-89f7-4526-8099-6c4f3a916884 @ 04/27/24 13:00:46.017
  STEP: Creating a pod to test consume configMaps @ 04/27/24 13:00:46.022
  STEP: Saw pod success @ 04/27/24 13:00:50.047
  Apr 27 13:00:50.052: INFO: Trying to get logs from node ip-172-31-37-185 pod pod-projected-configmaps-09d475b7-44d3-49dd-b613-384908b1add1 container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 13:00:50.065
  Apr 27 13:00:50.081: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-717" for this suite. @ 04/27/24 13:00:50.085
• [4.104 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:622
  STEP: Creating a kubernetes client @ 04/27/24 13:00:50.093
  Apr 27 13:00:50.093: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename field-validation @ 04/27/24 13:00:50.094
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:00:50.112
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:00:50.115
  Apr 27 13:00:50.119: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  W0427 13:00:52.654110      19 warnings.go:70] unknown field "alpha"
  W0427 13:00:52.654215      19 warnings.go:70] unknown field "beta"
  W0427 13:00:52.654294      19 warnings.go:70] unknown field "delta"
  W0427 13:00:52.654328      19 warnings.go:70] unknown field "epsilon"
  W0427 13:00:52.654383      19 warnings.go:70] unknown field "gamma"
  Apr 27 13:00:53.204: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-5635" for this suite. @ 04/27/24 13:00:53.209
• [3.125 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:818
  STEP: Creating a kubernetes client @ 04/27/24 13:00:53.218
  Apr 27 13:00:53.218: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename gc @ 04/27/24 13:00:53.219
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:00:53.239
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:00:53.242
  Apr 27 13:00:53.274: INFO: pod1.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod3", UID:"52d86e00-717f-401c-b103-49de652ab5f6", Controller:(*bool)(0xc00338640e), BlockOwnerDeletion:(*bool)(0xc00338640f)}}
  Apr 27 13:00:53.281: INFO: pod2.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod1", UID:"4175ce6a-ffd5-48a7-845a-85a35eb7c451", Controller:(*bool)(0xc0041ec266), BlockOwnerDeletion:(*bool)(0xc0041ec267)}}
  Apr 27 13:00:53.289: INFO: pod3.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod2", UID:"0ab73f80-1f30-4d1c-93e7-866bb4b5b603", Controller:(*bool)(0xc0041ec49e), BlockOwnerDeletion:(*bool)(0xc0041ec49f)}}
  Apr 27 13:00:58.301: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-4104" for this suite. @ 04/27/24 13:00:58.305
• [5.096 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:403
  STEP: Creating a kubernetes client @ 04/27/24 13:00:58.314
  Apr 27 13:00:58.314: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:00:58.315
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:00:58.335
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:00:58.337
  STEP: Setting up server cert @ 04/27/24 13:00:58.367
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:00:58.55
  STEP: Deploying the webhook pod @ 04/27/24 13:00:58.56
  STEP: Wait for the deployment to be ready @ 04/27/24 13:00:58.573
  Apr 27 13:00:58.580: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 04/27/24 13:01:00.595
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:01:00.605
  Apr 27 13:01:01.605: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a validating webhook configuration @ 04/27/24 13:01:01.615
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/27/24 13:01:01.631
  STEP: Updating a validating webhook configuration's rules to not include the create operation @ 04/27/24 13:01:01.637
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/27/24 13:01:01.651
  STEP: Patching a validating webhook configuration's rules to include the create operation @ 04/27/24 13:01:01.664
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/27/24 13:01:01.671
  Apr 27 13:01:01.723: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7299" for this suite. @ 04/27/24 13:01:01.727
  STEP: Destroying namespace "webhook-markers-4000" for this suite. @ 04/27/24 13:01:01.736
• [3.430 seconds]
------------------------------
SS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/lifecycle_hook.go:169
  STEP: Creating a kubernetes client @ 04/27/24 13:01:01.744
  Apr 27 13:01:01.744: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 04/27/24 13:01:01.745
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:01:01.771
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:01:01.774
  STEP: create the container to handle the HTTPGet hook request. @ 04/27/24 13:01:01.782
  STEP: create the pod with lifecycle hook @ 04/27/24 13:01:03.805
  STEP: check poststart hook @ 04/27/24 13:01:05.829
  STEP: delete the pod with lifecycle hook @ 04/27/24 13:01:05.847
  Apr 27 13:01:07.866: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-9209" for this suite. @ 04/27/24 13:01:07.87
• [6.134 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:198
  STEP: Creating a kubernetes client @ 04/27/24 13:01:07.879
  Apr 27 13:01:07.879: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 13:01:07.879
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:01:07.899
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:01:07.902
  STEP: Creating pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677 @ 04/27/24 13:01:07.905
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/27/24 13:01:09.926
  Apr 27 13:01:09.934: INFO: Initial restart count of pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e is 0
  Apr 27 13:01:09.939: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:11.944: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:13.950: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:15.955: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:17.961: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:19.967: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:21.973: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:23.979: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:25.984: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:27.990: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:29.995: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:29.995: INFO: Restart count of pod container-probe-7677/liveness-b174da19-b12b-45ea-8068-c100dcfde77e is now 1 (20.061690623s elapsed)
  Apr 27 13:01:32.000: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:34.005: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:36.011: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:38.016: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:40.022: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:42.028: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:44.033: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:46.039: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:48.043: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:50.050: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:50.050: INFO: Restart count of pod container-probe-7677/liveness-b174da19-b12b-45ea-8068-c100dcfde77e is now 2 (40.11609525s elapsed)
  Apr 27 13:01:52.056: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:54.061: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:56.067: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:01:58.073: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:00.078: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:02.084: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:04.089: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:06.095: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:08.099: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:10.106: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:10.106: INFO: Restart count of pod container-probe-7677/liveness-b174da19-b12b-45ea-8068-c100dcfde77e is now 3 (1m0.172077741s elapsed)
  Apr 27 13:02:12.112: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:14.117: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:16.123: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:18.129: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:20.134: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:22.139: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:24.146: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:26.152: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:28.158: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:30.164: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:30.164: INFO: Restart count of pod container-probe-7677/liveness-b174da19-b12b-45ea-8068-c100dcfde77e is now 4 (1m20.229966697s elapsed)
  Apr 27 13:02:32.169: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:34.174: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:36.181: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:38.186: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:40.191: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:42.197: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:44.202: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:46.207: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:48.213: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:50.220: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:52.226: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:54.232: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:56.238: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:02:58.243: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:00.250: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:02.256: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:04.263: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:06.267: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:08.273: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:10.279: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:12.285: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:14.290: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:16.295: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:18.301: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:20.307: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:22.312: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:24.318: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:26.323: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:28.329: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:30.335: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:32.341: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:34.347: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:36.352: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:38.357: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:40.363: INFO: Get pod liveness-b174da19-b12b-45ea-8068-c100dcfde77e in namespace container-probe-7677
  Apr 27 13:03:40.363: INFO: Restart count of pod container-probe-7677/liveness-b174da19-b12b-45ea-8068-c100dcfde77e is now 5 (2m30.429569795s elapsed)
  STEP: deleting the pod @ 04/27/24 13:03:40.363
  Apr 27 13:03:40.375: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-7677" for this suite. @ 04/27/24 13:03:40.379
• [152.508 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:168
  STEP: Creating a kubernetes client @ 04/27/24 13:03:40.387
  Apr 27 13:03:40.387: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:03:40.388
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:03:40.406
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:03:40.409
  STEP: Creating a pod to test downward api env vars @ 04/27/24 13:03:40.412
  STEP: Saw pod success @ 04/27/24 13:03:42.433
  Apr 27 13:03:42.437: INFO: Trying to get logs from node ip-172-31-82-63 pod downward-api-b45d6e9c-fd4b-4dbd-9c61-82b3f7c10080 container dapi-container: <nil>
  STEP: delete the pod @ 04/27/24 13:03:42.45
  Apr 27 13:03:42.470: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3038" for this suite. @ 04/27/24 13:03:42.474
• [2.094 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/configmap.go:139
  STEP: Creating a kubernetes client @ 04/27/24 13:03:42.484
  Apr 27 13:03:42.484: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 13:03:42.485
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:03:42.503
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:03:42.507
  STEP: Creating configMap that has name configmap-test-emptyKey-2591f1a8-d944-4170-9d93-a16ec3c5adf0 @ 04/27/24 13:03:42.51
  Apr 27 13:03:42.512: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8015" for this suite. @ 04/27/24 13:03:42.516
• [0.039 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:105
  STEP: Creating a kubernetes client @ 04/27/24 13:03:42.524
  Apr 27 13:03:42.524: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename deployment @ 04/27/24 13:03:42.524
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:03:42.544
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:03:42.547
  Apr 27 13:03:42.551: INFO: Creating replica set "test-rolling-update-controller" (going to be adopted)
  Apr 27 13:03:42.560: INFO: Pod name sample-pod: Found 0 pods out of 1
  Apr 27 13:03:47.565: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/27/24 13:03:47.565
  Apr 27 13:03:47.566: INFO: Creating deployment "test-rolling-update-deployment"
  Apr 27 13:03:47.572: INFO: Ensuring deployment "test-rolling-update-deployment" gets the next revision from the one the adopted replica set "test-rolling-update-controller" has
  Apr 27 13:03:47.579: INFO: new replicaset for deployment "test-rolling-update-deployment" is yet to be created
  Apr 27 13:03:49.588: INFO: Ensuring status for deployment "test-rolling-update-deployment" is the expected
  Apr 27 13:03:49.592: INFO: Ensuring deployment "test-rolling-update-deployment" has one old replica set (the one it adopted)
  Apr 27 13:03:49.604: INFO: Deployment "test-rolling-update-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9078",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "db7b0297-8092-457f-8862-f2730be6468b",
      ResourceVersion: (string) (len=5) "24539",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849819827,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=10) "sample-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819827,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819829,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=10) "sample-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=10) "sample-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819827,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819827,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819829,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819827,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=83) "ReplicaSet \"test-rolling-update-deployment-7ddb77f68b\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 27 13:03:49.610: INFO: New ReplicaSet "test-rolling-update-deployment-7ddb77f68b" of Deployment "test-rolling-update-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=41) "test-rolling-update-deployment-7ddb77f68b",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9078",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5e44dbe0-4687-4428-863a-c1400d0533f1",
      ResourceVersion: (string) (len=5) "24529",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849819827,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "7ddb77f68b"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "db7b0297-8092-457f-8862-f2730be6468b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819827,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 64 62 37 62 30 32  39 37 2d 38 30 39 32 2d  |\"db7b0297-8092-|
              00000120  34 35 37 66 2d 38 38 36  32 2d 66 32 37 33 30 62  |457f-8862-f2730b|
              00000130  65 36 34 36 38 62 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |e6468b\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819829,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "7ddb77f68b"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "7ddb77f68b"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:03:49.610: INFO: All old ReplicaSets of Deployment "test-rolling-update-deployment":
  Apr 27 13:03:49.611: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9078",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "207a6599-aabc-48e6-be80-d2ef0ac9fa7f",
      ResourceVersion: (string) (len=5) "24538",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849819822,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305832"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "db7b0297-8092-457f-8862-f2730be6468b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819822,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=533) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  2c 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |,"f:labels":{"."|
              00000060  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000070  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              00000080  73 70 65 63 22 3a 7b 22  66 3a 73 65 6c 65 63 74  |spec":{"f:select|
              00000090  6f 72 22 3a 7b 7d 2c 22  66 3a 74 65 6d 70 6c 61  |or":{},"f:templa|
              000000a0  74 65 22 3a 7b 22 66 3a  6d 65 74 61 64 61 74 61  |te":{"f:metadata|
              000000b0  22 3a 7b 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |":{"f:labels":{"|
              000000c0  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              000000d0  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 7d 2c 22  |},"f:pod":{}}},"|
              000000e0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000f0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              00000100  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              00000110  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000120  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000130  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000140  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000150  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 74 65  |ources":{},"f:te|
              00000160  72 6d 69 6e 61 74 69 6f  6e 4d 65 73 73 61 67 65  |rminationMessage|
              00000170  50 61 74 68 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |Path":{},"f:term|
              00000180  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 6f  |inationMessagePo|
              00000190  6c 69 63 79 22 3a 7b 7d  7d 7d 2c 22 66 3a 64 6e  |licy":{}}},"f:dn|
              000001a0  73 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 72  |sPolicy":{},"f:r|
              000001b0  65 73 74 61 72 74 50 6f  6c 69 63 79 22 3a 7b 7d  |estartPolicy":{}|
              000001c0  2c 22 66 3a 73 63 68 65  64 75 6c 65 72 4e 61 6d  |,"f:schedulerNam|
              000001d0  65 22 3a 7b 7d 2c 22 66  3a 73 65 63 75 72 69 74  |e":{},"f:securit|
              000001e0  79 43 6f 6e 74 65 78 74  22 3a 7b 7d 2c 22 66 3a  |yContext":{},"f:|
              000001f0  74 65 72 6d 69 6e 61 74  69 6f 6e 47 72 61 63 65  |terminationGrace|
              00000200  50 65 72 69 6f 64 53 65  63 6f 6e 64 73 22 3a 7b  |PeriodSeconds":{|
              00000210  7d 7d 7d 7d 7d                                    |}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819829,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=242) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 66 3a 64 65 70 6c 6f  79 6d 65 6e 74 2e 6b 75  |"f:deployment.ku|
              00000030  62 65 72 6e 65 74 65 73  2e 69 6f 2f 64 65 73 69  |bernetes.io/desi|
              00000040  72 65 64 2d 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |red-replicas":{}|
              00000050  2c 22 66 3a 64 65 70 6c  6f 79 6d 65 6e 74 2e 6b  |,"f:deployment.k|
              00000060  75 62 65 72 6e 65 74 65  73 2e 69 6f 2f 6d 61 78  |ubernetes.io/max|
              00000070  2d 72 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 2c 22  |-replicas":{}},"|
              00000080  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000090  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              000000a0  22 75 69 64 5c 22 3a 5c  22 64 62 37 62 30 32 39  |"uid\":\"db7b029|
              000000b0  37 2d 38 30 39 32 2d 34  35 37 66 2d 38 38 36 32  |7-8092-457f-8862|
              000000c0  2d 66 32 37 33 30 62 65  36 34 36 38 62 5c 22 7d  |-f2730be6468b\"}|
              000000d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000000e0  7b 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |{"f:replicas":{}|
              000000f0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819829,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=3) "pod": (string) (len=5) "httpd",
          (string) (len=4) "name": (string) (len=10) "sample-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:03:49.615: INFO: Pod "test-rolling-update-deployment-7ddb77f68b-7qwr2" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=47) "test-rolling-update-deployment-7ddb77f68b-7qwr2",
      GenerateName: (string) (len=42) "test-rolling-update-deployment-7ddb77f68b-",
      Namespace: (string) (len=15) "deployment-9078",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "85f0d64e-6154-427d-a774-33e477e0e253",
      ResourceVersion: (string) (len=5) "24528",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849819827,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "7ddb77f68b"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=41) "test-rolling-update-deployment-7ddb77f68b",
          UID: (types.UID) (len=36) "5e44dbe0-4687-4428-863a-c1400d0533f1",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819827,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 65  34 34 64 62 65 30 2d 34  |d\":\"5e44dbe0-4|
              00000090  36 38 37 2d 34 34 32 38  2d 38 36 33 61 2d 63 31  |687-4428-863a-c1|
              000000a0  34 30 30 64 30 35 33 33  66 31 5c 22 7d 22 3a 7b  |400d0533f1\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819829,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=664) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 31 37  32 2e 31 39 37 5c 22 7d  |2.168.172.197\"}|
              00000270  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              00000280  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000290  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-r2qf5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-r2qf5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819829,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819827,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819829,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819829,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849819827,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) (len=15) "192.168.172.197",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.172.197"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849819827,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849819828,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:cc249acbd34692826b2b335335615e060fdb3c0bca4954507aa3a1d1194de253",
          ContainerID: (string) (len=77) "containerd://787ceaeb3869b8b7c267426e4763402fd9f512c1a20a8f5b60d50a0d2f31f275",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:03:49.617: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-9078" for this suite. @ 04/27/24 13:03:49.622
• [7.107 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:330
  STEP: Creating a kubernetes client @ 04/27/24 13:03:49.631
  Apr 27 13:03:49.631: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 13:03:49.631
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:03:49.647
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:03:49.65
  STEP: Counting existing ResourceQuota @ 04/27/24 13:04:06.659
  STEP: Creating a ResourceQuota @ 04/27/24 13:04:11.665
  STEP: Ensuring resource quota status is calculated @ 04/27/24 13:04:11.67
  STEP: Creating a ConfigMap @ 04/27/24 13:04:13.676
  STEP: Ensuring resource quota status captures configMap creation @ 04/27/24 13:04:13.69
  STEP: Deleting a ConfigMap @ 04/27/24 13:04:15.696
  STEP: Ensuring resource quota status released usage @ 04/27/24 13:04:15.704
  Apr 27 13:04:17.710: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-7499" for this suite. @ 04/27/24 13:04:17.714
• [28.091 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance] [sig-node, Serial, Disruptive, Conformance]
k8s.io/kubernetes/test/e2e/node/taints.go:450
  STEP: Creating a kubernetes client @ 04/27/24 13:04:17.722
  Apr 27 13:04:17.722: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename taint-multiple-pods @ 04/27/24 13:04:17.723
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:04:17.742
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:04:17.745
  Apr 27 13:04:17.748: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 27 13:05:17.749: INFO: Waiting for terminating namespaces to be deleted...
  Apr 27 13:05:17.755: INFO: Starting informer...
  STEP: Starting pods... @ 04/27/24 13:05:17.755
  Apr 27 13:05:17.975: INFO: Pod1 is running on ip-172-31-82-63. Tainting Node
  Apr 27 13:05:20.201: INFO: Pod2 is running on ip-172-31-82-63. Tainting Node
  STEP: Trying to apply a taint on the Node @ 04/27/24 13:05:20.201
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 04/27/24 13:05:20.213
  STEP: Waiting for Pod1 and Pod2 to be deleted @ 04/27/24 13:05:20.216
  Apr 27 13:05:26.362: INFO: Noticed Pod "taint-eviction-b1" gets evicted.
  Apr 27 13:05:46.399: INFO: Noticed Pod "taint-eviction-b2" gets evicted.
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 04/27/24 13:05:46.412
  Apr 27 13:05:46.416: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-multiple-pods-9296" for this suite. @ 04/27/24 13:05:46.42
• [88.707 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:95
  STEP: Creating a kubernetes client @ 04/27/24 13:05:46.43
  Apr 27 13:05:46.430: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename var-expansion @ 04/27/24 13:05:46.43
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:05:46.501
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:05:46.505
  STEP: Creating a pod to test substitution in container's args @ 04/27/24 13:05:46.508
  STEP: Saw pod success @ 04/27/24 13:05:50.533
  Apr 27 13:05:50.539: INFO: Trying to get logs from node ip-172-31-82-63 pod var-expansion-578a421b-3557-4e0f-956e-e66a45afed1c container dapi-container: <nil>
  STEP: delete the pod @ 04/27/24 13:05:50.557
  Apr 27 13:05:50.580: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-367" for this suite. @ 04/27/24 13:05:50.584
• [4.164 seconds]
------------------------------
SSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl version should check is all data is printed [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1731
  STEP: Creating a kubernetes client @ 04/27/24 13:05:50.594
  Apr 27 13:05:50.594: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:05:50.594
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:05:50.612
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:05:50.616
  Apr 27 13:05:50.620: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-1974 version'
  Apr 27 13:05:50.660: INFO: stderr: ""
  Apr 27 13:05:50.660: INFO: stdout: "Client Version: v1.29.4\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.29.4\n"
  Apr 27 13:05:50.660: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1974" for this suite. @ 04/27/24 13:05:50.665
• [0.079 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:371
  STEP: Creating a kubernetes client @ 04/27/24 13:05:50.673
  Apr 27 13:05:50.673: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:05:50.674
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:05:50.691
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:05:50.694
  STEP: Setting up server cert @ 04/27/24 13:05:50.725
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:05:50.868
  STEP: Deploying the webhook pod @ 04/27/24 13:05:50.898
  STEP: Wait for the deployment to be ready @ 04/27/24 13:05:50.911
  Apr 27 13:05:50.920: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:05:52.935
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:05:52.948
  Apr 27 13:05:53.948: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Setting timeout (1s) shorter than webhook latency (5s) @ 04/27/24 13:05:53.957
  STEP: Registering slow webhook via the AdmissionRegistration API @ 04/27/24 13:05:53.957
  STEP: Request fails when timeout (1s) is shorter than slow webhook latency (5s) @ 04/27/24 13:05:53.97
  STEP: Having no error when timeout is shorter than webhook latency and failure policy is ignore @ 04/27/24 13:05:54.983
  STEP: Registering slow webhook via the AdmissionRegistration API @ 04/27/24 13:05:54.983
  STEP: Having no error when timeout is longer than webhook latency @ 04/27/24 13:05:56.015
  STEP: Registering slow webhook via the AdmissionRegistration API @ 04/27/24 13:05:56.015
  STEP: Having no error when timeout is empty (defaulted to 10s in v1) @ 04/27/24 13:06:01.051
  STEP: Registering slow webhook via the AdmissionRegistration API @ 04/27/24 13:06:01.051
  Apr 27 13:06:06.139: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8206" for this suite. @ 04/27/24 13:06:06.146
  STEP: Destroying namespace "webhook-markers-2556" for this suite. @ 04/27/24 13:06:06.153
• [15.486 seconds]
------------------------------
S
------------------------------
[sig-apps] CronJob should support CronJob API operations [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:324
  STEP: Creating a kubernetes client @ 04/27/24 13:06:06.16
  Apr 27 13:06:06.160: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename cronjob @ 04/27/24 13:06:06.16
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:06:06.178
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:06:06.181
  STEP: Creating a cronjob @ 04/27/24 13:06:06.184
  STEP: creating @ 04/27/24 13:06:06.184
  STEP: getting @ 04/27/24 13:06:06.19
  STEP: listing @ 04/27/24 13:06:06.193
  STEP: watching @ 04/27/24 13:06:06.198
  Apr 27 13:06:06.198: INFO: starting watch
  STEP: cluster-wide listing @ 04/27/24 13:06:06.199
  STEP: cluster-wide watching @ 04/27/24 13:06:06.203
  Apr 27 13:06:06.203: INFO: starting watch
  STEP: patching @ 04/27/24 13:06:06.204
  STEP: updating @ 04/27/24 13:06:06.211
  Apr 27 13:06:06.220: INFO: waiting for watch events with expected annotations
  Apr 27 13:06:06.220: INFO: saw patched and updated annotations
  STEP: patching /status @ 04/27/24 13:06:06.22
  STEP: updating /status @ 04/27/24 13:06:06.227
  STEP: get /status @ 04/27/24 13:06:06.236
  STEP: deleting @ 04/27/24 13:06:06.24
  STEP: deleting a collection @ 04/27/24 13:06:06.259
  Apr 27 13:06:06.273: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-3515" for this suite. @ 04/27/24 13:06:06.277
• [0.124 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/table_conversion.go:154
  STEP: Creating a kubernetes client @ 04/27/24 13:06:06.284
  Apr 27 13:06:06.284: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename tables @ 04/27/24 13:06:06.285
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:06:06.305
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:06:06.308
  Apr 27 13:06:06.314: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "tables-8763" for this suite. @ 04/27/24 13:06:06.319
• [0.047 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:227
  STEP: Creating a kubernetes client @ 04/27/24 13:06:06.331
  Apr 27 13:06:06.331: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 13:06:06.332
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:06:06.352
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:06:06.355
  STEP: creating the pod @ 04/27/24 13:06:06.359
  STEP: setting up watch @ 04/27/24 13:06:06.359
  STEP: submitting the pod to kubernetes @ 04/27/24 13:06:06.464
  STEP: verifying the pod is in kubernetes @ 04/27/24 13:06:06.474
  STEP: verifying pod creation was observed @ 04/27/24 13:06:06.477
  STEP: deleting the pod gracefully @ 04/27/24 13:06:08.49
  STEP: verifying pod deletion was observed @ 04/27/24 13:06:08.5
  Apr 27 13:06:09.450: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-9089" for this suite. @ 04/27/24 13:06:09.455
• [3.132 seconds]
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:397
  STEP: Creating a kubernetes client @ 04/27/24 13:06:09.463
  Apr 27 13:06:09.463: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 13:06:09.463
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:06:09.482
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:06:09.485
  STEP: Counting existing ResourceQuota @ 04/27/24 13:06:09.488
  STEP: Creating a ResourceQuota @ 04/27/24 13:06:14.493
  STEP: Ensuring resource quota status is calculated @ 04/27/24 13:06:14.499
  STEP: Creating a ReplicationController @ 04/27/24 13:06:16.504
  STEP: Ensuring resource quota status captures replication controller creation @ 04/27/24 13:06:16.52
  STEP: Deleting a ReplicationController @ 04/27/24 13:06:18.527
  STEP: Ensuring resource quota status released usage @ 04/27/24 13:06:18.535
  Apr 27 13:06:20.541: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-5533" for this suite. @ 04/27/24 13:06:20.545
• [11.091 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:962
  STEP: Creating a kubernetes client @ 04/27/24 13:06:20.554
  Apr 27 13:06:20.554: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename statefulset @ 04/27/24 13:06:20.554
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:06:20.573
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:06:20.576
  STEP: Creating service test in namespace statefulset-9954 @ 04/27/24 13:06:20.58
  Apr 27 13:06:20.598: INFO: Found 0 stateful pods, waiting for 1
  Apr 27 13:06:30.602: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: patching the StatefulSet @ 04/27/24 13:06:30.61
  W0427 13:06:30.619166      19 warnings.go:70] unknown field "spec.template.spec.TerminationGracePeriodSeconds"
  Apr 27 13:06:30.629: INFO: Found 1 stateful pods, waiting for 2
  Apr 27 13:06:40.631: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:06:40.631: INFO: Waiting for pod test-ss-1 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Listing all StatefulSets @ 04/27/24 13:06:40.639
  STEP: Delete all of the StatefulSets @ 04/27/24 13:06:40.644
  STEP: Verify that StatefulSets have been deleted @ 04/27/24 13:06:40.654
  Apr 27 13:06:40.658: INFO: Deleting all statefulset in ns statefulset-9954
  Apr 27 13:06:40.672: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-9954" for this suite. @ 04/27/24 13:06:40.677
• [20.147 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:205
  STEP: Creating a kubernetes client @ 04/27/24 13:06:40.702
  Apr 27 13:06:40.702: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 13:06:40.702
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:06:40.729
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:06:40.733
  STEP: Creating secret with name s-test-opt-del-72abbf7c-2248-46df-acbf-045449716f28 @ 04/27/24 13:06:40.747
  STEP: Creating secret with name s-test-opt-upd-c6d20fbb-52eb-4419-ad42-6a2e7c3100e9 @ 04/27/24 13:06:40.754
  STEP: Creating the pod @ 04/27/24 13:06:40.759
  STEP: Deleting secret s-test-opt-del-72abbf7c-2248-46df-acbf-045449716f28 @ 04/27/24 13:06:42.807
  STEP: Updating secret s-test-opt-upd-c6d20fbb-52eb-4419-ad42-6a2e7c3100e9 @ 04/27/24 13:06:42.814
  STEP: Creating secret with name s-test-opt-create-66466446-35c1-4d7a-bfd2-33c4232a55e7 @ 04/27/24 13:06:42.82
  STEP: waiting to observe update in volume @ 04/27/24 13:06:42.825
  Apr 27 13:06:46.866: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9723" for this suite. @ 04/27/24 13:06:46.871
• [6.176 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:234
  STEP: Creating a kubernetes client @ 04/27/24 13:06:46.878
  Apr 27 13:06:46.878: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 13:06:46.879
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:06:46.899
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:06:46.902
  STEP: Counting existing ResourceQuota @ 04/27/24 13:06:46.906
  STEP: Creating a ResourceQuota @ 04/27/24 13:06:51.912
  STEP: Ensuring resource quota status is calculated @ 04/27/24 13:06:51.918
  STEP: Creating a Pod that fits quota @ 04/27/24 13:06:53.924
  STEP: Ensuring ResourceQuota status captures the pod usage @ 04/27/24 13:06:53.939
  STEP: Not allowing a pod to be created that exceeds remaining quota @ 04/27/24 13:06:55.946
  STEP: Not allowing a pod to be created that exceeds remaining quota(validation on extended resources) @ 04/27/24 13:06:55.948
  STEP: Ensuring a pod cannot update its resource requirements @ 04/27/24 13:06:55.95
  STEP: Ensuring attempts to update pod resource requirements did not change quota usage @ 04/27/24 13:06:55.955
  STEP: Deleting the pod @ 04/27/24 13:06:57.961
  STEP: Ensuring resource quota status released the pod usage @ 04/27/24 13:06:57.975
  Apr 27 13:06:59.981: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-1685" for this suite. @ 04/27/24 13:06:59.985
• [13.116 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Secrets should fail to create secret due to empty secret key [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/secrets.go:141
  STEP: Creating a kubernetes client @ 04/27/24 13:06:59.995
  Apr 27 13:06:59.995: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 13:06:59.995
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:07:00.013
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:07:00.016
  STEP: Creating projection with secret that has name secret-emptykey-test-288e79c1-4002-43d0-8c2c-5a9712f329f3 @ 04/27/24 13:07:00.02
  Apr 27 13:07:00.024: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6814" for this suite. @ 04/27/24 13:07:00.028
• [0.041 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:376
  STEP: Creating a kubernetes client @ 04/27/24 13:07:00.036
  Apr 27 13:07:00.036: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:07:00.036
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:07:00.055
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:07:00.058
  STEP: Creating configMap with name projected-configmap-test-volume-ee3cadc1-dd9d-469e-8636-9716e3a8c5d8 @ 04/27/24 13:07:00.061
  STEP: Creating a pod to test consume configMaps @ 04/27/24 13:07:00.067
  STEP: Saw pod success @ 04/27/24 13:07:04.095
  Apr 27 13:07:04.099: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-configmaps-e4d8fbb2-cd04-479d-9758-dfffff078ee1 container projected-configmap-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 13:07:04.106
  Apr 27 13:07:04.125: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6248" for this suite. @ 04/27/24 13:07:04.13
• [4.102 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/csistoragecapacity.go:50
  STEP: Creating a kubernetes client @ 04/27/24 13:07:04.138
  Apr 27 13:07:04.138: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename csistoragecapacity @ 04/27/24 13:07:04.139
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:07:04.156
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:07:04.159
  STEP: getting /apis @ 04/27/24 13:07:04.162
  STEP: getting /apis/storage.k8s.io @ 04/27/24 13:07:04.167
  STEP: getting /apis/storage.k8s.io/v1 @ 04/27/24 13:07:04.168
  STEP: creating @ 04/27/24 13:07:04.17
  STEP: watching @ 04/27/24 13:07:04.188
  Apr 27 13:07:04.188: INFO: starting watch
  STEP: getting @ 04/27/24 13:07:04.196
  STEP: listing in namespace @ 04/27/24 13:07:04.2
  STEP: listing across namespaces @ 04/27/24 13:07:04.203
  STEP: patching @ 04/27/24 13:07:04.207
  STEP: updating @ 04/27/24 13:07:04.213
  Apr 27 13:07:04.218: INFO: waiting for watch events with expected annotations in namespace
  Apr 27 13:07:04.218: INFO: waiting for watch events with expected annotations across namespace
  STEP: deleting @ 04/27/24 13:07:04.218
  STEP: deleting a collection @ 04/27/24 13:07:04.232
  Apr 27 13:07:04.250: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csistoragecapacity-414" for this suite. @ 04/27/24 13:07:04.255
• [0.125 seconds]
------------------------------
SS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:68
  STEP: Creating a kubernetes client @ 04/27/24 13:07:04.263
  Apr 27 13:07:04.263: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 13:07:04.263
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:07:04.28
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:07:04.283
  STEP: Creating secret with name secret-test-5e09a9d3-2d69-4f5b-a1a7-ff797916069b @ 04/27/24 13:07:04.286
  STEP: Creating a pod to test consume secrets @ 04/27/24 13:07:04.292
  STEP: Saw pod success @ 04/27/24 13:07:08.319
  Apr 27 13:07:08.324: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-secrets-b30ab936-ee9e-4519-b5e6-30201b726faa container secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 13:07:08.331
  Apr 27 13:07:08.347: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-7848" for this suite. @ 04/27/24 13:07:08.351
• [4.097 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl logs logs should be able to retrieve and filter logs [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/logs.go:114
  STEP: Creating a kubernetes client @ 04/27/24 13:07:08.36
  Apr 27 13:07:08.360: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl-logs @ 04/27/24 13:07:08.361
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:07:08.383
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:07:08.386
  STEP: creating an pod @ 04/27/24 13:07:08.389
  Apr 27 13:07:08.389: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-logs-8106 run logs-generator --image=registry.k8s.io/e2e-test-images/agnhost:2.47 --restart=Never --pod-running-timeout=2m0s -- logs-generator --log-lines-total 100 --run-duration 20s'
  Apr 27 13:07:08.442: INFO: stderr: ""
  Apr 27 13:07:08.442: INFO: stdout: "pod/logs-generator created\n"
  STEP: Waiting for log generator to start. @ 04/27/24 13:07:08.442
  Apr 27 13:07:08.442: INFO: Waiting up to 5m0s for 1 pods to be running and ready, or succeeded: [logs-generator]
  Apr 27 13:07:10.452: INFO: Wanted all 1 pods to be running and ready, or succeeded. Result: true. Pods: [logs-generator]
  STEP: checking for a matching strings @ 04/27/24 13:07:10.452
  Apr 27 13:07:10.453: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-logs-8106 logs logs-generator logs-generator'
  Apr 27 13:07:10.505: INFO: stderr: ""
  Apr 27 13:07:10.505: INFO: stdout: "I0427 13:07:09.014630       1 logs_generator.go:76] 0 GET /api/v1/namespaces/ns/pods/xp62 427\nI0427 13:07:09.214713       1 logs_generator.go:76] 1 PUT /api/v1/namespaces/default/pods/v57 297\nI0427 13:07:09.415080       1 logs_generator.go:76] 2 PUT /api/v1/namespaces/ns/pods/nz56 505\nI0427 13:07:09.615406       1 logs_generator.go:76] 3 GET /api/v1/namespaces/default/pods/qtg 576\nI0427 13:07:09.815682       1 logs_generator.go:76] 4 GET /api/v1/namespaces/ns/pods/fwgd 448\nI0427 13:07:10.014994       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/kube-system/pods/7zxt 589\nI0427 13:07:10.215287       1 logs_generator.go:76] 6 POST /api/v1/namespaces/ns/pods/6zj 498\nI0427 13:07:10.415599       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/default/pods/2zk 473\n"
  STEP: limiting log lines @ 04/27/24 13:07:10.506
  Apr 27 13:07:10.506: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-logs-8106 logs logs-generator logs-generator --tail=1'
  Apr 27 13:07:10.563: INFO: stderr: ""
  Apr 27 13:07:10.563: INFO: stdout: "I0427 13:07:10.415599       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/default/pods/2zk 473\n"
  Apr 27 13:07:10.563: INFO: got output "I0427 13:07:10.415599       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/default/pods/2zk 473\n"
  STEP: limiting log bytes @ 04/27/24 13:07:10.564
  Apr 27 13:07:10.564: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-logs-8106 logs logs-generator logs-generator --limit-bytes=1'
  Apr 27 13:07:10.615: INFO: stderr: ""
  Apr 27 13:07:10.615: INFO: stdout: "I"
  Apr 27 13:07:10.615: INFO: got output "I"
  STEP: exposing timestamps @ 04/27/24 13:07:10.615
  Apr 27 13:07:10.615: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-logs-8106 logs logs-generator logs-generator --tail=1 --timestamps'
  Apr 27 13:07:10.668: INFO: stderr: ""
  Apr 27 13:07:10.668: INFO: stdout: "2024-04-27T13:07:10.614780244Z I0427 13:07:10.614704       1 logs_generator.go:76] 8 GET /api/v1/namespaces/kube-system/pods/wzb 526\n"
  Apr 27 13:07:10.668: INFO: got output "2024-04-27T13:07:10.614780244Z I0427 13:07:10.614704       1 logs_generator.go:76] 8 GET /api/v1/namespaces/kube-system/pods/wzb 526\n"
  STEP: restricting to a time range @ 04/27/24 13:07:10.668
  Apr 27 13:07:13.168: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-logs-8106 logs logs-generator logs-generator --since=1s'
  Apr 27 13:07:13.222: INFO: stderr: ""
  Apr 27 13:07:13.222: INFO: stdout: "I0427 13:07:12.415094       1 logs_generator.go:76] 17 GET /api/v1/namespaces/kube-system/pods/7htl 382\nI0427 13:07:12.615375       1 logs_generator.go:76] 18 GET /api/v1/namespaces/ns/pods/m2nv 243\nI0427 13:07:12.815549       1 logs_generator.go:76] 19 PUT /api/v1/namespaces/kube-system/pods/jxpk 354\nI0427 13:07:13.014780       1 logs_generator.go:76] 20 POST /api/v1/namespaces/kube-system/pods/bpf 472\nI0427 13:07:13.215112       1 logs_generator.go:76] 21 GET /api/v1/namespaces/default/pods/n8mn 493\n"
  Apr 27 13:07:13.222: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-logs-8106 logs logs-generator logs-generator --since=24h'
  Apr 27 13:07:13.274: INFO: stderr: ""
  Apr 27 13:07:13.274: INFO: stdout: "I0427 13:07:09.014630       1 logs_generator.go:76] 0 GET /api/v1/namespaces/ns/pods/xp62 427\nI0427 13:07:09.214713       1 logs_generator.go:76] 1 PUT /api/v1/namespaces/default/pods/v57 297\nI0427 13:07:09.415080       1 logs_generator.go:76] 2 PUT /api/v1/namespaces/ns/pods/nz56 505\nI0427 13:07:09.615406       1 logs_generator.go:76] 3 GET /api/v1/namespaces/default/pods/qtg 576\nI0427 13:07:09.815682       1 logs_generator.go:76] 4 GET /api/v1/namespaces/ns/pods/fwgd 448\nI0427 13:07:10.014994       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/kube-system/pods/7zxt 589\nI0427 13:07:10.215287       1 logs_generator.go:76] 6 POST /api/v1/namespaces/ns/pods/6zj 498\nI0427 13:07:10.415599       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/default/pods/2zk 473\nI0427 13:07:10.614704       1 logs_generator.go:76] 8 GET /api/v1/namespaces/kube-system/pods/wzb 526\nI0427 13:07:10.815012       1 logs_generator.go:76] 9 PUT /api/v1/namespaces/kube-system/pods/7gj 530\nI0427 13:07:11.015314       1 logs_generator.go:76] 10 GET /api/v1/namespaces/kube-system/pods/lkg 524\nI0427 13:07:11.215627       1 logs_generator.go:76] 11 GET /api/v1/namespaces/default/pods/knmk 343\nI0427 13:07:11.414930       1 logs_generator.go:76] 12 GET /api/v1/namespaces/ns/pods/pcj 315\nI0427 13:07:11.615211       1 logs_generator.go:76] 13 POST /api/v1/namespaces/ns/pods/6hg 321\nI0427 13:07:11.815370       1 logs_generator.go:76] 14 PUT /api/v1/namespaces/ns/pods/zkrz 584\nI0427 13:07:12.015618       1 logs_generator.go:76] 15 GET /api/v1/namespaces/kube-system/pods/g5h 495\nI0427 13:07:12.214750       1 logs_generator.go:76] 16 POST /api/v1/namespaces/ns/pods/f7rl 311\nI0427 13:07:12.415094       1 logs_generator.go:76] 17 GET /api/v1/namespaces/kube-system/pods/7htl 382\nI0427 13:07:12.615375       1 logs_generator.go:76] 18 GET /api/v1/namespaces/ns/pods/m2nv 243\nI0427 13:07:12.815549       1 logs_generator.go:76] 19 PUT /api/v1/namespaces/kube-system/pods/jxpk 354\nI0427 13:07:13.014780       1 logs_generator.go:76] 20 POST /api/v1/namespaces/kube-system/pods/bpf 472\nI0427 13:07:13.215112       1 logs_generator.go:76] 21 GET /api/v1/namespaces/default/pods/n8mn 493\n"
  Apr 27 13:07:13.275: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-logs-8106 delete pod logs-generator'
  Apr 27 13:07:13.892: INFO: stderr: ""
  Apr 27 13:07:13.892: INFO: stdout: "pod \"logs-generator\" deleted\n"
  Apr 27 13:07:13.892: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-logs-8106" for this suite. @ 04/27/24 13:07:13.897
• [5.544 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:230
  STEP: Creating a kubernetes client @ 04/27/24 13:07:13.904
  Apr 27 13:07:13.905: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 13:07:13.905
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:07:13.925
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:07:13.928
  STEP: Creating Pod @ 04/27/24 13:07:13.931
  STEP: Reading file content from the nginx-container @ 04/27/24 13:07:15.953
  Apr 27 13:07:15.953: INFO: ExecWithOptions {Command:[/bin/sh -c cat /usr/share/volumeshare/shareddata.txt] Namespace:emptydir-320 PodName:pod-sharedvolume-c1ed49cb-7782-431f-9ab4-ad840e94cfc5 ContainerName:busybox-main-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:07:15.953: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:07:15.953: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:07:15.953: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/emptydir-320/pods/pod-sharedvolume-c1ed49cb-7782-431f-9ab4-ad840e94cfc5/exec?command=%2Fbin%2Fsh&command=-c&command=cat+%2Fusr%2Fshare%2Fvolumeshare%2Fshareddata.txt&container=busybox-main-container&container=busybox-main-container&stderr=true&stdout=true)
  Apr 27 13:07:16.008: INFO: Exec stderr: ""
  Apr 27 13:07:16.008: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-320" for this suite. @ 04/27/24 13:07:16.013
• [2.118 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance] [sig-node, Slow, Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:228
  STEP: Creating a kubernetes client @ 04/27/24 13:07:16.023
  Apr 27 13:07:16.023: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename var-expansion @ 04/27/24 13:07:16.023
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:07:16.042
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:07:16.045
  STEP: creating the pod with failed condition @ 04/27/24 13:07:16.048
  STEP: updating the pod @ 04/27/24 13:09:16.058
  Apr 27 13:09:16.574: INFO: Successfully updated pod "var-expansion-d972cc07-1f27-4d23-bde5-13d6ff55c3aa"
  STEP: waiting for pod running @ 04/27/24 13:09:16.574
  STEP: deleting the pod gracefully @ 04/27/24 13:09:18.585
  Apr 27 13:09:18.585: INFO: Deleting pod "var-expansion-d972cc07-1f27-4d23-bde5-13d6ff55c3aa" in namespace "var-expansion-8810"
  Apr 27 13:09:18.595: INFO: Wait up to 5m0s for pod "var-expansion-d972cc07-1f27-4d23-bde5-13d6ff55c3aa" to be fully deleted
  Apr 27 13:09:50.694: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-8810" for this suite. @ 04/27/24 13:09:50.698
• [154.683 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:55
  STEP: Creating a kubernetes client @ 04/27/24 13:09:50.706
  Apr 27 13:09:50.706: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:09:50.707
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:09:50.732
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:09:50.736
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 13:09:50.739
  STEP: Saw pod success @ 04/27/24 13:09:54.767
  Apr 27 13:09:54.771: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-b7edf583-b203-4472-b0bb-077503b4ba51 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 13:09:54.782
  Apr 27 13:09:54.802: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1875" for this suite. @ 04/27/24 13:09:54.806
• [4.107 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:332
  STEP: Creating a kubernetes client @ 04/27/24 13:09:54.813
  Apr 27 13:09:54.813: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename statefulset @ 04/27/24 13:09:54.814
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:09:54.833
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:09:54.837
  STEP: Creating service test in namespace statefulset-3609 @ 04/27/24 13:09:54.84
  STEP: Creating a new StatefulSet @ 04/27/24 13:09:54.848
  Apr 27 13:09:54.862: INFO: Found 0 stateful pods, waiting for 3
  Apr 27 13:10:04.861: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:10:04.861: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:10:04.861: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Updating stateful set template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 04/27/24 13:10:04.874
  Apr 27 13:10:04.896: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 04/27/24 13:10:04.896
  STEP: Not applying an update when the partition is greater than the number of replicas @ 04/27/24 13:10:14.907
  STEP: Performing a canary update @ 04/27/24 13:10:14.907
  Apr 27 13:10:14.928: INFO: Updating stateful set ss2
  Apr 27 13:10:14.935: INFO: Waiting for Pod statefulset-3609/ss2-2 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  STEP: Restoring Pods to the correct revision when they are deleted @ 04/27/24 13:10:24.942
  Apr 27 13:10:24.978: INFO: Found 1 stateful pods, waiting for 3
  Apr 27 13:10:34.981: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:10:34.981: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:10:34.981: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Performing a phased rolling update @ 04/27/24 13:10:34.991
  Apr 27 13:10:35.014: INFO: Updating stateful set ss2
  Apr 27 13:10:35.024: INFO: Waiting for Pod statefulset-3609/ss2-1 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Apr 27 13:10:45.048: INFO: Updating stateful set ss2
  Apr 27 13:10:45.060: INFO: Waiting for StatefulSet statefulset-3609/ss2 to complete update
  Apr 27 13:10:45.060: INFO: Waiting for Pod statefulset-3609/ss2-0 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Apr 27 13:10:55.060: INFO: Deleting all statefulset in ns statefulset-3609
  Apr 27 13:10:55.064: INFO: Scaling statefulset ss2 to 0
  Apr 27 13:11:05.084: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 27 13:11:05.088: INFO: Deleting statefulset ss2
  Apr 27 13:11:05.104: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3609" for this suite. @ 04/27/24 13:11:05.108
• [70.303 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:209
  STEP: Creating a kubernetes client @ 04/27/24 13:11:05.116
  Apr 27 13:11:05.116: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:11:05.117
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:11:05.136
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:11:05.139
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 13:11:05.142
  STEP: Saw pod success @ 04/27/24 13:11:09.169
  Apr 27 13:11:09.173: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-1fd5b092-3d54-4c16-8249-991388b9a969 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 13:11:09.187
  Apr 27 13:11:09.207: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1706" for this suite. @ 04/27/24 13:11:09.211
• [4.102 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance] [sig-scheduling, Serial, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/predicates.go:707
  STEP: Creating a kubernetes client @ 04/27/24 13:11:09.219
  Apr 27 13:11:09.219: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-pred @ 04/27/24 13:11:09.22
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:11:09.239
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:11:09.242
  Apr 27 13:11:09.245: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Apr 27 13:11:09.254: INFO: Waiting for terminating namespaces to be deleted...
  Apr 27 13:11:09.258: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-37-185 before test
  Apr 27 13:11:09.263: INFO: nginx-ingress-controller-kubernetes-worker-wjwlq from ingress-nginx-kubernetes-worker started at 2024-04-27 12:15:52 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.263: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 13:11:09.263: INFO: calico-node-qdhx5 from kube-system started at 2024-04-27 12:18:04 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.263: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 13:11:09.263: INFO: sonobuoy-e2e-job-d6fe9ea7c49d40a2 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 13:11:09.263: INFO: 	Container e2e ready: true, restart count 0
  Apr 27 13:11:09.263: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 13:11:09.263: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-crp54 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 13:11:09.263: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 13:11:09.263: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 27 13:11:09.263: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-6-153 before test
  Apr 27 13:11:09.269: INFO: nginx-ingress-controller-kubernetes-worker-5khsm from ingress-nginx-kubernetes-worker started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.269: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: calico-node-cs4kq from kube-system started at 2024-04-27 12:18:06 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.269: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: coredns-bddfd76d7-p5qdr from kube-system started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.269: INFO: 	Container coredns ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: kube-state-metrics-6f48cdd76-xtvcf from kube-system started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.269: INFO: 	Container kube-state-metrics ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: metrics-server-v0.6.3-69d7fbfdf8-vwtzn from kube-system started at 2024-04-27 12:10:16 +0000 UTC (2 container statuses recorded)
  Apr 27 13:11:09.269: INFO: 	Container metrics-server ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: 	Container metrics-server-nanny ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: dashboard-metrics-scraper-5dd7cb5fc-rfvgw from kubernetes-dashboard started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.269: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: kubernetes-dashboard-7b899cb9d9-d8649 from kubernetes-dashboard started at 2024-04-27 12:10:16 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.269: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-r49rd from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 13:11:09.269: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 27 13:11:09.269: INFO: 
  Logging pods the apiserver thinks is on node ip-172-31-82-63 before test
  Apr 27 13:11:09.274: INFO: nginx-ingress-controller-kubernetes-worker-hdnv8 from ingress-nginx-kubernetes-worker started at 2024-04-27 13:05:46 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.274: INFO: 	Container nginx-ingress-controllerkubernetes-worker ready: true, restart count 0
  Apr 27 13:11:09.274: INFO: calico-node-mvvng from kube-system started at 2024-04-27 12:18:11 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.274: INFO: 	Container calico-node ready: true, restart count 0
  Apr 27 13:11:09.274: INFO: sonobuoy from sonobuoy started at 2024-04-27 12:21:03 +0000 UTC (1 container statuses recorded)
  Apr 27 13:11:09.274: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Apr 27 13:11:09.274: INFO: sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-l72v9 from sonobuoy started at 2024-04-27 12:21:05 +0000 UTC (2 container statuses recorded)
  Apr 27 13:11:09.274: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 27 13:11:09.274: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 04/27/24 13:11:09.274
  STEP: Explicitly delete pod here to free the resource it takes. @ 04/27/24 13:11:11.308
  STEP: Trying to apply a random label on the found node. @ 04/27/24 13:11:11.329
  STEP: verifying the node has the label kubernetes.io/e2e-d89f4f18-322e-4f20-b915-acd02b761924 95 @ 04/27/24 13:11:11.338
  STEP: Trying to create a pod(pod4) with hostport 54322 and hostIP 0.0.0.0(empty string here) and expect scheduled @ 04/27/24 13:11:11.342
  STEP: Trying to create another pod(pod5) with hostport 54322 but hostIP 172.31.82.63 on the node which pod4 resides and expect not scheduled @ 04/27/24 13:11:13.362
  STEP: removing the label kubernetes.io/e2e-d89f4f18-322e-4f20-b915-acd02b761924 off the node ip-172-31-82-63 @ 04/27/24 13:16:13.37
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-d89f4f18-322e-4f20-b915-acd02b761924 @ 04/27/24 13:16:13.385
  Apr 27 13:16:13.391: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-4816" for this suite. @ 04/27/24 13:16:13.396
• [304.183 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:273
  STEP: Creating a kubernetes client @ 04/27/24 13:16:13.403
  Apr 27 13:16:13.403: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:16:13.403
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:16:13.421
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:16:13.424
  STEP: Setting up server cert @ 04/27/24 13:16:13.453
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:16:13.583
  STEP: Deploying the webhook pod @ 04/27/24 13:16:13.593
  STEP: Wait for the deployment to be ready @ 04/27/24 13:16:13.608
  Apr 27 13:16:13.616: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:16:15.631
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:16:15.642
  Apr 27 13:16:16.643: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a validating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 04/27/24 13:16:16.654
  STEP: Registering a mutating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 04/27/24 13:16:16.669
  STEP: Creating a dummy validating-webhook-configuration object @ 04/27/24 13:16:16.684
  STEP: Deleting the validating-webhook-configuration, which should be possible to remove @ 04/27/24 13:16:16.695
  STEP: Creating a dummy mutating-webhook-configuration object @ 04/27/24 13:16:16.702
  STEP: Deleting the mutating-webhook-configuration, which should be possible to remove @ 04/27/24 13:16:16.712
  Apr 27 13:16:16.776: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6615" for this suite. @ 04/27/24 13:16:16.781
  STEP: Destroying namespace "webhook-markers-7766" for this suite. @ 04/27/24 13:16:16.787
• [3.393 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:251
  STEP: Creating a kubernetes client @ 04/27/24 13:16:16.796
  Apr 27 13:16:16.797: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:16:16.797
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:16:16.816
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:16:16.819
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 13:16:16.822
  STEP: Saw pod success @ 04/27/24 13:16:18.843
  Apr 27 13:16:18.848: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-4f3e0407-2d40-4d86-ab6d-76362ee96038 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 13:16:18.864
  Apr 27 13:16:18.881: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7678" for this suite. @ 04/27/24 13:16:18.886
• [2.099 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:191
  STEP: Creating a kubernetes client @ 04/27/24 13:16:18.896
  Apr 27 13:16:18.896: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename runtimeclass @ 04/27/24 13:16:18.897
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:16:18.914
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:16:18.917
  STEP: getting /apis @ 04/27/24 13:16:18.92
  STEP: getting /apis/node.k8s.io @ 04/27/24 13:16:18.924
  STEP: getting /apis/node.k8s.io/v1 @ 04/27/24 13:16:18.926
  STEP: creating @ 04/27/24 13:16:18.927
  STEP: watching @ 04/27/24 13:16:18.945
  Apr 27 13:16:18.945: INFO: starting watch
  STEP: getting @ 04/27/24 13:16:18.952
  STEP: listing @ 04/27/24 13:16:18.955
  STEP: patching @ 04/27/24 13:16:18.959
  STEP: updating @ 04/27/24 13:16:18.965
  Apr 27 13:16:18.969: INFO: waiting for watch events with expected annotations
  STEP: deleting @ 04/27/24 13:16:18.969
  STEP: deleting a collection @ 04/27/24 13:16:18.984
  Apr 27 13:16:19.004: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-8021" for this suite. @ 04/27/24 13:16:19.008
• [0.120 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:2236
  STEP: Creating a kubernetes client @ 04/27/24 13:16:19.016
  Apr 27 13:16:19.016: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 13:16:19.017
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:16:19.035
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:16:19.038
  STEP: creating service in namespace services-9257 @ 04/27/24 13:16:19.041
  STEP: creating service affinity-nodeport-transition in namespace services-9257 @ 04/27/24 13:16:19.041
  STEP: creating replication controller affinity-nodeport-transition in namespace services-9257 @ 04/27/24 13:16:19.06
  I0427 13:16:19.069773      19 runners.go:197] Created replication controller with name: affinity-nodeport-transition, namespace: services-9257, replica count: 3
  I0427 13:16:22.121021      19 runners.go:197] affinity-nodeport-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 27 13:16:22.135: INFO: Creating new exec pod
  Apr 27 13:16:25.158: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-9257 exec execpod-affinityfs6t7 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport-transition 80'
  Apr 27 13:16:25.270: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport-transition 80\nConnection to affinity-nodeport-transition 80 port [tcp/http] succeeded!\n"
  Apr 27 13:16:25.270: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:16:25.270: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-9257 exec execpod-affinityfs6t7 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.244 80'
  Apr 27 13:16:25.372: INFO: stderr: "+ nc -v -t -w 2 10.152.183.244 80\nConnection to 10.152.183.244 80 port [tcp/http] succeeded!\n+ echo hostName\n"
  Apr 27 13:16:25.372: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:16:25.373: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-9257 exec execpod-affinityfs6t7 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.6.153 31626'
  Apr 27 13:16:25.475: INFO: stderr: "+ nc -v -t -w 2 172.31.6.153 31626\n+ echo hostName\nConnection to 172.31.6.153 31626 port [tcp/*] succeeded!\n"
  Apr 27 13:16:25.475: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:16:25.475: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-9257 exec execpod-affinityfs6t7 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.31.37.185 31626'
  Apr 27 13:16:25.574: INFO: stderr: "+ nc -v -t -w 2 172.31.37.185 31626\n+ echo hostName\nConnection to 172.31.37.185 31626 port [tcp/*] succeeded!\n"
  Apr 27 13:16:25.574: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:16:25.585: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-9257 exec execpod-affinityfs6t7 -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://172.31.37.185:31626/ ; done'
  Apr 27 13:16:25.774: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n"
  Apr 27 13:16:25.774: INFO: stdout: "\naffinity-nodeport-transition-4z9q2\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-4z9q2\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-tplpb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-tplpb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-tplpb\naffinity-nodeport-transition-tplpb\naffinity-nodeport-transition-p5jtb"
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-4z9q2
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-4z9q2
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-tplpb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-tplpb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-tplpb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-tplpb
  Apr 27 13:16:25.774: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.785: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-9257 exec execpod-affinityfs6t7 -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://172.31.37.185:31626/ ; done'
  Apr 27 13:16:25.973: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.31.37.185:31626/\n"
  Apr 27 13:16:25.973: INFO: stdout: "\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb\naffinity-nodeport-transition-p5jtb"
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Received response from host: affinity-nodeport-transition-p5jtb
  Apr 27 13:16:25.973: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport-transition in namespace services-9257, will wait for the garbage collector to delete the pods @ 04/27/24 13:16:25.991
  Apr 27 13:16:26.054: INFO: Deleting ReplicationController affinity-nodeport-transition took: 8.661286ms
  Apr 27 13:16:26.154: INFO: Terminating ReplicationController affinity-nodeport-transition pods took: 100.483516ms
  Apr 27 13:16:29.282: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-9257" for this suite. @ 04/27/24 13:16:29.287
• [10.278 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:46
  STEP: Creating a kubernetes client @ 04/27/24 13:16:29.294
  Apr 27 13:16:29.294: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:16:29.295
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:16:29.316
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:16:29.319
  STEP: Creating projection with secret that has name projected-secret-test-e86fd572-ba2b-4063-8ca0-59acd610a3f4 @ 04/27/24 13:16:29.322
  STEP: Creating a pod to test consume secrets @ 04/27/24 13:16:29.327
  STEP: Saw pod success @ 04/27/24 13:16:33.354
  Apr 27 13:16:33.358: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-secrets-cef837e6-7a1b-48b4-ab87-b0b10ded42f3 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 13:16:33.365
  Apr 27 13:16:33.385: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9848" for this suite. @ 04/27/24 13:16:33.389
• [4.103 seconds]
------------------------------
SS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:263
  STEP: Creating a kubernetes client @ 04/27/24 13:16:33.397
  Apr 27 13:16:33.397: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:16:33.398
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:16:33.414
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:16:33.417
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 13:16:33.42
  STEP: Saw pod success @ 04/27/24 13:16:37.45
  Apr 27 13:16:37.454: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-5baa82aa-b867-46d4-b2c3-82384d2afab3 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 13:16:37.462
  Apr 27 13:16:37.478: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6221" for this suite. @ 04/27/24 13:16:37.482
• [4.092 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance] [sig-apps, Slow, Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:97
  STEP: Creating a kubernetes client @ 04/27/24 13:16:37.489
  Apr 27 13:16:37.489: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename cronjob @ 04/27/24 13:16:37.49
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:16:37.508
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:16:37.511
  STEP: Creating a suspended cronjob @ 04/27/24 13:16:37.514
  STEP: Ensuring no jobs are scheduled @ 04/27/24 13:16:37.521
  STEP: Ensuring no job exists by listing jobs explicitly @ 04/27/24 13:21:37.535
  STEP: Removing cronjob @ 04/27/24 13:21:37.539
  Apr 27 13:21:37.548: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-7219" for this suite. @ 04/27/24 13:21:37.552
• [300.071 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:119
  STEP: Creating a kubernetes client @ 04/27/24 13:21:37.561
  Apr 27 13:21:37.561: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:21:37.561
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:21:37.582
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:21:37.585
  STEP: Setting up server cert @ 04/27/24 13:21:37.61
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:21:37.763
  STEP: Deploying the webhook pod @ 04/27/24 13:21:37.771
  STEP: Wait for the deployment to be ready @ 04/27/24 13:21:37.784
  Apr 27 13:21:37.792: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:21:39.808
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:21:39.822
  Apr 27 13:21:40.822: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: fetching the /apis discovery document @ 04/27/24 13:21:40.832
  STEP: finding the admissionregistration.k8s.io API group in the /apis discovery document @ 04/27/24 13:21:40.833
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis discovery document @ 04/27/24 13:21:40.834
  STEP: fetching the /apis/admissionregistration.k8s.io discovery document @ 04/27/24 13:21:40.834
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis/admissionregistration.k8s.io discovery document @ 04/27/24 13:21:40.835
  STEP: fetching the /apis/admissionregistration.k8s.io/v1 discovery document @ 04/27/24 13:21:40.835
  STEP: finding mutatingwebhookconfigurations and validatingwebhookconfigurations resources in the /apis/admissionregistration.k8s.io/v1 discovery document @ 04/27/24 13:21:40.836
  Apr 27 13:21:40.877: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6583" for this suite. @ 04/27/24 13:21:40.881
  STEP: Destroying namespace "webhook-markers-7344" for this suite. @ 04/27/24 13:21:40.89
• [3.336 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support rollover [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:132
  STEP: Creating a kubernetes client @ 04/27/24 13:21:40.897
  Apr 27 13:21:40.897: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename deployment @ 04/27/24 13:21:40.898
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:21:40.919
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:21:40.922
  Apr 27 13:21:40.934: INFO: Pod name rollover-pod: Found 0 pods out of 1
  Apr 27 13:21:45.939: INFO: Pod name rollover-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/27/24 13:21:45.939
  Apr 27 13:21:45.939: INFO: Waiting for pods owned by replica set "test-rollover-controller" to become ready
  Apr 27 13:21:47.945: INFO: Creating deployment "test-rollover-deployment"
  Apr 27 13:21:47.955: INFO: Make sure deployment "test-rollover-deployment" performs scaling operations
  Apr 27 13:21:49.965: INFO: Check revision of new replica set for deployment "test-rollover-deployment"
  Apr 27 13:21:49.973: INFO: Ensure that both replica sets have 1 created replica
  Apr 27 13:21:49.980: INFO: Rollover old replica sets for deployment "test-rollover-deployment" with new image update
  Apr 27 13:21:49.992: INFO: Updating deployment test-rollover-deployment
  Apr 27 13:21:49.992: INFO: Wait deployment "test-rollover-deployment" to be observed by the deployment controller
  Apr 27 13:21:52.001: INFO: Wait for revision update of deployment "test-rollover-deployment" to 2
  Apr 27 13:21:52.009: INFO: Make sure deployment "test-rollover-deployment" is complete
  Apr 27 13:21:52.017: INFO: all replica sets need to contain the pod-template-hash label
  Apr 27 13:21:52.017: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 50, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 13:21:54.027: INFO: all replica sets need to contain the pod-template-hash label
  Apr 27 13:21:54.027: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 50, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 13:21:56.027: INFO: all replica sets need to contain the pod-template-hash label
  Apr 27 13:21:56.027: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 50, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 13:21:58.025: INFO: all replica sets need to contain the pod-template-hash label
  Apr 27 13:21:58.025: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 50, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 13:22:00.028: INFO: all replica sets need to contain the pod-template-hash label
  Apr 27 13:22:00.028: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 13, 21, 50, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 13, 21, 47, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 13:22:02.026: INFO: 
  Apr 27 13:22:02.026: INFO: Ensure that both old replica sets have no replicas
  Apr 27 13:22:02.040: INFO: Deployment "test-rollover-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1846",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3af09761-7055-4cb3-9c86-382221eca161",
      ResourceVersion: (string) (len=5) "28593",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820907,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820909,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000040  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000050  2c 22 66 3a 70 72 6f 67  72 65 73 73 44 65 61 64  |,"f:progressDead|
              00000060  6c 69 6e 65 53 65 63 6f  6e 64 73 22 3a 7b 7d 2c  |lineSeconds":{},|
              00000070  22 66 3a 72 65 70 6c 69  63 61 73 22 3a 7b 7d 2c  |"f:replicas":{},|
              00000080  22 66 3a 72 65 76 69 73  69 6f 6e 48 69 73 74 6f  |"f:revisionHisto|
              00000090  72 79 4c 69 6d 69 74 22  3a 7b 7d 2c 22 66 3a 73  |ryLimit":{},"f:s|
              000000a0  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 73  |elector":{},"f:s|
              000000b0  74 72 61 74 65 67 79 22  3a 7b 22 66 3a 72 6f 6c  |trategy":{"f:rol|
              000000c0  6c 69 6e 67 55 70 64 61  74 65 22 3a 7b 22 2e 22  |lingUpdate":{"."|
              000000d0  3a 7b 7d 2c 22 66 3a 6d  61 78 53 75 72 67 65 22  |:{},"f:maxSurge"|
              000000e0  3a 7b 7d 2c 22 66 3a 6d  61 78 55 6e 61 76 61 69  |:{},"f:maxUnavai|
              000000f0  6c 61 62 6c 65 22 3a 7b  7d 7d 2c 22 66 3a 74 79  |lable":{}},"f:ty|
              00000100  70 65 22 3a 7b 7d 7d 2c  22 66 3a 74 65 6d 70 6c  |pe":{}},"f:templ|
              00000110  61 74 65 22 3a 7b 22 66  3a 6d 65 74 61 64 61 74  |ate":{"f:metadat|
              00000120  61 22 3a 7b 22 66 3a 6c  61 62 65 6c 73 22 3a 7b  |a":{"f:labels":{|
              00000130  22 2e 22 3a 7b 7d 2c 22  66 3a 6e 61 6d 65 22 3a  |".":{},"f:name":|
              00000140  7b 7d 7d 7d 2c 22 66 3a  73 70 65 63 22 3a 7b 22  |{}}},"f:spec":{"|
              00000150  66 3a 63 6f 6e 74 61 69  6e 65 72 73 22 3a 7b 22  |f:containers":{"|
              00000160  6b 3a 7b 5c 22 6e 61 6d  65 5c 22 3a 5c 22 61 67  |k:{\"name\":\"ag|
              00000170  6e 68 6f 73 74 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |nhost\"}":{".":{|
              00000180  7d 2c 22 66 3a 69 6d 61  67 65 22 3a 7b 7d 2c 22  |},"f:image":{},"|
              00000190  66 3a 69 6d 61 67 65 50  75 6c 6c 50 6f 6c 69 63  |f:imagePullPolic|
              000001a0  79 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |y":{},"f:name":{|
              000001b0  7d 2c 22 66 3a 72 65 73  6f 75 72 63 65 73 22 3a  |},"f:resources":|
              000001c0  7b 7d 2c 22 66 3a 73 65  63 75 72 69 74 79 43 6f  |{},"f:securityCo|
              000001d0  6e 74 65 78 74 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ntext":{},"f:ter|
              000001e0  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000001f0  61 74 68 22 3a 7b 7d 2c  22 66 3a 74 65 72 6d 69  |ath":{},"f:termi|
              00000200  6e 61 74 69 6f 6e 4d 65  73 73 61 67 65 50 6f 6c  |nationMessagePol|
              00000210  69 63 79 22 3a 7b 7d 7d  7d 2c 22 66 3a 64 6e 73  |icy":{}}},"f:dns|
              00000220  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 72 65  |Policy":{},"f:re|
              00000230  73 74 61 72 74 50 6f 6c  69 63 79 22 3a 7b 7d 2c  |startPolicy":{},|
              00000240  22 66 3a 73 63 68 65 64  75 6c 65 72 4e 61 6d 65  |"f:schedulerName|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 47 72 61 63 65 50  |erminationGraceP|
              00000280  65 72 69 6f 64 53 65 63  6f 6e 64 73 22 3a 7b 7d  |eriodSeconds":{}|
              00000290  7d 7d 7d 7d                                       |}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820921,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 0,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 1,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 10,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820907,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820907,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820921,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820907,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=77) "ReplicaSet \"test-rollover-deployment-68774655d5\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 27 13:22:02.046: INFO: New ReplicaSet "test-rollover-deployment-68774655d5" of Deployment "test-rollover-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-68774655d5",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1846",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a5ca1e2b-1791-47ca-af57-fe43e6731115",
      ResourceVersion: (string) (len=5) "28583",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820909,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "68774655d5"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "3af09761-7055-4cb3-9c86-382221eca161",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=806) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 61 66 30 39 37  36 31 2d 37 30 35 35 2d  |\"3af09761-7055-|
              00000120  34 63 62 33 2d 39 63 38  36 2d 33 38 32 32 32 31  |4cb3-9c86-382221|
              00000130  65 63 61 31 36 31 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |eca161\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  61 67 6e 68 6f 73 74 5c  22 7d 22 3a 7b 22 2e 22  |agnhost\"}":{"."|
              00000210  3a 7b 7d 2c 22 66 3a 69  6d 61 67 65 22 3a 7b 7d  |:{},"f:image":{}|
              00000220  2c 22 66 3a 69 6d 61 67  65 50 75 6c 6c 50 6f 6c  |,"f:imagePullPol|
              00000230  69 63 79 22 3a 7b 7d 2c  22 66 3a 6e 61 6d 65 22  |icy":{},"f:name"|
              00000240  3a 7b 7d 2c 22 66 3a 72  65 73 6f 75 72 63 65 73  |:{},"f:resources|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 4d 65 73 73 61 67  |erminationMessag|
              00000280  65 50 61 74 68 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ePath":{},"f:ter|
              00000290  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000002a0  6f 6c 69 63 79 22 3a 7b  7d 7d 7d 2c 22 66 3a 64  |olicy":{}}},"f:d|
              000002b0  6e 73 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |nsPolicy":{},"f:|
              000002c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000002d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000002e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000002f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000300  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000310  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000320  7b 7d 7d 7d 7d 7d                                 |{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820920,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "68774655d5",
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "68774655d5"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:22:02.046: INFO: All old ReplicaSets of Deployment "test-rollover-deployment":
  Apr 27 13:22:02.047: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1846",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6e076c17-268f-40f9-b7e2-f612c03df725",
      ResourceVersion: (string) (len=5) "28592",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820900,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=3) "pod": (string) (len=5) "httpd",
        (string) (len=4) "name": (string) (len=12) "rollover-pod"
      },
      Annotations: (map[string]string) (len=2) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "3af09761-7055-4cb3-9c86-382221eca161",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820900,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=467) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  73 65 6c 65 63 74 6f 72  |ec":{"f:selector|
              00000050  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000060  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000070  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000080  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000090  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000a0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000b0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000c0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000d0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000e0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              000000f0  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000100  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000110  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000120  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000130  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000140  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000150  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000160  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000170  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000180  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              00000190  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001a0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001b0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001c0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001d0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820920,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=249) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 7d 2c 22 66  3a 6f 77 6e 65 72 52 65  |":{}},"f:ownerRe|
              00000090  66 65 72 65 6e 63 65 73  22 3a 7b 22 2e 22 3a 7b  |ferences":{".":{|
              000000a0  7d 2c 22 6b 3a 7b 5c 22  75 69 64 5c 22 3a 5c 22  |},"k:{\"uid\":\"|
              000000b0  33 61 66 30 39 37 36 31  2d 37 30 35 35 2d 34 63  |3af09761-7055-4c|
              000000c0  62 33 2d 39 63 38 36 2d  33 38 32 32 32 31 65 63  |b3-9c86-382221ec|
              000000d0  61 31 36 31 5c 22 7d 22  3a 7b 7d 7d 7d 2c 22 66  |a161\"}":{}}},"f|
              000000e0  3a 73 70 65 63 22 3a 7b  22 66 3a 72 65 70 6c 69  |:spec":{"f:repli|
              000000f0  63 61 73 22 3a 7b 7d 7d  7d                       |cas":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820921,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:22:02.047: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-664fc6c874",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1846",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "598279fa-49dc-4097-9f63-f6164dee4ed2",
      ResourceVersion: (string) (len=5) "28544",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820907,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "3af09761-7055-4cb3-9c86-382221eca161",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=810) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 61 66 30 39 37  36 31 2d 37 30 35 35 2d  |\"3af09761-7055-|
              00000120  34 63 62 33 2d 39 63 38  36 2d 33 38 32 32 32 31  |4cb3-9c86-382221|
              00000130  65 63 61 31 36 31 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |eca161\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  72 65 64 69 73 2d 73 6c  61 76 65 5c 22 7d 22 3a  |redis-slave\"}":|
              00000210  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000220  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000230  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000240  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000250  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000260  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000270  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000280  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              00000290  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000002a0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000002b0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000002c0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000002d0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000002e0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              000002f0  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000300  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000310  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000320  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874",
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=11) "redis-slave",
              Image: (string) (len=47) "gcr.io/google_samples/gb-redisslave:nonexistent",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:22:02.052: INFO: Pod "test-rollover-deployment-68774655d5-gvmhz" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=41) "test-rollover-deployment-68774655d5-gvmhz",
      GenerateName: (string) (len=36) "test-rollover-deployment-68774655d5-",
      Namespace: (string) (len=15) "deployment-1846",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b2d489a8-689f-4166-a200-2099cfef4c03",
      ResourceVersion: (string) (len=5) "28562",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820910,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "68774655d5"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=35) "test-rollover-deployment-68774655d5",
          UID: (types.UID) (len=36) "a5ca1e2b-1791-47ca-af57-fe43e6731115",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 35  63 61 31 65 32 62 2d 31  |d\":\"a5ca1e2b-1|
              00000090  37 39 31 2d 34 37 63 61  2d 61 66 35 37 2d 66 65  |791-47ca-af57-fe|
              000000a0  34 33 65 36 37 33 31 31  31 35 5c 22 7d 22 3a 7b  |43e6731115\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 36 39  2e 31 39 31 5c 22 7d 22  |2.168.69.191\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-jcs98",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-jcs98",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) (len=14) "192.168.69.191",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.69.191"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820910,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849820910,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:cc249acbd34692826b2b335335615e060fdb3c0bca4954507aa3a1d1194de253",
          ContainerID: (string) (len=77) "containerd://0b47860f4cab866f7c96c79b3822762977e00bb3d103ec03eef8dffac8340285",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:02.054: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-1846" for this suite. @ 04/27/24 13:22:02.058
• [21.169 seconds]
------------------------------
[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance] [sig-auth, Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:742
  STEP: Creating a kubernetes client @ 04/27/24 13:22:02.066
  Apr 27 13:22:02.066: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename svcaccounts @ 04/27/24 13:22:02.067
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:02.088
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:02.091
  Apr 27 13:22:02.098: INFO: Got root ca configmap in namespace "svcaccounts-2228"
  Apr 27 13:22:02.107: INFO: Deleted root ca configmap in namespace "svcaccounts-2228"
  STEP: waiting for a new root ca configmap created @ 04/27/24 13:22:02.608
  Apr 27 13:22:02.613: INFO: Recreated root ca configmap in namespace "svcaccounts-2228"
  Apr 27 13:22:02.619: INFO: Updated root ca configmap in namespace "svcaccounts-2228"
  STEP: waiting for the root ca configmap reconciled @ 04/27/24 13:22:03.12
  Apr 27 13:22:03.124: INFO: Reconciled root ca configmap in namespace "svcaccounts-2228"
  Apr 27 13:22:03.124: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-2228" for this suite. @ 04/27/24 13:22:03.129
• [1.071 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] Services should provide secure master service [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:775
  STEP: Creating a kubernetes client @ 04/27/24 13:22:03.137
  Apr 27 13:22:03.137: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 13:22:03.138
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:03.157
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:03.16
  Apr 27 13:22:03.168: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-5602" for this suite. @ 04/27/24 13:22:03.172
• [0.041 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support proportional scaling [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:160
  STEP: Creating a kubernetes client @ 04/27/24 13:22:03.179
  Apr 27 13:22:03.179: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename deployment @ 04/27/24 13:22:03.179
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:03.198
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:03.201
  Apr 27 13:22:03.204: INFO: Creating deployment "webserver-deployment"
  Apr 27 13:22:03.210: INFO: Waiting for observed generation 1
  Apr 27 13:22:05.221: INFO: Waiting for all required pods to come up
  Apr 27 13:22:05.227: INFO: Pod name httpd: Found 10 pods out of 10
  STEP: ensuring each pod is running @ 04/27/24 13:22:05.227
  Apr 27 13:22:05.227: INFO: Waiting for deployment "webserver-deployment" to complete
  Apr 27 13:22:05.235: INFO: Updating deployment "webserver-deployment" with a non-existent image
  Apr 27 13:22:05.244: INFO: Updating deployment webserver-deployment
  Apr 27 13:22:05.244: INFO: Waiting for observed generation 2
  Apr 27 13:22:07.256: INFO: Waiting for the first rollout's replicaset to have .status.availableReplicas = 8
  Apr 27 13:22:07.260: INFO: Waiting for the first rollout's replicaset to have .spec.replicas = 8
  Apr 27 13:22:07.263: INFO: Waiting for the first rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Apr 27 13:22:07.276: INFO: Verifying that the second rollout's replicaset has .status.availableReplicas = 0
  Apr 27 13:22:07.276: INFO: Waiting for the second rollout's replicaset to have .spec.replicas = 5
  Apr 27 13:22:07.280: INFO: Waiting for the second rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Apr 27 13:22:07.290: INFO: Verifying that deployment "webserver-deployment" has minimum required number of available replicas
  Apr 27 13:22:07.290: INFO: Scaling up the deployment "webserver-deployment" from 10 to 30
  Apr 27 13:22:07.302: INFO: Updating deployment webserver-deployment
  Apr 27 13:22:07.302: INFO: Waiting for the replicasets of deployment "webserver-deployment" to have desired number of replicas
  Apr 27 13:22:07.311: INFO: Verifying that first rollout's replicaset has .spec.replicas = 20
  Apr 27 13:22:07.317: INFO: Verifying that second rollout's replicaset has .spec.replicas = 13
  Apr 27 13:22:07.334: INFO: Deployment "webserver-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=20) "webserver-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "31147f14-30fe-49e8-8713-dcb71c841256",
      ResourceVersion: (string) (len=5) "28900",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=541) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 6e 61  |licas":{},"f:una|
              000001f0  76 61 69 6c 61 62 6c 65  52 65 70 6c 69 63 61 73  |vailableReplicas|
              00000200  22 3a 7b 7d 2c 22 66 3a  75 70 64 61 74 65 64 52  |":{},"f:updatedR|
              00000210  65 70 6c 69 63 61 73 22  3a 7b 7d 7d 7d           |eplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=635) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000160  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000170  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000180  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000190  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              000001a0  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001b0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001c0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001d0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001e0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001f0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              00000200  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000210  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000220  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000230  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000270  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(30),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 2,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 3,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 13,
      UpdatedReplicas: (int32) 5,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      UnavailableReplicas: (int32) 5,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=59) "ReplicaSet \"webserver-deployment-9b4f5bf69\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 27 13:22:07.360: INFO: New ReplicaSet "webserver-deployment-9b4f5bf69" of Deployment "webserver-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
      ResourceVersion: (string) (len=5) "28905",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "31147f14-30fe-49e8-8713-dcb71c841256",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 31 31 34 37 66  31 34 2d 33 30 66 65 2d  |\"31147f14-30fe-|
              00000120  34 39 65 38 2d 38 37 31  33 2d 64 63 62 37 31 63  |49e8-8713-dcb71c|
              00000130  38 34 31 32 35 36 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |841256\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(13),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 5,
      FullyLabeledReplicas: (int32) 5,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:22:07.374: INFO: All old ReplicaSets of Deployment "webserver-deployment":
  Apr 27 13:22:07.374: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "webserver-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
      ResourceVersion: (string) (len=5) "28902",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "31147f14-30fe-49e8-8713-dcb71c841256",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 31 31 34 37 66  31 34 2d 33 30 66 65 2d  |\"31147f14-30fe-|
              00000120  34 39 65 38 2d 38 37 31  33 2d 64 63 62 37 31 63  |49e8-8713-dcb71c|
              00000130  38 34 31 32 35 36 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |841256\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(20),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 8,
      FullyLabeledReplicas: (int32) 8,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:22:07.389: INFO: Pod "webserver-deployment-557759b7c7-2nw6j" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-2nw6j",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a89d6cb8-1268-464e-8585-2846f251e8d4",
      ResourceVersion: (string) (len=5) "28951",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-44j25",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-44j25",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.392: INFO: Pod "webserver-deployment-557759b7c7-2rpcg" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-2rpcg",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "eef3e384-f028-47c1-8e83-97ece78d2526",
      ResourceVersion: (string) (len=5) "28766",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=664) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 31 37  32 2e 31 39 35 5c 22 7d  |2.168.172.195\"}|
              00000270  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              00000280  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000290  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-pxlhk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-pxlhk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) (len=15) "192.168.172.195",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.172.195"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849820924,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://97beeff32adbef30457bc99739a02e5dabc19935453fd242acefd6d4f867dc3e",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.394: INFO: Pod "webserver-deployment-557759b7c7-4742l" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-4742l",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0bbcc7c7-d659-4520-bc13-f7da2eb5a52c",
      ResourceVersion: (string) (len=5) "28763",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 36 39  2e 31 33 32 5c 22 7d 22  |2.168.69.132\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-grx8r",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-grx8r",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) (len=14) "192.168.69.132",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.69.132"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849820924,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://530d93fcdb37204fc8319e9f60a6843f5ab5b5139ed0077a520c4dc07949a450",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.395: INFO: Pod "webserver-deployment-557759b7c7-77tvb" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-77tvb",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3398a68f-58bb-40c1-bb89-f12e6ce7a1f0",
      ResourceVersion: (string) (len=5) "28936",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-kw5rx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-kw5rx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.403: INFO: Pod "webserver-deployment-557759b7c7-8x6s8" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-8x6s8",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "02602858-8e6c-4a53-be79-a3edb4c1d0f6",
      ResourceVersion: (string) (len=5) "28769",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=664) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 31 37  32 2e 32 32 37 5c 22 7d  |2.168.172.227\"}|
              00000270  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              00000280  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000290  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-2z6fd",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-2z6fd",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) (len=15) "192.168.172.227",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.172.227"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849820924,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://b7d0909a876d3d19b9d64f8127dab560d2538b651ad9b180558bc0f7836bcafd",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.405: INFO: Pod "webserver-deployment-557759b7c7-96lmx" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-96lmx",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6f610643-bb6d-4939-9205-36b1ad1f7e89",
      ResourceVersion: (string) (len=5) "28757",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 39 36  2e 31 34 36 5c 22 7d 22  |2.168.96.146\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-b69s6",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-b69s6",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-6-153",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.6.153",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.6.153"
        }
      },
      PodIP: (string) (len=14) "192.168.96.146",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.96.146"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849820924,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://ece3140684a4f4d38c1079d044eb96c9f439e1ec943d99752bfdccd9401b475f",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.406: INFO: Pod "webserver-deployment-557759b7c7-97522" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-97522",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "afda6fe4-3dee-4f7d-b95c-2a65e7c07fa6",
      ResourceVersion: (string) (len=5) "28938",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-m59cq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-m59cq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-6-153",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.407: INFO: Pod "webserver-deployment-557759b7c7-9v4sb" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-9v4sb",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c3c70094-d5e6-4529-9689-f1463de1e15e",
      ResourceVersion: (string) (len=5) "28751",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 39 36  2e 31 35 31 5c 22 7d 22  |2.168.96.151\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6nlcg",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6nlcg",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-6-153",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.6.153",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.6.153"
        }
      },
      PodIP: (string) (len=14) "192.168.96.151",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.96.151"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849820924,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://59cbaa39565ee23ce49df6fd1b783610a312363c29d5113865c8f28077d88b40",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.408: INFO: Pod "webserver-deployment-557759b7c7-bsfwh" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-bsfwh",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6b40f4f6-c3f4-4bed-88f7-c075bb82629c",
      ResourceVersion: (string) (len=5) "28724",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 36 39  2e 31 33 30 5c 22 7d 22  |2.168.69.130\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-qxrqz",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-qxrqz",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) (len=14) "192.168.69.130",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.69.130"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849820923,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://756436ac582fd3f246c18bf879e89f3b52a7cf27d70a0b884d149ec754ea543d",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.409: INFO: Pod "webserver-deployment-557759b7c7-bvzb2" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-bvzb2",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "66d77507-47f9-4084-ad33-d5841decaa45",
      ResourceVersion: (string) (len=5) "28948",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-sp5fz",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-sp5fz",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.410: INFO: Pod "webserver-deployment-557759b7c7-gnk4t" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-gnk4t",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "9faa79be-1f85-40a1-a8b7-defff41e9c05",
      ResourceVersion: (string) (len=5) "28947",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-wggnt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-wggnt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.411: INFO: Pod "webserver-deployment-557759b7c7-gs7l6" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-gs7l6",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a69c065e-4e2a-4027-8146-55f15f78eb8e",
      ResourceVersion: (string) (len=5) "28923",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6frtr",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6frtr",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.412: INFO: Pod "webserver-deployment-557759b7c7-h4gcv" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-h4gcv",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "92db4d22-cbdd-468c-8383-66291dfa06f8",
      ResourceVersion: (string) (len=5) "28943",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-7fwn4",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-7fwn4",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.413: INFO: Pod "webserver-deployment-557759b7c7-pv5q6" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-pv5q6",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a487881a-cdef-4364-b5d5-ba369906334c",
      ResourceVersion: (string) (len=5) "28760",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 36 39  2e 31 33 31 5c 22 7d 22  |2.168.69.131\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-x5znl",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-x5znl",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) (len=14) "192.168.69.131",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.69.131"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849820924,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://bb8f08ffe1b5511ea42fb4eec20f67f210d5a8c1c462e98feb26bfc48e881fdb",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.414: INFO: Pod "webserver-deployment-557759b7c7-qd8sx" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-qd8sx",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "66c53f11-a253-4b6f-85e9-aac9bb85e429",
      ResourceVersion: (string) (len=5) "28950",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-9kwsv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-9kwsv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-6-153",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.415: INFO: Pod "webserver-deployment-557759b7c7-r8s99" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-r8s99",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7676b618-5074-4f60-9612-00a452960d9f",
      ResourceVersion: (string) (len=5) "28946",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-n4kmk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-n4kmk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.416: INFO: Pod "webserver-deployment-557759b7c7-twr99" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-twr99",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d3d52d54-2227-483d-87b1-95c9124d46f1",
      ResourceVersion: (string) (len=5) "28754",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 39 36  2e 31 35 33 5c 22 7d 22  |2.168.96.153\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-dcnnk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-dcnnk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-6-153",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820924,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820923,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.6.153",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.6.153"
        }
      },
      PodIP: (string) (len=14) "192.168.96.153",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.96.153"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820923,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849820924,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://ca54a28c05567b217293ed7eed46ac78da879b880ea17411d69dc9238189c097",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.418: INFO: Pod "webserver-deployment-557759b7c7-tz5gn" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-tz5gn",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3fa33302-a1ba-460e-9b66-9c4ca6d2574a",
      ResourceVersion: (string) (len=5) "28941",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-9k79v",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-9k79v",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.418: INFO: Pod "webserver-deployment-557759b7c7-xp7qh" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-xp7qh",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e16d418b-d40b-49bc-9ff0-0146c0975af1",
      ResourceVersion: (string) (len=5) "28954",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "fecdf1d9-0873-4374-b245-579645d32c8f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 65  63 64 66 31 64 39 2d 30  |d\":\"fecdf1d9-0|
              00000090  38 37 33 2d 34 33 37 34  2d 62 32 34 35 2d 35 37  |873-4374-b245-57|
              000000a0  39 36 34 35 64 33 32 63  38 66 5c 22 7d 22 3a 7b  |9645d32c8f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-n4g45",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-n4g45",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.419: INFO: Pod "webserver-deployment-9b4f5bf69-4ql2q" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-4ql2q",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "17d74462-56ca-471d-ac5d-a45d13672534",
      ResourceVersion: (string) (len=5) "28873",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820926,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=708) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 39 32 2e 31  |:{\"ip\":\"192.1|
              00000290  36 38 2e 39 36 2e 31 34  37 5c 22 7d 22 3a 7b 22  |68.96.147\"}":{"|
              000002a0  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              000002b0  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              000002c0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8hfvd",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8hfvd",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-6-153",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820926,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.6.153",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.6.153"
        }
      },
      PodIP: (string) (len=14) "192.168.96.147",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.96.147"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.421: INFO: Pod "webserver-deployment-9b4f5bf69-87mm8" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-87mm8",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e47448b0-0ff4-4858-9aa7-a188f0f92ac0",
      ResourceVersion: (string) (len=5) "28952",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-b5wn9",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-b5wn9",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.422: INFO: Pod "webserver-deployment-9b4f5bf69-hf9kl" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-hf9kl",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "10e1c7a2-9af6-418c-80c3-c92503236961",
      ResourceVersion: (string) (len=5) "28869",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820926,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=709) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 39 32 2e 31  |:{\"ip\":\"192.1|
              00000290  36 38 2e 31 37 32 2e 32  30 37 5c 22 7d 22 3a 7b  |68.172.207\"}":{|
              000002a0  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              000002b0  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              000002c0  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-rwcnz",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-rwcnz",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820926,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) (len=15) "192.168.172.207",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.172.207"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.423: INFO: Pod "webserver-deployment-9b4f5bf69-qjlqh" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-qjlqh",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "869e1ac5-d6cb-449e-b244-4f4fd5b7c553",
      ResourceVersion: (string) (len=5) "28926",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-m9d69",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-m9d69",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.424: INFO: Pod "webserver-deployment-9b4f5bf69-rb7xs" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-rb7xs",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "422b6066-0368-46b4-ae96-7d3c27d4d387",
      ResourceVersion: (string) (len=5) "28939",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-dj8qg",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-dj8qg",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.425: INFO: Pod "webserver-deployment-9b4f5bf69-rmcjk" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-rmcjk",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "382613e6-8805-4a0f-9e11-673e17d44b6a",
      ResourceVersion: (string) (len=5) "28867",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820926,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=709) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 39 32 2e 31  |:{\"ip\":\"192.1|
              00000290  36 38 2e 31 37 32 2e 32  30 36 5c 22 7d 22 3a 7b  |68.172.206\"}":{|
              000002a0  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              000002b0  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              000002c0  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6cxfw",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6cxfw",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820926,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) (len=15) "192.168.172.206",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.172.206"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.427: INFO: Pod "webserver-deployment-9b4f5bf69-rt2rm" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-rt2rm",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a53aa742-0265-4ea4-9f43-706fcf7e8307",
      ResourceVersion: (string) (len=5) "28942",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-s7898",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-s7898",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-6-153",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.6.153",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.6.153"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.433: INFO: Pod "webserver-deployment-9b4f5bf69-sb92j" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-sb92j",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ea2d56e1-851e-4ef4-b762-c6bc84c729e1",
      ResourceVersion: (string) (len=5) "28862",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820926,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=708) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 39 32 2e 31  |:{\"ip\":\"192.1|
              00000290  36 38 2e 36 39 2e 31 33  34 5c 22 7d 22 3a 7b 22  |68.69.134\"}":{"|
              000002a0  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              000002b0  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              000002c0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-4lx4x",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-4lx4x",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) (len=14) "192.168.69.134",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.69.134"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.442: INFO: Pod "webserver-deployment-9b4f5bf69-smh6d" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-smh6d",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5e25514b-f7b2-4edd-b747-0ae8a0409831",
      ResourceVersion: (string) (len=5) "28859",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820926,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=708) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 39 32 2e 31  |:{\"ip\":\"192.1|
              00000290  36 38 2e 36 39 2e 31 33  33 5c 22 7d 22 3a 7b 22  |68.69.133\"}":{"|
              000002a0  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              000002b0  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              000002c0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8pl8j",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8pl8j",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820925,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) (len=14) "192.168.69.133",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.69.133"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820925,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.447: INFO: Pod "webserver-deployment-9b4f5bf69-wlbnn" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-wlbnn",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e210853f-b08d-405e-b334-ed72222ff3f0",
      ResourceVersion: (string) (len=5) "28928",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-tgzkm",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-tgzkm",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.450: INFO: Pod "webserver-deployment-9b4f5bf69-x7krg" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-x7krg",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "de21ce1d-c1e7-44d7-9dd4-fbaf7e6f17e1",
      ResourceVersion: (string) (len=5) "28937",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-blh6q",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-blh6q",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.450: INFO: Pod "webserver-deployment-9b4f5bf69-xh6j7" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-xh6j7",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=14) "deployment-479",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e77e5025-7ed9-40dd-abc2-7caf46e2301b",
      ResourceVersion: (string) (len=5) "28944",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849820927,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "39cf94bd-d7a1-4d96-bc08-69221717af0b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 33 39  63 66 39 34 62 64 2d 64  |d\":\"39cf94bd-d|
              00000090  37 61 31 2d 34 64 39 36  2d 62 63 30 38 2d 36 39  |7a1-4d96-bc08-69|
              000000a0  32 32 31 37 31 37 61 66  30 62 5c 22 7d 22 3a 7b  |221717af0b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-zr787",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-zr787",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-6-153",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849820927,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:22:07.451: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-479" for this suite. @ 04/27/24 13:22:07.457
• [4.287 seconds]
------------------------------
S
------------------------------
[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:132
  STEP: Creating a kubernetes client @ 04/27/24 13:22:07.467
  Apr 27 13:22:07.467: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replicaset @ 04/27/24 13:22:07.467
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:07.58
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:07.584
  STEP: Given a Pod with a 'name' label pod-adoption-release is created @ 04/27/24 13:22:07.587
  STEP: When a replicaset with a matching selector is created @ 04/27/24 13:22:09.616
  STEP: Then the orphan pod is adopted @ 04/27/24 13:22:09.622
  STEP: When the matched label of one of its pods change @ 04/27/24 13:22:10.632
  Apr 27 13:22:10.637: INFO: Pod name pod-adoption-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 04/27/24 13:22:10.648
  Apr 27 13:22:11.660: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-5568" for this suite. @ 04/27/24 13:22:11.668
• [4.209 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:160
  STEP: Creating a kubernetes client @ 04/27/24 13:22:11.677
  Apr 27 13:22:11.677: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 13:22:11.678
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:11.698
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:11.701
  STEP: Creating a pod to test emptydir volume type on node default medium @ 04/27/24 13:22:11.705
  STEP: Saw pod success @ 04/27/24 13:22:15.733
  Apr 27 13:22:15.738: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-2c28ce9d-b917-4fbe-8407-a6406addd755 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 13:22:15.755
  Apr 27 13:22:15.774: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2183" for this suite. @ 04/27/24 13:22:15.78
• [4.110 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/proxy.go:380
  STEP: Creating a kubernetes client @ 04/27/24 13:22:15.787
  Apr 27 13:22:15.787: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename proxy @ 04/27/24 13:22:15.788
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:15.807
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:15.81
  Apr 27 13:22:15.813: INFO: Creating pod...
  Apr 27 13:22:17.833: INFO: Creating service...
  Apr 27 13:22:17.844: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/pods/agnhost/proxy?method=DELETE
  Apr 27 13:22:17.851: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Apr 27 13:22:17.851: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/pods/agnhost/proxy?method=OPTIONS
  Apr 27 13:22:17.855: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Apr 27 13:22:17.855: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/pods/agnhost/proxy?method=PATCH
  Apr 27 13:22:17.859: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Apr 27 13:22:17.859: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/pods/agnhost/proxy?method=POST
  Apr 27 13:22:17.863: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Apr 27 13:22:17.863: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/pods/agnhost/proxy?method=PUT
  Apr 27 13:22:17.866: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Apr 27 13:22:17.866: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/services/e2e-proxy-test-service/proxy?method=DELETE
  Apr 27 13:22:17.872: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Apr 27 13:22:17.872: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/services/e2e-proxy-test-service/proxy?method=OPTIONS
  Apr 27 13:22:17.879: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Apr 27 13:22:17.879: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/services/e2e-proxy-test-service/proxy?method=PATCH
  Apr 27 13:22:17.884: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Apr 27 13:22:17.884: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/services/e2e-proxy-test-service/proxy?method=POST
  Apr 27 13:22:17.891: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Apr 27 13:22:17.891: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/services/e2e-proxy-test-service/proxy?method=PUT
  Apr 27 13:22:17.898: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Apr 27 13:22:17.898: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/pods/agnhost/proxy?method=GET
  Apr 27 13:22:17.903: INFO: http.Client request:GET StatusCode:301
  Apr 27 13:22:17.903: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/services/e2e-proxy-test-service/proxy?method=GET
  Apr 27 13:22:17.908: INFO: http.Client request:GET StatusCode:301
  Apr 27 13:22:17.908: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/pods/agnhost/proxy?method=HEAD
  Apr 27 13:22:17.914: INFO: http.Client request:HEAD StatusCode:301
  Apr 27 13:22:17.914: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-6983/services/e2e-proxy-test-service/proxy?method=HEAD
  Apr 27 13:22:17.919: INFO: http.Client request:HEAD StatusCode:301
  Apr 27 13:22:17.919: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-6983" for this suite. @ 04/27/24 13:22:17.924
• [2.144 seconds]
------------------------------
SS
------------------------------
[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:87
  STEP: Creating a kubernetes client @ 04/27/24 13:22:17.932
  Apr 27 13:22:17.932: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename disruption @ 04/27/24 13:22:17.932
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:17.95
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:17.953
  STEP: Creating a kubernetes client @ 04/27/24 13:22:17.956
  Apr 27 13:22:17.956: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename disruption-2 @ 04/27/24 13:22:17.957
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:17.976
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:17.979
  STEP: Waiting for the pdb to be processed @ 04/27/24 13:22:17.987
  STEP: Waiting for the pdb to be processed @ 04/27/24 13:22:20
  STEP: Waiting for the pdb to be processed @ 04/27/24 13:22:22.01
  STEP: listing a collection of PDBs across all namespaces @ 04/27/24 13:22:24.016
  STEP: listing a collection of PDBs in namespace disruption-4514 @ 04/27/24 13:22:24.02
  STEP: deleting a collection of PDBs @ 04/27/24 13:22:24.023
  STEP: Waiting for the PDB collection to be deleted @ 04/27/24 13:22:24.038
  Apr 27 13:22:24.041: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2-4800" for this suite. @ 04/27/24 13:22:24.046
  Apr 27 13:22:24.055: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-4514" for this suite. @ 04/27/24 13:22:24.059
• [6.135 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/lifecycle_hook.go:136
  STEP: Creating a kubernetes client @ 04/27/24 13:22:24.066
  Apr 27 13:22:24.066: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 04/27/24 13:22:24.067
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:24.131
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:24.135
  STEP: create the container to handle the HTTPGet hook request. @ 04/27/24 13:22:24.142
  STEP: create the pod with lifecycle hook @ 04/27/24 13:22:26.167
  STEP: check poststart hook @ 04/27/24 13:22:28.19
  STEP: delete the pod with lifecycle hook @ 04/27/24 13:22:28.209
  Apr 27 13:22:30.230: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-9548" for this suite. @ 04/27/24 13:22:30.234
• [6.176 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/security_context.go:349
  STEP: Creating a kubernetes client @ 04/27/24 13:22:30.243
  Apr 27 13:22:30.243: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename security-context-test @ 04/27/24 13:22:30.243
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:30.262
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:30.265
  Apr 27 13:22:34.293: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-9358" for this suite. @ 04/27/24 13:22:34.298
• [4.063 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:248
  STEP: Creating a kubernetes client @ 04/27/24 13:22:34.306
  Apr 27 13:22:34.306: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-runtime @ 04/27/24 13:22:34.307
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:34.325
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:34.328
  STEP: create the container @ 04/27/24 13:22:34.331
  W0427 13:22:34.340960      19 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 04/27/24 13:22:34.341
  STEP: get the container status @ 04/27/24 13:22:37.362
  STEP: the container should be terminated @ 04/27/24 13:22:37.366
  STEP: the termination message should be set @ 04/27/24 13:22:37.366
  Apr 27 13:22:37.366: INFO: Expected: &{OK} to match Container's Termination Message: OK --
  STEP: delete the container @ 04/27/24 13:22:37.366
  Apr 27 13:22:37.382: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-5131" for this suite. @ 04/27/24 13:22:37.386
• [3.087 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for the cluster [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:50
  STEP: Creating a kubernetes client @ 04/27/24 13:22:37.394
  Apr 27 13:22:37.394: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename dns @ 04/27/24 13:22:37.394
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:37.415
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:37.418
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 04/27/24 13:22:37.422
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 04/27/24 13:22:37.422
  STEP: creating a pod to probe DNS @ 04/27/24 13:22:37.422
  STEP: submitting the pod to kubernetes @ 04/27/24 13:22:37.422
  STEP: retrieving the pod @ 04/27/24 13:22:39.445
  STEP: looking for the results for each expected name from probers @ 04/27/24 13:22:39.449
  Apr 27 13:22:39.466: INFO: DNS probes using dns-7599/dns-test-8b14a9a4-7d5b-41aa-b0df-8f3e428ad9f8 succeeded

  STEP: deleting the pod @ 04/27/24 13:22:39.466
  Apr 27 13:22:39.480: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-7599" for this suite. @ 04/27/24 13:22:39.484
• [2.099 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:55
  STEP: Creating a kubernetes client @ 04/27/24 13:22:39.493
  Apr 27 13:22:39.493: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:22:39.494
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:39.511
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:39.514
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 13:22:39.517
  STEP: Saw pod success @ 04/27/24 13:22:41.535
  Apr 27 13:22:41.539: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-bc86c309-dbe7-43f5-b84f-73bdf654b4a2 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 13:22:41.547
  Apr 27 13:22:41.566: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8982" for this suite. @ 04/27/24 13:22:41.57
• [2.086 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:58
  STEP: Creating a kubernetes client @ 04/27/24 13:22:41.58
  Apr 27 13:22:41.580: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 13:22:41.58
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:41.601
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:41.604
  STEP: Creating configMap with name configmap-test-volume-81087e66-d464-44d3-bdfb-7a9f2b6354ef @ 04/27/24 13:22:41.607
  STEP: Creating a pod to test consume configMaps @ 04/27/24 13:22:41.612
  STEP: Saw pod success @ 04/27/24 13:22:45.64
  Apr 27 13:22:45.644: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-configmaps-e6b572b7-4cd2-4880-8ccd-6f1a0802f7d6 container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 13:22:45.652
  Apr 27 13:22:45.673: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5113" for this suite. @ 04/27/24 13:22:45.677
• [4.105 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/csi_inline.go:157
  STEP: Creating a kubernetes client @ 04/27/24 13:22:45.685
  Apr 27 13:22:45.685: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename csiinlinevolumes @ 04/27/24 13:22:45.686
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:45.706
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:45.708
  STEP: Creating two CSIDrivers @ 04/27/24 13:22:45.711
  STEP: Getting "inline-driver-b770e178-38e1-4e1a-ada4-8d8a63e815cc" & "inline-driver-38d23619-5de7-4c15-a349-fcec4721d31c" @ 04/27/24 13:22:45.731
  STEP: Patching the CSIDriver "inline-driver-38d23619-5de7-4c15-a349-fcec4721d31c" @ 04/27/24 13:22:45.738
  STEP: Updating the CSIDriver "inline-driver-38d23619-5de7-4c15-a349-fcec4721d31c" @ 04/27/24 13:22:45.745
  STEP: Listing all CSIDrivers with the labelSelector: "e2e-test=csiinlinevolumes-3782" @ 04/27/24 13:22:45.755
  STEP: Deleting CSIDriver "inline-driver-b770e178-38e1-4e1a-ada4-8d8a63e815cc" @ 04/27/24 13:22:45.758
  STEP: Confirm deletion of CSIDriver "inline-driver-b770e178-38e1-4e1a-ada4-8d8a63e815cc" @ 04/27/24 13:22:45.765
  STEP: Deleting CSIDriver "inline-driver-38d23619-5de7-4c15-a349-fcec4721d31c" via DeleteCollection @ 04/27/24 13:22:45.769
  STEP: Confirm deletion of CSIDriver "inline-driver-38d23619-5de7-4c15-a349-fcec4721d31c" @ 04/27/24 13:22:45.778
  Apr 27 13:22:45.782: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-3782" for this suite. @ 04/27/24 13:22:45.787
• [0.108 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:100
  STEP: Creating a kubernetes client @ 04/27/24 13:22:45.794
  Apr 27 13:22:45.794: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 13:22:45.795
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:45.813
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:45.816
  STEP: Creating configMap with name configmap-test-volume-map-3ca8a45f-9972-4931-a59b-9dfde56f144c @ 04/27/24 13:22:45.819
  STEP: Creating a pod to test consume configMaps @ 04/27/24 13:22:45.824
  STEP: Saw pod success @ 04/27/24 13:22:49.851
  Apr 27 13:22:49.855: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-configmaps-80a9d62d-4bcf-4b5b-ab66-a275423687ff container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 13:22:49.863
  Apr 27 13:22:49.883: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8619" for this suite. @ 04/27/24 13:22:49.887
• [4.102 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:105
  STEP: Creating a kubernetes client @ 04/27/24 13:22:49.896
  Apr 27 13:22:49.896: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename subpath @ 04/27/24 13:22:49.897
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:22:49.915
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:22:49.918
  STEP: Setting up data @ 04/27/24 13:22:49.922
  STEP: Creating pod pod-subpath-test-projected-9vfr @ 04/27/24 13:22:49.931
  STEP: Creating a pod to test atomic-volume-subpath @ 04/27/24 13:22:49.931
  STEP: Saw pod success @ 04/27/24 13:23:14.014
  Apr 27 13:23:14.018: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-subpath-test-projected-9vfr container test-container-subpath-projected-9vfr: <nil>
  STEP: delete the pod @ 04/27/24 13:23:14.027
  STEP: Deleting pod pod-subpath-test-projected-9vfr @ 04/27/24 13:23:14.045
  Apr 27 13:23:14.045: INFO: Deleting pod "pod-subpath-test-projected-9vfr" in namespace "subpath-6732"
  Apr 27 13:23:14.048: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-6732" for this suite. @ 04/27/24 13:23:14.052
• [24.163 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:322
  STEP: Creating a kubernetes client @ 04/27/24 13:23:14.06
  Apr 27 13:23:14.060: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename gc @ 04/27/24 13:23:14.06
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:14.08
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:14.082
  STEP: create the rc @ 04/27/24 13:23:14.085
  W0427 13:23:14.093104      19 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 04/27/24 13:23:19.097
  STEP: wait for all pods to be garbage collected @ 04/27/24 13:23:19.105
  STEP: Gathering metrics @ 04/27/24 13:23:24.114
  W0427 13:23:24.120368      19 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Apr 27 13:23:24.120: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 27 13:23:24.120: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-6298" for this suite. @ 04/27/24 13:23:24.125
• [10.073 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:223
  STEP: Creating a kubernetes client @ 04/27/24 13:23:24.137
  Apr 27 13:23:24.137: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:23:24.137
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:24.157
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:24.159
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 13:23:24.162
  STEP: Saw pod success @ 04/27/24 13:23:28.189
  Apr 27 13:23:28.194: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-9a9d60da-e5a6-4804-a48d-dbb931aa45d5 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 13:23:28.201
  Apr 27 13:23:28.217: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9243" for this suite. @ 04/27/24 13:23:28.221
• [4.091 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:619
  STEP: Creating a kubernetes client @ 04/27/24 13:23:28.228
  Apr 27 13:23:28.228: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 13:23:28.228
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:28.247
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:28.25
  Apr 27 13:23:28.253: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: creating the pod @ 04/27/24 13:23:28.254
  STEP: submitting the pod to kubernetes @ 04/27/24 13:23:28.254
  Apr 27 13:23:30.289: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-2043" for this suite. @ 04/27/24 13:23:30.294
• [2.074 seconds]
------------------------------
SS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/proxy.go:286
  STEP: Creating a kubernetes client @ 04/27/24 13:23:30.302
  Apr 27 13:23:30.302: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename proxy @ 04/27/24 13:23:30.302
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:30.32
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:30.323
  Apr 27 13:23:30.327: INFO: Creating pod...
  Apr 27 13:23:32.347: INFO: Creating service...
  Apr 27 13:23:32.358: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/pods/agnhost/proxy/some/path/with/DELETE
  Apr 27 13:23:32.363: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Apr 27 13:23:32.363: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/pods/agnhost/proxy/some/path/with/GET
  Apr 27 13:23:32.370: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Apr 27 13:23:32.370: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/pods/agnhost/proxy/some/path/with/HEAD
  Apr 27 13:23:32.374: INFO: http.Client request:HEAD | StatusCode:200
  Apr 27 13:23:32.374: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/pods/agnhost/proxy/some/path/with/OPTIONS
  Apr 27 13:23:32.378: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Apr 27 13:23:32.378: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/pods/agnhost/proxy/some/path/with/PATCH
  Apr 27 13:23:32.382: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Apr 27 13:23:32.383: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/pods/agnhost/proxy/some/path/with/POST
  Apr 27 13:23:32.387: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Apr 27 13:23:32.387: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/pods/agnhost/proxy/some/path/with/PUT
  Apr 27 13:23:32.391: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Apr 27 13:23:32.391: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/services/test-service/proxy/some/path/with/DELETE
  Apr 27 13:23:32.398: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Apr 27 13:23:32.398: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/services/test-service/proxy/some/path/with/GET
  Apr 27 13:23:32.404: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Apr 27 13:23:32.404: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/services/test-service/proxy/some/path/with/HEAD
  Apr 27 13:23:32.409: INFO: http.Client request:HEAD | StatusCode:200
  Apr 27 13:23:32.409: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/services/test-service/proxy/some/path/with/OPTIONS
  Apr 27 13:23:32.415: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Apr 27 13:23:32.415: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/services/test-service/proxy/some/path/with/PATCH
  Apr 27 13:23:32.421: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Apr 27 13:23:32.421: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/services/test-service/proxy/some/path/with/POST
  Apr 27 13:23:32.426: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Apr 27 13:23:32.426: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3386/services/test-service/proxy/some/path/with/PUT
  Apr 27 13:23:32.433: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Apr 27 13:23:32.433: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-3386" for this suite. @ 04/27/24 13:23:32.437
• [2.143 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance] [sig-api-machinery, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:254
  STEP: Creating a kubernetes client @ 04/27/24 13:23:32.444
  Apr 27 13:23:32.444: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename namespaces @ 04/27/24 13:23:32.445
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:32.464
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:32.467
  STEP: Creating a test namespace @ 04/27/24 13:23:32.47
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:32.487
  STEP: Creating a service in the namespace @ 04/27/24 13:23:32.49
  STEP: Deleting the namespace @ 04/27/24 13:23:32.511
  STEP: Waiting for the namespace to be removed. @ 04/27/24 13:23:32.52
  STEP: Recreating the namespace @ 04/27/24 13:23:38.525
  STEP: Verifying there is no service in the namespace @ 04/27/24 13:23:38.543
  Apr 27 13:23:38.548: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-6632" for this suite. @ 04/27/24 13:23:38.552
  STEP: Destroying namespace "nsdeletetest-6934" for this suite. @ 04/27/24 13:23:38.559
  Apr 27 13:23:38.563: INFO: Namespace nsdeletetest-6934 was already deleted
  STEP: Destroying namespace "nsdeletetest-1950" for this suite. @ 04/27/24 13:23:38.563
• [6.126 seconds]
------------------------------
SS
------------------------------
[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/storageclass.go:53
  STEP: Creating a kubernetes client @ 04/27/24 13:23:38.571
  Apr 27 13:23:38.571: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename csi-storageclass @ 04/27/24 13:23:38.571
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:38.59
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:38.593
  STEP: Creating a StorageClass @ 04/27/24 13:23:38.596
  STEP: Get StorageClass "e2e-x5rmw" @ 04/27/24 13:23:38.601
  STEP: Patching the StorageClass "e2e-x5rmw" @ 04/27/24 13:23:38.606
  STEP: Delete StorageClass "e2e-x5rmw" @ 04/27/24 13:23:38.612
  STEP: Confirm deletion of StorageClass "e2e-x5rmw" @ 04/27/24 13:23:38.619
  STEP: Create a replacement StorageClass @ 04/27/24 13:23:38.623
  STEP: Updating StorageClass "e2e-v2-p6gch" @ 04/27/24 13:23:38.627
  STEP: Listing all StorageClass with the labelSelector: "e2e-v2-p6gch=updated" @ 04/27/24 13:23:38.635
  STEP: Deleting StorageClass "e2e-v2-p6gch" via DeleteCollection @ 04/27/24 13:23:38.639
  STEP: Confirm deletion of StorageClass "e2e-v2-p6gch" @ 04/27/24 13:23:38.647
  Apr 27 13:23:38.651: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csi-storageclass-4117" for this suite. @ 04/27/24 13:23:38.655
• [0.092 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:78
  STEP: Creating a kubernetes client @ 04/27/24 13:23:38.663
  Apr 27 13:23:38.663: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 13:23:38.663
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:38.682
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:38.685
  STEP: Counting existing ResourceQuota @ 04/27/24 13:23:38.688
  STEP: Creating a ResourceQuota @ 04/27/24 13:23:43.692
  STEP: Ensuring resource quota status is calculated @ 04/27/24 13:23:43.699
  Apr 27 13:23:45.704: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2554" for this suite. @ 04/27/24 13:23:45.709
• [7.054 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance] [sig-auth, Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:810
  STEP: Creating a kubernetes client @ 04/27/24 13:23:45.718
  Apr 27 13:23:45.718: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename svcaccounts @ 04/27/24 13:23:45.719
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:45.737
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:45.74
  STEP: Creating ServiceAccount "e2e-sa-5sc5m"  @ 04/27/24 13:23:45.743
  Apr 27 13:23:45.748: INFO: AutomountServiceAccountToken: false
  STEP: Updating ServiceAccount "e2e-sa-5sc5m"  @ 04/27/24 13:23:45.748
  Apr 27 13:23:45.756: INFO: AutomountServiceAccountToken: true
  Apr 27 13:23:45.756: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-7375" for this suite. @ 04/27/24 13:23:45.761
• [0.051 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance] [sig-apps, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:177
  STEP: Creating a kubernetes client @ 04/27/24 13:23:45.77
  Apr 27 13:23:45.770: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename daemonsets @ 04/27/24 13:23:45.77
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:45.791
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:45.794
  STEP: Creating simple DaemonSet "daemon-set" @ 04/27/24 13:23:45.818
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/27/24 13:23:45.824
  Apr 27 13:23:45.828: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:45.828: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:45.832: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:23:45.832: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:23:46.830: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:46.830: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:46.834: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:23:46.834: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:23:47.829: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:47.829: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:47.834: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Apr 27 13:23:47.834: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Stop a daemon pod, check that the daemon pod is revived. @ 04/27/24 13:23:47.838
  Apr 27 13:23:47.856: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:47.856: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:47.860: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 27 13:23:47.860: INFO: Node ip-172-31-82-63 is running 0 daemon pod, expected 1
  Apr 27 13:23:48.859: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:48.859: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:48.864: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 27 13:23:48.864: INFO: Node ip-172-31-82-63 is running 0 daemon pod, expected 1
  Apr 27 13:23:49.858: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:49.858: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:23:49.868: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Apr 27 13:23:49.868: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 04/27/24 13:23:49.873
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-8432, will wait for the garbage collector to delete the pods @ 04/27/24 13:23:49.873
  Apr 27 13:23:49.938: INFO: Deleting DaemonSet.extensions daemon-set took: 9.631989ms
  Apr 27 13:23:50.039: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.968584ms
  Apr 27 13:23:51.445: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:23:51.445: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 27 13:23:51.449: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"30344"},"items":null}

  Apr 27 13:23:51.453: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"30344"},"items":null}

  Apr 27 13:23:51.468: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-8432" for this suite. @ 04/27/24 13:23:51.473
• [5.711 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment Deployment should have a working scale subresource [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:150
  STEP: Creating a kubernetes client @ 04/27/24 13:23:51.481
  Apr 27 13:23:51.481: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename deployment @ 04/27/24 13:23:51.482
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:51.5
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:51.504
  Apr 27 13:23:51.507: INFO: Creating simple deployment test-new-deployment
  Apr 27 13:23:51.521: INFO: deployment "test-new-deployment" doesn't have the required revision set
  STEP: getting scale subresource @ 04/27/24 13:23:53.54
  STEP: updating a scale subresource @ 04/27/24 13:23:53.543
  STEP: verifying the deployment Spec.Replicas was modified @ 04/27/24 13:23:53.551
  STEP: Patch a scale subresource @ 04/27/24 13:23:53.555
  Apr 27 13:23:53.577: INFO: Deployment "test-new-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=19) "test-new-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5721",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6599af4c-9509-4336-8c32-2a5fbee0eb53",
      ResourceVersion: (string) (len=5) "30382",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849821031,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)(<nil>),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=28) {
              00000000  7b 22 66 3a 73 70 65 63  22 3a 7b 22 66 3a 72 65  |{"f:spec":{"f:re|
              00000010  70 6c 69 63 61 73 22 3a  7b 7d 7d 7d              |plicas":{}}}|
            }
          }),
          Subresource: (string) (len=5) "scale"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821031,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=619) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |onds":{},"f:revi|
              00000060  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000070  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              00000090  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000a0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000b0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000c0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000d0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000e0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              000000f0  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000100  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000110  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000120  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000130  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000140  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000150  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000160  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000170  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000180  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000190  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001a0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001b0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001c0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001d0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001e0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000001f0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000200  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000210  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000220  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000230  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000240  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000250  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000260  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(4),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821031,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=72) "ReplicaSet \"test-new-deployment-557759b7c7\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 27 13:23:53.585: INFO: New ReplicaSet "test-new-deployment-557759b7c7" of Deployment "test-new-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-new-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5721",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cb44f487-7270-4750-a785-7a233b49fb71",
      ResourceVersion: (string) (len=5) "30385",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849821031,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "4",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "5",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=19) "test-new-deployment",
          UID: (types.UID) (len=36) "6599af4c-9509-4336-8c32-2a5fbee0eb53",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821033,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 36 35 39 39 61 66  34 63 2d 39 35 30 39 2d  |\"6599af4c-9509-|
              00000120  34 33 33 36 2d 38 63 33  32 2d 32 61 35 66 62 65  |4336-8c32-2a5fbe|
              00000130  65 30 65 62 35 33 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |e0eb53\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(4),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:23:53.593: INFO: Pod "test-new-deployment-557759b7c7-5gpf6" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-5gpf6",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5721",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fd443b03-3597-4ee4-ba65-8c7abf47c0a5",
      ResourceVersion: (string) (len=5) "30371",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849821031,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "cb44f487-7270-4750-a785-7a233b49fb71",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821031,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 62  34 34 66 34 38 37 2d 37  |d\":\"cb44f487-7|
              00000090  32 37 30 2d 34 37 35 30  2d 61 37 38 35 2d 37 61  |270-4750-a785-7a|
              000000a0  32 33 33 62 34 39 66 62  37 31 5c 22 7d 22 3a 7b  |233b49fb71\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 36 39  2e 31 33 39 5c 22 7d 22  |2.168.69.139\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-45ltx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-45ltx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=16) "ip-172-31-37-185",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821031,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821031,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=13) "172.31.37.185",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=13) "172.31.37.185"
        }
      },
      PodIP: (string) (len=14) "192.168.69.139",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "192.168.69.139"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849821031,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849821032,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://b68fccdd0af9be97ceaa6e1b1655a5653a2da313e47b14333188447014b85112",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:23:53.595: INFO: Pod "test-new-deployment-557759b7c7-j47k5" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-j47k5",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5721",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "235e5051-dfbf-4e85-9e6e-2f57a292425c",
      ResourceVersion: (string) (len=5) "30386",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849821033,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "cb44f487-7270-4750-a785-7a233b49fb71",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821033,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 62  34 34 66 34 38 37 2d 37  |d\":\"cb44f487-7|
              00000090  32 37 30 2d 34 37 35 30  2d 61 37 38 35 2d 37 61  |270-4750-a785-7a|
              000000a0  32 33 33 62 34 39 66 62  37 31 5c 22 7d 22 3a 7b  |233b49fb71\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-vjfxb",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-vjfxb",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849821033,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:23:53.596: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5721" for this suite. @ 04/27/24 13:23:53.6
• [2.128 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Pods should patch a pod status [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:1084
  STEP: Creating a kubernetes client @ 04/27/24 13:23:53.61
  Apr 27 13:23:53.610: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 13:23:53.61
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:53.633
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:53.636
  STEP: Create a pod @ 04/27/24 13:23:53.639
  STEP: patching /status @ 04/27/24 13:23:55.662
  Apr 27 13:23:55.671: INFO: Status Message: "Patched by e2e test" and Reason: "E2E"
  Apr 27 13:23:55.672: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-3838" for this suite. @ 04/27/24 13:23:55.677
• [2.075 seconds]
------------------------------
SSS
------------------------------
[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance] [sig-auth, Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:163
  STEP: Creating a kubernetes client @ 04/27/24 13:23:55.685
  Apr 27 13:23:55.685: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename svcaccounts @ 04/27/24 13:23:55.686
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:55.707
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:55.71
  Apr 27 13:23:55.737: INFO: created pod pod-service-account-defaultsa
  Apr 27 13:23:55.737: INFO: pod pod-service-account-defaultsa service account token volume mount: true
  Apr 27 13:23:55.744: INFO: created pod pod-service-account-mountsa
  Apr 27 13:23:55.744: INFO: pod pod-service-account-mountsa service account token volume mount: true
  Apr 27 13:23:55.749: INFO: created pod pod-service-account-nomountsa
  Apr 27 13:23:55.749: INFO: pod pod-service-account-nomountsa service account token volume mount: false
  Apr 27 13:23:55.755: INFO: created pod pod-service-account-defaultsa-mountspec
  Apr 27 13:23:55.757: INFO: pod pod-service-account-defaultsa-mountspec service account token volume mount: true
  Apr 27 13:23:55.767: INFO: created pod pod-service-account-mountsa-mountspec
  Apr 27 13:23:55.767: INFO: pod pod-service-account-mountsa-mountspec service account token volume mount: true
  Apr 27 13:23:55.773: INFO: created pod pod-service-account-nomountsa-mountspec
  Apr 27 13:23:55.773: INFO: pod pod-service-account-nomountsa-mountspec service account token volume mount: true
  Apr 27 13:23:55.782: INFO: created pod pod-service-account-defaultsa-nomountspec
  Apr 27 13:23:55.782: INFO: pod pod-service-account-defaultsa-nomountspec service account token volume mount: false
  Apr 27 13:23:55.788: INFO: created pod pod-service-account-mountsa-nomountspec
  Apr 27 13:23:55.788: INFO: pod pod-service-account-mountsa-nomountspec service account token volume mount: false
  Apr 27 13:23:55.795: INFO: created pod pod-service-account-nomountsa-nomountspec
  Apr 27 13:23:55.795: INFO: pod pod-service-account-nomountsa-nomountspec service account token volume mount: false
  Apr 27 13:23:55.795: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-7348" for this suite. @ 04/27/24 13:23:55.801
• [0.128 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-instrumentation] Events should delete a collection of events [Conformance] [sig-instrumentation, Conformance]
k8s.io/kubernetes/test/e2e/instrumentation/core_events.go:176
  STEP: Creating a kubernetes client @ 04/27/24 13:23:55.814
  Apr 27 13:23:55.814: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename events @ 04/27/24 13:23:55.814
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:55.836
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:55.839
  STEP: Create set of events @ 04/27/24 13:23:55.843
  Apr 27 13:23:55.850: INFO: created test-event-1
  Apr 27 13:23:55.856: INFO: created test-event-2
  Apr 27 13:23:55.861: INFO: created test-event-3
  STEP: get a list of Events with a label in the current namespace @ 04/27/24 13:23:55.861
  STEP: delete collection of events @ 04/27/24 13:23:55.865
  Apr 27 13:23:55.865: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 04/27/24 13:23:55.899
  Apr 27 13:23:55.899: INFO: requesting list of events to confirm quantity
  Apr 27 13:23:55.903: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-5458" for this suite. @ 04/27/24 13:23:55.907
• [0.101 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance] [sig-api-machinery, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:274
  STEP: Creating a kubernetes client @ 04/27/24 13:23:55.916
  Apr 27 13:23:55.916: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename namespaces @ 04/27/24 13:23:55.916
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:55.946
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:55.951
  STEP: creating a Namespace @ 04/27/24 13:23:55.957
  STEP: patching the Namespace @ 04/27/24 13:23:55.979
  STEP: get the Namespace and ensuring it has the label @ 04/27/24 13:23:55.984
  Apr 27 13:23:55.988: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-7914" for this suite. @ 04/27/24 13:23:55.995
  STEP: Destroying namespace "nspatchtest-168e6391-ee2b-4e7e-b6eb-8251154bcf61-7694" for this suite. @ 04/27/24 13:23:56.001
• [0.093 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:70
  STEP: Creating a kubernetes client @ 04/27/24 13:23:56.009
  Apr 27 13:23:56.009: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replication-controller @ 04/27/24 13:23:56.01
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:23:56.031
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:23:56.035
  STEP: Creating replication controller my-hostname-basic-da18160d-61b3-4a5f-aceb-0345bb108f03 @ 04/27/24 13:23:56.042
  Apr 27 13:23:56.055: INFO: Pod name my-hostname-basic-da18160d-61b3-4a5f-aceb-0345bb108f03: Found 0 pods out of 1
  Apr 27 13:24:01.059: INFO: Pod name my-hostname-basic-da18160d-61b3-4a5f-aceb-0345bb108f03: Found 1 pods out of 1
  Apr 27 13:24:01.059: INFO: Ensuring all pods for ReplicationController "my-hostname-basic-da18160d-61b3-4a5f-aceb-0345bb108f03" are running
  Apr 27 13:24:01.063: INFO: Pod "my-hostname-basic-da18160d-61b3-4a5f-aceb-0345bb108f03-t82tg" is running and ready(conditions: [{Type:PodReadyToStartContainers Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:23:57 +0000 UTC Reason: Message:} {Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:23:56 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:23:57 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:23:57 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:23:56 +0000 UTC Reason: Message:}])
  Apr 27 13:24:01.063: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 04/27/24 13:24:01.063
  Apr 27 13:24:01.076: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-7291" for this suite. @ 04/27/24 13:24:01.082
• [5.080 seconds]
------------------------------
S
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:91
  STEP: Creating a kubernetes client @ 04/27/24 13:24:01.09
  Apr 27 13:24:01.090: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename subpath @ 04/27/24 13:24:01.09
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:01.11
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:01.112
  STEP: Setting up data @ 04/27/24 13:24:01.115
  STEP: Creating pod pod-subpath-test-downwardapi-6sqp @ 04/27/24 13:24:01.127
  STEP: Creating a pod to test atomic-volume-subpath @ 04/27/24 13:24:01.127
  STEP: Saw pod success @ 04/27/24 13:24:25.209
  Apr 27 13:24:25.213: INFO: Trying to get logs from node ip-172-31-37-185 pod pod-subpath-test-downwardapi-6sqp container test-container-subpath-downwardapi-6sqp: <nil>
  STEP: delete the pod @ 04/27/24 13:24:25.231
  STEP: Deleting pod pod-subpath-test-downwardapi-6sqp @ 04/27/24 13:24:25.25
  Apr 27 13:24:25.250: INFO: Deleting pod "pod-subpath-test-downwardapi-6sqp" in namespace "subpath-9505"
  Apr 27 13:24:25.255: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-9505" for this suite. @ 04/27/24 13:24:25.259
• [24.177 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance] [sig-apps, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:385
  STEP: Creating a kubernetes client @ 04/27/24 13:24:25.267
  Apr 27 13:24:25.267: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename daemonsets @ 04/27/24 13:24:25.267
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:25.285
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:25.288
  Apr 27 13:24:25.316: INFO: Creating simple daemon set daemon-set
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/27/24 13:24:25.322
  Apr 27 13:24:25.327: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:25.327: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:25.330: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:24:25.330: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:24:26.328: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:26.328: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:26.332: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 27 13:24:26.332: INFO: Node ip-172-31-82-63 is running 0 daemon pod, expected 1
  Apr 27 13:24:27.329: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:27.329: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:27.334: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Apr 27 13:24:27.334: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Update daemon pods image. @ 04/27/24 13:24:27.351
  STEP: Check that daemon pods images are updated. @ 04/27/24 13:24:27.363
  Apr 27 13:24:27.366: INFO: Wrong image for pod: daemon-set-97882. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 27 13:24:27.366: INFO: Wrong image for pod: daemon-set-hm7rx. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 27 13:24:27.366: INFO: Wrong image for pod: daemon-set-m6z45. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 27 13:24:27.370: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:27.370: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:28.369: INFO: Wrong image for pod: daemon-set-97882. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 27 13:24:28.369: INFO: Wrong image for pod: daemon-set-hm7rx. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 27 13:24:28.369: INFO: Pod daemon-set-qj4hs is not available
  Apr 27 13:24:28.373: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:28.373: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:29.368: INFO: Wrong image for pod: daemon-set-hm7rx. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 27 13:24:29.368: INFO: Pod daemon-set-k88dj is not available
  Apr 27 13:24:29.374: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:29.374: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:30.368: INFO: Wrong image for pod: daemon-set-hm7rx. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 27 13:24:30.368: INFO: Pod daemon-set-k88dj is not available
  Apr 27 13:24:30.372: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:30.372: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:31.368: INFO: Pod daemon-set-rq5cw is not available
  Apr 27 13:24:31.372: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:31.372: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  STEP: Check that daemon pods are still running on every node of the cluster. @ 04/27/24 13:24:31.372
  Apr 27 13:24:31.376: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:31.377: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:31.380: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 27 13:24:31.380: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:24:32.379: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:32.379: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:32.383: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Apr 27 13:24:32.383: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 04/27/24 13:24:32.403
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-2369, will wait for the garbage collector to delete the pods @ 04/27/24 13:24:32.403
  Apr 27 13:24:32.467: INFO: Deleting DaemonSet.extensions daemon-set took: 8.72685ms
  Apr 27 13:24:32.568: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.953439ms
  Apr 27 13:24:34.372: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:24:34.372: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 27 13:24:34.376: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"30992"},"items":null}

  Apr 27 13:24:34.380: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"30992"},"items":null}

  Apr 27 13:24:34.396: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-2369" for this suite. @ 04/27/24 13:24:34.4
• [9.141 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1373
  STEP: Creating a kubernetes client @ 04/27/24 13:24:34.408
  Apr 27 13:24:34.408: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:24:34.409
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:34.427
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:34.43
  STEP: validating cluster-info @ 04/27/24 13:24:34.433
  Apr 27 13:24:34.433: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-757 cluster-info'
  Apr 27 13:24:34.478: INFO: stderr: ""
  Apr 27 13:24:34.478: INFO: stdout: "\x1b[0;32mKubernetes control plane\x1b[0m is running at \x1b[0;33mhttps://10.152.183.1:443\x1b[0m\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n"
  Apr 27 13:24:34.478: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-757" for this suite. @ 04/27/24 13:24:34.482
• [0.082 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance] [sig-auth, Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:649
  STEP: Creating a kubernetes client @ 04/27/24 13:24:34.49
  Apr 27 13:24:34.490: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename svcaccounts @ 04/27/24 13:24:34.491
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:34.508
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:34.511
  STEP: creating a ServiceAccount @ 04/27/24 13:24:34.514
  STEP: watching for the ServiceAccount to be added @ 04/27/24 13:24:34.522
  STEP: patching the ServiceAccount @ 04/27/24 13:24:34.524
  STEP: finding ServiceAccount in list of all ServiceAccounts (by LabelSelector) @ 04/27/24 13:24:34.53
  STEP: deleting the ServiceAccount @ 04/27/24 13:24:34.535
  Apr 27 13:24:34.551: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-4903" for this suite. @ 04/27/24 13:24:34.558
• [0.075 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:75
  STEP: Creating a kubernetes client @ 04/27/24 13:24:34.565
  Apr 27 13:24:34.565: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:24:34.565
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:34.584
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:34.587
  STEP: Creating configMap with name projected-configmap-test-volume-cf9943a9-9bf8-432f-aeeb-367cd010e332 @ 04/27/24 13:24:34.59
  STEP: Creating a pod to test consume configMaps @ 04/27/24 13:24:34.596
  STEP: Saw pod success @ 04/27/24 13:24:38.621
  Apr 27 13:24:38.626: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-configmaps-127e3c1f-6e7f-4888-9040-3b12b3435ce0 container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 13:24:38.633
  Apr 27 13:24:38.650: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5691" for this suite. @ 04/27/24 13:24:38.654
• [4.096 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:474
  STEP: Creating a kubernetes client @ 04/27/24 13:24:38.661
  Apr 27 13:24:38.661: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename field-validation @ 04/27/24 13:24:38.661
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:38.682
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:38.685
  Apr 27 13:24:38.688: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  W0427 13:24:41.228756      19 warnings.go:70] unknown field "alpha"
  W0427 13:24:41.228776      19 warnings.go:70] unknown field "beta"
  W0427 13:24:41.228779      19 warnings.go:70] unknown field "delta"
  W0427 13:24:41.228782      19 warnings.go:70] unknown field "epsilon"
  W0427 13:24:41.228786      19 warnings.go:70] unknown field "gamma"
  Apr 27 13:24:41.779: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-1726" for this suite. @ 04/27/24 13:24:41.784
• [3.132 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:78
  STEP: Creating a kubernetes client @ 04/27/24 13:24:41.793
  Apr 27 13:24:41.793: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:24:41.794
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:41.812
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:41.815
  STEP: Creating projection with secret that has name projected-secret-test-map-3e2d3aea-c36e-4d26-87c1-fc2128da1bdc @ 04/27/24 13:24:41.818
  STEP: Creating a pod to test consume secrets @ 04/27/24 13:24:41.824
  STEP: Saw pod success @ 04/27/24 13:24:45.851
  Apr 27 13:24:45.856: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-secrets-6222c975-67a8-4f15-8b34-88388b7c66ba container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 13:24:45.863
  Apr 27 13:24:45.880: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3246" for this suite. @ 04/27/24 13:24:45.884
• [4.098 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:119
  STEP: Creating a kubernetes client @ 04/27/24 13:24:45.891
  Apr 27 13:24:45.891: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:24:45.892
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:45.912
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:45.915
  STEP: Creating secret with name projected-secret-test-bde95f1b-c33c-4c26-a9f5-69541b6f338c @ 04/27/24 13:24:45.918
  STEP: Creating a pod to test consume secrets @ 04/27/24 13:24:45.923
  STEP: Saw pod success @ 04/27/24 13:24:49.948
  Apr 27 13:24:49.953: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-secrets-72edef67-4e33-4218-9a79-b230f071142f container secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 13:24:49.961
  Apr 27 13:24:49.978: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4435" for this suite. @ 04/27/24 13:24:49.982
• [4.098 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:132
  STEP: Creating a kubernetes client @ 04/27/24 13:24:49.99
  Apr 27 13:24:49.990: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:24:49.991
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:50.01
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:50.013
  STEP: Creating the pod @ 04/27/24 13:24:50.016
  Apr 27 13:24:52.563: INFO: Successfully updated pod "labelsupdatec218ae7b-dee4-442f-acfc-6ae3c0670642"
  Apr 27 13:24:54.584: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3913" for this suite. @ 04/27/24 13:24:54.589
• [4.607 seconds]
------------------------------
SSS
------------------------------
[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance] [sig-apps, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apps/controller_revision.go:126
  STEP: Creating a kubernetes client @ 04/27/24 13:24:54.597
  Apr 27 13:24:54.597: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename controllerrevisions @ 04/27/24 13:24:54.598
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:54.619
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:54.623
  STEP: Creating DaemonSet "e2e-lcrbz-daemon-set" @ 04/27/24 13:24:54.649
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/27/24 13:24:54.657
  Apr 27 13:24:54.661: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:54.661: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:54.664: INFO: Number of nodes with available pods controlled by daemonset e2e-lcrbz-daemon-set: 0
  Apr 27 13:24:54.664: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:24:55.663: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:55.663: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:55.667: INFO: Number of nodes with available pods controlled by daemonset e2e-lcrbz-daemon-set: 2
  Apr 27 13:24:55.667: INFO: Node ip-172-31-6-153 is running 0 daemon pod, expected 1
  Apr 27 13:24:56.663: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:56.663: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:24:56.668: INFO: Number of nodes with available pods controlled by daemonset e2e-lcrbz-daemon-set: 3
  Apr 27 13:24:56.668: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset e2e-lcrbz-daemon-set
  STEP: Confirm DaemonSet "e2e-lcrbz-daemon-set" successfully created with "daemonset-name=e2e-lcrbz-daemon-set" label @ 04/27/24 13:24:56.672
  STEP: Listing all ControllerRevisions with label "daemonset-name=e2e-lcrbz-daemon-set" @ 04/27/24 13:24:56.68
  Apr 27 13:24:56.684: INFO: Located ControllerRevision: "e2e-lcrbz-daemon-set-69c558c78b"
  STEP: Patching ControllerRevision "e2e-lcrbz-daemon-set-69c558c78b" @ 04/27/24 13:24:56.687
  Apr 27 13:24:56.695: INFO: e2e-lcrbz-daemon-set-69c558c78b has been patched
  STEP: Create a new ControllerRevision @ 04/27/24 13:24:56.695
  Apr 27 13:24:56.701: INFO: Created ControllerRevision: e2e-lcrbz-daemon-set-68695855bd
  STEP: Confirm that there are two ControllerRevisions @ 04/27/24 13:24:56.701
  Apr 27 13:24:56.701: INFO: Requesting list of ControllerRevisions to confirm quantity
  Apr 27 13:24:56.705: INFO: Found 2 ControllerRevisions
  STEP: Deleting ControllerRevision "e2e-lcrbz-daemon-set-69c558c78b" @ 04/27/24 13:24:56.705
  STEP: Confirm that there is only one ControllerRevision @ 04/27/24 13:24:56.712
  Apr 27 13:24:56.712: INFO: Requesting list of ControllerRevisions to confirm quantity
  Apr 27 13:24:56.715: INFO: Found 1 ControllerRevisions
  STEP: Updating ControllerRevision "e2e-lcrbz-daemon-set-68695855bd" @ 04/27/24 13:24:56.719
  Apr 27 13:24:56.729: INFO: e2e-lcrbz-daemon-set-68695855bd has been updated
  STEP: Generate another ControllerRevision by patching the Daemonset @ 04/27/24 13:24:56.729
  W0427 13:24:56.763636      19 warnings.go:70] unknown field "updateStrategy"
  STEP: Confirm that there are two ControllerRevisions @ 04/27/24 13:24:56.763
  Apr 27 13:24:56.763: INFO: Requesting list of ControllerRevisions to confirm quantity
  Apr 27 13:24:57.764: INFO: Requesting list of ControllerRevisions to confirm quantity
  Apr 27 13:24:57.768: INFO: Found 2 ControllerRevisions
  STEP: Removing a ControllerRevision via 'DeleteCollection' with labelSelector: "e2e-lcrbz-daemon-set-68695855bd=updated" @ 04/27/24 13:24:57.768
  STEP: Confirm that there is only one ControllerRevision @ 04/27/24 13:24:57.78
  Apr 27 13:24:57.780: INFO: Requesting list of ControllerRevisions to confirm quantity
  Apr 27 13:24:57.784: INFO: Found 1 ControllerRevisions
  Apr 27 13:24:57.788: INFO: ControllerRevision "e2e-lcrbz-daemon-set-76886967bf" has revision 3
  STEP: Deleting DaemonSet "e2e-lcrbz-daemon-set" @ 04/27/24 13:24:57.792
  STEP: deleting DaemonSet.extensions e2e-lcrbz-daemon-set in namespace controllerrevisions-6654, will wait for the garbage collector to delete the pods @ 04/27/24 13:24:57.792
  Apr 27 13:24:57.855: INFO: Deleting DaemonSet.extensions e2e-lcrbz-daemon-set took: 8.540592ms
  Apr 27 13:24:57.956: INFO: Terminating DaemonSet.extensions e2e-lcrbz-daemon-set pods took: 100.941792ms
  Apr 27 13:24:59.162: INFO: Number of nodes with available pods controlled by daemonset e2e-lcrbz-daemon-set: 0
  Apr 27 13:24:59.162: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset e2e-lcrbz-daemon-set
  Apr 27 13:24:59.166: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"31378"},"items":null}

  Apr 27 13:24:59.169: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"31378"},"items":null}

  Apr 27 13:24:59.185: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "controllerrevisions-6654" for this suite. @ 04/27/24 13:24:59.189
• [4.599 seconds]
------------------------------
S
------------------------------
[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance] [sig-apps, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:205
  STEP: Creating a kubernetes client @ 04/27/24 13:24:59.197
  Apr 27 13:24:59.197: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename daemonsets @ 04/27/24 13:24:59.198
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:24:59.215
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:24:59.218
  Apr 27 13:24:59.245: INFO: Creating daemon "daemon-set" with a node selector
  STEP: Initially, daemon pods should not be running on any nodes. @ 04/27/24 13:24:59.251
  Apr 27 13:24:59.257: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:24:59.257: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Change node label to blue, check that daemon pod is launched. @ 04/27/24 13:24:59.257
  Apr 27 13:24:59.279: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:24:59.279: INFO: Node ip-172-31-6-153 is running 0 daemon pod, expected 1
  Apr 27 13:25:00.281: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 27 13:25:00.281: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Update the node label to green, and wait for daemons to be unscheduled @ 04/27/24 13:25:00.285
  Apr 27 13:25:00.302: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 27 13:25:00.302: INFO: Number of running nodes: 0, number of available pods: 1 in daemonset daemon-set
  Apr 27 13:25:01.303: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:25:01.304: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Update DaemonSet node selector to green, and change its update strategy to RollingUpdate @ 04/27/24 13:25:01.304
  Apr 27 13:25:01.316: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:25:01.316: INFO: Node ip-172-31-6-153 is running 0 daemon pod, expected 1
  Apr 27 13:25:02.317: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 27 13:25:02.317: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 04/27/24 13:25:02.325
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-1903, will wait for the garbage collector to delete the pods @ 04/27/24 13:25:02.325
  Apr 27 13:25:02.389: INFO: Deleting DaemonSet.extensions daemon-set took: 9.282265ms
  Apr 27 13:25:02.490: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.99812ms
  Apr 27 13:25:04.195: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:25:04.195: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 27 13:25:04.198: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"31473"},"items":null}

  Apr 27 13:25:04.202: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"31473"},"items":null}

  Apr 27 13:25:04.226: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-1903" for this suite. @ 04/27/24 13:25:04.233
• [5.042 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/chunking.go:83
  STEP: Creating a kubernetes client @ 04/27/24 13:25:04.24
  Apr 27 13:25:04.240: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename chunking @ 04/27/24 13:25:04.24
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:25:04.258
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:25:04.261
  STEP: creating a large number of resources @ 04/27/24 13:25:04.264
  STEP: retrieving those results in paged fashion several times @ 04/27/24 13:25:21.948
  Apr 27 13:25:21.995: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDAxNlx1MDAwMCJ9
  Apr 27 13:25:22.046: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDAzM1x1MDAwMCJ9
  Apr 27 13:25:22.096: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDA1MFx1MDAwMCJ9
  Apr 27 13:25:22.146: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDA2N1x1MDAwMCJ9
  Apr 27 13:25:22.196: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDA4NFx1MDAwMCJ9
  Apr 27 13:25:22.247: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDEwMVx1MDAwMCJ9
  Apr 27 13:25:22.296: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDExOFx1MDAwMCJ9
  Apr 27 13:25:22.347: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDEzNVx1MDAwMCJ9
  Apr 27 13:25:22.397: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDE1Mlx1MDAwMCJ9
  Apr 27 13:25:22.446: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDE2OVx1MDAwMCJ9
  Apr 27 13:25:22.497: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDE4Nlx1MDAwMCJ9
  Apr 27 13:25:22.547: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDIwM1x1MDAwMCJ9
  Apr 27 13:25:22.596: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDIyMFx1MDAwMCJ9
  Apr 27 13:25:22.646: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDIzN1x1MDAwMCJ9
  Apr 27 13:25:22.696: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDI1NFx1MDAwMCJ9
  Apr 27 13:25:22.746: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDI3MVx1MDAwMCJ9
  Apr 27 13:25:22.796: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDI4OFx1MDAwMCJ9
  Apr 27 13:25:22.847: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDMwNVx1MDAwMCJ9
  Apr 27 13:25:22.896: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDMyMlx1MDAwMCJ9
  Apr 27 13:25:22.946: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDMzOVx1MDAwMCJ9
  Apr 27 13:25:22.996: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDM1Nlx1MDAwMCJ9
  Apr 27 13:25:23.045: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDM3M1x1MDAwMCJ9
  Apr 27 13:25:23.095: INFO: Retrieved 17/17 results with rv 31966 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjYsInN0YXJ0IjoidGVtcGxhdGUtMDM5MFx1MDAwMCJ9
  Apr 27 13:25:23.146: INFO: Retrieved 9/17 results with rv 31966 and continue 
  Apr 27 13:25:23.195: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDAxNlx1MDAwMCJ9
  Apr 27 13:25:23.246: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDAzM1x1MDAwMCJ9
  Apr 27 13:25:23.296: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDA1MFx1MDAwMCJ9
  Apr 27 13:25:23.346: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDA2N1x1MDAwMCJ9
  Apr 27 13:25:23.396: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDA4NFx1MDAwMCJ9
  Apr 27 13:25:23.446: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDEwMVx1MDAwMCJ9
  Apr 27 13:25:23.496: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDExOFx1MDAwMCJ9
  Apr 27 13:25:23.546: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDEzNVx1MDAwMCJ9
  Apr 27 13:25:23.596: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDE1Mlx1MDAwMCJ9
  Apr 27 13:25:23.646: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDE2OVx1MDAwMCJ9
  Apr 27 13:25:23.696: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDE4Nlx1MDAwMCJ9
  Apr 27 13:25:23.747: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDIwM1x1MDAwMCJ9
  Apr 27 13:25:23.796: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDIyMFx1MDAwMCJ9
  Apr 27 13:25:23.847: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDIzN1x1MDAwMCJ9
  Apr 27 13:25:23.896: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDI1NFx1MDAwMCJ9
  Apr 27 13:25:23.946: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDI3MVx1MDAwMCJ9
  Apr 27 13:25:23.996: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDI4OFx1MDAwMCJ9
  Apr 27 13:25:24.047: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDMwNVx1MDAwMCJ9
  Apr 27 13:25:24.095: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDMyMlx1MDAwMCJ9
  Apr 27 13:25:24.145: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDMzOVx1MDAwMCJ9
  Apr 27 13:25:24.196: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDM1Nlx1MDAwMCJ9
  Apr 27 13:25:24.246: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDM3M1x1MDAwMCJ9
  Apr 27 13:25:24.296: INFO: Retrieved 17/17 results with rv 31969 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NjksInN0YXJ0IjoidGVtcGxhdGUtMDM5MFx1MDAwMCJ9
  Apr 27 13:25:24.347: INFO: Retrieved 9/17 results with rv 31969 and continue 
  Apr 27 13:25:24.395: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDAxNlx1MDAwMCJ9
  Apr 27 13:25:24.446: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDAzM1x1MDAwMCJ9
  Apr 27 13:25:24.496: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDA1MFx1MDAwMCJ9
  Apr 27 13:25:24.545: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDA2N1x1MDAwMCJ9
  Apr 27 13:25:24.595: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDA4NFx1MDAwMCJ9
  Apr 27 13:25:24.647: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDEwMVx1MDAwMCJ9
  Apr 27 13:25:24.697: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDExOFx1MDAwMCJ9
  Apr 27 13:25:24.746: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDEzNVx1MDAwMCJ9
  Apr 27 13:25:24.796: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDE1Mlx1MDAwMCJ9
  Apr 27 13:25:24.846: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDE2OVx1MDAwMCJ9
  Apr 27 13:25:24.895: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDE4Nlx1MDAwMCJ9
  Apr 27 13:25:24.946: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDIwM1x1MDAwMCJ9
  Apr 27 13:25:24.995: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDIyMFx1MDAwMCJ9
  Apr 27 13:25:25.046: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDIzN1x1MDAwMCJ9
  Apr 27 13:25:25.096: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDI1NFx1MDAwMCJ9
  Apr 27 13:25:25.145: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDI3MVx1MDAwMCJ9
  Apr 27 13:25:25.196: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDI4OFx1MDAwMCJ9
  Apr 27 13:25:25.247: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDMwNVx1MDAwMCJ9
  Apr 27 13:25:25.295: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDMyMlx1MDAwMCJ9
  Apr 27 13:25:25.346: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDMzOVx1MDAwMCJ9
  Apr 27 13:25:25.396: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDM1Nlx1MDAwMCJ9
  Apr 27 13:25:25.446: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDM3M1x1MDAwMCJ9
  Apr 27 13:25:25.496: INFO: Retrieved 17/17 results with rv 31970 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzE5NzAsInN0YXJ0IjoidGVtcGxhdGUtMDM5MFx1MDAwMCJ9
  Apr 27 13:25:25.546: INFO: Retrieved 9/17 results with rv 31970 and continue 
  STEP: retrieving those results all at once @ 04/27/24 13:25:25.546
  Apr 27 13:25:25.603: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "chunking-3323" for this suite. @ 04/27/24 13:25:25.647
• [21.460 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:321
  STEP: Creating a kubernetes client @ 04/27/24 13:25:25.7
  Apr 27 13:25:25.700: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename statefulset @ 04/27/24 13:25:25.7
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:25:25.722
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:25:25.725
  STEP: Creating service test in namespace statefulset-5608 @ 04/27/24 13:25:25.729
  STEP: Creating a new StatefulSet @ 04/27/24 13:25:25.736
  Apr 27 13:25:25.750: INFO: Found 0 stateful pods, waiting for 3
  Apr 27 13:25:35.751: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:25:35.751: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:25:35.751: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:25:35.765: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-5608 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 13:25:35.869: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 13:25:35.869: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 13:25:35.869: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  STEP: Updating StatefulSet template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 04/27/24 13:25:45.879
  Apr 27 13:25:45.900: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 04/27/24 13:25:45.9
  STEP: Updating Pods in reverse ordinal order @ 04/27/24 13:25:55.911
  Apr 27 13:25:55.915: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-5608 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 27 13:25:56.010: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 27 13:25:56.010: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 27 13:25:56.010: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  STEP: Rolling back to a previous revision @ 04/27/24 13:26:06.028
  Apr 27 13:26:06.028: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-5608 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 13:26:06.127: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 13:26:06.127: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 13:26:06.127: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 27 13:26:16.162: INFO: Updating stateful set ss2
  STEP: Rolling back update in reverse ordinal order @ 04/27/24 13:26:26.172
  Apr 27 13:26:26.176: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-5608 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 27 13:26:26.275: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 27 13:26:26.275: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 27 13:26:26.275: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 27 13:26:36.293: INFO: Deleting all statefulset in ns statefulset-5608
  Apr 27 13:26:36.296: INFO: Scaling statefulset ss2 to 0
  Apr 27 13:26:46.314: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 27 13:26:46.319: INFO: Deleting statefulset ss2
  Apr 27 13:26:46.335: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-5608" for this suite. @ 04/27/24 13:26:46.34
• [80.647 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:142
  STEP: Creating a kubernetes client @ 04/27/24 13:26:46.347
  Apr 27 13:26:46.347: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename watch @ 04/27/24 13:26:46.348
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:26:46.369
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:26:46.372
  STEP: creating a new configmap @ 04/27/24 13:26:46.375
  STEP: modifying the configmap once @ 04/27/24 13:26:46.38
  STEP: modifying the configmap a second time @ 04/27/24 13:26:46.39
  STEP: deleting the configmap @ 04/27/24 13:26:46.398
  STEP: creating a watch on configmaps from the resource version returned by the first update @ 04/27/24 13:26:46.405
  STEP: Expecting to observe notifications for all changes to the configmap after the first update @ 04/27/24 13:26:46.406
  Apr 27 13:26:46.406: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-9909  f62d613f-d890-415c-a579-d260320bcbea 32945 0 2024-04-27 13:26:46 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2024-04-27 13:26:46 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:26:46.407: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-9909  f62d613f-d890-415c-a579-d260320bcbea 32946 0 2024-04-27 13:26:46 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2024-04-27 13:26:46 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:26:46.407: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-9909" for this suite. @ 04/27/24 13:26:46.411
• [0.071 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-apps] Job should delete a job [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:627
  STEP: Creating a kubernetes client @ 04/27/24 13:26:46.418
  Apr 27 13:26:46.418: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename job @ 04/27/24 13:26:46.419
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:26:46.439
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:26:46.442
  STEP: Creating a job @ 04/27/24 13:26:46.445
  STEP: Ensuring active pods == parallelism @ 04/27/24 13:26:46.452
  STEP: delete a job @ 04/27/24 13:26:48.458
  STEP: deleting Job.batch foo in namespace job-4597, will wait for the garbage collector to delete the pods @ 04/27/24 13:26:48.458
  Apr 27 13:26:48.521: INFO: Deleting Job.batch foo took: 8.850079ms
  Apr 27 13:26:48.622: INFO: Terminating Job.batch foo pods took: 100.995108ms
  STEP: Ensuring job was deleted @ 04/27/24 13:26:49.823
  Apr 27 13:26:49.827: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-4597" for this suite. @ 04/27/24 13:26:49.832
• [3.423 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:48
  STEP: Creating a kubernetes client @ 04/27/24 13:26:49.843
  Apr 27 13:26:49.843: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 13:26:49.844
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:26:49.867
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:26:49.87
  STEP: Creating configMap with name configmap-test-volume-9a791560-985a-4fde-81e3-556146be2887 @ 04/27/24 13:26:49.874
  STEP: Creating a pod to test consume configMaps @ 04/27/24 13:26:49.879
  STEP: Saw pod success @ 04/27/24 13:26:53.903
  Apr 27 13:26:53.909: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-configmaps-636b13d8-882a-4b45-aa42-a99b3883e8af container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 13:26:53.92
  Apr 27 13:26:53.936: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7684" for this suite. @ 04/27/24 13:26:53.94
• [4.105 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/node/security_context.go:135
  STEP: Creating a kubernetes client @ 04/27/24 13:26:53.948
  Apr 27 13:26:53.948: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename security-context @ 04/27/24 13:26:53.948
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:26:53.969
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:26:53.972
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 04/27/24 13:26:53.975
  STEP: Saw pod success @ 04/27/24 13:26:55.995
  Apr 27 13:26:55.999: INFO: Trying to get logs from node ip-172-31-82-63 pod security-context-0fb84e53-0195-4cc4-a60d-0b5b3bfd32c9 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 13:26:56.008
  Apr 27 13:26:56.026: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-5722" for this suite. @ 04/27/24 13:26:56.031
• [2.091 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:793
  STEP: Creating a kubernetes client @ 04/27/24 13:26:56.039
  Apr 27 13:26:56.039: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename statefulset @ 04/27/24 13:26:56.039
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:26:56.057
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:26:56.06
  STEP: Creating service test in namespace statefulset-1767 @ 04/27/24 13:26:56.064
  STEP: Looking for a node to schedule stateful set and pod @ 04/27/24 13:26:56.069
  STEP: Creating pod with conflicting port in namespace statefulset-1767 @ 04/27/24 13:26:56.073
  STEP: Waiting until pod test-pod will start running in namespace statefulset-1767 @ 04/27/24 13:26:56.085
  STEP: Creating statefulset with conflicting port in namespace statefulset-1767 @ 04/27/24 13:26:58.094
  STEP: Waiting until stateful pod ss-0 will be recreated and deleted at least once in namespace statefulset-1767 @ 04/27/24 13:26:58.102
  Apr 27 13:26:58.117: INFO: Observed stateful pod in namespace: statefulset-1767, name: ss-0, uid: f18a2521-863a-4074-8af5-b08a6421b0ab, status phase: Pending. Waiting for statefulset controller to delete.
  Apr 27 13:26:58.140: INFO: Observed stateful pod in namespace: statefulset-1767, name: ss-0, uid: f18a2521-863a-4074-8af5-b08a6421b0ab, status phase: Failed. Waiting for statefulset controller to delete.
  Apr 27 13:26:58.160: INFO: Observed stateful pod in namespace: statefulset-1767, name: ss-0, uid: f18a2521-863a-4074-8af5-b08a6421b0ab, status phase: Failed. Waiting for statefulset controller to delete.
  Apr 27 13:26:58.166: INFO: Observed delete event for stateful pod ss-0 in namespace statefulset-1767
  STEP: Removing pod with conflicting port in namespace statefulset-1767 @ 04/27/24 13:26:58.166
  STEP: Waiting when stateful pod ss-0 will be recreated in namespace statefulset-1767 and will be in running state @ 04/27/24 13:26:58.183
  Apr 27 13:27:00.194: INFO: Deleting all statefulset in ns statefulset-1767
  Apr 27 13:27:00.198: INFO: Scaling statefulset ss to 0
  Apr 27 13:27:10.218: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 27 13:27:10.222: INFO: Deleting statefulset ss
  Apr 27 13:27:10.238: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-1767" for this suite. @ 04/27/24 13:27:10.242
• [14.213 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:107
  STEP: Creating a kubernetes client @ 04/27/24 13:27:10.252
  Apr 27 13:27:10.252: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 13:27:10.252
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:27:10.274
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:27:10.277
  Apr 27 13:28:10.295: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-790" for this suite. @ 04/27/24 13:28:10.299
• [60.055 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:263
  STEP: Creating a kubernetes client @ 04/27/24 13:28:10.307
  Apr 27 13:28:10.307: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:28:10.308
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:28:10.336
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:28:10.339
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 13:28:10.342
  STEP: Saw pod success @ 04/27/24 13:28:14.37
  Apr 27 13:28:14.376: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-075df132-c464-47db-8283-573b956e0d5f container client-container: <nil>
  STEP: delete the pod @ 04/27/24 13:28:14.389
  Apr 27 13:28:14.410: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5339" for this suite. @ 04/27/24 13:28:14.414
• [4.114 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:646
  STEP: Creating a kubernetes client @ 04/27/24 13:28:14.421
  Apr 27 13:28:14.421: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:28:14.421
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:28:14.439
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:28:14.442
  STEP: Setting up server cert @ 04/27/24 13:28:14.47
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:28:14.568
  STEP: Deploying the webhook pod @ 04/27/24 13:28:14.58
  STEP: Wait for the deployment to be ready @ 04/27/24 13:28:14.593
  Apr 27 13:28:14.601: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:28:16.615
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:28:16.628
  Apr 27 13:28:17.629: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 04/27/24 13:28:17.713
  STEP: Creating a configMap that should be mutated @ 04/27/24 13:28:17.724
  STEP: Deleting the collection of validation webhooks @ 04/27/24 13:28:17.752
  STEP: Creating a configMap that should not be mutated @ 04/27/24 13:28:17.812
  Apr 27 13:28:17.863: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5059" for this suite. @ 04/27/24 13:28:17.867
  STEP: Destroying namespace "webhook-markers-4505" for this suite. @ 04/27/24 13:28:17.876
• [3.463 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslice.go:105
  STEP: Creating a kubernetes client @ 04/27/24 13:28:17.884
  Apr 27 13:28:17.884: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename endpointslice @ 04/27/24 13:28:17.885
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:28:17.903
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:28:17.906
  Apr 27 13:28:19.961: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-249" for this suite. @ 04/27/24 13:28:19.965
• [2.088 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] Job should apply changes to a job status [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:784
  STEP: Creating a kubernetes client @ 04/27/24 13:28:19.972
  Apr 27 13:28:19.972: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename job @ 04/27/24 13:28:19.973
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:28:19.993
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:28:19.996
  STEP: Creating a job @ 04/27/24 13:28:19.999
  STEP: Ensure pods equal to parallelism count is attached to the job @ 04/27/24 13:28:20.009
  STEP: patching /status @ 04/27/24 13:28:22.016
  STEP: updating /status @ 04/27/24 13:28:22.026
  STEP: get /status @ 04/27/24 13:28:22.037
  Apr 27 13:28:22.042: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-6132" for this suite. @ 04/27/24 13:28:22.047
• [2.085 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:199
  STEP: Creating a kubernetes client @ 04/27/24 13:28:22.057
  Apr 27 13:28:22.057: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:28:22.058
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:28:22.08
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:28:22.085
  STEP: Setting up server cert @ 04/27/24 13:28:22.125
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:28:22.398
  STEP: Deploying the webhook pod @ 04/27/24 13:28:22.405
  STEP: Wait for the deployment to be ready @ 04/27/24 13:28:22.421
  Apr 27 13:28:22.429: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:28:24.443
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:28:24.455
  Apr 27 13:28:25.455: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 04/27/24 13:28:25.465
  STEP: create a pod that should be denied by the webhook @ 04/27/24 13:28:25.479
  STEP: create a pod that causes the webhook to hang @ 04/27/24 13:28:25.489
  STEP: create a configmap that should be denied by the webhook @ 04/27/24 13:28:35.498
  STEP: create a configmap that should be admitted by the webhook @ 04/27/24 13:28:35.534
  STEP: update (PUT) the admitted configmap to a non-compliant one should be rejected by the webhook @ 04/27/24 13:28:35.542
  STEP: update (PATCH) the admitted configmap to a non-compliant one should be rejected by the webhook @ 04/27/24 13:28:35.553
  STEP: create a namespace that bypass the webhook @ 04/27/24 13:28:35.558
  STEP: create a configmap that violates the webhook policy but is in a whitelisted namespace @ 04/27/24 13:28:35.578
  Apr 27 13:28:35.636: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1237" for this suite. @ 04/27/24 13:28:35.642
  STEP: Destroying namespace "webhook-markers-3461" for this suite. @ 04/27/24 13:28:35.651
  STEP: Destroying namespace "exempted-namespace-2088" for this suite. @ 04/27/24 13:28:35.658
• [13.607 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/lifecycle_hook.go:153
  STEP: Creating a kubernetes client @ 04/27/24 13:28:35.665
  Apr 27 13:28:35.665: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 04/27/24 13:28:35.665
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:28:35.684
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:28:35.687
  STEP: create the container to handle the HTTPGet hook request. @ 04/27/24 13:28:35.694
  STEP: create the pod with lifecycle hook @ 04/27/24 13:28:37.721
  STEP: delete the pod with lifecycle hook @ 04/27/24 13:28:39.746
  STEP: check prestop hook @ 04/27/24 13:28:41.763
  Apr 27 13:28:41.771: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-4432" for this suite. @ 04/27/24 13:28:41.775
• [6.118 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/network/networking.go:125
  STEP: Creating a kubernetes client @ 04/27/24 13:28:41.783
  Apr 27 13:28:41.783: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pod-network-test @ 04/27/24 13:28:41.783
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:28:41.803
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:28:41.806
  STEP: Performing setup for networking test in namespace pod-network-test-5766 @ 04/27/24 13:28:41.809
  STEP: creating a selector @ 04/27/24 13:28:41.809
  STEP: Creating the service pods in kubernetes @ 04/27/24 13:28:41.809
  Apr 27 13:28:41.809: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 04/27/24 13:28:53.9
  Apr 27 13:28:55.960: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Apr 27 13:28:55.960: INFO: Going to poll 192.168.69.165 on port 8081 at least 0 times, with a maximum of 39 tries before failing
  Apr 27 13:28:55.964: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 192.168.69.165 8081 | grep -v '^\s*$'] Namespace:pod-network-test-5766 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:28:55.964: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:28:55.964: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:28:55.965: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-5766/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+192.168.69.165+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 27 13:28:57.023: INFO: Found all 1 expected endpoints: [netserver-0]
  Apr 27 13:28:57.023: INFO: Going to poll 192.168.96.178 on port 8081 at least 0 times, with a maximum of 39 tries before failing
  Apr 27 13:28:57.028: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 192.168.96.178 8081 | grep -v '^\s*$'] Namespace:pod-network-test-5766 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:28:57.028: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:28:57.028: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:28:57.028: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-5766/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+192.168.96.178+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 27 13:28:58.077: INFO: Found all 1 expected endpoints: [netserver-1]
  Apr 27 13:28:58.077: INFO: Going to poll 192.168.172.215 on port 8081 at least 0 times, with a maximum of 39 tries before failing
  Apr 27 13:28:58.082: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 192.168.172.215 8081 | grep -v '^\s*$'] Namespace:pod-network-test-5766 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:28:58.082: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:28:58.082: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:28:58.083: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-5766/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+192.168.172.215+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 27 13:28:59.144: INFO: Found all 1 expected endpoints: [netserver-2]
  Apr 27 13:28:59.144: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-5766" for this suite. @ 04/27/24 13:28:59.15
• [17.375 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount projected service account token [Conformance] [sig-auth, Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:277
  STEP: Creating a kubernetes client @ 04/27/24 13:28:59.159
  Apr 27 13:28:59.159: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename svcaccounts @ 04/27/24 13:28:59.159
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:28:59.177
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:28:59.18
  STEP: Creating a pod to test service account token:  @ 04/27/24 13:28:59.183
  STEP: Saw pod success @ 04/27/24 13:29:03.21
  Apr 27 13:29:03.215: INFO: Trying to get logs from node ip-172-31-37-185 pod test-pod-c6c103b2-38f5-4e44-8d8f-d6b7dda8d668 container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 13:29:03.227
  Apr 27 13:29:03.244: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-1271" for this suite. @ 04/27/24 13:29:03.249
• [4.098 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/node/security_context.go:170
  STEP: Creating a kubernetes client @ 04/27/24 13:29:03.257
  Apr 27 13:29:03.257: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename security-context @ 04/27/24 13:29:03.258
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:03.275
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:03.279
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 04/27/24 13:29:03.282
  STEP: Saw pod success @ 04/27/24 13:29:07.308
  Apr 27 13:29:07.313: INFO: Trying to get logs from node ip-172-31-37-185 pod security-context-30f75782-5f2c-45e9-9b98-29e18c2fe3fa container test-container: <nil>
  STEP: delete the pod @ 04/27/24 13:29:07.321
  Apr 27 13:29:07.337: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-6475" for this suite. @ 04/27/24 13:29:07.341
• [4.093 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1084
  STEP: Creating a kubernetes client @ 04/27/24 13:29:07.351
  Apr 27 13:29:07.351: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:29:07.351
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:07.369
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:07.372
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 04/27/24 13:29:07.376
  Apr 27 13:29:07.376: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-7922 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Apr 27 13:29:07.427: INFO: stderr: ""
  Apr 27 13:29:07.427: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: replace the image in the pod with server-side dry-run @ 04/27/24 13:29:07.427
  Apr 27 13:29:07.428: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-7922 patch pod e2e-test-httpd-pod -p {"spec":{"containers":[{"name": "e2e-test-httpd-pod","image": "registry.k8s.io/e2e-test-images/busybox:1.36.1-1"}]}} --dry-run=server'
  Apr 27 13:29:07.476: INFO: stderr: ""
  Apr 27 13:29:07.476: INFO: stdout: "pod/e2e-test-httpd-pod patched\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 04/27/24 13:29:07.476
  Apr 27 13:29:07.480: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-7922 delete pods e2e-test-httpd-pod'
  Apr 27 13:29:09.056: INFO: stderr: ""
  Apr 27 13:29:09.056: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Apr 27 13:29:09.056: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7922" for this suite. @ 04/27/24 13:29:09.061
• [1.720 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:180
  STEP: Creating a kubernetes client @ 04/27/24 13:29:09.071
  Apr 27 13:29:09.071: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 13:29:09.071
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:09.09
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:09.093
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 04/27/24 13:29:09.096
  STEP: Saw pod success @ 04/27/24 13:29:13.121
  Apr 27 13:29:13.125: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-0124d756-e598-4687-bca3-0893cd66b244 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 13:29:13.132
  Apr 27 13:29:13.151: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-3634" for this suite. @ 04/27/24 13:29:13.156
• [4.092 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:257
  STEP: Creating a kubernetes client @ 04/27/24 13:29:13.162
  Apr 27 13:29:13.162: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename watch @ 04/27/24 13:29:13.163
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:13.184
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:13.187
  STEP: creating a watch on configmaps with a certain label @ 04/27/24 13:29:13.19
  STEP: creating a new configmap @ 04/27/24 13:29:13.192
  STEP: modifying the configmap once @ 04/27/24 13:29:13.196
  STEP: changing the label value of the configmap @ 04/27/24 13:29:13.206
  STEP: Expecting to observe a delete notification for the watched object @ 04/27/24 13:29:13.214
  Apr 27 13:29:13.214: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-6485  d6959e39-4f43-4802-89a8-0b95e0d8877b 34194 0 2024-04-27 13:29:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-27 13:29:13 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:29:13.215: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-6485  d6959e39-4f43-4802-89a8-0b95e0d8877b 34195 0 2024-04-27 13:29:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-27 13:29:13 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:29:13.215: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-6485  d6959e39-4f43-4802-89a8-0b95e0d8877b 34196 0 2024-04-27 13:29:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-27 13:29:13 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time @ 04/27/24 13:29:13.215
  STEP: Expecting not to observe a notification because the object no longer meets the selector's requirements @ 04/27/24 13:29:13.223
  STEP: changing the label value of the configmap back @ 04/27/24 13:29:23.224
  STEP: modifying the configmap a third time @ 04/27/24 13:29:23.235
  STEP: deleting the configmap @ 04/27/24 13:29:23.244
  STEP: Expecting to observe an add notification for the watched object when the label value was restored @ 04/27/24 13:29:23.25
  Apr 27 13:29:23.250: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-6485  d6959e39-4f43-4802-89a8-0b95e0d8877b 34234 0 2024-04-27 13:29:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-27 13:29:23 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:29:23.251: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-6485  d6959e39-4f43-4802-89a8-0b95e0d8877b 34235 0 2024-04-27 13:29:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-27 13:29:23 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:29:23.251: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-6485  d6959e39-4f43-4802-89a8-0b95e0d8877b 34236 0 2024-04-27 13:29:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-27 13:29:23 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:29:23.251: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-6485" for this suite. @ 04/27/24 13:29:23.255
• [10.100 seconds]
------------------------------
[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:334
  STEP: Creating a kubernetes client @ 04/27/24 13:29:23.262
  Apr 27 13:29:23.262: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename watch @ 04/27/24 13:29:23.263
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:23.284
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:23.287
  STEP: getting a starting resourceVersion @ 04/27/24 13:29:23.29
  STEP: starting a background goroutine to produce watch events @ 04/27/24 13:29:23.293
  STEP: creating watches starting from each resource version of the events produced and verifying they all receive resource versions in the same order @ 04/27/24 13:29:23.293
  Apr 27 13:29:26.070: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-6345" for this suite. @ 04/27/24 13:29:26.119
• [2.909 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:442
  STEP: Creating a kubernetes client @ 04/27/24 13:29:26.172
  Apr 27 13:29:26.172: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/27/24 13:29:26.172
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:26.194
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:26.197
  STEP: set up a multi version CRD @ 04/27/24 13:29:26.201
  Apr 27 13:29:26.201: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: mark a version not serverd @ 04/27/24 13:29:29.354
  STEP: check the unserved version gets removed @ 04/27/24 13:29:29.372
  STEP: check the other version is not changed @ 04/27/24 13:29:30.103
  Apr 27 13:29:32.593: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-3222" for this suite. @ 04/27/24 13:29:32.602
• [6.439 seconds]
------------------------------
[sig-network] DNS should support configurable pod DNS nameservers [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:407
  STEP: Creating a kubernetes client @ 04/27/24 13:29:32.611
  Apr 27 13:29:32.611: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename dns @ 04/27/24 13:29:32.612
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:32.627
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:32.631
  STEP: Creating a pod with dnsPolicy=None and customized dnsConfig... @ 04/27/24 13:29:32.635
  Apr 27 13:29:32.646: INFO: Created pod &Pod{ObjectMeta:{test-dns-nameservers  dns-2087  de76fc07-2b82-407a-8c89-db86b0c82742 34407 0 2024-04-27 13:29:32 +0000 UTC <nil> <nil> map[] map[] [] [] [{e2e.test Update v1 2024-04-27 13:29:32 +0000 UTC FieldsV1 {"f:spec":{"f:containers":{"k:{\"name\":\"agnhost-container\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsConfig":{".":{},"f:nameservers":{},"f:searches":{}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}} }]},Spec:PodSpec{Volumes:[]Volume{Volume{Name:kube-api-access-vdvhh,VolumeSource:VolumeSource{HostPath:nil,EmptyDir:nil,GCEPersistentDisk:nil,AWSElasticBlockStore:nil,GitRepo:nil,Secret:nil,NFS:nil,ISCSI:nil,Glusterfs:nil,PersistentVolumeClaim:nil,RBD:nil,FlexVolume:nil,Cinder:nil,CephFS:nil,Flocker:nil,DownwardAPI:nil,FC:nil,AzureFile:nil,ConfigMap:nil,VsphereVolume:nil,Quobyte:nil,AzureDisk:nil,PhotonPersistentDisk:nil,PortworxVolume:nil,ScaleIO:nil,Projected:&ProjectedVolumeSource{Sources:[]VolumeProjection{VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:nil,ServiceAccountToken:&ServiceAccountTokenProjection{Audience:,ExpirationSeconds:*3607,Path:token,},ClusterTrustBundle:nil,},VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:&ConfigMapProjection{LocalObjectReference:LocalObjectReference{Name:kube-root-ca.crt,},Items:[]KeyToPath{KeyToPath{Key:ca.crt,Path:ca.crt,Mode:nil,},},Optional:nil,},ServiceAccountToken:nil,ClusterTrustBundle:nil,},VolumeProjection{Secret:nil,DownwardAPI:&DownwardAPIProjection{Items:[]DownwardAPIVolumeFile{DownwardAPIVolumeFile{Path:namespace,FieldRef:&ObjectFieldSelector{APIVersion:v1,FieldPath:metadata.namespace,},ResourceFieldRef:nil,Mode:nil,},},},ConfigMap:nil,ServiceAccountToken:nil,ClusterTrustBundle:nil,},},DefaultMode:*420,},StorageOS:nil,CSI:nil,Ephemeral:nil,},},},Containers:[]Container{Container{Name:agnhost-container,Image:registry.k8s.io/e2e-test-images/agnhost:2.47,Command:[],Args:[pause],WorkingDir:,Ports:[]ContainerPort{},Env:[]EnvVar{},Resources:ResourceRequirements{Limits:ResourceList{},Requests:ResourceList{},Claims:[]ResourceClaim{},},VolumeMounts:[]VolumeMount{VolumeMount{Name:kube-api-access-vdvhh,ReadOnly:true,MountPath:/var/run/secrets/kubernetes.io/serviceaccount,SubPath:,MountPropagation:nil,SubPathExpr:,},},LivenessProbe:nil,ReadinessProbe:nil,Lifecycle:nil,TerminationMessagePath:/dev/termination-log,ImagePullPolicy:IfNotPresent,SecurityContext:&SecurityContext{Capabilities:nil,Privileged:nil,SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,ReadOnlyRootFilesystem:nil,AllowPrivilegeEscalation:nil,RunAsGroup:nil,ProcMount:nil,WindowsOptions:nil,SeccompProfile:nil,},Stdin:false,StdinOnce:false,TTY:false,EnvFrom:[]EnvFromSource{},TerminationMessagePolicy:File,VolumeDevices:[]VolumeDevice{},StartupProbe:nil,ResizePolicy:[]ContainerResizePolicy{},RestartPolicy:nil,},},RestartPolicy:Always,TerminationGracePeriodSeconds:*0,ActiveDeadlineSeconds:nil,DNSPolicy:None,NodeSelector:map[string]string{},ServiceAccountName:default,DeprecatedServiceAccount:default,NodeName:,HostNetwork:false,HostPID:false,HostIPC:false,SecurityContext:&PodSecurityContext{SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,SupplementalGroups:[],FSGroup:nil,RunAsGroup:nil,Sysctls:[]Sysctl{},WindowsOptions:nil,FSGroupChangePolicy:nil,SeccompProfile:nil,},ImagePullSecrets:[]LocalObjectReference{},Hostname:,Subdomain:,Affinity:nil,SchedulerName:default-scheduler,InitContainers:[]Container{},AutomountServiceAccountToken:nil,Tolerations:[]Toleration{Toleration{Key:node.kubernetes.io/not-ready,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},Toleration{Key:node.kubernetes.io/unreachable,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},},HostAliases:[]HostAlias{},PriorityClassName:,Priority:*0,DNSConfig:&PodDNSConfig{Nameservers:[1.1.1.1],Searches:[resolv.conf.local],Options:[]PodDNSConfigOption{},},ShareProcessNamespace:nil,ReadinessGates:[]PodReadinessGate{},RuntimeClassName:nil,EnableServiceLinks:*true,PreemptionPolicy:*PreemptLowerPriority,Overhead:ResourceList{},TopologySpreadConstraints:[]TopologySpreadConstraint{},EphemeralContainers:[]EphemeralContainer{},SetHostnameAsFQDN:nil,OS:nil,HostUsers:nil,SchedulingGates:[]PodSchedulingGate{},ResourceClaims:[]PodResourceClaim{},},Status:PodStatus{Phase:Pending,Conditions:[]PodCondition{},Message:,Reason:,HostIP:,PodIP:,StartTime:<nil>,ContainerStatuses:[]ContainerStatus{},QOSClass:BestEffort,InitContainerStatuses:[]ContainerStatus{},NominatedNodeName:,PodIPs:[]PodIP{},EphemeralContainerStatuses:[]ContainerStatus{},Resize:,ResourceClaimStatuses:[]PodResourceClaimStatus{},HostIPs:[]HostIP{},},}
  STEP: Verifying customized DNS suffix list is configured on pod... @ 04/27/24 13:29:34.659
  Apr 27 13:29:34.659: INFO: ExecWithOptions {Command:[/agnhost dns-suffix] Namespace:dns-2087 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:29:34.659: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:29:34.659: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:29:34.659: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/dns-2087/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-suffix&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  STEP: Verifying customized DNS server is configured on pod... @ 04/27/24 13:29:34.721
  Apr 27 13:29:34.721: INFO: ExecWithOptions {Command:[/agnhost dns-server-list] Namespace:dns-2087 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:29:34.721: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:29:34.722: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:29:34.722: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/dns-2087/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-server-list&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 27 13:29:34.782: INFO: Deleting pod test-dns-nameservers...
  Apr 27 13:29:34.799: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-2087" for this suite. @ 04/27/24 13:29:34.804
• [2.200 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance] [sig-apps, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:875
  STEP: Creating a kubernetes client @ 04/27/24 13:29:34.812
  Apr 27 13:29:34.812: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename daemonsets @ 04/27/24 13:29:34.812
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:34.833
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:34.836
  STEP: Creating simple DaemonSet "daemon-set" @ 04/27/24 13:29:34.866
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/27/24 13:29:34.873
  Apr 27 13:29:34.878: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:29:34.878: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:29:34.882: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:29:34.882: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:29:35.879: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:29:35.879: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:29:35.884: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 27 13:29:35.884: INFO: Node ip-172-31-82-63 is running 0 daemon pod, expected 1
  Apr 27 13:29:36.880: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:29:36.880: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:29:36.884: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Apr 27 13:29:36.884: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Getting /status @ 04/27/24 13:29:36.888
  Apr 27 13:29:36.893: INFO: Daemon Set daemon-set has Conditions: []
  STEP: updating the DaemonSet Status @ 04/27/24 13:29:36.893
  Apr 27 13:29:36.906: INFO: updatedStatus.Conditions: []v1.DaemonSetCondition{v1.DaemonSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the daemon set status to be updated @ 04/27/24 13:29:36.906
  Apr 27 13:29:36.908: INFO: Observed &DaemonSet event: ADDED
  Apr 27 13:29:36.908: INFO: Observed &DaemonSet event: MODIFIED
  Apr 27 13:29:36.909: INFO: Observed &DaemonSet event: MODIFIED
  Apr 27 13:29:36.909: INFO: Observed &DaemonSet event: MODIFIED
  Apr 27 13:29:36.909: INFO: Observed &DaemonSet event: MODIFIED
  Apr 27 13:29:36.909: INFO: Found daemon set daemon-set in namespace daemonsets-8243 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Apr 27 13:29:36.909: INFO: Daemon set daemon-set has an updated status
  STEP: patching the DaemonSet Status @ 04/27/24 13:29:36.909
  STEP: watching for the daemon set status to be patched @ 04/27/24 13:29:36.916
  Apr 27 13:29:36.918: INFO: Observed &DaemonSet event: ADDED
  Apr 27 13:29:36.919: INFO: Observed &DaemonSet event: MODIFIED
  Apr 27 13:29:36.919: INFO: Observed &DaemonSet event: MODIFIED
  Apr 27 13:29:36.919: INFO: Observed &DaemonSet event: MODIFIED
  Apr 27 13:29:36.919: INFO: Observed &DaemonSet event: MODIFIED
  Apr 27 13:29:36.919: INFO: Observed daemon set daemon-set in namespace daemonsets-8243 with annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Apr 27 13:29:36.919: INFO: Observed &DaemonSet event: MODIFIED
  Apr 27 13:29:36.919: INFO: Found daemon set daemon-set in namespace daemonsets-8243 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }]
  Apr 27 13:29:36.919: INFO: Daemon set daemon-set has a patched status
  STEP: Deleting DaemonSet "daemon-set" @ 04/27/24 13:29:36.924
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-8243, will wait for the garbage collector to delete the pods @ 04/27/24 13:29:36.924
  Apr 27 13:29:36.987: INFO: Deleting DaemonSet.extensions daemon-set took: 8.519646ms
  Apr 27 13:29:37.087: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.43282ms
  Apr 27 13:29:38.193: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:29:38.193: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 27 13:29:38.197: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"34518"},"items":null}

  Apr 27 13:29:38.201: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"34518"},"items":null}

  Apr 27 13:29:38.219: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-8243" for this suite. @ 04/27/24 13:29:38.223
• [3.420 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:655
  STEP: Creating a kubernetes client @ 04/27/24 13:29:38.232
  Apr 27 13:29:38.232: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename job @ 04/27/24 13:29:38.233
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:38.245
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:38.249
  STEP: Creating a job @ 04/27/24 13:29:38.253
  STEP: Ensuring active pods == parallelism @ 04/27/24 13:29:38.259
  STEP: Orphaning one of the Job's Pods @ 04/27/24 13:29:40.265
  Apr 27 13:29:40.784: INFO: Successfully updated pod "adopt-release-4svbk"
  STEP: Checking that the Job readopts the Pod @ 04/27/24 13:29:40.784
  STEP: Removing the labels from the Job's Pod @ 04/27/24 13:29:42.795
  Apr 27 13:29:43.311: INFO: Successfully updated pod "adopt-release-4svbk"
  STEP: Checking that the Job releases the Pod @ 04/27/24 13:29:43.311
  Apr 27 13:29:45.321: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-6544" for this suite. @ 04/27/24 13:29:45.327
• [7.104 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:140
  STEP: Creating a kubernetes client @ 04/27/24 13:29:45.336
  Apr 27 13:29:45.336: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 13:29:45.337
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:45.357
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:45.361
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 04/27/24 13:29:45.364
  STEP: Saw pod success @ 04/27/24 13:29:49.394
  Apr 27 13:29:49.399: INFO: Trying to get logs from node ip-172-31-37-185 pod pod-8973d24e-f4ed-4a9a-82d5-487363638601 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 13:29:49.421
  Apr 27 13:29:49.443: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-8816" for this suite. @ 04/27/24 13:29:49.447
• [4.120 seconds]
------------------------------
SSSS
------------------------------
[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance] [sig-scheduling, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/limit_range.go:62
  STEP: Creating a kubernetes client @ 04/27/24 13:29:49.456
  Apr 27 13:29:49.456: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename limitrange @ 04/27/24 13:29:49.457
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:49.475
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:49.478
  STEP: Creating a LimitRange @ 04/27/24 13:29:49.482
  STEP: Setting up watch @ 04/27/24 13:29:49.482
  STEP: Submitting a LimitRange @ 04/27/24 13:29:49.586
  STEP: Verifying LimitRange creation was observed @ 04/27/24 13:29:49.593
  STEP: Fetching the LimitRange to ensure it has proper values @ 04/27/24 13:29:49.593
  Apr 27 13:29:49.598: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Apr 27 13:29:49.598: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with no resource requirements @ 04/27/24 13:29:49.598
  STEP: Ensuring Pod has resource requirements applied from LimitRange @ 04/27/24 13:29:49.604
  Apr 27 13:29:49.616: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Apr 27 13:29:49.616: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with partial resource requirements @ 04/27/24 13:29:49.616
  STEP: Ensuring Pod has merged resource requirements applied from LimitRange @ 04/27/24 13:29:49.622
  Apr 27 13:29:49.626: INFO: Verifying requests: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}]
  Apr 27 13:29:49.626: INFO: Verifying limits: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Failing to create a Pod with less than min resources @ 04/27/24 13:29:49.626
  STEP: Failing to create a Pod with more than max resources @ 04/27/24 13:29:49.628
  STEP: Updating a LimitRange @ 04/27/24 13:29:49.631
  STEP: Verifying LimitRange updating is effective @ 04/27/24 13:29:49.637
  STEP: Creating a Pod with less than former min resources @ 04/27/24 13:29:51.642
  STEP: Failing to create a Pod with more than max resources @ 04/27/24 13:29:51.65
  STEP: Deleting a LimitRange @ 04/27/24 13:29:51.653
  STEP: Verifying the LimitRange was deleted @ 04/27/24 13:29:51.663
  Apr 27 13:29:56.669: INFO: limitRange is already deleted
  STEP: Creating a Pod with more than former max resources @ 04/27/24 13:29:56.669
  Apr 27 13:29:56.680: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-6879" for this suite. @ 04/27/24 13:29:56.689
• [7.241 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:199
  STEP: Creating a kubernetes client @ 04/27/24 13:29:56.698
  Apr 27 13:29:56.698: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/27/24 13:29:56.698
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:56.714
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:56.718
  STEP: fetching the /apis discovery document @ 04/27/24 13:29:56.722
  STEP: finding the apiextensions.k8s.io API group in the /apis discovery document @ 04/27/24 13:29:56.723
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis discovery document @ 04/27/24 13:29:56.723
  STEP: fetching the /apis/apiextensions.k8s.io discovery document @ 04/27/24 13:29:56.724
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis/apiextensions.k8s.io discovery document @ 04/27/24 13:29:56.725
  STEP: fetching the /apis/apiextensions.k8s.io/v1 discovery document @ 04/27/24 13:29:56.725
  STEP: finding customresourcedefinitions resources in the /apis/apiextensions.k8s.io/v1 discovery document @ 04/27/24 13:29:56.727
  Apr 27 13:29:56.727: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-1531" for this suite. @ 04/27/24 13:29:56.731
• [0.042 seconds]
------------------------------
S
------------------------------
[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/containers.go:75
  STEP: Creating a kubernetes client @ 04/27/24 13:29:56.739
  Apr 27 13:29:56.739: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename containers @ 04/27/24 13:29:56.74
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:29:56.759
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:29:56.763
  STEP: Creating a pod to test override command @ 04/27/24 13:29:56.767
  STEP: Saw pod success @ 04/27/24 13:30:00.794
  Apr 27 13:30:00.799: INFO: Trying to get logs from node ip-172-31-82-63 pod client-containers-84702db1-6d4c-4968-bebb-9e5a5a007ecc container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 13:30:00.812
  Apr 27 13:30:00.833: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-2867" for this suite. @ 04/27/24 13:30:00.837
• [4.109 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:887
  STEP: Creating a kubernetes client @ 04/27/24 13:30:00.849
  Apr 27 13:30:00.849: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:30:00.849
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:00.865
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:00.869
  STEP: validating api versions @ 04/27/24 13:30:00.873
  Apr 27 13:30:00.873: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-2326 api-versions'
  Apr 27 13:30:00.916: INFO: stderr: ""
  Apr 27 13:30:00.916: INFO: stdout: "admissionregistration.k8s.io/v1\napiextensions.k8s.io/v1\napiregistration.k8s.io/v1\napps/v1\nauthentication.k8s.io/v1\nauthorization.k8s.io/v1\nautoscaling/v1\nautoscaling/v2\nbatch/v1\ncertificates.k8s.io/v1\ncoordination.k8s.io/v1\ndiscovery.k8s.io/v1\nevents.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1beta3\nmetrics.k8s.io/v1beta1\nnetworking.k8s.io/v1\nnode.k8s.io/v1\npolicy/v1\nrbac.authorization.k8s.io/v1\nscheduling.k8s.io/v1\nstorage.k8s.io/v1\nv1\n"
  Apr 27 13:30:00.916: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2326" for this suite. @ 04/27/24 13:30:00.922
• [0.082 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should release no longer matching pods [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:104
  STEP: Creating a kubernetes client @ 04/27/24 13:30:00.931
  Apr 27 13:30:00.931: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replication-controller @ 04/27/24 13:30:00.931
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:00.946
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:00.951
  STEP: Given a ReplicationController is created @ 04/27/24 13:30:00.954
  STEP: When the matched label of one of its pods change @ 04/27/24 13:30:00.962
  Apr 27 13:30:00.967: INFO: Pod name pod-release: Found 0 pods out of 1
  Apr 27 13:30:05.971: INFO: Pod name pod-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 04/27/24 13:30:05.983
  Apr 27 13:30:06.995: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-947" for this suite. @ 04/27/24 13:30:07
• [6.077 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Secrets should patch a secret [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/secrets.go:155
  STEP: Creating a kubernetes client @ 04/27/24 13:30:07.008
  Apr 27 13:30:07.008: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 13:30:07.008
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:07.026
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:07.029
  STEP: creating a secret @ 04/27/24 13:30:07.032
  STEP: listing secrets in all namespaces to ensure that there are more than zero @ 04/27/24 13:30:07.038
  STEP: patching the secret @ 04/27/24 13:30:07.042
  STEP: deleting the secret using a LabelSelector @ 04/27/24 13:30:07.052
  STEP: listing secrets in all namespaces, searching for label name and value in patch @ 04/27/24 13:30:07.061
  Apr 27 13:30:07.065: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6756" for this suite. @ 04/27/24 13:30:07.069
• [0.070 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:399
  STEP: Creating a kubernetes client @ 04/27/24 13:30:07.078
  Apr 27 13:30:07.078: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 13:30:07.078
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:07.095
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:07.098
  STEP: creating the pod @ 04/27/24 13:30:07.102
  STEP: submitting the pod to kubernetes @ 04/27/24 13:30:07.102
  W0427 13:30:07.111293      19 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: verifying the pod is in kubernetes @ 04/27/24 13:30:09.127
  STEP: updating the pod @ 04/27/24 13:30:09.132
  Apr 27 13:30:09.647: INFO: Successfully updated pod "pod-update-activedeadlineseconds-38f4ad45-2c8d-4b34-8384-fdef56058557"
  Apr 27 13:30:13.663: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-1420" for this suite. @ 04/27/24 13:30:13.668
• [6.598 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:109
  STEP: Creating a kubernetes client @ 04/27/24 13:30:13.676
  Apr 27 13:30:13.676: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubelet-test @ 04/27/24 13:30:13.676
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:13.693
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:13.697
  Apr 27 13:30:17.724: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-8888" for this suite. @ 04/27/24 13:30:17.73
• [4.063 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1698
  STEP: Creating a kubernetes client @ 04/27/24 13:30:17.739
  Apr 27 13:30:17.739: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:30:17.739
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:17.76
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:17.763
  STEP: creating Agnhost RC @ 04/27/24 13:30:17.767
  Apr 27 13:30:17.767: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-929 create -f -'
  Apr 27 13:30:17.851: INFO: stderr: ""
  Apr 27 13:30:17.851: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 04/27/24 13:30:17.851
  Apr 27 13:30:18.856: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 27 13:30:18.856: INFO: Found 0 / 1
  Apr 27 13:30:19.857: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 27 13:30:19.857: INFO: Found 1 / 1
  Apr 27 13:30:19.857: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  STEP: patching all pods @ 04/27/24 13:30:19.857
  Apr 27 13:30:19.862: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 27 13:30:19.862: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Apr 27 13:30:19.862: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-929 patch pod agnhost-primary-4bz52 -p {"metadata":{"annotations":{"x":"y"}}}'
  Apr 27 13:30:19.914: INFO: stderr: ""
  Apr 27 13:30:19.914: INFO: stdout: "pod/agnhost-primary-4bz52 patched\n"
  STEP: checking annotations @ 04/27/24 13:30:19.914
  Apr 27 13:30:19.919: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 27 13:30:19.919: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Apr 27 13:30:19.919: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-929" for this suite. @ 04/27/24 13:30:19.923
• [2.192 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:505
  STEP: Creating a kubernetes client @ 04/27/24 13:30:19.931
  Apr 27 13:30:19.931: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 13:30:19.932
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:19.947
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:19.951
  Apr 27 13:30:19.999: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-606" for this suite. @ 04/27/24 13:30:20.003
• [0.081 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/containers.go:41
  STEP: Creating a kubernetes client @ 04/27/24 13:30:20.013
  Apr 27 13:30:20.013: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename containers @ 04/27/24 13:30:20.014
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:20.028
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:20.033
  Apr 27 13:30:22.067: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-1386" for this suite. @ 04/27/24 13:30:22.071
• [2.067 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:261
  STEP: Creating a kubernetes client @ 04/27/24 13:30:22.081
  Apr 27 13:30:22.081: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:30:22.081
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:22.098
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:22.102
  STEP: Setting up server cert @ 04/27/24 13:30:22.127
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:30:22.27
  STEP: Deploying the webhook pod @ 04/27/24 13:30:22.28
  STEP: Wait for the deployment to be ready @ 04/27/24 13:30:22.296
  Apr 27 13:30:22.307: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:30:24.323
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:30:24.336
  Apr 27 13:30:25.337: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating pod webhook via the AdmissionRegistration API @ 04/27/24 13:30:25.346
  STEP: create a pod that should be updated by the webhook @ 04/27/24 13:30:25.359
  Apr 27 13:30:25.433: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8214" for this suite. @ 04/27/24 13:30:25.437
  STEP: Destroying namespace "webhook-markers-2396" for this suite. @ 04/27/24 13:30:25.444
• [3.371 seconds]
------------------------------
[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:183
  STEP: Creating a kubernetes client @ 04/27/24 13:30:25.452
  Apr 27 13:30:25.452: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 13:30:25.452
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:30:25.468
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:30:25.471
  STEP: Creating pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756 @ 04/27/24 13:30:25.475
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/27/24 13:30:27.496
  Apr 27 13:30:27.501: INFO: Initial restart count of pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 is 0
  Apr 27 13:30:27.505: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:29.510: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:31.516: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:33.521: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:35.528: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:37.534: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:39.540: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:41.546: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:43.552: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:45.558: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:47.565: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:49.572: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:51.578: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:53.584: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:55.590: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:57.597: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:30:59.603: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:01.609: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:03.615: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:05.621: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:07.627: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:09.634: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:11.640: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:13.646: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:15.653: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:17.659: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:19.665: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:21.671: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:23.677: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:25.683: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:27.688: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:29.695: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:31.701: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:33.709: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:35.715: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:37.722: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:39.727: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:41.733: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:43.739: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:45.745: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:47.750: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:49.757: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:51.763: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:53.769: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:55.775: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:57.781: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:31:59.787: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:01.794: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:03.800: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:05.807: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:07.813: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:09.820: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:11.827: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:13.832: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:15.838: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:17.844: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:19.848: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:21.855: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:23.861: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:25.867: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:27.873: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:29.879: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:31.885: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:33.891: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:35.896: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:37.903: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:39.909: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:41.915: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:43.922: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:45.928: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:47.934: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:49.940: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:51.946: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:53.952: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:55.958: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:57.964: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:32:59.970: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:01.977: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:03.982: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:05.989: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:07.995: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:10.000: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:12.007: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:14.013: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:16.020: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:18.026: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:20.031: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:22.037: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:24.043: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:26.050: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:28.056: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:30.063: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:32.069: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:34.077: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:36.083: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:38.089: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:40.094: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:42.100: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:44.107: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:46.112: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:48.118: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:50.124: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:52.130: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:54.136: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:56.142: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:33:58.147: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:00.154: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:02.160: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:04.166: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:06.175: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:08.181: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:10.188: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:12.194: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:14.200: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:16.206: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:18.212: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:20.218: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:22.224: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:24.230: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  Apr 27 13:34:26.236: INFO: Get pod liveness-be8d6b20-d190-4aaa-9697-a0f066149456 in namespace container-probe-3756
  STEP: deleting the pod @ 04/27/24 13:34:28.237
  Apr 27 13:34:28.254: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-3756" for this suite. @ 04/27/24 13:34:28.26
• [242.816 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Services should delete a collection of services [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:3565
  STEP: Creating a kubernetes client @ 04/27/24 13:34:28.268
  Apr 27 13:34:28.268: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 13:34:28.269
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:34:28.284
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:34:28.287
  STEP: creating a collection of services @ 04/27/24 13:34:28.291
  Apr 27 13:34:28.291: INFO: Creating e2e-svc-a-hvwnw
  Apr 27 13:34:28.302: INFO: Creating e2e-svc-b-tmdr2
  Apr 27 13:34:28.314: INFO: Creating e2e-svc-c-xll8n
  STEP: deleting service collection @ 04/27/24 13:34:28.332
  Apr 27 13:34:28.368: INFO: Collection of services has been deleted
  Apr 27 13:34:28.368: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2127" for this suite. @ 04/27/24 13:34:28.373
• [0.112 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance] [sig-apps, Slow, Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:125
  STEP: Creating a kubernetes client @ 04/27/24 13:34:28.381
  Apr 27 13:34:28.381: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename cronjob @ 04/27/24 13:34:28.381
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:34:28.398
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:34:28.402
  STEP: Creating a ForbidConcurrent cronjob @ 04/27/24 13:34:28.405
  STEP: Ensuring a job is scheduled @ 04/27/24 13:34:28.413
  STEP: Ensuring exactly one is scheduled @ 04/27/24 13:35:00.419
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 04/27/24 13:35:00.423
  STEP: Ensuring no more jobs are scheduled @ 04/27/24 13:35:00.428
  STEP: Removing cronjob @ 04/27/24 13:40:00.44
  Apr 27 13:40:00.448: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-5416" for this suite. @ 04/27/24 13:40:00.453
• [332.081 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslicemirroring.go:55
  STEP: Creating a kubernetes client @ 04/27/24 13:40:00.463
  Apr 27 13:40:00.463: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename endpointslicemirroring @ 04/27/24 13:40:00.463
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:00.483
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:00.489
  STEP: mirroring a new custom Endpoint @ 04/27/24 13:40:00.507
  Apr 27 13:40:00.520: INFO: Waiting for at least 1 EndpointSlice to exist, got 0
  STEP: mirroring an update to a custom Endpoint @ 04/27/24 13:40:02.526
  Apr 27 13:40:02.537: INFO: Expected EndpointSlice to have 10.2.3.4 as address, got 10.1.2.3
  STEP: mirroring deletion of a custom Endpoint @ 04/27/24 13:40:04.544
  Apr 27 13:40:04.557: INFO: Waiting for 0 EndpointSlices to exist, got 1
  Apr 27 13:40:06.563: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslicemirroring-5686" for this suite. @ 04/27/24 13:40:06.569
• [6.116 seconds]
------------------------------
S
------------------------------
[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/persistent_volumes.go:430
  STEP: Creating a kubernetes client @ 04/27/24 13:40:06.579
  Apr 27 13:40:06.579: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pv @ 04/27/24 13:40:06.58
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:06.597
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:06.6
  STEP: Creating initial PV and PVC @ 04/27/24 13:40:06.604
  Apr 27 13:40:06.604: INFO: Creating a PV followed by a PVC
  STEP: Listing all PVs with the labelSelector: "e2e-pv-pool=pv-3269" @ 04/27/24 13:40:06.619
  STEP: Listing PVCs in namespace "pv-3269" @ 04/27/24 13:40:06.624
  STEP: Patching the PV "pv-3269-xn5t8" @ 04/27/24 13:40:06.629
  STEP: Patching the PVC "pvc-8hb9z" @ 04/27/24 13:40:06.639
  STEP: Getting PV "pv-3269-xn5t8" @ 04/27/24 13:40:06.648
  STEP: Getting PVC "pvc-8hb9z" @ 04/27/24 13:40:06.652
  STEP: Deleting PVC "pvc-8hb9z" @ 04/27/24 13:40:06.659
  STEP: Confirm deletion of PVC "pvc-8hb9z" @ 04/27/24 13:40:06.669
  STEP: Deleting PV "pv-3269-xn5t8" @ 04/27/24 13:40:08.68
  STEP: Confirm deletion of PV "pv-3269-xn5t8" @ 04/27/24 13:40:08.689
  STEP: Recreating another PV & PVC @ 04/27/24 13:40:10.699
  Apr 27 13:40:10.700: INFO: Creating a PV followed by a PVC
  STEP: Updating the PV "pv-3269-mqpj5" @ 04/27/24 13:40:10.714
  STEP: Updating the PVC "pvc-xwj9r" @ 04/27/24 13:40:10.724
  STEP: Listing PVCs in all namespaces with the labelSelector: "pvc-xwj9r=updated" @ 04/27/24 13:40:10.734
  STEP: Deleting PVC "pvc-xwj9r" via DeleteCollection @ 04/27/24 13:40:10.739
  STEP: Confirm deletion of PVC "pvc-xwj9r" @ 04/27/24 13:40:10.751
  STEP: Deleting PV "pv-3269-mqpj5" via DeleteCollection @ 04/27/24 13:40:12.764
  STEP: Confirm deletion of PV "pv-3269-mqpj5" @ 04/27/24 13:40:12.775
  Apr 27 13:40:14.786: INFO: AfterEach: deleting 1 PVCs and 1 PVs...
  Apr 27 13:40:14.786: INFO: Deleting PersistentVolumeClaim "pvc-xwj9r"
  Apr 27 13:40:14.790: INFO: Deleting PersistentVolume "pv-3269-mqpj5"
  Apr 27 13:40:14.794: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pv-3269" for this suite. @ 04/27/24 13:40:14.799
• [8.229 seconds]
------------------------------
S
------------------------------
[sig-network] Services should find a service from listing all namespaces [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:3129
  STEP: Creating a kubernetes client @ 04/27/24 13:40:14.808
  Apr 27 13:40:14.808: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 13:40:14.809
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:14.823
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:14.827
  STEP: fetching services @ 04/27/24 13:40:14.832
  Apr 27 13:40:14.837: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-3495" for this suite. @ 04/27/24 13:40:14.841
• [0.041 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-network] Services should serve a basic endpoint from pods [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:785
  STEP: Creating a kubernetes client @ 04/27/24 13:40:14.849
  Apr 27 13:40:14.849: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 13:40:14.85
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:14.866
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:14.869
  STEP: creating service endpoint-test2 in namespace services-6524 @ 04/27/24 13:40:14.873
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-6524 to expose endpoints map[] @ 04/27/24 13:40:14.89
  Apr 27 13:40:14.899: INFO: successfully validated that service endpoint-test2 in namespace services-6524 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-6524 @ 04/27/24 13:40:14.899
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-6524 to expose endpoints map[pod1:[80]] @ 04/27/24 13:40:16.926
  Apr 27 13:40:16.941: INFO: successfully validated that service endpoint-test2 in namespace services-6524 exposes endpoints map[pod1:[80]]
  STEP: Checking if the Service forwards traffic to pod1 @ 04/27/24 13:40:16.941
  Apr 27 13:40:16.941: INFO: Creating new exec pod
  Apr 27 13:40:19.959: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-6524 exec execpodhd7pm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Apr 27 13:40:20.069: INFO: stderr: "+ nc -v -t -w 2 endpoint-test2 80\n+ echo hostName\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Apr 27 13:40:20.069: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:40:20.069: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-6524 exec execpodhd7pm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.142 80'
  Apr 27 13:40:20.165: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.142 80\nConnection to 10.152.183.142 80 port [tcp/http] succeeded!\n"
  Apr 27 13:40:20.165: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Creating pod pod2 in namespace services-6524 @ 04/27/24 13:40:20.165
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-6524 to expose endpoints map[pod1:[80] pod2:[80]] @ 04/27/24 13:40:22.191
  Apr 27 13:40:22.208: INFO: successfully validated that service endpoint-test2 in namespace services-6524 exposes endpoints map[pod1:[80] pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod1 and pod2 @ 04/27/24 13:40:22.208
  Apr 27 13:40:23.209: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-6524 exec execpodhd7pm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Apr 27 13:40:23.301: INFO: stderr: "+ nc -v -t -w 2 endpoint-test2 80\n+ echo hostName\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Apr 27 13:40:23.301: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:40:23.302: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-6524 exec execpodhd7pm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.142 80'
  Apr 27 13:40:23.398: INFO: stderr: "+ nc -v -t -w 2 10.152.183.142 80\n+ echo hostName\nConnection to 10.152.183.142 80 port [tcp/http] succeeded!\n"
  Apr 27 13:40:23.398: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-6524 @ 04/27/24 13:40:23.398
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-6524 to expose endpoints map[pod2:[80]] @ 04/27/24 13:40:23.419
  Apr 27 13:40:23.434: INFO: successfully validated that service endpoint-test2 in namespace services-6524 exposes endpoints map[pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod2 @ 04/27/24 13:40:23.434
  Apr 27 13:40:24.434: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-6524 exec execpodhd7pm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Apr 27 13:40:24.531: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Apr 27 13:40:24.531: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:40:24.532: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-6524 exec execpodhd7pm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.142 80'
  Apr 27 13:40:24.625: INFO: stderr: "+ nc -v -t -w 2 10.152.183.142 80\n+ echo hostName\nConnection to 10.152.183.142 80 port [tcp/http] succeeded!\n"
  Apr 27 13:40:24.625: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod2 in namespace services-6524 @ 04/27/24 13:40:24.625
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-6524 to expose endpoints map[] @ 04/27/24 13:40:24.643
  Apr 27 13:40:24.656: INFO: successfully validated that service endpoint-test2 in namespace services-6524 exposes endpoints map[]
  Apr 27 13:40:24.673: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-6524" for this suite. @ 04/27/24 13:40:24.678
• [9.837 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance] [sig-apps, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:443
  STEP: Creating a kubernetes client @ 04/27/24 13:40:24.686
  Apr 27 13:40:24.686: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename daemonsets @ 04/27/24 13:40:24.687
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:24.704
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:24.707
  Apr 27 13:40:24.737: INFO: Create a RollingUpdate DaemonSet
  Apr 27 13:40:24.743: INFO: Check that daemon pods launch on every node of the cluster
  Apr 27 13:40:24.751: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:24.751: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:24.755: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:40:24.755: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:40:25.750: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:25.750: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:25.755: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 27 13:40:25.755: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:40:26.749: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:26.749: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:26.754: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Apr 27 13:40:26.754: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  Apr 27 13:40:26.754: INFO: Update the DaemonSet to trigger a rollout
  Apr 27 13:40:26.764: INFO: Updating DaemonSet daemon-set
  Apr 27 13:40:27.778: INFO: Roll back the DaemonSet before rollout is complete
  Apr 27 13:40:27.790: INFO: Updating DaemonSet daemon-set
  Apr 27 13:40:27.790: INFO: Make sure DaemonSet rollback is complete
  Apr 27 13:40:27.796: INFO: Wrong image for pod: daemon-set-zmj56. Expected: registry.k8s.io/e2e-test-images/httpd:2.4.38-4, got: foo:non-existent.
  Apr 27 13:40:27.796: INFO: Pod daemon-set-zmj56 is not available
  Apr 27 13:40:27.803: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:27.803: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:28.800: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:28.800: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:29.795: INFO: Pod daemon-set-lx4q5 is not available
  Apr 27 13:40:29.799: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:40:29.799: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  STEP: Deleting DaemonSet "daemon-set" @ 04/27/24 13:40:29.807
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-4388, will wait for the garbage collector to delete the pods @ 04/27/24 13:40:29.807
  Apr 27 13:40:29.870: INFO: Deleting DaemonSet.extensions daemon-set took: 7.299202ms
  Apr 27 13:40:29.971: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.985116ms
  Apr 27 13:40:31.276: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:40:31.276: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 27 13:40:31.280: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"36790"},"items":null}

  Apr 27 13:40:31.284: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"36790"},"items":null}

  Apr 27 13:40:31.303: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-4388" for this suite. @ 04/27/24 13:40:31.308
• [6.631 seconds]
------------------------------
SS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/sysctl.go:125
  STEP: Creating a kubernetes client @ 04/27/24 13:40:31.317
  Apr 27 13:40:31.317: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sysctl @ 04/27/24 13:40:31.318
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:31.335
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:31.341
  STEP: Creating a pod with one valid and two invalid sysctls @ 04/27/24 13:40:31.344
  Apr 27 13:40:31.351: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-174" for this suite. @ 04/27/24 13:40:31.355
• [0.045 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/init_container.go:459
  STEP: Creating a kubernetes client @ 04/27/24 13:40:31.363
  Apr 27 13:40:31.363: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename init-container @ 04/27/24 13:40:31.363
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:31.379
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:31.382
  STEP: creating the pod @ 04/27/24 13:40:31.386
  Apr 27 13:40:31.386: INFO: PodSpec: initContainers in spec.initContainers
  Apr 27 13:40:34.410: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-7267" for this suite. @ 04/27/24 13:40:34.415
• [3.060 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-network] Services should serve multiport endpoints from pods [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:846
  STEP: Creating a kubernetes client @ 04/27/24 13:40:34.423
  Apr 27 13:40:34.423: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 13:40:34.424
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:34.44
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:34.444
  STEP: creating service multi-endpoint-test in namespace services-7785 @ 04/27/24 13:40:34.448
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-7785 to expose endpoints map[] @ 04/27/24 13:40:34.464
  Apr 27 13:40:34.475: INFO: successfully validated that service multi-endpoint-test in namespace services-7785 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-7785 @ 04/27/24 13:40:34.476
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-7785 to expose endpoints map[pod1:[100]] @ 04/27/24 13:40:36.505
  Apr 27 13:40:36.531: INFO: successfully validated that service multi-endpoint-test in namespace services-7785 exposes endpoints map[pod1:[100]]
  STEP: Creating pod pod2 in namespace services-7785 @ 04/27/24 13:40:36.531
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-7785 to expose endpoints map[pod1:[100] pod2:[101]] @ 04/27/24 13:40:38.556
  Apr 27 13:40:38.575: INFO: successfully validated that service multi-endpoint-test in namespace services-7785 exposes endpoints map[pod1:[100] pod2:[101]]
  STEP: Checking if the Service forwards traffic to pods @ 04/27/24 13:40:38.575
  Apr 27 13:40:38.575: INFO: Creating new exec pod
  Apr 27 13:40:41.593: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-7785 exec execpodtgpwr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 80'
  Apr 27 13:40:41.685: INFO: stderr: "+ nc -v -t -w 2 multi-endpoint-test 80\n+ echo hostName\nConnection to multi-endpoint-test 80 port [tcp/http] succeeded!\n"
  Apr 27 13:40:41.685: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:40:41.686: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-7785 exec execpodtgpwr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.120 80'
  Apr 27 13:40:41.784: INFO: stderr: "+ nc -v -t -w 2 10.152.183.120 80\nConnection to 10.152.183.120 80 port [tcp/http] succeeded!\n+ echo hostName\n"
  Apr 27 13:40:41.784: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:40:41.785: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-7785 exec execpodtgpwr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 81'
  Apr 27 13:40:41.879: INFO: stderr: "+ nc -v -t -w 2 multi-endpoint-test 81\n+ echo hostName\nConnection to multi-endpoint-test 81 port [tcp/*] succeeded!\n"
  Apr 27 13:40:41.879: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 13:40:41.879: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-7785 exec execpodtgpwr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.120 81'
  Apr 27 13:40:41.978: INFO: stderr: "+ nc -v -t -w 2 10.152.183.120 81\n+ echo hostName\nConnection to 10.152.183.120 81 port [tcp/*] succeeded!\n"
  Apr 27 13:40:41.978: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-7785 @ 04/27/24 13:40:41.978
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-7785 to expose endpoints map[pod2:[101]] @ 04/27/24 13:40:42.006
  Apr 27 13:40:42.020: INFO: successfully validated that service multi-endpoint-test in namespace services-7785 exposes endpoints map[pod2:[101]]
  STEP: Deleting pod pod2 in namespace services-7785 @ 04/27/24 13:40:42.02
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-7785 to expose endpoints map[] @ 04/27/24 13:40:42.04
  Apr 27 13:40:42.051: INFO: successfully validated that service multi-endpoint-test in namespace services-7785 exposes endpoints map[]
  Apr 27 13:40:42.070: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-7785" for this suite. @ 04/27/24 13:40:42.074
• [7.659 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should adopt matching pods on creation [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:95
  STEP: Creating a kubernetes client @ 04/27/24 13:40:42.082
  Apr 27 13:40:42.082: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replication-controller @ 04/27/24 13:40:42.083
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:42.1
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:42.103
  STEP: Given a Pod with a 'name' label pod-adoption is created @ 04/27/24 13:40:42.107
  STEP: When a replication controller with a matching selector is created @ 04/27/24 13:40:44.133
  STEP: Then the orphan pod is adopted @ 04/27/24 13:40:44.14
  Apr 27 13:40:45.152: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-5708" for this suite. @ 04/27/24 13:40:45.157
• [3.083 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:164
  STEP: Creating a kubernetes client @ 04/27/24 13:40:45.166
  Apr 27 13:40:45.166: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename disruption @ 04/27/24 13:40:45.166
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:45.181
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:45.185
  STEP: Waiting for the pdb to be processed @ 04/27/24 13:40:45.193
  STEP: Updating PodDisruptionBudget status @ 04/27/24 13:40:47.198
  STEP: Waiting for all pods to be running @ 04/27/24 13:40:47.211
  Apr 27 13:40:47.216: INFO: running pods: 0 < 1
  STEP: locating a running pod @ 04/27/24 13:40:49.217
  STEP: Waiting for the pdb to be processed @ 04/27/24 13:40:49.233
  STEP: Patching PodDisruptionBudget status @ 04/27/24 13:40:49.243
  STEP: Waiting for the pdb to be processed @ 04/27/24 13:40:49.255
  Apr 27 13:40:49.260: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-4045" for this suite. @ 04/27/24 13:40:49.264
• [4.108 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should succeed in writing subpaths in container [Slow] [Conformance] [sig-node, Slow, Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:300
  STEP: Creating a kubernetes client @ 04/27/24 13:40:49.275
  Apr 27 13:40:49.275: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename var-expansion @ 04/27/24 13:40:49.275
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:40:49.291
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:40:49.296
  STEP: creating the pod @ 04/27/24 13:40:49.3
  STEP: waiting for pod running @ 04/27/24 13:40:49.31
  STEP: creating a file in subpath @ 04/27/24 13:40:51.321
  Apr 27 13:40:51.325: INFO: ExecWithOptions {Command:[/bin/sh -c touch /volume_mount/mypath/foo/test.log] Namespace:var-expansion-7194 PodName:var-expansion-ced0b94c-f4eb-420d-80a1-9e18e9488d6e ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:40:51.325: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:40:51.326: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:40:51.326: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/var-expansion-7194/pods/var-expansion-ced0b94c-f4eb-420d-80a1-9e18e9488d6e/exec?command=%2Fbin%2Fsh&command=-c&command=touch+%2Fvolume_mount%2Fmypath%2Ffoo%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: test for file in mounted path @ 04/27/24 13:40:51.379
  Apr 27 13:40:51.384: INFO: ExecWithOptions {Command:[/bin/sh -c test -f /subpath_mount/test.log] Namespace:var-expansion-7194 PodName:var-expansion-ced0b94c-f4eb-420d-80a1-9e18e9488d6e ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:40:51.384: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:40:51.385: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:40:51.385: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/var-expansion-7194/pods/var-expansion-ced0b94c-f4eb-420d-80a1-9e18e9488d6e/exec?command=%2Fbin%2Fsh&command=-c&command=test+-f+%2Fsubpath_mount%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: updating the annotation value @ 04/27/24 13:40:51.43
  Apr 27 13:40:51.947: INFO: Successfully updated pod "var-expansion-ced0b94c-f4eb-420d-80a1-9e18e9488d6e"
  STEP: waiting for annotated pod running @ 04/27/24 13:40:51.947
  STEP: deleting the pod gracefully @ 04/27/24 13:40:51.951
  Apr 27 13:40:51.951: INFO: Deleting pod "var-expansion-ced0b94c-f4eb-420d-80a1-9e18e9488d6e" in namespace "var-expansion-7194"
  Apr 27 13:40:51.960: INFO: Wait up to 5m0s for pod "var-expansion-ced0b94c-f4eb-420d-80a1-9e18e9488d6e" to be fully deleted
  Apr 27 13:41:24.060: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-7194" for this suite. @ 04/27/24 13:41:24.065
• [34.799 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] SubjectReview should support SubjectReview API operations [Conformance] [sig-auth, Conformance]
k8s.io/kubernetes/test/e2e/auth/subjectreviews.go:50
  STEP: Creating a kubernetes client @ 04/27/24 13:41:24.074
  Apr 27 13:41:24.074: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename subjectreview @ 04/27/24 13:41:24.075
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:41:24.091
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:41:24.095
  STEP: Creating a Serviceaccount "e2e" in namespace "subjectreview-5315" @ 04/27/24 13:41:24.098
  Apr 27 13:41:24.106: INFO: saUsername: "system:serviceaccount:subjectreview-5315:e2e"
  Apr 27 13:41:24.106: INFO: saGroups: []string{"system:authenticated", "system:serviceaccounts", "system:serviceaccounts:subjectreview-5315"}
  Apr 27 13:41:24.106: INFO: saUID: "bc061f17-7f22-4293-ab7b-1e5af8eeaa13"
  STEP: Creating clientset to impersonate "system:serviceaccount:subjectreview-5315:e2e" @ 04/27/24 13:41:24.106
  STEP: Creating SubjectAccessReview for "system:serviceaccount:subjectreview-5315:e2e" @ 04/27/24 13:41:24.106
  Apr 27 13:41:24.108: INFO: sarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  STEP: Verifying as "system:serviceaccount:subjectreview-5315:e2e" api 'list' configmaps in "subjectreview-5315" namespace @ 04/27/24 13:41:24.108
  Apr 27 13:41:24.110: INFO: SubjectAccessReview has been verified
  STEP: Creating a LocalSubjectAccessReview for "system:serviceaccount:subjectreview-5315:e2e" @ 04/27/24 13:41:24.11
  Apr 27 13:41:24.112: INFO: lsarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  Apr 27 13:41:24.112: INFO: LocalSubjectAccessReview has been verified
  Apr 27 13:41:24.112: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subjectreview-5315" for this suite. @ 04/27/24 13:41:24.116
• [0.049 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/persistent_volumes.go:669
  STEP: Creating a kubernetes client @ 04/27/24 13:41:24.127
  Apr 27 13:41:24.127: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pv @ 04/27/24 13:41:24.128
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:41:24.144
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:41:24.148
  STEP: Creating initial PV and PVC @ 04/27/24 13:41:24.151
  Apr 27 13:41:24.151: INFO: Creating a PV followed by a PVC
  STEP: Listing all PVs with the labelSelector: "e2e-pv-pool=pv-9059" @ 04/27/24 13:41:24.169
  STEP: Listing PVCs in namespace "pv-9059" @ 04/27/24 13:41:24.176
  STEP: Reading "pvc-2kjqp" Status @ 04/27/24 13:41:24.181
  STEP: Reading "pv-9059-s2n46" Status @ 04/27/24 13:41:24.186
  STEP: Patching "pvc-2kjqp" Status @ 04/27/24 13:41:24.193
  STEP: Patching "pv-9059-s2n46" Status @ 04/27/24 13:41:24.2
  STEP: Updating "pvc-2kjqp" Status @ 04/27/24 13:41:24.207
  STEP: Updating "pv-9059-s2n46" Status @ 04/27/24 13:41:24.217
  Apr 27 13:41:24.228: INFO: AfterEach: deleting 1 PVCs and 1 PVs...
  Apr 27 13:41:24.228: INFO: Deleting PersistentVolumeClaim "pvc-2kjqp"
  Apr 27 13:41:24.236: INFO: Deleting PersistentVolume "pv-9059-s2n46"
  Apr 27 13:41:24.243: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pv-9059" for this suite. @ 04/27/24 13:41:24.248
• [0.131 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/network/networking.go:96
  STEP: Creating a kubernetes client @ 04/27/24 13:41:24.258
  Apr 27 13:41:24.258: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pod-network-test @ 04/27/24 13:41:24.259
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:41:24.274
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:41:24.278
  STEP: Performing setup for networking test in namespace pod-network-test-9344 @ 04/27/24 13:41:24.282
  STEP: creating a selector @ 04/27/24 13:41:24.282
  STEP: Creating the service pods in kubernetes @ 04/27/24 13:41:24.282
  Apr 27 13:41:24.282: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 04/27/24 13:41:46.414
  Apr 27 13:41:48.436: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Apr 27 13:41:48.436: INFO: Breadth first check of 192.168.69.147 on host 172.31.37.185...
  Apr 27 13:41:48.441: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.172.211:9080/dial?request=hostname&protocol=udp&host=192.168.69.147&port=8081&tries=1'] Namespace:pod-network-test-9344 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:41:48.441: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:41:48.441: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:41:48.441: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-9344/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.172.211%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D192.168.69.147%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 27 13:41:48.494: INFO: Waiting for responses: map[]
  Apr 27 13:41:48.495: INFO: reached 192.168.69.147 after 0/1 tries
  Apr 27 13:41:48.495: INFO: Breadth first check of 192.168.96.141 on host 172.31.6.153...
  Apr 27 13:41:48.500: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.172.211:9080/dial?request=hostname&protocol=udp&host=192.168.96.141&port=8081&tries=1'] Namespace:pod-network-test-9344 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:41:48.500: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:41:48.500: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:41:48.500: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-9344/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.172.211%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D192.168.96.141%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 27 13:41:48.547: INFO: Waiting for responses: map[]
  Apr 27 13:41:48.547: INFO: reached 192.168.96.141 after 0/1 tries
  Apr 27 13:41:48.547: INFO: Breadth first check of 192.168.172.206 on host 172.31.82.63...
  Apr 27 13:41:48.553: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://192.168.172.211:9080/dial?request=hostname&protocol=udp&host=192.168.172.206&port=8081&tries=1'] Namespace:pod-network-test-9344 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 13:41:48.553: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:41:48.553: INFO: ExecWithOptions: Clientset creation
  Apr 27 13:41:48.553: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-9344/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F192.168.172.211%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D192.168.172.206%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 27 13:41:48.605: INFO: Waiting for responses: map[]
  Apr 27 13:41:48.605: INFO: reached 192.168.172.206 after 0/1 tries
  Apr 27 13:41:48.605: INFO: Going to retry 0 out of 3 pods....
  Apr 27 13:41:48.605: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-9344" for this suite. @ 04/27/24 13:41:48.611
• [24.362 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replace and Patch tests [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:155
  STEP: Creating a kubernetes client @ 04/27/24 13:41:48.621
  Apr 27 13:41:48.621: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replicaset @ 04/27/24 13:41:48.622
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:41:48.638
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:41:48.643
  Apr 27 13:41:48.660: INFO: Pod name sample-pod: Found 0 pods out of 1
  Apr 27 13:41:53.670: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/27/24 13:41:53.67
  STEP: Scaling up "test-rs" replicaset @ 04/27/24 13:41:53.67
  Apr 27 13:41:53.685: INFO: Updating replica set "test-rs"
  STEP: patching the ReplicaSet @ 04/27/24 13:41:53.685
  Apr 27 13:41:53.704: INFO: observed ReplicaSet test-rs in namespace replicaset-3402 with ReadyReplicas 1, AvailableReplicas 1
  Apr 27 13:41:53.721: INFO: observed ReplicaSet test-rs in namespace replicaset-3402 with ReadyReplicas 1, AvailableReplicas 1
  Apr 27 13:41:53.743: INFO: observed ReplicaSet test-rs in namespace replicaset-3402 with ReadyReplicas 1, AvailableReplicas 1
  Apr 27 13:41:53.750: INFO: observed ReplicaSet test-rs in namespace replicaset-3402 with ReadyReplicas 1, AvailableReplicas 1
  Apr 27 13:41:54.445: INFO: observed ReplicaSet test-rs in namespace replicaset-3402 with ReadyReplicas 2, AvailableReplicas 2
  Apr 27 13:41:54.738: INFO: observed Replicaset test-rs in namespace replicaset-3402 with ReadyReplicas 3 found true
  Apr 27 13:41:54.738: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-3402" for this suite. @ 04/27/24 13:41:54.742
• [6.132 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:113
  STEP: Creating a kubernetes client @ 04/27/24 13:41:54.753
  Apr 27 13:41:54.753: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename deployment @ 04/27/24 13:41:54.754
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:41:54.773
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:41:54.777
  Apr 27 13:41:54.780: INFO: Creating deployment "test-recreate-deployment"
  Apr 27 13:41:54.786: INFO: Waiting deployment "test-recreate-deployment" to be updated to revision 1
  Apr 27 13:41:54.797: INFO: deployment "test-recreate-deployment" doesn't have the required revision set
  Apr 27 13:41:56.808: INFO: Waiting deployment "test-recreate-deployment" to complete
  Apr 27 13:41:56.812: INFO: Triggering a new rollout for deployment "test-recreate-deployment"
  Apr 27 13:41:56.824: INFO: Updating deployment test-recreate-deployment
  Apr 27 13:41:56.824: INFO: Watching deployment "test-recreate-deployment" to verify that new pods will not run with olds pods
  Apr 27 13:41:56.916: INFO: Deployment "test-recreate-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-recreate-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3974",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d16e4107-a490-44be-b63e-2225fe4b6644",
      ResourceVersion: (string) (len=5) "37521",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822114,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=570) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |":{"f:type":{}},|
              000000b0  22 66 3a 74 65 6d 70 6c  61 74 65 22 3a 7b 22 66  |"f:template":{"f|
              000000c0  3a 6d 65 74 61 64 61 74  61 22 3a 7b 22 66 3a 6c  |:metadata":{"f:l|
              000000d0  61 62 65 6c 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |abels":{".":{},"|
              000000e0  66 3a 6e 61 6d 65 22 3a  7b 7d 7d 7d 2c 22 66 3a  |f:name":{}}},"f:|
              000000f0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              00000100  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              00000110  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              00000120  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000130  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000140  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000150  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000160  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000170  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000180  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000190  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              000001a0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000001b0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000001c0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000001d0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000001e0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000001f0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              00000200  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000210  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000220  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000230  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=495) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 63 6f 6e 64 69 74 69  6f 6e 73 22 3a 7b 22 2e  |:conditions":{".|
              00000070  22 3a 7b 7d 2c 22 6b 3a  7b 5c 22 74 79 70 65 5c  |":{},"k:{\"type\|
              00000080  22 3a 5c 22 41 76 61 69  6c 61 62 6c 65 5c 22 7d  |":\"Available\"}|
              00000090  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |":{".":{},"f:las|
              000000a0  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              000000b0  3a 7b 7d 2c 22 66 3a 6c  61 73 74 55 70 64 61 74  |:{},"f:lastUpdat|
              000000c0  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6d 65 73  |eTime":{},"f:mes|
              000000d0  73 61 67 65 22 3a 7b 7d  2c 22 66 3a 72 65 61 73  |sage":{},"f:reas|
              000000e0  6f 6e 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |on":{},"f:status|
              000000f0  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000100  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000110  22 50 72 6f 67 72 65 73  73 69 6e 67 5c 22 7d 22  |"Progressing\"}"|
              00000120  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              00000130  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000140  7b 7d 2c 22 66 3a 6c 61  73 74 55 70 64 61 74 65  |{},"f:lastUpdate|
              00000150  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6d 65 73 73  |Time":{},"f:mess|
              00000160  61 67 65 22 3a 7b 7d 2c  22 66 3a 72 65 61 73 6f  |age":{},"f:reaso|
              00000170  6e 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |n":{},"f:status"|
              00000180  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000190  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              000001a0  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              000001b0  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 75  |eplicas":{},"f:u|
              000001c0  6e 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |navailableReplic|
              000001d0  61 73 22 3a 7b 7d 2c 22  66 3a 75 70 64 61 74 65  |as":{},"f:update|
              000001e0  64 52 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 7d     |dReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=8) "Recreate",
        RollingUpdate: (*v1.RollingUpdateDeployment)(<nil>)
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 1,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822114,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=63) "ReplicaSet \"test-recreate-deployment-76fb77d45\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 27 13:41:56.922: INFO: New ReplicaSet "test-recreate-deployment-76fb77d45" of Deployment "test-recreate-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3974",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8dec9beb-f5a3-4f64-9685-e632685af9a2",
      ResourceVersion: (string) (len=5) "37518",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822116,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "d16e4107-a490-44be-b63e-2225fe4b6644",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 64 31 36 65 34 31  30 37 2d 61 34 39 30 2d  |\"d16e4107-a490-|
              00000120  34 34 62 65 2d 62 36 33  65 2d 32 32 32 35 66 65  |44be-b63e-2225fe|
              00000130  34 62 36 36 34 34 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |4b6644\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:41:56.923: INFO: All old ReplicaSets of Deployment "test-recreate-deployment":
  Apr 27 13:41:56.923: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-recreate-deployment-5cf87b5b86",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3974",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "9a4a197a-3f26-4892-958e-311e68f7d451",
      ResourceVersion: (string) (len=5) "37510",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822114,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5cf87b5b86"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "d16e4107-a490-44be-b63e-2225fe4b6644",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 64 31 36 65 34 31  30 37 2d 61 34 39 30 2d  |\"d16e4107-a490-|
              00000120  34 34 62 65 2d 62 36 33  65 2d 32 32 32 35 66 65  |44be-b63e-2225fe|
              00000130  34 62 36 36 34 34 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |4b6644\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5cf87b5b86"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5cf87b5b86"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:41:56.929: INFO: Pod "test-recreate-deployment-76fb77d45-wbcdt" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-recreate-deployment-76fb77d45-wbcdt",
      GenerateName: (string) (len=35) "test-recreate-deployment-76fb77d45-",
      Namespace: (string) (len=15) "deployment-3974",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b3f889dc-48fe-4200-a4a4-35671b99916c",
      ResourceVersion: (string) (len=5) "37522",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822116,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
          UID: (types.UID) (len=36) "8dec9beb-f5a3-4f64-9685-e632685af9a2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 64  65 63 39 62 65 62 2d 66  |d\":\"8dec9beb-f|
              00000090  35 61 33 2d 34 66 36 34  2d 39 36 38 35 2d 65 36  |5a3-4f64-9685-e6|
              000000a0  33 32 36 38 35 61 66 39  61 32 5c 22 7d 22 3a 7b  |32685af9a2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-xfv4k",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-xfv4k",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822116,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822116,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:41:56.931: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-3974" for this suite. @ 04/27/24 13:41:56.935
• [2.191 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:134
  STEP: Creating a kubernetes client @ 04/27/24 13:41:56.944
  Apr 27 13:41:56.944: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubelet-test @ 04/27/24 13:41:56.945
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:41:56.96
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:41:56.966
  Apr 27 13:41:57.000: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-8009" for this suite. @ 04/27/24 13:41:57.005
• [0.069 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:115
  STEP: Creating a kubernetes client @ 04/27/24 13:41:57.014
  Apr 27 13:41:57.014: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename var-expansion @ 04/27/24 13:41:57.014
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:41:57.032
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:41:57.035
  STEP: Creating a pod to test substitution in volume subpath @ 04/27/24 13:41:57.039
  STEP: Saw pod success @ 04/27/24 13:42:01.069
  Apr 27 13:42:01.073: INFO: Trying to get logs from node ip-172-31-82-63 pod var-expansion-f8f80a0f-0b85-4e0e-95b0-d83f41e84daa container dapi-container: <nil>
  STEP: delete the pod @ 04/27/24 13:42:01.092
  Apr 27 13:42:01.114: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-8511" for this suite. @ 04/27/24 13:42:01.119
• [4.115 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:238
  STEP: Creating a kubernetes client @ 04/27/24 13:42:01.129
  Apr 27 13:42:01.129: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:42:01.129
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:42:01.146
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:42:01.15
  STEP: Setting up server cert @ 04/27/24 13:42:01.179
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:42:01.562
  STEP: Deploying the webhook pod @ 04/27/24 13:42:01.572
  STEP: Wait for the deployment to be ready @ 04/27/24 13:42:01.587
  Apr 27 13:42:01.597: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:42:03.611
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:42:03.624
  Apr 27 13:42:04.625: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a webhook that server cannot talk to, with fail closed policy, via the AdmissionRegistration API @ 04/27/24 13:42:04.636
  Apr 27 13:42:04.655: INFO: Waiting for webhook configuration to be ready...
  STEP: create a namespace for the webhook @ 04/27/24 13:42:04.764
  STEP: create a configmap should be unconditionally rejected by the webhook @ 04/27/24 13:42:04.78
  Apr 27 13:42:04.896: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5893" for this suite. @ 04/27/24 13:42:04.905
  STEP: Destroying namespace "webhook-markers-2530" for this suite. @ 04/27/24 13:42:04.914
  STEP: Destroying namespace "fail-closed-namespace-4812" for this suite. @ 04/27/24 13:42:04.922
• [3.802 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:527
  STEP: Creating a kubernetes client @ 04/27/24 13:42:04.93
  Apr 27 13:42:04.930: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 13:42:04.931
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:42:04.946
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:42:04.95
  STEP: Creating pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640 @ 04/27/24 13:42:04.957
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/27/24 13:42:06.982
  Apr 27 13:42:06.987: INFO: Initial restart count of pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 is 0
  Apr 27 13:42:06.991: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:08.997: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:11.003: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:13.010: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:15.016: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:17.021: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:19.027: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:21.033: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:23.039: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:25.044: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:27.050: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:29.056: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:31.063: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:33.069: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:35.075: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:37.082: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:39.089: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:41.096: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:43.103: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:45.109: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:47.115: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:49.121: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:51.128: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:53.134: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:55.140: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:57.146: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:42:59.152: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:01.159: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:03.165: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:05.171: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:07.178: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:09.183: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:11.189: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:13.195: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:15.201: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:17.207: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:19.213: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:21.219: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:23.226: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:25.232: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:27.238: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:29.245: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:31.250: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:33.256: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:35.262: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:37.270: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:39.276: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:41.281: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:43.290: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:45.296: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:47.301: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:49.309: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:51.315: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:53.320: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:55.327: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:57.334: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:43:59.339: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:01.346: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:03.352: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:05.358: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:07.364: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:09.369: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:11.376: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:13.381: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:15.387: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:17.395: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:19.401: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:21.407: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:23.414: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:25.420: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:27.426: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:29.432: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:31.438: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:33.443: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:35.450: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:37.456: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:39.462: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:41.467: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:43.473: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:45.478: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:47.485: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:49.490: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:51.496: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:53.502: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:55.508: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:57.514: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:44:59.520: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:01.526: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:03.532: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:05.539: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:07.544: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:09.551: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:11.558: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:13.563: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:15.569: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:17.576: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:19.581: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:21.587: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:23.593: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:25.599: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:27.606: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:29.611: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:31.618: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:33.625: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:35.631: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:37.639: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:39.645: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:41.651: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:43.657: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:45.662: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:47.668: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:49.673: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:51.678: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:53.684: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:55.690: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:57.695: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:45:59.702: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:46:01.706: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:46:03.711: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  Apr 27 13:46:05.716: INFO: Get pod test-grpc-a21b13b5-1595-40f1-af1a-6d376bd07fd6 in namespace container-probe-8640
  STEP: deleting the pod @ 04/27/24 13:46:07.716
  Apr 27 13:46:07.732: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8640" for this suite. @ 04/27/24 13:46:07.738
• [242.815 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:131
  STEP: Creating a kubernetes client @ 04/27/24 13:46:07.745
  Apr 27 13:46:07.745: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename runtimeclass @ 04/27/24 13:46:07.746
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:46:07.765
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:46:07.768
  Apr 27 13:46:09.806: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-4011" for this suite. @ 04/27/24 13:46:09.811
• [2.074 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:209
  STEP: Creating a kubernetes client @ 04/27/24 13:46:09.82
  Apr 27 13:46:09.820: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:46:09.82
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:46:09.838
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:46:09.842
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 13:46:09.846
  STEP: Saw pod success @ 04/27/24 13:46:13.875
  Apr 27 13:46:13.879: INFO: Trying to get logs from node ip-172-31-37-185 pod downwardapi-volume-dd21ab46-572d-4181-ad3d-878644c05d27 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 13:46:13.898
  Apr 27 13:46:13.915: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7152" for this suite. @ 04/27/24 13:46:13.92
• [4.108 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance] [sig-apps, Slow, Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:751
  STEP: Creating a kubernetes client @ 04/27/24 13:46:13.928
  Apr 27 13:46:13.928: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename statefulset @ 04/27/24 13:46:13.929
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:46:13.945
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:46:13.949
  STEP: Creating service test in namespace statefulset-3022 @ 04/27/24 13:46:13.953
  STEP: Creating stateful set ss in namespace statefulset-3022 @ 04/27/24 13:46:13.958
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-3022 @ 04/27/24 13:46:13.965
  Apr 27 13:46:13.970: INFO: Found 0 stateful pods, waiting for 1
  Apr 27 13:46:23.974: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will not halt with unhealthy stateful pod @ 04/27/24 13:46:23.974
  Apr 27 13:46:23.979: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-3022 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 13:46:24.081: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 13:46:24.081: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 13:46:24.081: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 27 13:46:24.087: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Apr 27 13:46:34.089: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Apr 27 13:46:34.089: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Apr 27 13:46:34.109: INFO: POD   NODE              PHASE    GRACE  CONDITIONS
  Apr 27 13:46:34.109: INFO: ss-0  ip-172-31-37-185  Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:15 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:13 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:24 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:24 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:13 +0000 UTC  }]
  Apr 27 13:46:34.109: INFO: 
  Apr 27 13:46:34.109: INFO: StatefulSet ss has not reached scale 3, at 1
  Apr 27 13:46:35.116: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.994490208s
  Apr 27 13:46:36.122: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.987579976s
  Apr 27 13:46:37.128: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.981886861s
  Apr 27 13:46:38.135: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.975229044s
  Apr 27 13:46:39.140: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.969735315s
  Apr 27 13:46:40.146: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.963226252s
  Apr 27 13:46:41.153: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.957067156s
  Apr 27 13:46:42.159: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.951253764s
  Apr 27 13:46:43.164: INFO: Verifying statefulset ss doesn't scale past 3 for another 945.442344ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-3022 @ 04/27/24 13:46:44.165
  Apr 27 13:46:44.172: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-3022 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 27 13:46:44.278: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 27 13:46:44.278: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 27 13:46:44.278: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 27 13:46:44.278: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-3022 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 27 13:46:44.389: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Apr 27 13:46:44.389: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 27 13:46:44.389: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 27 13:46:44.389: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-3022 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 27 13:46:44.489: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Apr 27 13:46:44.489: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 27 13:46:44.489: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 27 13:46:44.494: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:46:44.494: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 27 13:46:44.494: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Scale down will not halt with unhealthy stateful pod @ 04/27/24 13:46:44.494
  Apr 27 13:46:44.499: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-3022 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 13:46:44.598: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 13:46:44.598: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 13:46:44.598: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 27 13:46:44.598: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-3022 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 13:46:44.695: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 13:46:44.695: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 13:46:44.695: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 27 13:46:44.695: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=statefulset-3022 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 27 13:46:44.791: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 27 13:46:44.791: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 27 13:46:44.791: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 27 13:46:44.791: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Apr 27 13:46:44.795: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  Apr 27 13:46:54.803: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Apr 27 13:46:54.803: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Apr 27 13:46:54.803: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Apr 27 13:46:54.819: INFO: POD   NODE              PHASE    GRACE  CONDITIONS
  Apr 27 13:46:54.819: INFO: ss-0  ip-172-31-37-185  Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:15 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:13 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:45 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:45 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:13 +0000 UTC  }]
  Apr 27 13:46:54.819: INFO: ss-1  ip-172-31-6-153   Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:35 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:34 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:45 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:45 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:34 +0000 UTC  }]
  Apr 27 13:46:54.819: INFO: ss-2  ip-172-31-82-63   Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:34 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:34 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:45 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:45 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:34 +0000 UTC  }]
  Apr 27 13:46:54.819: INFO: 
  Apr 27 13:46:54.819: INFO: StatefulSet ss has not reached scale 0, at 3
  Apr 27 13:46:55.825: INFO: POD   NODE             PHASE      GRACE  CONDITIONS
  Apr 27 13:46:55.825: INFO: ss-2  ip-172-31-82-63  Succeeded  30s    [{PodReadyToStartContainers False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:55 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:34 +0000 UTC PodCompleted } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:45 +0000 UTC PodCompleted } {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:45 +0000 UTC PodCompleted } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:46:34 +0000 UTC  }]
  Apr 27 13:46:55.825: INFO: 
  Apr 27 13:46:55.825: INFO: StatefulSet ss has not reached scale 0, at 1
  Apr 27 13:46:56.831: INFO: Verifying statefulset ss doesn't scale past 0 for another 7.988729417s
  Apr 27 13:46:57.837: INFO: Verifying statefulset ss doesn't scale past 0 for another 6.982698521s
  Apr 27 13:46:58.843: INFO: Verifying statefulset ss doesn't scale past 0 for another 5.976802937s
  Apr 27 13:46:59.849: INFO: Verifying statefulset ss doesn't scale past 0 for another 4.970429394s
  Apr 27 13:47:00.856: INFO: Verifying statefulset ss doesn't scale past 0 for another 3.963669231s
  Apr 27 13:47:01.861: INFO: Verifying statefulset ss doesn't scale past 0 for another 2.957838374s
  Apr 27 13:47:02.868: INFO: Verifying statefulset ss doesn't scale past 0 for another 1.951779641s
  Apr 27 13:47:03.874: INFO: Verifying statefulset ss doesn't scale past 0 for another 945.560949ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-3022 @ 04/27/24 13:47:04.874
  Apr 27 13:47:04.879: INFO: Scaling statefulset ss to 0
  Apr 27 13:47:04.893: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 27 13:47:04.897: INFO: Deleting all statefulset in ns statefulset-3022
  Apr 27 13:47:04.901: INFO: Scaling statefulset ss to 0
  Apr 27 13:47:04.914: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 27 13:47:04.918: INFO: Deleting statefulset ss
  Apr 27 13:47:04.935: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3022" for this suite. @ 04/27/24 13:47:04.94
• [51.019 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1053
  STEP: Creating a kubernetes client @ 04/27/24 13:47:04.948
  Apr 27 13:47:04.948: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:47:04.949
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:47:04.966
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:47:04.969
  STEP: create deployment with httpd image @ 04/27/24 13:47:04.973
  Apr 27 13:47:04.973: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-755 create -f -'
  Apr 27 13:47:05.047: INFO: stderr: ""
  Apr 27 13:47:05.047: INFO: stdout: "deployment.apps/httpd-deployment created\n"
  STEP: verify diff finds difference between live and declared image @ 04/27/24 13:47:05.047
  Apr 27 13:47:05.047: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-755 diff -f -'
  Apr 27 13:47:09.350: INFO: rc: 1
  Apr 27 13:47:09.350: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-755 delete -f -'
  Apr 27 13:47:09.399: INFO: stderr: ""
  Apr 27 13:47:09.399: INFO: stdout: "deployment.apps \"httpd-deployment\" deleted\n"
  Apr 27 13:47:09.399: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-755" for this suite. @ 04/27/24 13:47:09.405
• [4.465 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:146
  STEP: Creating a kubernetes client @ 04/27/24 13:47:09.413
  Apr 27 13:47:09.413: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/27/24 13:47:09.414
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:47:09.429
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:47:09.432
  Apr 27 13:47:09.436: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:47:09.989: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-3046" for this suite. @ 04/27/24 13:47:10.01
• [0.611 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:270
  STEP: Creating a kubernetes client @ 04/27/24 13:47:10.025
  Apr 27 13:47:10.025: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/27/24 13:47:10.025
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:47:10.051
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:47:10.055
  Apr 27 13:47:10.060: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:47:13.155: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-1215" for this suite. @ 04/27/24 13:47:13.161
• [3.146 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:301
  STEP: Creating a kubernetes client @ 04/27/24 13:47:13.171
  Apr 27 13:47:13.171: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:47:13.171
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:47:13.197
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:47:13.204
  STEP: Setting up server cert @ 04/27/24 13:47:13.228
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:47:13.387
  STEP: Deploying the webhook pod @ 04/27/24 13:47:13.398
  STEP: Wait for the deployment to be ready @ 04/27/24 13:47:13.411
  Apr 27 13:47:13.422: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:47:15.437
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:47:15.449
  Apr 27 13:47:16.450: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the crd webhook via the AdmissionRegistration API @ 04/27/24 13:47:16.459
  STEP: Creating a custom resource definition that should be denied by the webhook @ 04/27/24 13:47:16.474
  Apr 27 13:47:16.474: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 13:47:16.543: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3943" for this suite. @ 04/27/24 13:47:16.547
  STEP: Destroying namespace "webhook-markers-3075" for this suite. @ 04/27/24 13:47:16.558
• [3.399 seconds]
------------------------------
S
------------------------------
[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance] [sig-scheduling, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/limit_range.go:253
  STEP: Creating a kubernetes client @ 04/27/24 13:47:16.569
  Apr 27 13:47:16.570: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename limitrange @ 04/27/24 13:47:16.57
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:47:16.587
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:47:16.592
  STEP: Creating LimitRange "e2e-limitrange-wwkgx" in namespace "limitrange-1003" @ 04/27/24 13:47:16.597
  STEP: Creating another limitRange in another namespace @ 04/27/24 13:47:16.602
  Apr 27 13:47:16.619: INFO: Namespace "e2e-limitrange-wwkgx-9805" created
  Apr 27 13:47:16.619: INFO: Creating LimitRange "e2e-limitrange-wwkgx" in namespace "e2e-limitrange-wwkgx-9805"
  STEP: Listing all LimitRanges with label "e2e-test=e2e-limitrange-wwkgx" @ 04/27/24 13:47:16.626
  Apr 27 13:47:16.632: INFO: Found 2 limitRanges
  STEP: Patching LimitRange "e2e-limitrange-wwkgx" in "limitrange-1003" namespace @ 04/27/24 13:47:16.632
  Apr 27 13:47:16.639: INFO: LimitRange "e2e-limitrange-wwkgx" has been patched
  STEP: Delete LimitRange "e2e-limitrange-wwkgx" by Collection with labelSelector: "e2e-limitrange-wwkgx=patched" @ 04/27/24 13:47:16.639
  STEP: Confirm that the limitRange "e2e-limitrange-wwkgx" has been deleted @ 04/27/24 13:47:16.649
  Apr 27 13:47:16.649: INFO: Requesting list of LimitRange to confirm quantity
  Apr 27 13:47:16.653: INFO: Found 0 LimitRange with label "e2e-limitrange-wwkgx=patched"
  Apr 27 13:47:16.653: INFO: LimitRange "e2e-limitrange-wwkgx" has been deleted.
  STEP: Confirm that a single LimitRange still exists with label "e2e-test=e2e-limitrange-wwkgx" @ 04/27/24 13:47:16.653
  Apr 27 13:47:16.657: INFO: Found 1 limitRange
  Apr 27 13:47:16.657: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-1003" for this suite. @ 04/27/24 13:47:16.661
  STEP: Destroying namespace "e2e-limitrange-wwkgx-9805" for this suite. @ 04/27/24 13:47:16.669
• [0.107 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:210
  STEP: Creating a kubernetes client @ 04/27/24 13:47:16.677
  Apr 27 13:47:16.677: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:47:16.677
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:47:16.693
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:47:16.697
  STEP: Setting up server cert @ 04/27/24 13:47:16.724
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:47:16.953
  STEP: Deploying the webhook pod @ 04/27/24 13:47:16.96
  STEP: Wait for the deployment to be ready @ 04/27/24 13:47:16.974
  Apr 27 13:47:16.989: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:47:19.005
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:47:19.017
  Apr 27 13:47:20.017: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 04/27/24 13:47:20.027
  STEP: create a pod @ 04/27/24 13:47:20.044
  STEP: 'kubectl attach' the pod, should be denied by the webhook @ 04/27/24 13:47:22.065
  Apr 27 13:47:22.066: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=webhook-1890 attach --namespace=webhook-1890 to-be-attached-pod -i -c=container1'
  Apr 27 13:47:22.120: INFO: rc: 1
  Apr 27 13:47:22.182: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1890" for this suite. @ 04/27/24 13:47:22.187
  STEP: Destroying namespace "webhook-markers-9277" for this suite. @ 04/27/24 13:47:22.195
• [5.527 seconds]
------------------------------
SSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance] [sig-scheduling, Serial, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/preemption.go:812
  STEP: Creating a kubernetes client @ 04/27/24 13:47:22.204
  Apr 27 13:47:22.204: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-preemption @ 04/27/24 13:47:22.205
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:47:22.219
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:47:22.223
  Apr 27 13:47:22.242: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 27 13:48:22.249: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 04/27/24 13:48:22.254
  Apr 27 13:48:22.254: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-preemption-path @ 04/27/24 13:48:22.254
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:48:22.272
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:48:22.277
  Apr 27 13:48:22.297: INFO: PriorityClass.scheduling.k8s.io "p1" is invalid: value: Forbidden: may not be changed in an update.
  Apr 27 13:48:22.301: INFO: PriorityClass.scheduling.k8s.io "p2" is invalid: value: Forbidden: may not be changed in an update.
  Apr 27 13:48:22.401: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-1856" for this suite. @ 04/27/24 13:48:22.406
  Apr 27 13:48:22.413: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-8648" for this suite. @ 04/27/24 13:48:22.417
• [60.221 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:125
  STEP: Creating a kubernetes client @ 04/27/24 13:48:22.425
  Apr 27 13:48:22.425: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:48:22.426
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:48:22.443
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:48:22.447
  STEP: Creating projection with configMap that has name projected-configmap-test-upd-f1c780f4-4e60-492b-b4f3-dfa64ff050d2 @ 04/27/24 13:48:22.455
  STEP: Creating the pod @ 04/27/24 13:48:22.461
  STEP: Updating configmap projected-configmap-test-upd-f1c780f4-4e60-492b-b4f3-dfa64ff050d2 @ 04/27/24 13:48:24.505
  STEP: waiting to observe update in volume @ 04/27/24 13:48:24.511
  Apr 27 13:49:48.934: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5932" for this suite. @ 04/27/24 13:49:48.939
• [86.522 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:399
  STEP: Creating a kubernetes client @ 04/27/24 13:49:48.948
  Apr 27 13:49:48.948: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:49:48.948
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:49:48.965
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:49:48.969
  STEP: creating all guestbook components @ 04/27/24 13:49:48.973
  Apr 27 13:49:48.973: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-replica
    labels:
      app: agnhost
      role: replica
      tier: backend
  spec:
    ports:
    - port: 6379
    selector:
      app: agnhost
      role: replica
      tier: backend

  Apr 27 13:49:48.973: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 create -f -'
  Apr 27 13:49:49.070: INFO: stderr: ""
  Apr 27 13:49:49.070: INFO: stdout: "service/agnhost-replica created\n"
  Apr 27 13:49:49.070: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-primary
    labels:
      app: agnhost
      role: primary
      tier: backend
  spec:
    ports:
    - port: 6379
      targetPort: 6379
    selector:
      app: agnhost
      role: primary
      tier: backend

  Apr 27 13:49:49.070: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 create -f -'
  Apr 27 13:49:49.159: INFO: stderr: ""
  Apr 27 13:49:49.159: INFO: stdout: "service/agnhost-primary created\n"
  Apr 27 13:49:49.159: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: frontend
    labels:
      app: guestbook
      tier: frontend
  spec:
    # if your cluster supports it, uncomment the following to automatically create
    # an external load-balanced IP for the frontend service.
    # type: LoadBalancer
    ports:
    - port: 80
    selector:
      app: guestbook
      tier: frontend

  Apr 27 13:49:49.159: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 create -f -'
  Apr 27 13:49:49.245: INFO: stderr: ""
  Apr 27 13:49:49.245: INFO: stdout: "service/frontend created\n"
  Apr 27 13:49:49.245: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: frontend
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: guestbook
        tier: frontend
    template:
      metadata:
        labels:
          app: guestbook
          tier: frontend
      spec:
        containers:
        - name: guestbook-frontend
          image: registry.k8s.io/e2e-test-images/agnhost:2.47
          args: [ "guestbook", "--backend-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 80

  Apr 27 13:49:49.245: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 create -f -'
  Apr 27 13:49:49.307: INFO: stderr: ""
  Apr 27 13:49:49.307: INFO: stdout: "deployment.apps/frontend created\n"
  Apr 27 13:49:49.307: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-primary
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agnhost
        role: primary
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: primary
          tier: backend
      spec:
        containers:
        - name: primary
          image: registry.k8s.io/e2e-test-images/agnhost:2.47
          args: [ "guestbook", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Apr 27 13:49:49.307: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 create -f -'
  Apr 27 13:49:49.376: INFO: stderr: ""
  Apr 27 13:49:49.376: INFO: stdout: "deployment.apps/agnhost-primary created\n"
  Apr 27 13:49:49.376: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-replica
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: agnhost
        role: replica
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: replica
          tier: backend
      spec:
        containers:
        - name: replica
          image: registry.k8s.io/e2e-test-images/agnhost:2.47
          args: [ "guestbook", "--replicaof", "agnhost-primary", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Apr 27 13:49:49.376: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 create -f -'
  Apr 27 13:49:49.440: INFO: stderr: ""
  Apr 27 13:49:49.440: INFO: stdout: "deployment.apps/agnhost-replica created\n"
  STEP: validating guestbook app @ 04/27/24 13:49:49.44
  Apr 27 13:49:49.440: INFO: Waiting for all frontend pods to be Running.
  Apr 27 13:49:54.494: INFO: Waiting for frontend to serve content.
  Apr 27 13:49:54.507: INFO: Trying to add a new entry to the guestbook.
  Apr 27 13:49:54.521: INFO: Verifying that added entry can be retrieved.
  STEP: using delete to clean up resources @ 04/27/24 13:49:54.534
  Apr 27 13:49:54.534: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 delete --grace-period=0 --force -f -'
  Apr 27 13:49:54.598: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 27 13:49:54.598: INFO: stdout: "service \"agnhost-replica\" force deleted\n"
  STEP: using delete to clean up resources @ 04/27/24 13:49:54.598
  Apr 27 13:49:54.598: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 delete --grace-period=0 --force -f -'
  Apr 27 13:49:54.670: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 27 13:49:54.670: INFO: stdout: "service \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 04/27/24 13:49:54.67
  Apr 27 13:49:54.670: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 delete --grace-period=0 --force -f -'
  Apr 27 13:49:54.731: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 27 13:49:54.731: INFO: stdout: "service \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 04/27/24 13:49:54.731
  Apr 27 13:49:54.731: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 delete --grace-period=0 --force -f -'
  Apr 27 13:49:54.780: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 27 13:49:54.780: INFO: stdout: "deployment.apps \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 04/27/24 13:49:54.78
  Apr 27 13:49:54.780: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 delete --grace-period=0 --force -f -'
  Apr 27 13:49:54.844: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 27 13:49:54.845: INFO: stdout: "deployment.apps \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 04/27/24 13:49:54.845
  Apr 27 13:49:54.845: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-4859 delete --grace-period=0 --force -f -'
  Apr 27 13:49:54.921: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 27 13:49:54.921: INFO: stdout: "deployment.apps \"agnhost-replica\" force deleted\n"
  Apr 27 13:49:54.921: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4859" for this suite. @ 04/27/24 13:49:54.927
• [5.989 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslice.go:208
  STEP: Creating a kubernetes client @ 04/27/24 13:49:54.937
  Apr 27 13:49:54.937: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename endpointslice @ 04/27/24 13:49:54.937
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:49:54.958
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:49:54.962
  STEP: referencing a single matching pod @ 04/27/24 13:50:00.053
  STEP: referencing matching pods with named port @ 04/27/24 13:50:05.062
  STEP: creating empty Endpoints and EndpointSlices for no matching Pods @ 04/27/24 13:50:10.075
  STEP: recreating EndpointSlices after they've been deleted @ 04/27/24 13:50:15.086
  Apr 27 13:50:15.109: INFO: EndpointSlice for Service endpointslice-9691/example-named-port not found
  Apr 27 13:50:25.119: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-9691" for this suite. @ 04/27/24 13:50:25.124
• [30.196 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support --unix-socket=/path [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1863
  STEP: Creating a kubernetes client @ 04/27/24 13:50:25.133
  Apr 27 13:50:25.133: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:50:25.133
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:50:25.151
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:50:25.154
  STEP: Starting the proxy @ 04/27/24 13:50:25.157
  Apr 27 13:50:25.158: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-9320 proxy --unix-socket=/tmp/kubectl-proxy-unix946173901/test'
  STEP: retrieving proxy /api/ output @ 04/27/24 13:50:25.189
  Apr 27 13:50:25.190: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-9320" for this suite. @ 04/27/24 13:50:25.195
• [0.071 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/init_container.go:335
  STEP: Creating a kubernetes client @ 04/27/24 13:50:25.204
  Apr 27 13:50:25.204: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename init-container @ 04/27/24 13:50:25.205
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:50:25.22
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:50:25.224
  STEP: creating the pod @ 04/27/24 13:50:25.227
  Apr 27 13:50:25.227: INFO: PodSpec: initContainers in spec.initContainers
  Apr 27 13:51:08.909: INFO: init container has failed twice: &v1.Pod{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"pod-init-96fd4021-d94d-4edd-a678-1ba2435a03cc", GenerateName:"", Namespace:"init-container-9755", SelfLink:"", UID:"2c37d8e3-7fba-45ae-a5cf-9f7763f8c93b", ResourceVersion:"39858", Generation:0, CreationTimestamp:time.Date(2024, time.April, 27, 13, 50, 25, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"name":"foo", "time":"227910498"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 13, 50, 25, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0011be648), Subresource:""}, v1.ManagedFieldsEntry{Manager:"kubelet", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 27, 13, 51, 8, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0011be6d8), Subresource:"status"}}}, Spec:v1.PodSpec{Volumes:[]v1.Volume{v1.Volume{Name:"kube-api-access-mksck", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(nil), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(0xc0005f7100), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil), Ephemeral:(*v1.EphemeralVolumeSource)(nil)}}}, InitContainers:[]v1.Container{v1.Container{Name:"init1", Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", Command:[]string{"/bin/false"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-mksck", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}, v1.Container{Name:"init2", Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", Command:[]string{"/bin/true"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-mksck", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, Containers:[]v1.Container{v1.Container{Name:"run1", Image:"registry.k8s.io/pause:3.9", Command:[]string(nil), Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Requests:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-mksck", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, EphemeralContainers:[]v1.EphemeralContainer(nil), RestartPolicy:"Always", TerminationGracePeriodSeconds:(*int64)(0xc0021a4f10), ActiveDeadlineSeconds:(*int64)(nil), DNSPolicy:"ClusterFirst", NodeSelector:map[string]string(nil), ServiceAccountName:"default", DeprecatedServiceAccount:"default", AutomountServiceAccountToken:(*bool)(nil), NodeName:"ip-172-31-37-185", HostNetwork:false, HostPID:false, HostIPC:false, ShareProcessNamespace:(*bool)(nil), SecurityContext:(*v1.PodSecurityContext)(0xc0004a9810), ImagePullSecrets:[]v1.LocalObjectReference(nil), Hostname:"", Subdomain:"", Affinity:(*v1.Affinity)(nil), SchedulerName:"default-scheduler", Tolerations:[]v1.Toleration{v1.Toleration{Key:"node.kubernetes.io/not-ready", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc0021a4fa0)}, v1.Toleration{Key:"node.kubernetes.io/unreachable", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc0021a4fc0)}}, HostAliases:[]v1.HostAlias(nil), PriorityClassName:"", Priority:(*int32)(0xc0021a4fc8), DNSConfig:(*v1.PodDNSConfig)(nil), ReadinessGates:[]v1.PodReadinessGate(nil), RuntimeClassName:(*string)(nil), EnableServiceLinks:(*bool)(0xc0021a4fcc), PreemptionPolicy:(*v1.PreemptionPolicy)(0xc0010e84b0), Overhead:v1.ResourceList(nil), TopologySpreadConstraints:[]v1.TopologySpreadConstraint(nil), SetHostnameAsFQDN:(*bool)(nil), OS:(*v1.PodOS)(nil), HostUsers:(*bool)(nil), SchedulingGates:[]v1.PodSchedulingGate(nil), ResourceClaims:[]v1.PodResourceClaim(nil)}, Status:v1.PodStatus{Phase:"Pending", Conditions:[]v1.PodCondition{v1.PodCondition{Type:"PodReadyToStartContainers", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.April, 27, 13, 50, 26, 0, time.Local), Reason:"", Message:""}, v1.PodCondition{Type:"Initialized", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.April, 27, 13, 50, 25, 0, time.Local), Reason:"ContainersNotInitialized", Message:"containers with incomplete status: [init1 init2]"}, v1.PodCondition{Type:"Ready", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.April, 27, 13, 50, 25, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"ContainersReady", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.April, 27, 13, 50, 25, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"PodScheduled", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.April, 27, 13, 50, 25, 0, time.Local), Reason:"", Message:""}}, Message:"", Reason:"", NominatedNodeName:"", HostIP:"172.31.37.185", HostIPs:[]v1.HostIP{v1.HostIP{IP:"172.31.37.185"}}, PodIP:"192.168.69.178", PodIPs:[]v1.PodIP{v1.PodIP{IP:"192.168.69.178"}}, StartTime:time.Date(2024, time.April, 27, 13, 50, 25, 0, time.Local), InitContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"init1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc0004a98f0)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc0004a9960)}, Ready:false, RestartCount:3, Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", ImageID:"registry.k8s.io/e2e-test-images/busybox@sha256:a9155b13325b2abef48e71de77bb8ac015412a566829f621d06bfae5c699b1b9", ContainerID:"containerd://e079b8d5a1487b66b4f22e6a60d637d7d100acc410c2a7debd518a540b522a79", Started:(*bool)(0xc0021a506f), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}, v1.ContainerStatus{Name:"init2", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc0005f71c0), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", ImageID:"", ContainerID:"", Started:(*bool)(0xc0021a5075), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, ContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"run1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc0005f7140), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/pause:3.9", ImageID:"", ContainerID:"", Started:(*bool)(0xc0021a5044), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, QOSClass:"Burstable", EphemeralContainerStatuses:[]v1.ContainerStatus(nil), Resize:"", ResourceClaimStatuses:[]v1.PodResourceClaimStatus(nil)}}
  Apr 27 13:51:08.909: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-9755" for this suite. @ 04/27/24 13:51:08.914
• [43.720 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:332
  STEP: Creating a kubernetes client @ 04/27/24 13:51:08.924
  Apr 27 13:51:08.924: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 13:51:08.925
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:51:08.941
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:51:08.947
  STEP: Setting up server cert @ 04/27/24 13:51:08.971
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 13:51:09.101
  STEP: Deploying the webhook pod @ 04/27/24 13:51:09.111
  STEP: Wait for the deployment to be ready @ 04/27/24 13:51:09.125
  Apr 27 13:51:09.135: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/27/24 13:51:11.151
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 13:51:11.163
  Apr 27 13:51:12.163: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Apr 27 13:51:12.172: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-4140-crds.webhook.example.com via the AdmissionRegistration API @ 04/27/24 13:51:12.687
  STEP: Creating a custom resource that should be mutated by the webhook @ 04/27/24 13:51:12.703
  Apr 27 13:51:15.314: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9840" for this suite. @ 04/27/24 13:51:15.32
  STEP: Destroying namespace "webhook-markers-1451" for this suite. @ 04/27/24 13:51:15.329
• [6.413 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:108
  STEP: Creating a kubernetes client @ 04/27/24 13:51:15.337
  Apr 27 13:51:15.337: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename disruption @ 04/27/24 13:51:15.338
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:51:15.354
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:51:15.358
  STEP: creating the pdb @ 04/27/24 13:51:15.362
  STEP: Waiting for the pdb to be processed @ 04/27/24 13:51:15.368
  STEP: updating the pdb @ 04/27/24 13:51:17.373
  STEP: Waiting for the pdb to be processed @ 04/27/24 13:51:17.386
  STEP: patching the pdb @ 04/27/24 13:51:19.392
  STEP: Waiting for the pdb to be processed @ 04/27/24 13:51:19.403
  STEP: Waiting for the pdb to be deleted @ 04/27/24 13:51:21.415
  Apr 27 13:51:21.419: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-4002" for this suite. @ 04/27/24 13:51:21.423
• [6.094 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance] [sig-apps, Serial, Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:305
  STEP: Creating a kubernetes client @ 04/27/24 13:51:21.432
  Apr 27 13:51:21.432: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename daemonsets @ 04/27/24 13:51:21.432
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:51:21.456
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:51:21.46
  STEP: Creating a simple DaemonSet "daemon-set" @ 04/27/24 13:51:21.486
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/27/24 13:51:21.492
  Apr 27 13:51:21.496: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:51:21.496: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:51:21.501: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:51:21.501: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:51:22.498: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:51:22.498: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:51:22.503: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 27 13:51:22.503: INFO: Node ip-172-31-37-185 is running 0 daemon pod, expected 1
  Apr 27 13:51:23.497: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:51:23.497: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:51:23.502: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Apr 27 13:51:23.502: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Set a daemon pod's phase to 'Failed', check that the daemon pod is revived. @ 04/27/24 13:51:23.506
  Apr 27 13:51:23.525: INFO: DaemonSet pods can't tolerate node ip-172-31-20-83 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:51:23.525: INFO: DaemonSet pods can't tolerate node ip-172-31-93-110 with taints [{Key:node-role.kubernetes.io/control-plane Value: Effect:NoSchedule TimeAdded:<nil>}], skip checking this node
  Apr 27 13:51:23.533: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Apr 27 13:51:23.533: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Wait for the failed daemon pod to be completely deleted. @ 04/27/24 13:51:23.533
  STEP: Deleting DaemonSet "daemon-set" @ 04/27/24 13:51:23.545
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-6007, will wait for the garbage collector to delete the pods @ 04/27/24 13:51:23.545
  Apr 27 13:51:23.618: INFO: Deleting DaemonSet.extensions daemon-set took: 15.71754ms
  Apr 27 13:51:23.718: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.113391ms
  Apr 27 13:51:25.023: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 27 13:51:25.023: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 27 13:51:25.027: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"40110"},"items":null}

  Apr 27 13:51:25.031: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"40110"},"items":null}

  Apr 27 13:51:25.049: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-6007" for this suite. @ 04/27/24 13:51:25.053
• [3.630 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/security_context.go:488
  STEP: Creating a kubernetes client @ 04/27/24 13:51:25.062
  Apr 27 13:51:25.062: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename security-context-test @ 04/27/24 13:51:25.062
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:51:25.076
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:51:25.081
  Apr 27 13:51:29.113: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-6861" for this suite. @ 04/27/24 13:51:29.118
• [4.066 seconds]
------------------------------
[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1399
  STEP: Creating a kubernetes client @ 04/27/24 13:51:29.128
  Apr 27 13:51:29.128: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:51:29.128
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:51:29.144
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:51:29.148
  Apr 27 13:51:29.152: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3521 create -f -'
  Apr 27 13:51:29.239: INFO: stderr: ""
  Apr 27 13:51:29.239: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  Apr 27 13:51:29.239: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3521 create -f -'
  Apr 27 13:51:29.329: INFO: stderr: ""
  Apr 27 13:51:29.329: INFO: stdout: "service/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 04/27/24 13:51:29.329
  Apr 27 13:51:30.334: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 27 13:51:30.334: INFO: Found 0 / 1
  Apr 27 13:51:31.335: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 27 13:51:31.335: INFO: Found 1 / 1
  Apr 27 13:51:31.335: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Apr 27 13:51:31.339: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 27 13:51:31.339: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Apr 27 13:51:31.339: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3521 describe pod agnhost-primary-p66rc'
  Apr 27 13:51:31.395: INFO: stderr: ""
  Apr 27 13:51:31.395: INFO: stdout: "Name:             agnhost-primary-p66rc\nNamespace:        kubectl-3521\nPriority:         0\nService Account:  default\nNode:             ip-172-31-82-63/172.31.82.63\nStart Time:       Sat, 27 Apr 2024 13:51:29 +0000\nLabels:           app=agnhost\n                  role=primary\nAnnotations:      <none>\nStatus:           Running\nIP:               192.168.172.237\nIPs:\n  IP:           192.168.172.237\nControlled By:  ReplicationController/agnhost-primary\nContainers:\n  agnhost-primary:\n    Container ID:   containerd://b855b4518e97da8d249e993b4d51669a6341c299b2698cff990d71334f78ebac\n    Image:          registry.k8s.io/e2e-test-images/agnhost:2.47\n    Image ID:       registry.k8s.io/e2e-test-images/agnhost@sha256:cc249acbd34692826b2b335335615e060fdb3c0bca4954507aa3a1d1194de253\n    Port:           6379/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Sat, 27 Apr 2024 13:51:29 +0000\n    Ready:          True\n    Restart Count:  0\n    Environment:    <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-rc2b2 (ro)\nConditions:\n  Type                        Status\n  PodReadyToStartContainers   True \n  Initialized                 True \n  Ready                       True \n  ContainersReady             True \n  PodScheduled                True \nVolumes:\n  kube-api-access-rc2b2:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       <nil>\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              <none>\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  2s    default-scheduler  Successfully assigned kubectl-3521/agnhost-primary-p66rc to ip-172-31-82-63\n  Normal  Pulled     2s    kubelet            Container image \"registry.k8s.io/e2e-test-images/agnhost:2.47\" already present on machine\n  Normal  Created    2s    kubelet            Created container agnhost-primary\n  Normal  Started    2s    kubelet            Started container agnhost-primary\n"
  Apr 27 13:51:31.395: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3521 describe rc agnhost-primary'
  Apr 27 13:51:31.452: INFO: stderr: ""
  Apr 27 13:51:31.452: INFO: stdout: "Name:         agnhost-primary\nNamespace:    kubectl-3521\nSelector:     app=agnhost,role=primary\nLabels:       app=agnhost\n              role=primary\nAnnotations:  <none>\nReplicas:     1 current / 1 desired\nPods Status:  1 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  app=agnhost\n           role=primary\n  Containers:\n   agnhost-primary:\n    Image:        registry.k8s.io/e2e-test-images/agnhost:2.47\n    Port:         6379/TCP\n    Host Port:    0/TCP\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nEvents:\n  Type    Reason            Age   From                    Message\n  ----    ------            ----  ----                    -------\n  Normal  SuccessfulCreate  2s    replication-controller  Created pod: agnhost-primary-p66rc\n"
  Apr 27 13:51:31.452: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3521 describe service agnhost-primary'
  Apr 27 13:51:31.511: INFO: stderr: ""
  Apr 27 13:51:31.511: INFO: stdout: "Name:              agnhost-primary\nNamespace:         kubectl-3521\nLabels:            app=agnhost\n                   role=primary\nAnnotations:       <none>\nSelector:          app=agnhost,role=primary\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.152.183.147\nIPs:               10.152.183.147\nPort:              <unset>  6379/TCP\nTargetPort:        agnhost-server/TCP\nEndpoints:         192.168.172.237:6379\nSession Affinity:  None\nEvents:            <none>\n"
  Apr 27 13:51:31.516: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3521 describe node ip-172-31-20-83'
  Apr 27 13:51:31.584: INFO: stderr: ""
  Apr 27 13:51:31.584: INFO: stdout: "Name:               ip-172-31-20-83\nRoles:              control-plane\nLabels:             beta.kubernetes.io/arch=amd64\n                    beta.kubernetes.io/os=linux\n                    juju-application=kubernetes-control-plane\n                    juju-charm=kubernetes-control-plane\n                    juju.io/cloud=ec2\n                    kubernetes.io/arch=amd64\n                    kubernetes.io/hostname=ip-172-31-20-83\n                    kubernetes.io/os=linux\n                    node-role.kubernetes.io/control-plane=\nAnnotations:        node.alpha.kubernetes.io/ttl: 0\n                    volumes.kubernetes.io/controller-managed-attach-detach: true\nCreationTimestamp:  Sat, 27 Apr 2024 12:00:52 +0000\nTaints:             node-role.kubernetes.io/control-plane:NoSchedule\nUnschedulable:      false\nLease:\n  HolderIdentity:  ip-172-31-20-83\n  AcquireTime:     <unset>\n  RenewTime:       Sat, 27 Apr 2024 13:51:22 +0000\nConditions:\n  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message\n  ----                 ------  -----------------                 ------------------                ------                       -------\n  NetworkUnavailable   False   Sat, 27 Apr 2024 12:18:50 +0000   Sat, 27 Apr 2024 12:18:50 +0000   CalicoIsUp                   Calico is running on this node\n  MemoryPressure       False   Sat, 27 Apr 2024 13:48:22 +0000   Sat, 27 Apr 2024 12:00:52 +0000   KubeletHasSufficientMemory   kubelet has sufficient memory available\n  DiskPressure         False   Sat, 27 Apr 2024 13:48:22 +0000   Sat, 27 Apr 2024 12:00:52 +0000   KubeletHasNoDiskPressure     kubelet has no disk pressure\n  PIDPressure          False   Sat, 27 Apr 2024 13:48:22 +0000   Sat, 27 Apr 2024 12:00:52 +0000   KubeletHasSufficientPID      kubelet has sufficient PID available\n  Ready                True    Sat, 27 Apr 2024 13:48:22 +0000   Sat, 27 Apr 2024 12:09:35 +0000   KubeletReady                 kubelet is posting ready status. AppArmor enabled\nAddresses:\n  InternalIP:  172.31.20.83\n  Hostname:    ip-172-31-20-83\nCapacity:\n  cpu:                2\n  ephemeral-storage:  16069568Ki\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             7958136Ki\n  pods:               110\nAllocatable:\n  cpu:                2\n  ephemeral-storage:  14809713845\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             7855736Ki\n  pods:               110\nSystem Info:\n  Machine ID:                 ec2bb4a13ccebd53e1c22839eefa5162\n  System UUID:                ec2bb4a1-3cce-bd53-e1c2-2839eefa5162\n  Boot ID:                    e03d57b7-d9b3-4c76-9a7e-864d73d745f8\n  Kernel Version:             6.5.0-1018-aws\n  OS Image:                   Ubuntu 22.04.4 LTS\n  Operating System:           linux\n  Architecture:               amd64\n  Container Runtime Version:  containerd://1.6.8\n  Kubelet Version:            v1.29.4\n  Kube-Proxy Version:         v1.29.4\nNon-terminated Pods:          (3 in total)\n  Namespace                   Name                                                       CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age\n  ---------                   ----                                                       ------------  ----------  ---------------  -------------  ---\n  kube-system                 calico-kube-controllers-798d58c94b-45nr6                   0 (0%)        0 (0%)      0 (0%)           0 (0%)         93m\n  kube-system                 calico-node-dm5jf                                          250m (12%)    0 (0%)      0 (0%)           0 (0%)         92m\n  sonobuoy                    sonobuoy-systemd-logs-daemon-set-0f56172b79d0490e-76zck    0 (0%)        0 (0%)      0 (0%)           0 (0%)         90m\nAllocated resources:\n  (Total limits may be over 100 percent, i.e., overcommitted.)\n  Resource           Requests    Limits\n  --------           --------    ------\n  cpu                250m (12%)  0 (0%)\n  memory             0 (0%)      0 (0%)\n  ephemeral-storage  0 (0%)      0 (0%)\n  hugepages-1Gi      0 (0%)      0 (0%)\n  hugepages-2Mi      0 (0%)      0 (0%)\nEvents:              <none>\n"
  Apr 27 13:51:31.584: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3521 describe namespace kubectl-3521'
  Apr 27 13:51:31.639: INFO: stderr: ""
  Apr 27 13:51:31.639: INFO: stdout: "Name:         kubectl-3521\nLabels:       e2e-framework=kubectl\n              e2e-run=55e1d623-ab7b-48bc-8bfa-d55d14f8ee00\n              kubernetes.io/metadata.name=kubectl-3521\n              pod-security.kubernetes.io/audit=baseline\n              pod-security.kubernetes.io/enforce=baseline\n              pod-security.kubernetes.io/warn=baseline\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nNo LimitRange resource.\n"
  Apr 27 13:51:31.639: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3521" for this suite. @ 04/27/24 13:51:31.644
• [2.525 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:195
  STEP: Creating a kubernetes client @ 04/27/24 13:51:31.653
  Apr 27 13:51:31.653: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:51:31.653
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:51:31.669
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:51:31.673
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 13:51:31.677
  STEP: Saw pod success @ 04/27/24 13:51:35.709
  Apr 27 13:51:35.714: INFO: Trying to get logs from node ip-172-31-37-185 pod downwardapi-volume-b508514e-e43a-4df3-be3b-340e51a344c9 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 13:51:35.735
  Apr 27 13:51:35.755: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1394" for this suite. @ 04/27/24 13:51:35.76
• [4.116 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance] [sig-auth, Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:531
  STEP: Creating a kubernetes client @ 04/27/24 13:51:35.769
  Apr 27 13:51:35.769: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename svcaccounts @ 04/27/24 13:51:35.77
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:51:35.786
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:51:35.79
  Apr 27 13:51:35.808: INFO: created pod
  STEP: Saw pod success @ 04/27/24 13:51:39.829
  Apr 27 13:52:09.830: INFO: polling logs
  Apr 27 13:52:09.839: INFO: Pod logs: 
  I0427 13:51:36.380910       1 log.go:245] OK: Got token
  I0427 13:51:36.381202       1 log.go:245] validating with in-cluster discovery
  I0427 13:51:36.381414       1 log.go:245] OK: got issuer https://kubernetes.default.svc
  I0427 13:51:36.381434       1 log.go:245] Full, not-validated claims: 
  openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-6557:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc000454308), NotBefore:(*jwt.NumericDate)(0xc0004543e8), IssuedAt:(*jwt.NumericDate)(0xc000454318), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-6557", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"0d91ec53-ac7e-4aca-8c6b-c9253448ed78"}}}
  I0427 13:51:36.389650       1 log.go:245] OK: Constructed OIDC provider for issuer https://kubernetes.default.svc
  I0427 13:51:36.394877       1 log.go:245] OK: Validated signature on JWT
  I0427 13:51:36.395021       1 log.go:245] OK: Got valid claims from token!
  I0427 13:51:36.395040       1 log.go:245] Full, validated claims: 
  &openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-6557:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc0004551c0), NotBefore:(*jwt.NumericDate)(0xc0004551e8), IssuedAt:(*jwt.NumericDate)(0xc0004551c8), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-6557", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"0d91ec53-ac7e-4aca-8c6b-c9253448ed78"}}}

  Apr 27 13:52:09.840: INFO: completed pod
  Apr 27 13:52:09.849: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-6557" for this suite. @ 04/27/24 13:52:09.853
• [34.093 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:92
  STEP: Creating a kubernetes client @ 04/27/24 13:52:09.865
  Apr 27 13:52:09.865: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:52:09.866
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:52:09.883
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:52:09.887
  STEP: Creating a pod to test downward api env vars @ 04/27/24 13:52:09.89
  STEP: Saw pod success @ 04/27/24 13:52:13.916
  Apr 27 13:52:13.921: INFO: Trying to get logs from node ip-172-31-82-63 pod downward-api-a648ceca-7081-4dc4-91fc-e28d02a5504c container dapi-container: <nil>
  STEP: delete the pod @ 04/27/24 13:52:13.936
  Apr 27 13:52:13.957: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4584" for this suite. @ 04/27/24 13:52:13.962
• [4.106 seconds]
------------------------------
SSS
------------------------------
[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:269
  STEP: Creating a kubernetes client @ 04/27/24 13:52:13.971
  Apr 27 13:52:13.971: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 13:52:13.972
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:52:13.995
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:52:14.001
  STEP: Creating a pod to test downward api env vars @ 04/27/24 13:52:14.006
  STEP: Saw pod success @ 04/27/24 13:52:18.042
  Apr 27 13:52:18.046: INFO: Trying to get logs from node ip-172-31-82-63 pod downward-api-25bf76f6-fd74-4139-8d58-2bfbe7bdf234 container dapi-container: <nil>
  STEP: delete the pod @ 04/27/24 13:52:18.054
  Apr 27 13:52:18.076: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7715" for this suite. @ 04/27/24 13:52:18.08
• [4.117 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/empty_dir_wrapper.go:67
  STEP: Creating a kubernetes client @ 04/27/24 13:52:18.089
  Apr 27 13:52:18.089: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir-wrapper @ 04/27/24 13:52:18.089
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:52:18.108
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:52:18.113
  STEP: Cleaning up the secret @ 04/27/24 13:52:20.154
  STEP: Cleaning up the configmap @ 04/27/24 13:52:20.161
  STEP: Cleaning up the pod @ 04/27/24 13:52:20.17
  Apr 27 13:52:20.187: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-wrapper-5903" for this suite. @ 04/27/24 13:52:20.191
• [2.110 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:89
  STEP: Creating a kubernetes client @ 04/27/24 13:52:20.199
  Apr 27 13:52:20.199: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 13:52:20.2
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:52:20.216
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:52:20.22
  STEP: Creating secret with name secret-test-map-7aa7988f-e581-45bb-a0ac-16e0dd9944c6 @ 04/27/24 13:52:20.224
  STEP: Creating a pod to test consume secrets @ 04/27/24 13:52:20.231
  STEP: Saw pod success @ 04/27/24 13:52:24.258
  Apr 27 13:52:24.262: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-secrets-dbc475bb-9fa8-45d7-93ea-6cea59579551 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 13:52:24.27
  Apr 27 13:52:24.293: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5898" for this suite. @ 04/27/24 13:52:24.297
• [4.106 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] PreStop should call prestop when killing a pod [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/node/pre_stop.go:169
  STEP: Creating a kubernetes client @ 04/27/24 13:52:24.306
  Apr 27 13:52:24.306: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename prestop @ 04/27/24 13:52:24.306
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:52:24.323
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:52:24.326
  STEP: Creating server pod server in namespace prestop-2471 @ 04/27/24 13:52:24.33
  STEP: Waiting for pods to come up. @ 04/27/24 13:52:24.34
  STEP: Creating tester pod tester in namespace prestop-2471 @ 04/27/24 13:52:26.356
  STEP: Deleting pre-stop pod @ 04/27/24 13:52:28.376
  Apr 27 13:52:33.391: INFO: Saw: {
  	"Hostname": "server",
  	"Sent": null,
  	"Received": {
  		"prestop": 1
  	},
  	"Errors": null,
  	"Log": [
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up.",
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up."
  	],
  	"StillContactingPeers": true
  }
  STEP: Deleting the server pod @ 04/27/24 13:52:33.391
  Apr 27 13:52:33.407: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "prestop-2471" for this suite. @ 04/27/24 13:52:33.412
• [9.116 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:241
  STEP: Creating a kubernetes client @ 04/27/24 13:52:33.422
  Apr 27 13:52:33.422: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 13:52:33.423
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:52:33.439
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:52:33.443
  STEP: Creating configMap with name cm-test-opt-del-1f11055a-8ee8-4e2a-900e-af9847b17f34 @ 04/27/24 13:52:33.451
  STEP: Creating configMap with name cm-test-opt-upd-03508a7a-8483-425b-be3e-39fb5468845d @ 04/27/24 13:52:33.457
  STEP: Creating the pod @ 04/27/24 13:52:33.462
  STEP: Deleting configmap cm-test-opt-del-1f11055a-8ee8-4e2a-900e-af9847b17f34 @ 04/27/24 13:52:35.514
  STEP: Updating configmap cm-test-opt-upd-03508a7a-8483-425b-be3e-39fb5468845d @ 04/27/24 13:52:35.521
  STEP: Creating configMap with name cm-test-opt-create-a7b14527-0f12-4f3b-9f68-22621ff8c84f @ 04/27/24 13:52:35.527
  STEP: waiting to observe update in volume @ 04/27/24 13:52:35.534
  Apr 27 13:53:37.868: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-9351" for this suite. @ 04/27/24 13:53:37.873
• [64.460 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should get a host IP [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:205
  STEP: Creating a kubernetes client @ 04/27/24 13:53:37.882
  Apr 27 13:53:37.882: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 13:53:37.883
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:53:37.902
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:53:37.906
  STEP: creating pod @ 04/27/24 13:53:37.91
  Apr 27 13:53:39.949: INFO: Pod pod-hostip-343529a0-a933-4557-a9d3-8664f4a70a86 has hostIP: 172.31.37.185
  Apr 27 13:53:39.949: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6770" for this suite. @ 04/27/24 13:53:39.954
• [2.080 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:64
  STEP: Creating a kubernetes client @ 04/27/24 13:53:39.963
  Apr 27 13:53:39.963: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename field-validation @ 04/27/24 13:53:39.963
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:53:39.979
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:53:39.983
  STEP: apply creating a deployment @ 04/27/24 13:53:39.987
  Apr 27 13:53:40.005: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-4826" for this suite. @ 04/27/24 13:53:40.009
• [0.055 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:117
  STEP: Creating a kubernetes client @ 04/27/24 13:53:40.018
  Apr 27 13:53:40.018: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename field-validation @ 04/27/24 13:53:40.018
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:53:40.035
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:53:40.042
  STEP: apply creating a deployment @ 04/27/24 13:53:40.045
  Apr 27 13:53:40.063: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-4441" for this suite. @ 04/27/24 13:53:40.067
• [0.058 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:110
  STEP: Creating a kubernetes client @ 04/27/24 13:53:40.076
  Apr 27 13:53:40.076: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 13:53:40.077
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:53:40.095
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:53:40.099
  STEP: Creating configMap with name configmap-test-volume-map-3ca4339a-84c2-4929-8096-12219748a658 @ 04/27/24 13:53:40.102
  STEP: Creating a pod to test consume configMaps @ 04/27/24 13:53:40.108
  STEP: Saw pod success @ 04/27/24 13:53:44.138
  Apr 27 13:53:44.143: INFO: Trying to get logs from node ip-172-31-37-185 pod pod-configmaps-9e7c52d0-f92a-4278-9aa4-1d2796c60e3b container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 13:53:44.156
  Apr 27 13:53:44.175: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-2217" for this suite. @ 04/27/24 13:53:44.18
• [4.113 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:69
  STEP: Creating a kubernetes client @ 04/27/24 13:53:44.189
  Apr 27 13:53:44.189: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename subpath @ 04/27/24 13:53:44.19
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:53:44.209
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:53:44.212
  STEP: Setting up data @ 04/27/24 13:53:44.216
  STEP: Creating pod pod-subpath-test-configmap-nkgc @ 04/27/24 13:53:44.227
  STEP: Creating a pod to test atomic-volume-subpath @ 04/27/24 13:53:44.227
  STEP: Saw pod success @ 04/27/24 13:54:08.309
  Apr 27 13:54:08.314: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-subpath-test-configmap-nkgc container test-container-subpath-configmap-nkgc: <nil>
  STEP: delete the pod @ 04/27/24 13:54:08.323
  STEP: Deleting pod pod-subpath-test-configmap-nkgc @ 04/27/24 13:54:08.344
  Apr 27 13:54:08.344: INFO: Deleting pod "pod-subpath-test-configmap-nkgc" in namespace "subpath-5331"
  Apr 27 13:54:08.348: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-5331" for this suite. @ 04/27/24 13:54:08.353
• [24.172 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance] [sig-storage, Serial, Conformance]
k8s.io/kubernetes/test/e2e/storage/empty_dir_wrapper.go:188
  STEP: Creating a kubernetes client @ 04/27/24 13:54:08.362
  Apr 27 13:54:08.362: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir-wrapper @ 04/27/24 13:54:08.362
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:54:08.378
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:54:08.383
  STEP: Creating 50 configmaps @ 04/27/24 13:54:08.386
  STEP: Creating RC which spawns configmap-volume pods @ 04/27/24 13:54:08.651
  Apr 27 13:54:08.764: INFO: Pod name wrapped-volume-race-18f02ea9-9a36-4021-a57b-8423964701e3: Found 3 pods out of 5
  Apr 27 13:54:13.771: INFO: Pod name wrapped-volume-race-18f02ea9-9a36-4021-a57b-8423964701e3: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 04/27/24 13:54:13.771
  STEP: Creating RC which spawns configmap-volume pods @ 04/27/24 13:54:13.798
  Apr 27 13:54:13.813: INFO: Pod name wrapped-volume-race-ebab2e55-d3d1-4789-a3ab-ee1171b10d25: Found 0 pods out of 5
  Apr 27 13:54:18.824: INFO: Pod name wrapped-volume-race-ebab2e55-d3d1-4789-a3ab-ee1171b10d25: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 04/27/24 13:54:18.824
  STEP: Creating RC which spawns configmap-volume pods @ 04/27/24 13:54:18.852
  Apr 27 13:54:18.867: INFO: Pod name wrapped-volume-race-4e65cbf9-2a10-4481-9ba7-1089e114c97e: Found 0 pods out of 5
  Apr 27 13:54:23.877: INFO: Pod name wrapped-volume-race-4e65cbf9-2a10-4481-9ba7-1089e114c97e: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 04/27/24 13:54:23.877
  STEP: deleting ReplicationController wrapped-volume-race-4e65cbf9-2a10-4481-9ba7-1089e114c97e in namespace emptydir-wrapper-521, will wait for the garbage collector to delete the pods @ 04/27/24 13:54:23.9
  Apr 27 13:54:23.963: INFO: Deleting ReplicationController wrapped-volume-race-4e65cbf9-2a10-4481-9ba7-1089e114c97e took: 8.726389ms
  Apr 27 13:54:24.063: INFO: Terminating ReplicationController wrapped-volume-race-4e65cbf9-2a10-4481-9ba7-1089e114c97e pods took: 100.272304ms
  STEP: deleting ReplicationController wrapped-volume-race-ebab2e55-d3d1-4789-a3ab-ee1171b10d25 in namespace emptydir-wrapper-521, will wait for the garbage collector to delete the pods @ 04/27/24 13:54:25.564
  Apr 27 13:54:25.631: INFO: Deleting ReplicationController wrapped-volume-race-ebab2e55-d3d1-4789-a3ab-ee1171b10d25 took: 12.09741ms
  Apr 27 13:54:25.732: INFO: Terminating ReplicationController wrapped-volume-race-ebab2e55-d3d1-4789-a3ab-ee1171b10d25 pods took: 100.989391ms
  STEP: deleting ReplicationController wrapped-volume-race-18f02ea9-9a36-4021-a57b-8423964701e3 in namespace emptydir-wrapper-521, will wait for the garbage collector to delete the pods @ 04/27/24 13:54:27.033
  Apr 27 13:54:27.101: INFO: Deleting ReplicationController wrapped-volume-race-18f02ea9-9a36-4021-a57b-8423964701e3 took: 12.445486ms
  Apr 27 13:54:27.202: INFO: Terminating ReplicationController wrapped-volume-race-18f02ea9-9a36-4021-a57b-8423964701e3 pods took: 100.926576ms
  STEP: Cleaning up the configMaps @ 04/27/24 13:54:28.303
  Apr 27 13:54:28.675: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-wrapper-521" for this suite. @ 04/27/24 13:54:28.679
• [20.326 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:168
  STEP: Creating a kubernetes client @ 04/27/24 13:54:28.688
  Apr 27 13:54:28.688: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 13:54:28.689
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:54:28.706
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:54:28.709
  STEP: Creating pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325 @ 04/27/24 13:54:28.713
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/27/24 13:54:30.737
  Apr 27 13:54:30.741: INFO: Initial restart count of pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 is 0
  Apr 27 13:54:30.746: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:32.753: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:34.759: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:36.765: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:38.770: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:40.776: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:42.782: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:44.788: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:46.794: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:48.800: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:50.806: INFO: Get pod liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 in namespace container-probe-3325
  Apr 27 13:54:50.806: INFO: Restart count of pod container-probe-3325/liveness-a045f0bf-a418-485b-b517-5089bbe2b6f2 is now 1 (20.064786445s elapsed)
  STEP: deleting the pod @ 04/27/24 13:54:50.806
  Apr 27 13:54:50.822: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-3325" for this suite. @ 04/27/24 13:54:50.827
• [22.147 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should delete old replica sets [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:122
  STEP: Creating a kubernetes client @ 04/27/24 13:54:50.835
  Apr 27 13:54:50.835: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename deployment @ 04/27/24 13:54:50.836
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:54:50.853
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:54:50.856
  Apr 27 13:54:50.869: INFO: Pod name cleanup-pod: Found 0 pods out of 1
  Apr 27 13:54:55.873: INFO: Pod name cleanup-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/27/24 13:54:55.873
  Apr 27 13:54:55.873: INFO: Creating deployment test-cleanup-deployment
  STEP: Waiting for deployment test-cleanup-deployment history to be cleaned up @ 04/27/24 13:54:55.886
  Apr 27 13:54:55.900: INFO: Deployment "test-cleanup-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7681",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "9036f17f-fbb1-47a4-9d65-286df4ea58c8",
      ResourceVersion: (string) (len=5) "41695",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822895,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822895,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(0),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 0,
      Replicas: (int32) 0,
      UpdatedReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) <nil>,
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 27 13:54:55.907: INFO: New ReplicaSet "test-cleanup-deployment-7bc75bbdf6" of Deployment "test-cleanup-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-cleanup-deployment-7bc75bbdf6",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7681",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c2dee96b-d2dd-4294-bc8a-337047ab2380",
      ResourceVersion: (string) (len=5) "41698",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822895,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "7bc75bbdf6"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=23) "test-cleanup-deployment",
          UID: (types.UID) (len=36) "9036f17f-fbb1-47a4-9d65-286df4ea58c8",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822895,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 39 30 33 36 66 31  37 66 2d 66 62 62 31 2d  |\"9036f17f-fbb1-|
              00000120  34 37 61 34 2d 39 64 36  35 2d 32 38 36 64 66 34  |47a4-9d65-286df4|
              00000130  65 61 35 38 63 38 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |ea58c8\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "7bc75bbdf6"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "7bc75bbdf6"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 0,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:54:55.907: INFO: All old ReplicaSets of Deployment "test-cleanup-deployment":
  Apr 27 13:54:55.908: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7681",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5488f880-ac26-42d8-ab62-129d44290dfd",
      ResourceVersion: (string) (len=5) "41697",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822890,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=23) "test-cleanup-deployment",
          UID: (types.UID) (len=36) "9036f17f-fbb1-47a4-9d65-286df4ea58c8",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822890,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=483) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000050  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000060  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000070  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000080  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000090  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              000000a0  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000b0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000c0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000d0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000f0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000100  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000110  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000120  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000130  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000140  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000160  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000170  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000180  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000190  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000001a0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001b0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001c0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001d0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001e0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822891,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822895,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=103) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000020  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              00000030  22 75 69 64 5c 22 3a 5c  22 39 30 33 36 66 31 37  |"uid\":\"9036f17|
              00000040  66 2d 66 62 62 31 2d 34  37 61 34 2d 39 64 36 35  |f-fbb1-47a4-9d65|
              00000050  2d 32 38 36 64 66 34 65  61 35 38 63 38 5c 22 7d  |-286df4ea58c8\"}|
              00000060  22 3a 7b 7d 7d 7d 7d                              |":{}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 27 13:54:55.916: INFO: Pod "test-cleanup-controller-79w42" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=29) "test-cleanup-controller-79w42",
      GenerateName: (string) (len=24) "test-cleanup-controller-",
      Namespace: (string) (len=15) "deployment-7681",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b3dae86e-890c-472f-88ae-078ac08202cc",
      ResourceVersion: (string) (len=5) "41680",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822890,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=23) "test-cleanup-controller",
          UID: (types.UID) (len=36) "5488f880-ac26-42d8-ab62-129d44290dfd",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822890,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=500) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 2c 22 66  |},"f:pod":{}},"f|
              00000050  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000060  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000070  75 69 64 5c 22 3a 5c 22  35 34 38 38 66 38 38 30  |uid\":\"5488f880|
              00000080  2d 61 63 32 36 2d 34 32  64 38 2d 61 62 36 32 2d  |-ac26-42d8-ab62-|
              00000090  31 32 39 64 34 34 32 39  30 64 66 64 5c 22 7d 22  |129d44290dfd\"}"|
              000000a0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000b0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000c0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              000000d0  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              000000e0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              000000f0  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000100  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000110  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000120  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000130  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000140  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000150  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000160  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              00000170  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              00000180  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              00000190  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001a0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001b0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001c0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              000001d0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              000001e0  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              000001f0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822891,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=664) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 39  |,"k:{\"ip\":\"19|
              00000260  32 2e 31 36 38 2e 31 37  32 2e 32 30 32 5c 22 7d  |2.168.172.202\"}|
              00000270  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 70 22  |":{".":{},"f:ip"|
              00000280  3a 7b 7d 7d 7d 2c 22 66  3a 73 74 61 72 74 54 69  |:{}}},"f:startTi|
              00000290  6d 65 22 3a 7b 7d 7d 7d                           |me":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-ld56v",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-ld56v",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)(<nil>),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=15) "ip-172-31-82-63",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822891,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822890,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822891,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822891,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822890,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "172.31.82.63",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "172.31.82.63"
        }
      },
      PodIP: (string) (len=15) "192.168.172.202",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=15) "192.168.172.202"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822890,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849822891,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://0bdbfd3088d137384c4ef002a291f96bb7e01c5672aa34c1dfea5c39c4125d38",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:54:55.918: INFO: Pod "test-cleanup-deployment-7bc75bbdf6-xh4s6" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-cleanup-deployment-7bc75bbdf6-xh4s6",
      GenerateName: (string) (len=35) "test-cleanup-deployment-7bc75bbdf6-",
      Namespace: (string) (len=15) "deployment-7681",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ce1d0208-84bd-44df-9eac-903849fad3fe",
      ResourceVersion: (string) (len=5) "41699",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849822895,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "7bc75bbdf6"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-cleanup-deployment-7bc75bbdf6",
          UID: (types.UID) (len=36) "c2dee96b-d2dd-4294-bc8a-337047ab2380",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849822895,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 32  64 65 65 39 36 62 2d 64  |d\":\"c2dee96b-d|
              00000090  32 64 64 2d 34 32 39 34  2d 62 63 38 61 2d 33 33  |2dd-4294-bc8a-33|
              000000a0  37 30 34 37 61 62 32 33  38 30 5c 22 7d 22 3a 7b  |7047ab2380\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-qlj8s",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-qlj8s",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 27 13:54:55.919: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-7681" for this suite. @ 04/27/24 13:54:55.928
• [5.103 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] DNS should provide DNS for services [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:137
  STEP: Creating a kubernetes client @ 04/27/24 13:54:55.939
  Apr 27 13:54:55.939: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename dns @ 04/27/24 13:54:55.939
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:54:55.962
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:54:55.966
  STEP: Creating a test headless service @ 04/27/24 13:54:55.969
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-5103.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-5103.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-5103.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-5103.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-5103.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-5103.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-5103.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-5103.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-5103.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-5103.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 199.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.199_udp@PTR;check="$$(dig +tcp +noall +answer +search 199.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.199_tcp@PTR;sleep 1; done
   @ 04/27/24 13:54:55.989
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-5103.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-5103.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-5103.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-5103.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-5103.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-5103.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-5103.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-5103.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-5103.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-5103.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 199.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.199_udp@PTR;check="$$(dig +tcp +noall +answer +search 199.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.199_tcp@PTR;sleep 1; done
   @ 04/27/24 13:54:55.989
  STEP: creating a pod to probe DNS @ 04/27/24 13:54:55.989
  STEP: submitting the pod to kubernetes @ 04/27/24 13:54:55.99
  STEP: retrieving the pod @ 04/27/24 13:54:58.022
  STEP: looking for the results for each expected name from probers @ 04/27/24 13:54:58.027
  Apr 27 13:54:58.033: INFO: Unable to read wheezy_udp@dns-test-service.dns-5103.svc.cluster.local from pod dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086: the server could not find the requested resource (get pods dns-test-f95fe6ce-b655-474d-9081-a790c397a086)
  Apr 27 13:54:58.038: INFO: Unable to read wheezy_tcp@dns-test-service.dns-5103.svc.cluster.local from pod dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086: the server could not find the requested resource (get pods dns-test-f95fe6ce-b655-474d-9081-a790c397a086)
  Apr 27 13:54:58.042: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local from pod dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086: the server could not find the requested resource (get pods dns-test-f95fe6ce-b655-474d-9081-a790c397a086)
  Apr 27 13:54:58.048: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local from pod dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086: the server could not find the requested resource (get pods dns-test-f95fe6ce-b655-474d-9081-a790c397a086)
  Apr 27 13:54:58.071: INFO: Unable to read jessie_udp@dns-test-service.dns-5103.svc.cluster.local from pod dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086: the server could not find the requested resource (get pods dns-test-f95fe6ce-b655-474d-9081-a790c397a086)
  Apr 27 13:54:58.076: INFO: Unable to read jessie_tcp@dns-test-service.dns-5103.svc.cluster.local from pod dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086: the server could not find the requested resource (get pods dns-test-f95fe6ce-b655-474d-9081-a790c397a086)
  Apr 27 13:54:58.081: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local from pod dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086: the server could not find the requested resource (get pods dns-test-f95fe6ce-b655-474d-9081-a790c397a086)
  Apr 27 13:54:58.085: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local from pod dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086: the server could not find the requested resource (get pods dns-test-f95fe6ce-b655-474d-9081-a790c397a086)
  Apr 27 13:54:58.104: INFO: Lookups using dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086 failed for: [wheezy_udp@dns-test-service.dns-5103.svc.cluster.local wheezy_tcp@dns-test-service.dns-5103.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local jessie_udp@dns-test-service.dns-5103.svc.cluster.local jessie_tcp@dns-test-service.dns-5103.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-5103.svc.cluster.local]

  Apr 27 13:54:58.113: INFO: Pod client logs for webserver: 
  Apr 27 13:54:58.120: INFO: Pod client logs for querier: 
  Apr 27 13:54:58.128: INFO: Pod client logs for jessie-querier: 
  Apr 27 13:55:03.100: INFO: DNS probes using dns-5103/dns-test-f95fe6ce-b655-474d-9081-a790c397a086 succeeded

  STEP: deleting the pod @ 04/27/24 13:55:03.1
  STEP: deleting the test service @ 04/27/24 13:55:03.119
  STEP: deleting the test headless service @ 04/27/24 13:55:03.151
  Apr 27 13:55:03.164: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-5103" for this suite. @ 04/27/24 13:55:03.169
• [7.239 seconds]
------------------------------
SSS
------------------------------
[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:897
  STEP: Creating a kubernetes client @ 04/27/24 13:55:03.178
  Apr 27 13:55:03.178: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 13:55:03.178
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:55:03.193
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:55:03.196
  STEP: creating a Pod with a static label @ 04/27/24 13:55:03.206
  STEP: watching for Pod to be ready @ 04/27/24 13:55:03.219
  Apr 27 13:55:03.221: INFO: observed Pod pod-test in namespace pods-7119 in phase Pending with labels: map[test-pod-static:true] & conditions []
  Apr 27 13:55:03.221: INFO: observed Pod pod-test in namespace pods-7119 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC  }]
  Apr 27 13:55:03.239: INFO: observed Pod pod-test in namespace pods-7119 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodReadyToStartContainers False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC  }]
  Apr 27 13:55:03.899: INFO: Found Pod pod-test in namespace pods-7119 in phase Running with labels: map[test-pod-static:true] & conditions [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC  } {Ready True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC  } {ContainersReady True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC  } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-27 13:55:03 +0000 UTC  }]
  STEP: patching the Pod with a new Label and updated data @ 04/27/24 13:55:03.904
  STEP: getting the Pod and ensuring that it's patched @ 04/27/24 13:55:03.916
  STEP: replacing the Pod's status Ready condition to False @ 04/27/24 13:55:03.92
  STEP: check the Pod again to ensure its Ready conditions are False @ 04/27/24 13:55:03.933
  STEP: deleting the Pod via a Collection with a LabelSelector @ 04/27/24 13:55:03.933
  STEP: watching for the Pod to be deleted @ 04/27/24 13:55:03.944
  Apr 27 13:55:03.946: INFO: observed event type MODIFIED
  Apr 27 13:55:05.910: INFO: observed event type MODIFIED
  Apr 27 13:55:06.108: INFO: observed event type MODIFIED
  Apr 27 13:55:06.915: INFO: observed event type MODIFIED
  Apr 27 13:55:06.926: INFO: observed event type MODIFIED
  Apr 27 13:55:06.934: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7119" for this suite. @ 04/27/24 13:55:06.938
• [3.770 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:112
  STEP: Creating a kubernetes client @ 04/27/24 13:55:06.948
  Apr 27 13:55:06.949: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replicaset @ 04/27/24 13:55:06.949
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:55:06.966
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:55:06.97
  Apr 27 13:55:06.974: INFO: Creating ReplicaSet my-hostname-basic-421a8ff1-78ed-4425-bf22-76a6d6a12f53
  Apr 27 13:55:06.985: INFO: Pod name my-hostname-basic-421a8ff1-78ed-4425-bf22-76a6d6a12f53: Found 0 pods out of 1
  Apr 27 13:55:11.989: INFO: Pod name my-hostname-basic-421a8ff1-78ed-4425-bf22-76a6d6a12f53: Found 1 pods out of 1
  Apr 27 13:55:11.989: INFO: Ensuring a pod for ReplicaSet "my-hostname-basic-421a8ff1-78ed-4425-bf22-76a6d6a12f53" is running
  Apr 27 13:55:11.994: INFO: Pod "my-hostname-basic-421a8ff1-78ed-4425-bf22-76a6d6a12f53-vwxpt" is running (conditions: [{Type:PodReadyToStartContainers Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:55:07 +0000 UTC Reason: Message:} {Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:55:06 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:55:07 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:55:07 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-27 13:55:06 +0000 UTC Reason: Message:}])
  Apr 27 13:55:11.994: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 04/27/24 13:55:11.994
  Apr 27 13:55:12.011: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-4421" for this suite. @ 04/27/24 13:55:12.016
• [5.075 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_watch.go:51
  STEP: Creating a kubernetes client @ 04/27/24 13:55:12.024
  Apr 27 13:55:12.024: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-watch @ 04/27/24 13:55:12.025
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:55:12.041
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:55:12.044
  Apr 27 13:55:12.048: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Creating first CR  @ 04/27/24 13:55:14.589
  Apr 27 13:55:14.595: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-27T13:55:14Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-27T13:55:14Z]] name:name1 resourceVersion:41932 uid:d2be6463-0af4-428c-8af2-c323859149f7] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Creating second CR @ 04/27/24 13:55:24.595
  Apr 27 13:55:24.603: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-27T13:55:24Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-27T13:55:24Z]] name:name2 resourceVersion:41973 uid:4c6cc906-7990-4dc2-9408-710e6ce7dc71] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying first CR @ 04/27/24 13:55:34.604
  Apr 27 13:55:34.611: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-27T13:55:14Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-27T13:55:34Z]] name:name1 resourceVersion:41993 uid:d2be6463-0af4-428c-8af2-c323859149f7] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying second CR @ 04/27/24 13:55:44.611
  Apr 27 13:55:44.619: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-27T13:55:24Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-27T13:55:44Z]] name:name2 resourceVersion:42013 uid:4c6cc906-7990-4dc2-9408-710e6ce7dc71] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting first CR @ 04/27/24 13:55:54.62
  Apr 27 13:55:54.630: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-27T13:55:14Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-27T13:55:34Z]] name:name1 resourceVersion:42033 uid:d2be6463-0af4-428c-8af2-c323859149f7] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting second CR @ 04/27/24 13:56:04.633
  Apr 27 13:56:04.642: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-27T13:55:24Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-27T13:55:44Z]] name:name2 resourceVersion:42053 uid:4c6cc906-7990-4dc2-9408-710e6ce7dc71] num:map[num1:9223372036854775807 num2:1000000]]}
  Apr 27 13:56:15.160: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-watch-3869" for this suite. @ 04/27/24 13:56:15.166
• [63.149 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:134
  STEP: Creating a kubernetes client @ 04/27/24 13:56:15.174
  Apr 27 13:56:15.174: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 13:56:15.175
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:56:15.192
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:56:15.195
  STEP: Creating pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225 @ 04/27/24 13:56:15.199
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/27/24 13:56:17.219
  Apr 27 13:56:17.224: INFO: Initial restart count of pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 is 0
  Apr 27 13:56:17.229: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:19.236: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:21.242: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:23.248: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:25.254: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:27.260: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:29.265: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:31.271: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:33.277: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:35.282: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:37.289: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:39.294: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:41.300: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:43.307: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:45.314: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:47.320: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:49.326: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:51.333: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:53.339: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:55.345: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:57.351: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:56:59.357: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:57:01.364: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:57:03.369: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:57:05.376: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:57:07.382: INFO: Get pod busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 in namespace container-probe-225
  Apr 27 13:57:07.382: INFO: Restart count of pod container-probe-225/busybox-59fd1852-a8ad-43d2-b6fc-2870c564a5f7 is now 1 (50.157782002s elapsed)
  STEP: deleting the pod @ 04/27/24 13:57:07.382
  Apr 27 13:57:07.399: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-225" for this suite. @ 04/27/24 13:57:07.405
• [52.239 seconds]
------------------------------
SS
------------------------------
[sig-apps] Job should manage the lifecycle of a job [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:855
  STEP: Creating a kubernetes client @ 04/27/24 13:57:07.413
  Apr 27 13:57:07.413: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename job @ 04/27/24 13:57:07.414
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:57:07.432
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:57:07.435
  STEP: Creating a suspended job @ 04/27/24 13:57:07.442
  STEP: Patching the Job @ 04/27/24 13:57:07.45
  STEP: Watching for Job to be patched @ 04/27/24 13:57:07.467
  Apr 27 13:57:07.469: INFO: Event ADDED observed for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-job-label:e2e-ddnsc] and annotations: map[]
  Apr 27 13:57:07.469: INFO: Event MODIFIED observed for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-job-label:e2e-ddnsc] and annotations: map[]
  Apr 27 13:57:07.469: INFO: Event MODIFIED found for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[]
  STEP: Updating the job @ 04/27/24 13:57:07.469
  STEP: Watching for Job to be updated @ 04/27/24 13:57:07.48
  Apr 27 13:57:07.482: INFO: Event MODIFIED found for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[updated:true]
  Apr 27 13:57:07.482: INFO: Found Job annotations: map[string]string{"updated":"true"}
  STEP: Listing all Jobs with LabelSelector @ 04/27/24 13:57:07.482
  Apr 27 13:57:07.486: INFO: Job: e2e-ddnsc as labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc]
  STEP: Waiting for job to complete @ 04/27/24 13:57:07.486
  STEP: Delete a job collection with a labelselector @ 04/27/24 13:57:15.491
  STEP: Watching for Job to be deleted @ 04/27/24 13:57:15.504
  Apr 27 13:57:15.510: INFO: Event MODIFIED observed for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[updated:true]
  Apr 27 13:57:15.510: INFO: Event MODIFIED observed for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[updated:true]
  Apr 27 13:57:15.510: INFO: Event MODIFIED observed for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[updated:true]
  Apr 27 13:57:15.510: INFO: Event MODIFIED observed for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[updated:true]
  Apr 27 13:57:15.510: INFO: Event MODIFIED observed for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[updated:true]
  Apr 27 13:57:15.510: INFO: Event MODIFIED observed for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[updated:true]
  Apr 27 13:57:15.510: INFO: Event MODIFIED observed for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[updated:true]
  Apr 27 13:57:15.510: INFO: Event DELETED found for Job e2e-ddnsc in namespace job-7756 with labels: map[e2e-ddnsc:patched e2e-job-label:e2e-ddnsc] and annotations: map[updated:true]
  STEP: Relist jobs to confirm deletion @ 04/27/24 13:57:15.51
  Apr 27 13:57:15.517: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-7756" for this suite. @ 04/27/24 13:57:15.539
• [8.137 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:79
  STEP: Creating a kubernetes client @ 04/27/24 13:57:15.551
  Apr 27 13:57:15.551: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename subpath @ 04/27/24 13:57:15.552
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:57:15.566
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:57:15.57
  STEP: Setting up data @ 04/27/24 13:57:15.574
  STEP: Creating pod pod-subpath-test-configmap-x9ww @ 04/27/24 13:57:15.584
  STEP: Creating a pod to test atomic-volume-subpath @ 04/27/24 13:57:15.584
  STEP: Saw pod success @ 04/27/24 13:57:39.673
  Apr 27 13:57:39.678: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-subpath-test-configmap-x9ww container test-container-subpath-configmap-x9ww: <nil>
  STEP: delete the pod @ 04/27/24 13:57:39.692
  STEP: Deleting pod pod-subpath-test-configmap-x9ww @ 04/27/24 13:57:39.715
  Apr 27 13:57:39.715: INFO: Deleting pod "pod-subpath-test-configmap-x9ww" in namespace "subpath-8080"
  Apr 27 13:57:39.719: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-8080" for this suite. @ 04/27/24 13:57:39.724
• [24.180 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:57
  STEP: Creating a kubernetes client @ 04/27/24 13:57:39.732
  Apr 27 13:57:39.732: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 13:57:39.732
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:57:39.749
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:57:39.753
  STEP: Creating secret with name secret-test-b35de69e-0188-48bd-871f-40f12852d58a @ 04/27/24 13:57:39.756
  STEP: Creating a pod to test consume secrets @ 04/27/24 13:57:39.762
  STEP: Saw pod success @ 04/27/24 13:57:43.789
  Apr 27 13:57:43.794: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-secrets-c7ecc2fa-84fb-453f-927e-66047d14d004 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 13:57:43.803
  Apr 27 13:57:43.825: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8973" for this suite. @ 04/27/24 13:57:43.83
• [4.106 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/lifecycle_hook.go:214
  STEP: Creating a kubernetes client @ 04/27/24 13:57:43.839
  Apr 27 13:57:43.839: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 04/27/24 13:57:43.839
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:57:43.86
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:57:43.863
  STEP: create the container to handle the HTTPGet hook request. @ 04/27/24 13:57:43.871
  STEP: create the pod with lifecycle hook @ 04/27/24 13:57:45.898
  STEP: delete the pod with lifecycle hook @ 04/27/24 13:57:47.923
  STEP: check prestop hook @ 04/27/24 13:57:49.942
  Apr 27 13:57:49.959: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-8954" for this suite. @ 04/27/24 13:57:49.964
• [6.134 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:537
  STEP: Creating a kubernetes client @ 04/27/24 13:57:49.973
  Apr 27 13:57:49.973: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pods @ 04/27/24 13:57:49.973
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:57:49.989
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:57:49.993
  Apr 27 13:57:49.996: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: creating the pod @ 04/27/24 13:57:49.996
  STEP: submitting the pod to kubernetes @ 04/27/24 13:57:49.997
  Apr 27 13:57:52.079: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-4345" for this suite. @ 04/27/24 13:57:52.084
• [2.119 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:550
  STEP: Creating a kubernetes client @ 04/27/24 13:57:52.093
  Apr 27 13:57:52.093: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-probe @ 04/27/24 13:57:52.093
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:57:52.119
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:57:52.122
  STEP: Creating pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301 @ 04/27/24 13:57:52.126
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/27/24 13:57:54.151
  Apr 27 13:57:54.156: INFO: Initial restart count of pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d is 0
  Apr 27 13:57:54.160: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:57:56.166: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:57:58.172: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:00.178: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:02.184: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:04.190: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:06.195: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:08.202: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:10.208: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:12.214: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:14.220: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:16.226: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:18.232: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:20.237: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:22.243: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:24.248: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:26.254: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:28.259: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:30.266: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:32.272: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:34.277: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:36.284: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:38.290: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:40.296: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:42.303: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:44.308: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:46.314: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:48.321: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:50.327: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:52.334: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:54.340: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:56.346: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:58.352: INFO: Get pod test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d in namespace container-probe-8301
  Apr 27 13:58:58.352: INFO: Restart count of pod container-probe-8301/test-grpc-7425cba1-75f9-40a3-8d62-9302c026294d is now 1 (1m4.195834577s elapsed)
  STEP: deleting the pod @ 04/27/24 13:58:58.352
  Apr 27 13:58:58.366: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8301" for this suite. @ 04/27/24 13:58:58.37
• [66.285 seconds]
------------------------------
[sig-cli] Kubectl client Proxy server should support proxy with --port 0 [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1838
  STEP: Creating a kubernetes client @ 04/27/24 13:58:58.378
  Apr 27 13:58:58.378: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 13:58:58.378
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:58:58.397
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:58:58.402
  STEP: starting the proxy server @ 04/27/24 13:58:58.405
  Apr 27 13:58:58.406: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-268 proxy -p 0 --disable-filter'
  STEP: curling proxy /api/ output @ 04/27/24 13:58:58.436
  Apr 27 13:58:58.443: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-268" for this suite. @ 04/27/24 13:58:58.448
• [0.079 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:60
  STEP: Creating a kubernetes client @ 04/27/24 13:58:58.457
  Apr 27 13:58:58.457: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename watch @ 04/27/24 13:58:58.457
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:58:58.473
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:58:58.477
  STEP: creating a watch on configmaps with label A @ 04/27/24 13:58:58.48
  STEP: creating a watch on configmaps with label B @ 04/27/24 13:58:58.482
  STEP: creating a watch on configmaps with label A or B @ 04/27/24 13:58:58.483
  STEP: creating a configmap with label A and ensuring the correct watchers observe the notification @ 04/27/24 13:58:58.485
  Apr 27 13:58:58.491: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-6140  c86c66a5-55d7-4b07-86ad-c0eb5abf2543 42780 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:58:58.491: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-6140  c86c66a5-55d7-4b07-86ad-c0eb5abf2543 42780 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A and ensuring the correct watchers observe the notification @ 04/27/24 13:58:58.491
  Apr 27 13:58:58.500: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-6140  c86c66a5-55d7-4b07-86ad-c0eb5abf2543 42781 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:58:58.500: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-6140  c86c66a5-55d7-4b07-86ad-c0eb5abf2543 42781 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A again and ensuring the correct watchers observe the notification @ 04/27/24 13:58:58.5
  Apr 27 13:58:58.510: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-6140  c86c66a5-55d7-4b07-86ad-c0eb5abf2543 42782 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:58:58.510: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-6140  c86c66a5-55d7-4b07-86ad-c0eb5abf2543 42782 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap A and ensuring the correct watchers observe the notification @ 04/27/24 13:58:58.511
  Apr 27 13:58:58.517: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-6140  c86c66a5-55d7-4b07-86ad-c0eb5abf2543 42783 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:58:58.518: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-6140  c86c66a5-55d7-4b07-86ad-c0eb5abf2543 42783 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: creating a configmap with label B and ensuring the correct watchers observe the notification @ 04/27/24 13:58:58.518
  Apr 27 13:58:58.523: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-6140  b9798270-7a1e-4232-99de-96e035512783 42784 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:58:58.523: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-6140  b9798270-7a1e-4232-99de-96e035512783 42784 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap B and ensuring the correct watchers observe the notification @ 04/27/24 13:59:08.524
  Apr 27 13:59:08.534: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-6140  b9798270-7a1e-4232-99de-96e035512783 42825 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:59:08.534: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-6140  b9798270-7a1e-4232-99de-96e035512783 42825 0 2024-04-27 13:58:58 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-04-27 13:58:58 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 27 13:59:18.536: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-6140" for this suite. @ 04/27/24 13:59:18.543
• [20.095 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:195
  STEP: Creating a kubernetes client @ 04/27/24 13:59:18.552
  Apr 27 13:59:18.552: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-runtime @ 04/27/24 13:59:18.552
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:59:18.569
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:59:18.573
  STEP: create the container @ 04/27/24 13:59:18.576
  W0427 13:59:18.585885      19 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 04/27/24 13:59:18.586
  STEP: get the container status @ 04/27/24 13:59:20.602
  STEP: the container should be terminated @ 04/27/24 13:59:20.607
  STEP: the termination message should be set @ 04/27/24 13:59:20.607
  Apr 27 13:59:20.607: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 04/27/24 13:59:20.607
  Apr 27 13:59:20.628: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-2602" for this suite. @ 04/27/24 13:59:20.632
• [2.089 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:714
  STEP: Creating a kubernetes client @ 04/27/24 13:59:20.641
  Apr 27 13:59:20.641: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename gc @ 04/27/24 13:59:20.642
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:59:20.657
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:59:20.661
  STEP: create the rc1 @ 04/27/24 13:59:20.669
  STEP: create the rc2 @ 04/27/24 13:59:20.675
  STEP: set half of pods created by rc simpletest-rc-to-be-deleted to have rc simpletest-rc-to-stay as owner as well @ 04/27/24 13:59:26.687
  STEP: delete the rc simpletest-rc-to-be-deleted @ 04/27/24 13:59:27.173
  STEP: wait for the rc to be deleted @ 04/27/24 13:59:27.181
  Apr 27 13:59:32.194: INFO: 69 pods remaining
  Apr 27 13:59:32.194: INFO: 69 pods has nil DeletionTimestamp
  Apr 27 13:59:32.194: INFO: 
  STEP: Gathering metrics @ 04/27/24 13:59:37.195
  W0427 13:59:37.201643      19 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Apr 27 13:59:37.201: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 27 13:59:37.201: INFO: Deleting pod "simpletest-rc-to-be-deleted-2jkww" in namespace "gc-9060"
  Apr 27 13:59:37.217: INFO: Deleting pod "simpletest-rc-to-be-deleted-2lfjr" in namespace "gc-9060"
  Apr 27 13:59:37.232: INFO: Deleting pod "simpletest-rc-to-be-deleted-4gmk7" in namespace "gc-9060"
  Apr 27 13:59:37.248: INFO: Deleting pod "simpletest-rc-to-be-deleted-4jjnb" in namespace "gc-9060"
  Apr 27 13:59:37.262: INFO: Deleting pod "simpletest-rc-to-be-deleted-5kkkx" in namespace "gc-9060"
  Apr 27 13:59:37.282: INFO: Deleting pod "simpletest-rc-to-be-deleted-5td94" in namespace "gc-9060"
  Apr 27 13:59:37.295: INFO: Deleting pod "simpletest-rc-to-be-deleted-62srb" in namespace "gc-9060"
  Apr 27 13:59:37.316: INFO: Deleting pod "simpletest-rc-to-be-deleted-665p7" in namespace "gc-9060"
  Apr 27 13:59:37.332: INFO: Deleting pod "simpletest-rc-to-be-deleted-6d54q" in namespace "gc-9060"
  Apr 27 13:59:37.350: INFO: Deleting pod "simpletest-rc-to-be-deleted-6lsw4" in namespace "gc-9060"
  Apr 27 13:59:37.362: INFO: Deleting pod "simpletest-rc-to-be-deleted-6zxmg" in namespace "gc-9060"
  Apr 27 13:59:37.377: INFO: Deleting pod "simpletest-rc-to-be-deleted-72z9r" in namespace "gc-9060"
  Apr 27 13:59:37.394: INFO: Deleting pod "simpletest-rc-to-be-deleted-74bbw" in namespace "gc-9060"
  Apr 27 13:59:37.413: INFO: Deleting pod "simpletest-rc-to-be-deleted-767sx" in namespace "gc-9060"
  Apr 27 13:59:37.426: INFO: Deleting pod "simpletest-rc-to-be-deleted-7pjq2" in namespace "gc-9060"
  Apr 27 13:59:37.439: INFO: Deleting pod "simpletest-rc-to-be-deleted-7prsk" in namespace "gc-9060"
  Apr 27 13:59:37.452: INFO: Deleting pod "simpletest-rc-to-be-deleted-7vzc4" in namespace "gc-9060"
  Apr 27 13:59:37.466: INFO: Deleting pod "simpletest-rc-to-be-deleted-8kvhj" in namespace "gc-9060"
  Apr 27 13:59:37.484: INFO: Deleting pod "simpletest-rc-to-be-deleted-8kzh5" in namespace "gc-9060"
  Apr 27 13:59:37.500: INFO: Deleting pod "simpletest-rc-to-be-deleted-8x77d" in namespace "gc-9060"
  Apr 27 13:59:37.513: INFO: Deleting pod "simpletest-rc-to-be-deleted-92nrb" in namespace "gc-9060"
  Apr 27 13:59:37.529: INFO: Deleting pod "simpletest-rc-to-be-deleted-989g7" in namespace "gc-9060"
  Apr 27 13:59:37.545: INFO: Deleting pod "simpletest-rc-to-be-deleted-9vhdm" in namespace "gc-9060"
  Apr 27 13:59:37.559: INFO: Deleting pod "simpletest-rc-to-be-deleted-b8xl6" in namespace "gc-9060"
  Apr 27 13:59:37.573: INFO: Deleting pod "simpletest-rc-to-be-deleted-bf2hk" in namespace "gc-9060"
  Apr 27 13:59:37.591: INFO: Deleting pod "simpletest-rc-to-be-deleted-c22t6" in namespace "gc-9060"
  Apr 27 13:59:37.604: INFO: Deleting pod "simpletest-rc-to-be-deleted-cd4cx" in namespace "gc-9060"
  Apr 27 13:59:37.624: INFO: Deleting pod "simpletest-rc-to-be-deleted-cfxf8" in namespace "gc-9060"
  Apr 27 13:59:37.640: INFO: Deleting pod "simpletest-rc-to-be-deleted-cwxrb" in namespace "gc-9060"
  Apr 27 13:59:37.657: INFO: Deleting pod "simpletest-rc-to-be-deleted-dd4lm" in namespace "gc-9060"
  Apr 27 13:59:37.670: INFO: Deleting pod "simpletest-rc-to-be-deleted-djq6b" in namespace "gc-9060"
  Apr 27 13:59:37.686: INFO: Deleting pod "simpletest-rc-to-be-deleted-dkcv8" in namespace "gc-9060"
  Apr 27 13:59:37.704: INFO: Deleting pod "simpletest-rc-to-be-deleted-dns28" in namespace "gc-9060"
  Apr 27 13:59:37.720: INFO: Deleting pod "simpletest-rc-to-be-deleted-dqqwj" in namespace "gc-9060"
  Apr 27 13:59:37.740: INFO: Deleting pod "simpletest-rc-to-be-deleted-dr2mj" in namespace "gc-9060"
  Apr 27 13:59:37.761: INFO: Deleting pod "simpletest-rc-to-be-deleted-f2d5q" in namespace "gc-9060"
  Apr 27 13:59:37.780: INFO: Deleting pod "simpletest-rc-to-be-deleted-f5v6j" in namespace "gc-9060"
  Apr 27 13:59:37.796: INFO: Deleting pod "simpletest-rc-to-be-deleted-f9hw2" in namespace "gc-9060"
  Apr 27 13:59:37.810: INFO: Deleting pod "simpletest-rc-to-be-deleted-fdt6m" in namespace "gc-9060"
  Apr 27 13:59:37.824: INFO: Deleting pod "simpletest-rc-to-be-deleted-fgkcx" in namespace "gc-9060"
  Apr 27 13:59:37.844: INFO: Deleting pod "simpletest-rc-to-be-deleted-fmd8z" in namespace "gc-9060"
  Apr 27 13:59:37.875: INFO: Deleting pod "simpletest-rc-to-be-deleted-g54ml" in namespace "gc-9060"
  Apr 27 13:59:37.892: INFO: Deleting pod "simpletest-rc-to-be-deleted-g7j8l" in namespace "gc-9060"
  Apr 27 13:59:37.906: INFO: Deleting pod "simpletest-rc-to-be-deleted-g8c4p" in namespace "gc-9060"
  Apr 27 13:59:37.929: INFO: Deleting pod "simpletest-rc-to-be-deleted-gjddc" in namespace "gc-9060"
  Apr 27 13:59:37.944: INFO: Deleting pod "simpletest-rc-to-be-deleted-gjkh7" in namespace "gc-9060"
  Apr 27 13:59:37.959: INFO: Deleting pod "simpletest-rc-to-be-deleted-gr6bq" in namespace "gc-9060"
  Apr 27 13:59:37.975: INFO: Deleting pod "simpletest-rc-to-be-deleted-gv7qp" in namespace "gc-9060"
  Apr 27 13:59:37.990: INFO: Deleting pod "simpletest-rc-to-be-deleted-h2rrs" in namespace "gc-9060"
  Apr 27 13:59:38.005: INFO: Deleting pod "simpletest-rc-to-be-deleted-hpmz9" in namespace "gc-9060"
  Apr 27 13:59:38.022: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-9060" for this suite. @ 04/27/24 13:59:38.029
• [17.396 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:889
  STEP: Creating a kubernetes client @ 04/27/24 13:59:38.038
  Apr 27 13:59:38.038: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename resourcequota @ 04/27/24 13:59:38.039
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:59:38.058
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:59:38.062
  STEP: Creating a ResourceQuota @ 04/27/24 13:59:38.066
  STEP: Getting a ResourceQuota @ 04/27/24 13:59:38.071
  STEP: Updating a ResourceQuota @ 04/27/24 13:59:38.076
  STEP: Verifying a ResourceQuota was modified @ 04/27/24 13:59:38.083
  STEP: Deleting a ResourceQuota @ 04/27/24 13:59:38.09
  STEP: Verifying the deleted ResourceQuota @ 04/27/24 13:59:38.101
  Apr 27 13:59:38.105: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-182" for this suite. @ 04/27/24 13:59:38.113
• [0.088 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_combined.go:44
  STEP: Creating a kubernetes client @ 04/27/24 13:59:38.127
  Apr 27 13:59:38.127: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 13:59:38.128
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:59:38.151
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:59:38.158
  STEP: Creating configMap with name configmap-projected-all-test-volume-91715e4c-1197-418a-8e48-d2406183ac67 @ 04/27/24 13:59:38.164
  STEP: Creating secret with name secret-projected-all-test-volume-474d0daa-81ec-47d8-81eb-3242922a6018 @ 04/27/24 13:59:38.171
  STEP: Creating a pod to test Check all projections for projected volume plugin @ 04/27/24 13:59:38.177
  STEP: Saw pod success @ 04/27/24 13:59:42.211
  Apr 27 13:59:42.217: INFO: Trying to get logs from node ip-172-31-82-63 pod projected-volume-061e6c28-1c36-447e-ad80-7857f29c9bfa container projected-all-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 13:59:42.234
  Apr 27 13:59:42.258: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-642" for this suite. @ 04/27/24 13:59:42.263
• [4.144 seconds]
------------------------------
SS
------------------------------
[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/secrets.go:47
  STEP: Creating a kubernetes client @ 04/27/24 13:59:42.271
  Apr 27 13:59:42.271: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 13:59:42.271
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:59:42.287
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:59:42.292
  STEP: Creating secret with name secret-test-1d774338-7ef2-4608-a691-e73d60fb6e22 @ 04/27/24 13:59:42.297
  STEP: Creating a pod to test consume secrets @ 04/27/24 13:59:42.303
  STEP: Saw pod success @ 04/27/24 13:59:46.332
  Apr 27 13:59:46.337: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-secrets-6da54531-54b0-4f24-a7b6-8fbc147f9ba2 container secret-env-test: <nil>
  STEP: delete the pod @ 04/27/24 13:59:46.345
  Apr 27 13:59:46.365: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6294" for this suite. @ 04/27/24 13:59:46.369
• [4.107 seconds]
------------------------------
SSS
------------------------------
[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:408
  STEP: Creating a kubernetes client @ 04/27/24 13:59:46.378
  Apr 27 13:59:46.378: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename job @ 04/27/24 13:59:46.379
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:59:46.396
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:59:46.4
  STEP: Creating Indexed job @ 04/27/24 13:59:46.403
  STEP: Ensuring job reaches completions @ 04/27/24 13:59:46.409
  STEP: Ensuring pods with index for job exist @ 04/27/24 13:59:54.415
  Apr 27 13:59:54.419: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-4125" for this suite. @ 04/27/24 13:59:54.424
• [8.055 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:51
  STEP: Creating a kubernetes client @ 04/27/24 13:59:54.434
  Apr 27 13:59:54.434: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubelet-test @ 04/27/24 13:59:54.434
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:59:54.45
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:59:54.455
  Apr 27 13:59:56.498: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-7356" for this suite. @ 04/27/24 13:59:56.503
• [2.079 seconds]
------------------------------
S
------------------------------
[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:52
  STEP: Creating a kubernetes client @ 04/27/24 13:59:56.512
  Apr 27 13:59:56.512: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-runtime @ 04/27/24 13:59:56.513
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 13:59:56.533
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 13:59:56.544
  STEP: Container 'terminate-cmd-rpa': should get the expected 'RestartCount' @ 04/27/24 13:59:56.559
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Phase' @ 04/27/24 14:00:14.668
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Ready' condition @ 04/27/24 14:00:14.672
  STEP: Container 'terminate-cmd-rpa': should get the expected 'State' @ 04/27/24 14:00:14.681
  STEP: Container 'terminate-cmd-rpa': should be possible to delete @ 04/27/24 14:00:14.681
  STEP: Container 'terminate-cmd-rpof': should get the expected 'RestartCount' @ 04/27/24 14:00:14.704
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Phase' @ 04/27/24 14:00:16.721
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Ready' condition @ 04/27/24 14:00:18.742
  STEP: Container 'terminate-cmd-rpof': should get the expected 'State' @ 04/27/24 14:00:18.752
  STEP: Container 'terminate-cmd-rpof': should be possible to delete @ 04/27/24 14:00:18.752
  STEP: Container 'terminate-cmd-rpn': should get the expected 'RestartCount' @ 04/27/24 14:00:18.776
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Phase' @ 04/27/24 14:00:19.789
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Ready' condition @ 04/27/24 14:00:20.799
  STEP: Container 'terminate-cmd-rpn': should get the expected 'State' @ 04/27/24 14:00:20.807
  STEP: Container 'terminate-cmd-rpn': should be possible to delete @ 04/27/24 14:00:20.807
  Apr 27 14:00:20.846: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-3645" for this suite. @ 04/27/24 14:00:20.851
• [24.346 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance] [sig-scheduling, Serial, Conformance]
k8s.io/kubernetes/test/e2e/scheduling/preemption.go:130
  STEP: Creating a kubernetes client @ 04/27/24 14:00:20.859
  Apr 27 14:00:20.859: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename sched-preemption @ 04/27/24 14:00:20.86
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:00:20.876
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:00:20.88
  Apr 27 14:00:20.899: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 27 14:01:20.905: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 04/27/24 14:01:20.909
  Apr 27 14:01:20.935: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Apr 27 14:01:20.942: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Apr 27 14:01:20.963: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Apr 27 14:01:20.979: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  Apr 27 14:01:20.994: INFO: Created pod: pod2-0-sched-preemption-medium-priority
  Apr 27 14:01:21.005: INFO: Created pod: pod2-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 04/27/24 14:01:21.005
  STEP: Run a high priority pod that has same requirements as that of lower priority pod @ 04/27/24 14:01:23.039
  Apr 27 14:01:27.135: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-7495" for this suite. @ 04/27/24 14:01:27.14
• [66.289 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:391
  STEP: Creating a kubernetes client @ 04/27/24 14:01:27.148
  Apr 27 14:01:27.148: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/27/24 14:01:27.148
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:01:27.168
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:01:27.171
  STEP: set up a multi version CRD @ 04/27/24 14:01:27.174
  Apr 27 14:01:27.175: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: rename a version @ 04/27/24 14:01:30.281
  STEP: check the new version name is served @ 04/27/24 14:01:30.295
  STEP: check the old version name is removed @ 04/27/24 14:01:31.13
  STEP: check the other version is not changed @ 04/27/24 14:01:31.755
  Apr 27 14:01:34.244: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-4248" for this suite. @ 04/27/24 14:01:34.251
• [7.112 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:125
  STEP: Creating a kubernetes client @ 04/27/24 14:01:34.26
  Apr 27 14:01:34.260: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 14:01:34.261
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:01:34.282
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:01:34.285
  STEP: Creating secret with name secret-test-d200aec8-c875-4a0f-87ef-b066c851e1c9 @ 04/27/24 14:01:34.289
  STEP: Creating a pod to test consume secrets @ 04/27/24 14:01:34.294
  STEP: Saw pod success @ 04/27/24 14:01:38.325
  Apr 27 14:01:38.329: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-secrets-3d99a863-333e-4983-a6e3-c6eef309b0c0 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 14:01:38.34
  Apr 27 14:01:38.359: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5509" for this suite. @ 04/27/24 14:01:38.364
• [4.111 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/configmap.go:46
  STEP: Creating a kubernetes client @ 04/27/24 14:01:38.372
  Apr 27 14:01:38.372: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 14:01:38.372
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:01:38.392
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:01:38.395
  STEP: Creating configMap configmap-7078/configmap-test-0d37ac36-8f9f-4c45-a3b5-65eb404d2ae1 @ 04/27/24 14:01:38.397
  STEP: Creating a pod to test consume configMaps @ 04/27/24 14:01:38.404
  STEP: Saw pod success @ 04/27/24 14:01:42.43
  Apr 27 14:01:42.434: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-configmaps-90bb04a6-76ee-4b5a-95c3-b415ee6d838b container env-test: <nil>
  STEP: delete the pod @ 04/27/24 14:01:42.441
  Apr 27 14:01:42.458: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7078" for this suite. @ 04/27/24 14:01:42.462
• [4.098 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/aggregator.go:98
  STEP: Creating a kubernetes client @ 04/27/24 14:01:42.47
  Apr 27 14:01:42.470: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename aggregator @ 04/27/24 14:01:42.47
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:01:42.49
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:01:42.493
  Apr 27 14:01:42.496: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Registering the sample API server. @ 04/27/24 14:01:42.497
  Apr 27 14:01:42.742: INFO: Found ClusterRoles; assuming RBAC is enabled.
  Apr 27 14:01:42.780: INFO: deployment "sample-apiserver-deployment" doesn't have the required revision set
  Apr 27 14:01:44.832: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:01:46.839: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:01:48.839: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:01:50.838: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:01:52.838: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:01:54.838: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:01:56.838: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:01:58.838: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:02:00.838: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:02:02.839: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 27, 14, 1, 42, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 27 14:02:04.959: INFO: Waited 114.56035ms for the sample-apiserver to be ready to handle requests.
  STEP: Read Status for v1alpha1.wardle.example.com @ 04/27/24 14:02:04.991
  STEP: kubectl patch apiservice v1alpha1.wardle.example.com -p '{"spec":{"versionPriority": 400}}' @ 04/27/24 14:02:04.996
  STEP: List APIServices @ 04/27/24 14:02:05.002
  Apr 27 14:02:05.008: INFO: Found v1alpha1.wardle.example.com in APIServiceList
  STEP: Adding a label to the APIService @ 04/27/24 14:02:05.008
  Apr 27 14:02:05.020: INFO: APIService labels: map[e2e-apiservice:patched]
  STEP: Updating APIService Status @ 04/27/24 14:02:05.02
  Apr 27 14:02:05.033: INFO: updatedStatus.Conditions: []v1.APIServiceCondition{v1.APIServiceCondition{Type:"Available", Status:"True", LastTransitionTime:time.Date(2024, time.April, 27, 14, 2, 4, 0, time.Local), Reason:"Passed", Message:"all checks passed"}, v1.APIServiceCondition{Type:"StatusUpdated", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: Confirm that v1alpha1.wardle.example.com /status was updated @ 04/27/24 14:02:05.033
  Apr 27 14:02:05.037: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {Available True 2024-04-27 14:02:04 +0000 UTC Passed all checks passed}
  Apr 27 14:02:05.037: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 27 14:02:05.037: INFO: Found updated status condition for v1alpha1.wardle.example.com
  STEP: Replace APIService v1alpha1.wardle.example.com @ 04/27/24 14:02:05.037
  Apr 27 14:02:05.049: INFO: Found updated apiService label for "v1alpha1.wardle.example.com"
  STEP: Delete flunders resource "dynamic-flunder-1420186774" @ 04/27/24 14:02:05.049
  STEP: Recreating test-flunder before removing endpoint via deleteCollection @ 04/27/24 14:02:05.058
  STEP: Read v1alpha1.wardle.example.com /status before patching it @ 04/27/24 14:02:05.063
  STEP: Patch APIService Status @ 04/27/24 14:02:05.068
  STEP: Confirm that v1alpha1.wardle.example.com /status was patched @ 04/27/24 14:02:05.076
  Apr 27 14:02:05.080: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {Available True 2024-04-27 14:02:04 +0000 UTC Passed all checks passed}
  Apr 27 14:02:05.080: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 27 14:02:05.080: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC E2E Set by e2e test}
  Apr 27 14:02:05.080: INFO: Found patched status condition for v1alpha1.wardle.example.com
  STEP: APIService deleteCollection with labelSelector: "v1alpha1.wardle.example.com=updated" @ 04/27/24 14:02:05.08
  STEP: Confirm that the generated APIService has been deleted @ 04/27/24 14:02:05.092
  Apr 27 14:02:05.092: INFO: Requesting list of APIServices to confirm quantity
  Apr 27 14:02:05.096: INFO: Found 0 APIService with label "v1alpha1.wardle.example.com=updated"
  Apr 27 14:02:05.096: INFO: APIService v1alpha1.wardle.example.com has been deleted.
  Apr 27 14:02:05.209: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "aggregator-4161" for this suite. @ 04/27/24 14:02:05.214
• [22.752 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:216
  STEP: Creating a kubernetes client @ 04/27/24 14:02:05.222
  Apr 27 14:02:05.223: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-runtime @ 04/27/24 14:02:05.223
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:05.242
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:05.245
  STEP: create the container @ 04/27/24 14:02:05.248
  W0427 14:02:05.259778      19 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Failed @ 04/27/24 14:02:05.259
  STEP: get the container status @ 04/27/24 14:02:08.283
  STEP: the container should be terminated @ 04/27/24 14:02:08.287
  STEP: the termination message should be set @ 04/27/24 14:02:08.287
  Apr 27 14:02:08.287: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 04/27/24 14:02:08.287
  Apr 27 14:02:08.306: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-2973" for this suite. @ 04/27/24 14:02:08.31
• [3.095 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Update Demo should create and stop a replication controller [Conformance] [sig-cli, Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:344
  STEP: Creating a kubernetes client @ 04/27/24 14:02:08.318
  Apr 27 14:02:08.318: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename kubectl @ 04/27/24 14:02:08.318
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:08.337
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:08.34
  STEP: creating a replication controller @ 04/27/24 14:02:08.343
  Apr 27 14:02:08.343: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 create -f -'
  Apr 27 14:02:08.427: INFO: stderr: ""
  Apr 27 14:02:08.427: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 04/27/24 14:02:08.427
  Apr 27 14:02:08.427: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 27 14:02:08.473: INFO: stderr: ""
  Apr 27 14:02:08.473: INFO: stdout: "update-demo-nautilus-g5b9j update-demo-nautilus-rgzkb "
  Apr 27 14:02:08.473: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 get pods update-demo-nautilus-g5b9j -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 14:02:08.516: INFO: stderr: ""
  Apr 27 14:02:08.516: INFO: stdout: ""
  Apr 27 14:02:08.516: INFO: update-demo-nautilus-g5b9j is created but not running
  Apr 27 14:02:13.517: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 27 14:02:13.569: INFO: stderr: ""
  Apr 27 14:02:13.569: INFO: stdout: "update-demo-nautilus-g5b9j update-demo-nautilus-rgzkb "
  Apr 27 14:02:13.569: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 get pods update-demo-nautilus-g5b9j -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 14:02:13.614: INFO: stderr: ""
  Apr 27 14:02:13.614: INFO: stdout: "true"
  Apr 27 14:02:13.614: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 get pods update-demo-nautilus-g5b9j -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 27 14:02:13.657: INFO: stderr: ""
  Apr 27 14:02:13.657: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 27 14:02:13.657: INFO: validating pod update-demo-nautilus-g5b9j
  Apr 27 14:02:13.665: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 27 14:02:13.665: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 27 14:02:13.665: INFO: update-demo-nautilus-g5b9j is verified up and running
  Apr 27 14:02:13.665: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 get pods update-demo-nautilus-rgzkb -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 27 14:02:13.709: INFO: stderr: ""
  Apr 27 14:02:13.709: INFO: stdout: "true"
  Apr 27 14:02:13.709: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 get pods update-demo-nautilus-rgzkb -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 27 14:02:13.753: INFO: stderr: ""
  Apr 27 14:02:13.753: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 27 14:02:13.753: INFO: validating pod update-demo-nautilus-rgzkb
  Apr 27 14:02:13.759: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 27 14:02:13.759: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 27 14:02:13.759: INFO: update-demo-nautilus-rgzkb is verified up and running
  STEP: using delete to clean up resources @ 04/27/24 14:02:13.759
  Apr 27 14:02:13.759: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 delete --grace-period=0 --force -f -'
  Apr 27 14:02:13.810: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 27 14:02:13.810: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Apr 27 14:02:13.810: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 get rc,svc -l name=update-demo --no-headers'
  Apr 27 14:02:13.874: INFO: stderr: "No resources found in kubectl-3808 namespace.\n"
  Apr 27 14:02:13.874: INFO: stdout: ""
  Apr 27 14:02:13.874: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=kubectl-3808 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Apr 27 14:02:13.943: INFO: stderr: ""
  Apr 27 14:02:13.943: INFO: stdout: ""
  Apr 27 14:02:13.943: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3808" for this suite. @ 04/27/24 14:02:13.948
• [5.639 seconds]
------------------------------
SS
------------------------------
[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:2199
  STEP: Creating a kubernetes client @ 04/27/24 14:02:13.956
  Apr 27 14:02:13.956: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename services @ 04/27/24 14:02:13.957
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:13.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:13.98
  STEP: creating service in namespace services-2890 @ 04/27/24 14:02:13.984
  STEP: creating service affinity-clusterip-transition in namespace services-2890 @ 04/27/24 14:02:13.984
  STEP: creating replication controller affinity-clusterip-transition in namespace services-2890 @ 04/27/24 14:02:13.996
  I0427 14:02:14.004864      19 runners.go:197] Created replication controller with name: affinity-clusterip-transition, namespace: services-2890, replica count: 3
  I0427 14:02:17.056596      19 runners.go:197] affinity-clusterip-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 27 14:02:17.066: INFO: Creating new exec pod
  Apr 27 14:02:20.088: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2890 exec execpod-affinitykrgnb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip-transition 80'
  Apr 27 14:02:20.195: INFO: stderr: "+ nc -v -t -w 2 affinity-clusterip-transition 80\n+ echo hostName\nConnection to affinity-clusterip-transition 80 port [tcp/http] succeeded!\n"
  Apr 27 14:02:20.195: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 14:02:20.195: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2890 exec execpod-affinitykrgnb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.229 80'
  Apr 27 14:02:20.298: INFO: stderr: "+ nc -v -t -w 2 10.152.183.229 80\n+ echo hostName\nConnection to 10.152.183.229 80 port [tcp/http] succeeded!\n"
  Apr 27 14:02:20.298: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 27 14:02:20.310: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2890 exec execpod-affinitykrgnb -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.229:80/ ; done'
  Apr 27 14:02:20.475: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n"
  Apr 27 14:02:20.475: INFO: stdout: "\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-tq9v9\naffinity-clusterip-transition-tq9v9\naffinity-clusterip-transition-6z5f8\naffinity-clusterip-transition-6z5f8\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-6z5f8\naffinity-clusterip-transition-6z5f8\naffinity-clusterip-transition-tq9v9\naffinity-clusterip-transition-tq9v9\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-6z5f8"
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-tq9v9
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-tq9v9
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-6z5f8
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-6z5f8
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-6z5f8
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-6z5f8
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-tq9v9
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-tq9v9
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.475: INFO: Received response from host: affinity-clusterip-transition-6z5f8
  Apr 27 14:02:20.486: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-669460002 --namespace=services-2890 exec execpod-affinitykrgnb -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.229:80/ ; done'
  Apr 27 14:02:20.652: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.229:80/\n"
  Apr 27 14:02:20.652: INFO: stdout: "\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr\naffinity-clusterip-transition-2dgvr"
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Received response from host: affinity-clusterip-transition-2dgvr
  Apr 27 14:02:20.652: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip-transition in namespace services-2890, will wait for the garbage collector to delete the pods @ 04/27/24 14:02:20.668
  Apr 27 14:02:20.730: INFO: Deleting ReplicationController affinity-clusterip-transition took: 7.638556ms
  Apr 27 14:02:20.831: INFO: Terminating ReplicationController affinity-clusterip-transition pods took: 100.931636ms
  Apr 27 14:02:24.049: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2890" for this suite. @ 04/27/24 14:02:24.056
• [10.106 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:76
  STEP: Creating a kubernetes client @ 04/27/24 14:02:24.063
  Apr 27 14:02:24.063: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename var-expansion @ 04/27/24 14:02:24.063
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:24.081
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:24.084
  STEP: Creating a pod to test substitution in container's command @ 04/27/24 14:02:24.087
  STEP: Saw pod success @ 04/27/24 14:02:26.109
  Apr 27 14:02:26.113: INFO: Trying to get logs from node ip-172-31-82-63 pod var-expansion-3f521437-ccfc-4de2-b591-597b030863ba container dapi-container: <nil>
  STEP: delete the pod @ 04/27/24 14:02:26.121
  Apr 27 14:02:26.140: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-8427" for this suite. @ 04/27/24 14:02:26.144
• [2.089 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance] [sig-storage, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:386
  STEP: Creating a kubernetes client @ 04/27/24 14:02:26.152
  Apr 27 14:02:26.152: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename secrets @ 04/27/24 14:02:26.153
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:26.189
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:26.192
  Apr 27 14:02:26.238: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8706" for this suite. @ 04/27/24 14:02:26.242
• [0.098 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Slow] [Conformance] [sig-node, Slow, Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:189
  STEP: Creating a kubernetes client @ 04/27/24 14:02:26.25
  Apr 27 14:02:26.251: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename var-expansion @ 04/27/24 14:02:26.251
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:26.27
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:26.273
  Apr 27 14:02:28.296: INFO: Deleting pod "var-expansion-c87bdd67-b2f7-4f9a-939d-3b555abf0fd6" in namespace "var-expansion-3174"
  Apr 27 14:02:28.305: INFO: Wait up to 5m0s for pod "var-expansion-c87bdd67-b2f7-4f9a-939d-3b555abf0fd6" to be fully deleted
  Apr 27 14:02:30.315: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-3174" for this suite. @ 04/27/24 14:02:30.32
• [4.078 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:88
  STEP: Creating a kubernetes client @ 04/27/24 14:02:30.329
  Apr 27 14:02:30.329: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 14:02:30.33
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:30.351
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:30.354
  STEP: Creating projection with secret that has name projected-secret-test-map-a8953046-b235-49f2-8949-e48705869ce5 @ 04/27/24 14:02:30.357
  STEP: Creating a pod to test consume secrets @ 04/27/24 14:02:30.362
  STEP: Saw pod success @ 04/27/24 14:02:34.388
  Apr 27 14:02:34.392: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-secrets-66a2bf03-d670-4343-ac35-a276c3dd57e6 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/27/24 14:02:34.399
  Apr 27 14:02:34.419: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3880" for this suite. @ 04/27/24 14:02:34.423
• [4.104 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:90
  STEP: Creating a kubernetes client @ 04/27/24 14:02:34.433
  Apr 27 14:02:34.433: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename configmap @ 04/27/24 14:02:34.434
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:34.454
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:34.457
  STEP: Creating configMap with name configmap-test-volume-map-14b6dc14-7a30-4533-ada7-4a776b56a2d9 @ 04/27/24 14:02:34.46
  STEP: Creating a pod to test consume configMaps @ 04/27/24 14:02:34.465
  STEP: Saw pod success @ 04/27/24 14:02:38.491
  Apr 27 14:02:38.495: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-configmaps-6f901de0-8dd7-420c-80db-46005c8fe731 container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 14:02:38.502
  Apr 27 14:02:38.518: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7118" for this suite. @ 04/27/24 14:02:38.523
• [4.097 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/flowcontrol.go:514
  STEP: Creating a kubernetes client @ 04/27/24 14:02:38.53
  Apr 27 14:02:38.530: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename apf @ 04/27/24 14:02:38.531
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:38.549
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:38.552
  STEP: getting /apis @ 04/27/24 14:02:38.555
  STEP: getting /apis/flowcontrol.apiserver.k8s.io @ 04/27/24 14:02:38.558
  STEP: getting /apis/flowcontrol.apiserver.k8s.io/v1 @ 04/27/24 14:02:38.56
  STEP: creating @ 04/27/24 14:02:38.561
  STEP: getting @ 04/27/24 14:02:38.577
  STEP: listing @ 04/27/24 14:02:38.58
  STEP: watching @ 04/27/24 14:02:38.584
  Apr 27 14:02:38.584: INFO: starting watch
  STEP: patching @ 04/27/24 14:02:38.586
  STEP: updating @ 04/27/24 14:02:38.592
  Apr 27 14:02:38.601: INFO: waiting for watch events with expected annotations
  STEP: getting /status @ 04/27/24 14:02:38.601
  STEP: patching /status @ 04/27/24 14:02:38.606
  STEP: updating /status @ 04/27/24 14:02:38.611
  STEP: deleting @ 04/27/24 14:02:38.621
  STEP: deleting a collection @ 04/27/24 14:02:38.636
  Apr 27 14:02:38.659: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "apf-9186" for this suite. @ 04/27/24 14:02:38.663
• [0.140 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:70
  STEP: Creating a kubernetes client @ 04/27/24 14:02:38.67
  Apr 27 14:02:38.671: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 14:02:38.671
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:38.69
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:38.693
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 14:02:38.696
  STEP: Saw pod success @ 04/27/24 14:02:42.723
  Apr 27 14:02:42.730: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-46c89e27-4f7c-453c-a70f-9bd764967526 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 14:02:42.737
  Apr 27 14:02:42.753: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7952" for this suite. @ 04/27/24 14:02:42.757
• [4.094 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:164
  STEP: Creating a kubernetes client @ 04/27/24 14:02:42.765
  Apr 27 14:02:42.765: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 14:02:42.766
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:42.787
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:42.79
  STEP: Creating the pod @ 04/27/24 14:02:42.793
  Apr 27 14:02:45.342: INFO: Successfully updated pod "annotationupdateecbb6787-4835-43d9-a172-812d9ddaf84b"
  Apr 27 14:02:49.367: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5345" for this suite. @ 04/27/24 14:02:49.371
• [6.615 seconds]
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:150
  STEP: Creating a kubernetes client @ 04/27/24 14:02:49.38
  Apr 27 14:02:49.380: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 14:02:49.381
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:49.399
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:49.402
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 04/27/24 14:02:49.405
  STEP: Saw pod success @ 04/27/24 14:02:53.429
  Apr 27 14:02:53.433: INFO: Trying to get logs from node ip-172-31-37-185 pod pod-85f69767-48b5-4946-af62-9bd19f77d3d5 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 14:02:53.45
  Apr 27 14:02:53.482: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-4450" for this suite. @ 04/27/24 14:02:53.486
• [4.114 seconds]
------------------------------
S
------------------------------
[sig-network] DNS should provide DNS for pods for Subdomain [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:286
  STEP: Creating a kubernetes client @ 04/27/24 14:02:53.494
  Apr 27 14:02:53.494: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename dns @ 04/27/24 14:02:53.495
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:02:53.514
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:02:53.517
  STEP: Creating a test headless service @ 04/27/24 14:02:53.52
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-4888.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service-2.dns-4888.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-4888.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service-2.dns-4888.svc.cluster.local;sleep 1; done
   @ 04/27/24 14:02:53.527
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-4888.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service-2.dns-4888.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-4888.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service-2.dns-4888.svc.cluster.local;sleep 1; done
   @ 04/27/24 14:02:53.527
  STEP: creating a pod to probe DNS @ 04/27/24 14:02:53.527
  STEP: submitting the pod to kubernetes @ 04/27/24 14:02:53.527
  STEP: retrieving the pod @ 04/27/24 14:02:55.555
  STEP: looking for the results for each expected name from probers @ 04/27/24 14:02:55.56
  Apr 27 14:02:55.565: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local from pod dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737: the server could not find the requested resource (get pods dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737)
  Apr 27 14:02:55.570: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local from pod dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737: the server could not find the requested resource (get pods dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737)
  Apr 27 14:02:55.575: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-4888.svc.cluster.local from pod dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737: the server could not find the requested resource (get pods dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737)
  Apr 27 14:02:55.580: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-4888.svc.cluster.local from pod dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737: the server could not find the requested resource (get pods dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737)
  Apr 27 14:02:55.584: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local from pod dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737: the server could not find the requested resource (get pods dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737)
  Apr 27 14:02:55.589: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local from pod dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737: the server could not find the requested resource (get pods dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737)
  Apr 27 14:02:55.593: INFO: Unable to read jessie_udp@dns-test-service-2.dns-4888.svc.cluster.local from pod dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737: the server could not find the requested resource (get pods dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737)
  Apr 27 14:02:55.597: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-4888.svc.cluster.local from pod dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737: the server could not find the requested resource (get pods dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737)
  Apr 27 14:02:55.597: INFO: Lookups using dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737 failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local wheezy_udp@dns-test-service-2.dns-4888.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-4888.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-4888.svc.cluster.local jessie_udp@dns-test-service-2.dns-4888.svc.cluster.local jessie_tcp@dns-test-service-2.dns-4888.svc.cluster.local]

  Apr 27 14:02:55.606: INFO: Pod client logs for webserver: 
  Apr 27 14:02:55.613: INFO: Pod client logs for querier: 
  Apr 27 14:02:55.620: INFO: Pod client logs for jessie-querier: 
  Apr 27 14:03:00.603: INFO: DNS probes using dns-4888/dns-test-0e6e8a7d-8a42-4879-a07d-9b42cecb7737 succeeded

  STEP: deleting the pod @ 04/27/24 14:03:00.603
  STEP: deleting the test headless service @ 04/27/24 14:03:00.622
  Apr 27 14:03:00.634: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-4888" for this suite. @ 04/27/24 14:03:00.641
• [7.156 seconds]
------------------------------
SS
------------------------------
[sig-node] PodTemplates should replace a pod template [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/podtemplates.go:177
  STEP: Creating a kubernetes client @ 04/27/24 14:03:00.65
  Apr 27 14:03:00.650: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename podtemplate @ 04/27/24 14:03:00.651
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:00.669
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:00.672
  STEP: Create a pod template @ 04/27/24 14:03:00.676
  STEP: Replace a pod template @ 04/27/24 14:03:00.682
  Apr 27 14:03:00.691: INFO: Found updated podtemplate annotation: "true"

  Apr 27 14:03:00.691: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-9416" for this suite. @ 04/27/24 14:03:00.695
• [0.052 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:237
  STEP: Creating a kubernetes client @ 04/27/24 14:03:00.703
  Apr 27 14:03:00.703: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 14:03:00.703
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:00.722
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:00.724
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 14:03:00.728
  STEP: Saw pod success @ 04/27/24 14:03:04.754
  Apr 27 14:03:04.759: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-33d06836-a9a3-4d25-a601-1c5e7d718317 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 14:03:04.766
  Apr 27 14:03:04.782: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8346" for this suite. @ 04/27/24 14:03:04.788
• [4.094 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:144
  STEP: Creating a kubernetes client @ 04/27/24 14:03:04.797
  Apr 27 14:03:04.797: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replicaset @ 04/27/24 14:03:04.797
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:04.82
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:04.823
  STEP: Creating replica set "test-rs" that asks for more than the allowed pod quota @ 04/27/24 14:03:04.826
  Apr 27 14:03:04.838: INFO: Pod name sample-pod: Found 0 pods out of 1
  Apr 27 14:03:09.843: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/27/24 14:03:09.843
  STEP: getting scale subresource @ 04/27/24 14:03:09.843
  STEP: updating a scale subresource @ 04/27/24 14:03:09.847
  STEP: verifying the replicaset Spec.Replicas was modified @ 04/27/24 14:03:09.854
  STEP: Patch a scale subresource @ 04/27/24 14:03:09.86
  Apr 27 14:03:09.873: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-7736" for this suite. @ 04/27/24 14:03:09.879
• [5.091 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:190
  STEP: Creating a kubernetes client @ 04/27/24 14:03:09.888
  Apr 27 14:03:09.888: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 14:03:09.889
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:09.916
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:09.919
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 04/27/24 14:03:09.922
  STEP: Saw pod success @ 04/27/24 14:03:13.947
  Apr 27 14:03:13.951: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-889e4ad6-8bae-434c-9c8b-750071b0c015 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 14:03:13.959
  Apr 27 14:03:13.978: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1574" for this suite. @ 04/27/24 14:03:13.982
• [4.102 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/containers.go:89
  STEP: Creating a kubernetes client @ 04/27/24 14:03:13.99
  Apr 27 14:03:13.990: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename containers @ 04/27/24 14:03:13.991
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:14.01
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:14.013
  STEP: Creating a pod to test override all @ 04/27/24 14:03:14.016
  STEP: Saw pod success @ 04/27/24 14:03:18.044
  Apr 27 14:03:18.048: INFO: Trying to get logs from node ip-172-31-82-63 pod client-containers-c6c7024b-6895-4a4e-bdad-141258f80334 container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 14:03:18.056
  Apr 27 14:03:18.075: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-4954" for this suite. @ 04/27/24 14:03:18.079
• [4.101 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:210
  STEP: Creating a kubernetes client @ 04/27/24 14:03:18.091
  Apr 27 14:03:18.091: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename emptydir @ 04/27/24 14:03:18.092
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:18.115
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:18.118
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 04/27/24 14:03:18.121
  STEP: Saw pod success @ 04/27/24 14:03:22.147
  Apr 27 14:03:22.151: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-7ab65eab-b946-440d-bdbc-ee344bc71283 container test-container: <nil>
  STEP: delete the pod @ 04/27/24 14:03:22.159
  Apr 27 14:03:22.179: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9958" for this suite. @ 04/27/24 14:03:22.183
• [4.100 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:158
  STEP: Creating a kubernetes client @ 04/27/24 14:03:22.192
  Apr 27 14:03:22.192: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename runtimeclass @ 04/27/24 14:03:22.192
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:22.213
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:22.217
  STEP: Deleting RuntimeClass runtimeclass-2912-delete-me @ 04/27/24 14:03:22.229
  STEP: Waiting for the RuntimeClass to disappear @ 04/27/24 14:03:22.238
  Apr 27 14:03:22.252: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-2912" for this suite. @ 04/27/24 14:03:22.256
• [0.072 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:90
  STEP: Creating a kubernetes client @ 04/27/24 14:03:22.265
  Apr 27 14:03:22.265: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename projected @ 04/27/24 14:03:22.265
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:22.285
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:22.288
  STEP: Creating configMap with name projected-configmap-test-volume-map-2d935c3e-cc64-4976-a06a-abd8d69647a9 @ 04/27/24 14:03:22.291
  STEP: Creating a pod to test consume configMaps @ 04/27/24 14:03:22.297
  STEP: Saw pod success @ 04/27/24 14:03:24.32
  Apr 27 14:03:24.324: INFO: Trying to get logs from node ip-172-31-82-63 pod pod-projected-configmaps-11e44365-6c05-4bd0-af16-c1a22d549b4f container agnhost-container: <nil>
  STEP: delete the pod @ 04/27/24 14:03:24.332
  Apr 27 14:03:24.352: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4586" for this suite. @ 04/27/24 14:03:24.357
• [2.100 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:223
  STEP: Creating a kubernetes client @ 04/27/24 14:03:24.37
  Apr 27 14:03:24.370: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 14:03:24.371
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:24.394
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:24.398
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 14:03:24.401
  STEP: Saw pod success @ 04/27/24 14:03:28.429
  Apr 27 14:03:28.434: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-5d3aa4f6-818a-4245-aa06-84ca61810f05 container client-container: <nil>
  STEP: delete the pod @ 04/27/24 14:03:28.441
  Apr 27 14:03:28.457: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7474" for this suite. @ 04/27/24 14:03:28.461
• [4.098 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/network/networking.go:108
  STEP: Creating a kubernetes client @ 04/27/24 14:03:28.468
  Apr 27 14:03:28.468: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename pod-network-test @ 04/27/24 14:03:28.469
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:28.487
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:28.489
  STEP: Performing setup for networking test in namespace pod-network-test-3808 @ 04/27/24 14:03:28.492
  STEP: creating a selector @ 04/27/24 14:03:28.492
  STEP: Creating the service pods in kubernetes @ 04/27/24 14:03:28.493
  Apr 27 14:03:28.493: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 04/27/24 14:03:50.622
  Apr 27 14:03:52.658: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Apr 27 14:03:52.658: INFO: Going to poll 192.168.69.164 on port 8083 at least 0 times, with a maximum of 39 tries before failing
  Apr 27 14:03:52.663: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://192.168.69.164:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-3808 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 14:03:52.663: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 14:03:52.663: INFO: ExecWithOptions: Clientset creation
  Apr 27 14:03:52.663: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-3808/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F192.168.69.164%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 27 14:03:52.724: INFO: Found all 1 expected endpoints: [netserver-0]
  Apr 27 14:03:52.724: INFO: Going to poll 192.168.96.170 on port 8083 at least 0 times, with a maximum of 39 tries before failing
  Apr 27 14:03:52.729: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://192.168.96.170:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-3808 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 14:03:52.729: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 14:03:52.730: INFO: ExecWithOptions: Clientset creation
  Apr 27 14:03:52.730: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-3808/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F192.168.96.170%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 27 14:03:52.789: INFO: Found all 1 expected endpoints: [netserver-1]
  Apr 27 14:03:52.789: INFO: Going to poll 192.168.172.225 on port 8083 at least 0 times, with a maximum of 39 tries before failing
  Apr 27 14:03:52.793: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://192.168.172.225:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-3808 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 27 14:03:52.793: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 14:03:52.794: INFO: ExecWithOptions: Clientset creation
  Apr 27 14:03:52.794: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-3808/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F192.168.172.225%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 27 14:03:52.841: INFO: Found all 1 expected endpoints: [netserver-2]
  Apr 27 14:03:52.841: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-3808" for this suite. @ 04/27/24 14:03:52.846
• [24.385 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:572
  STEP: Creating a kubernetes client @ 04/27/24 14:03:52.854
  Apr 27 14:03:52.854: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename webhook @ 04/27/24 14:03:52.855
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:52.873
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:52.876
  STEP: Setting up server cert @ 04/27/24 14:03:52.903
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/27/24 14:03:53.11
  STEP: Deploying the webhook pod @ 04/27/24 14:03:53.12
  STEP: Wait for the deployment to be ready @ 04/27/24 14:03:53.134
  Apr 27 14:03:53.142: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 04/27/24 14:03:55.156
  STEP: Verifying the service has paired with the endpoint @ 04/27/24 14:03:55.168
  Apr 27 14:03:56.169: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 04/27/24 14:03:56.251
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/27/24 14:03:56.276
  STEP: Deleting the collection of validation webhooks @ 04/27/24 14:03:56.298
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/27/24 14:03:56.357
  Apr 27 14:03:56.409: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2606" for this suite. @ 04/27/24 14:03:56.414
  STEP: Destroying namespace "webhook-markers-8491" for this suite. @ 04/27/24 14:03:56.421
• [3.575 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:86
  STEP: Creating a kubernetes client @ 04/27/24 14:03:56.429
  Apr 27 14:03:56.429: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename downward-api @ 04/27/24 14:03:56.43
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:03:56.449
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:03:56.452
  STEP: Creating a pod to test downward API volume plugin @ 04/27/24 14:03:56.455
  STEP: Saw pod success @ 04/27/24 14:04:00.483
  Apr 27 14:04:00.487: INFO: Trying to get logs from node ip-172-31-82-63 pod downwardapi-volume-28ce8e3e-d034-4430-83af-87f09a24785a container client-container: <nil>
  STEP: delete the pod @ 04/27/24 14:04:00.495
  Apr 27 14:04:00.514: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7193" for this suite. @ 04/27/24 14:04:00.519
• [4.097 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance] [sig-network, Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslice.go:69
  STEP: Creating a kubernetes client @ 04/27/24 14:04:00.526
  Apr 27 14:04:00.526: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename endpointslice @ 04/27/24 14:04:00.527
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:04:00.546
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:04:00.549
  Apr 27 14:04:00.564: INFO: Endpoints addresses: [172.31.20.83 172.31.93.110] , ports: [6443]
  Apr 27 14:04:00.564: INFO: EndpointSlices addresses: [172.31.20.83 172.31.93.110] , ports: [6443]
  Apr 27 14:04:00.564: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-6219" for this suite. @ 04/27/24 14:04:00.568
• [0.051 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:168
  STEP: Creating a kubernetes client @ 04/27/24 14:04:00.577
  Apr 27 14:04:00.577: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename field-validation @ 04/27/24 14:04:00.578
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:04:00.597
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:04:00.6
  Apr 27 14:04:00.603: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  W0427 14:04:03.147566      19 warnings.go:70] unknown field "alpha"
  W0427 14:04:03.147585      19 warnings.go:70] unknown field "beta"
  W0427 14:04:03.147588      19 warnings.go:70] unknown field "delta"
  W0427 14:04:03.147592      19 warnings.go:70] unknown field "epsilon"
  W0427 14:04:03.147595      19 warnings.go:70] unknown field "gamma"
  Apr 27 14:04:03.700: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-1488" for this suite. @ 04/27/24 14:04:03.705
• [3.135 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance] [sig-node, Conformance]
k8s.io/kubernetes/test/e2e/common/node/podtemplates.go:54
  STEP: Creating a kubernetes client @ 04/27/24 14:04:03.712
  Apr 27 14:04:03.712: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename podtemplate @ 04/27/24 14:04:03.713
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:04:03.732
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:04:03.736
  Apr 27 14:04:03.773: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-9837" for this suite. @ 04/27/24 14:04:03.777
• [0.073 seconds]
------------------------------
[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance] [sig-api-machinery, Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:289
  STEP: Creating a kubernetes client @ 04/27/24 14:04:03.786
  Apr 27 14:04:03.786: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename field-validation @ 04/27/24 14:04:03.786
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:04:03.807
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:04:03.81
  Apr 27 14:04:03.813: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  Apr 27 14:04:06.901: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-1915" for this suite. @ 04/27/24 14:04:06.905
• [3.127 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance] [sig-apps, Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:113
  STEP: Creating a kubernetes client @ 04/27/24 14:04:06.913
  Apr 27 14:04:06.913: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename replication-controller @ 04/27/24 14:04:06.913
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:04:06.93
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:04:06.933
  STEP: creating a ReplicationController @ 04/27/24 14:04:06.94
  STEP: waiting for RC to be added @ 04/27/24 14:04:06.946
  STEP: waiting for available Replicas @ 04/27/24 14:04:06.946
  STEP: patching ReplicationController @ 04/27/24 14:04:08.109
  STEP: waiting for RC to be modified @ 04/27/24 14:04:08.118
  STEP: patching ReplicationController status @ 04/27/24 14:04:08.118
  STEP: waiting for RC to be modified @ 04/27/24 14:04:08.125
  STEP: waiting for available Replicas @ 04/27/24 14:04:08.125
  STEP: fetching ReplicationController status @ 04/27/24 14:04:08.129
  STEP: patching ReplicationController scale @ 04/27/24 14:04:08.133
  STEP: waiting for RC to be modified @ 04/27/24 14:04:08.14
  STEP: waiting for ReplicationController's scale to be the max amount @ 04/27/24 14:04:08.14
  STEP: fetching ReplicationController; ensuring that it's patched @ 04/27/24 14:04:08.978
  STEP: updating ReplicationController status @ 04/27/24 14:04:08.983
  STEP: waiting for RC to be modified @ 04/27/24 14:04:08.988
  STEP: listing all ReplicationControllers @ 04/27/24 14:04:08.988
  STEP: checking that ReplicationController has expected values @ 04/27/24 14:04:08.995
  STEP: deleting ReplicationControllers by collection @ 04/27/24 14:04:08.995
  STEP: waiting for ReplicationController to have a DELETED watchEvent @ 04/27/24 14:04:09.004
  Apr 27 14:04:09.057: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0427 14:04:09.058197      19 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "replication-controller-3086" for this suite. @ 04/27/24 14:04:09.062
• [2.156 seconds]
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:232
  STEP: Creating a kubernetes client @ 04/27/24 14:04:09.069
  Apr 27 14:04:09.069: INFO: >>> kubeConfig: /tmp/kubeconfig-669460002
  STEP: Building a namespace api object, basename container-runtime @ 04/27/24 14:04:09.07
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/27/24 14:04:09.088
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/27/24 14:04:09.091
  STEP: create the container @ 04/27/24 14:04:09.094
  W0427 14:04:09.101586      19 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 04/27/24 14:04:09.101
  E0427 14:04:10.058398      19 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0427 14:04:11.058496      19 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0427 14:04:12.058662      19 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 04/27/24 14:04:12.124
  STEP: the container should be terminated @ 04/27/24 14:04:12.131
  STEP: the termination message should be set @ 04/27/24 14:04:12.131
  Apr 27 14:04:12.131: INFO: Expected: &{} to match Container's Termination Message:  --
  STEP: delete the container @ 04/27/24 14:04:12.131
  Apr 27 14:04:12.152: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-1014" for this suite. @ 04/27/24 14:04:12.156
• [3.094 seconds]
------------------------------
SSS
------------------------------
[SynchronizedAfterSuite] 
k8s.io/kubernetes/test/e2e/e2e.go:88
  Apr 27 14:04:12.165: INFO: Running AfterSuite actions on node 1
  Apr 27 14:04:12.165: INFO: Skipping dumping logs from cluster
[SynchronizedAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e suite report
k8s.io/kubernetes/test/e2e/e2e_test.go:161
[ReportAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e JUnit report
k8s.io/kubernetes/test/e2e/framework/test_context.go:621
[ReportAfterSuite] PASSED [0.054 seconds]
------------------------------

Ran 388 of 7407 Specs in 6176.391 seconds
SUCCESS! -- 388 Passed | 0 Failed | 0 Pending | 7019 Skipped
PASS

Ginkgo ran 1 suite in 1h42m57.250853058s
Test Suite Passed
